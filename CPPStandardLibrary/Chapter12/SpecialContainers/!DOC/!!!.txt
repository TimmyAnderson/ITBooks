//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie SPECIAL CONTAINERS a CONTAINER ADAPTERS v C++.
2. C++ definuje niekolko CONTAINERS ADAPTERS, ktore su WRAPPER CLASSES nad CONTAINERS, poskytujuc speficke operacie pre tieto CONTAINERS ADAPTERS.
3. C++ definuje nasledujuce CONTAINERS ADAPTERS.
   A. CLASS [stack<TItem,TContainer>].
   B. CLASS [queue<TItem,TContainer>].
   C. CLASS [priority_queue<TItem,TContainer,TCompare>].
4. CLASS [stack<TItem,TContainer>] reprezentuje STACK. Pre CLASS [stack<TItem,TContainer>] platia nasledujuce fakty.
   A. STACK je definovana v LIBRARY <stack>.
   B. STACK reprezentuje STACK s LIFO pristupom.
   !!!! C. STACK obsahuje ako MEMBER COLLECTION, ktoru zapuzdruje. To znamena, ze DESTRUCTOR STACK uvolnuje VSETKY ITEMS UNDERLYING COLLECTION.
   D. STACK v 2. TEMPLATE PARAMETER definuje COLLECTION, ktoru STACK obaluje. DEFAULT VALUE je CLASS [deque<TItem,TAllocator>].
   E. ITEMS su pridavane iba na koniec STACK.
   F. ITEMS su odstranovane iba z konca STACK.
   !!!!! G. ZASADNOU poziadavkou na COLLECTION, ktoru STACK obaluje je existencia METHOD back(), METHOD push_back() a METHOD pop_back().
5. CLASS [stack<TItem,TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu STACK a vnutorne ako MEMBER vytvara instanciu COLLECTION, ktoru STACK obaluje. OVERLOADED VERSION umoznuje definovat CUSTOM ALLOCATOR, ktory UNDERLYING COLLECTION bude pouzivat.
   B. DESTRUCTOR uvolnuje instanciu STACK ako aj jednotlive ITEMS pre ktore je zavolany ich DESTRUCTOR.
   C. TYPE [container_type] urcuje TYPE COLLECTION, ktoru STACK obaluje.
   D. TYPE [value_type] urcuje TYPE pre ITEMS ulozene vo STACK.
   E. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet.
   F. TYPE [reference] urcuje REFERENCE TYPE pre ITEMS ulozene v STACK.
   G. TYPE [const_pointer] urcuje CONST POINTER TYPE pre ITEMS ulozene v STACK.
   H. FIELD [c] obsahuje COLLECTION, ktory STACK obaluje.
   I. OPERATOR= priradzuje do STACK ITEMS inom STACK. STACK obsahuje COPY OPERATOR= a MOVE OPERATOR=.
   J. OPERATOR== zistuje ci dve instancie STACK su lexikograficky rovne.
   K. OPERATOR!= zistuje ci dve instancie STACK su lexikograficky rozne.
   L. OPERATOR< zistuje ci 1. STACK je lexikograficky mensi ako 2. STACK.
   M. OPERATOR<= zistuje ci 1. STACK je lexikograficky mensi, alebo rovny ako 2. STACK.
   N. OPERATOR> zistuje ci 1. STACK je lexikograficky vacsi ako 2. STACK.
   O. OPERATOR>= zistuje ci 1. STACK je lexikograficky vacsi, alebo rovny ako 2. STACK.
   P. METHOD push() pridava ITEM na koniec STACK.
   Q. METHOD emplace() pridava ITEM na koniec STACK pomocou PLACEMENT NEW. PARAMETERS METHOD emplace() su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do STACK.
   R. METHOD pop() odstranuje ITEM zo zaciatku STACK.
   S. METHOD top() vracia REFERENCE na ITEM na koniec STACK. Tento ITEM bol ako posledny pridany do STACK a ako prvy bude odstraneny zo STACK.
   T. METHOD empty() vracia informaciu ci je STACK prazdny.
   U. METHOD size() vracia pocet ITEMS v STACK.
   V. METHOD swap() vymiena obsah dvoch instancii STACK vymenou ich vnutornych FIELDS.
   W. FUNCTION swap() vymiena obsah dvoch instancii STACK vymenou ich vnutornych FIELDS.
6. CLASS [queue<TItem,TContainer>] reprezentuje SINGLE ENDED QUEUE. Pre CLASS [queue<TItem,TContainer>] platia nasledujuce fakty.
   A. QUEUE je definovana v LIBRARY <queue>.
   B. QUEUE reprezentuje SINGLE ENDED QUEUE s FIFO pristupom.
   !!!! C. QUEUE obsahuje ako MEMBER COLLECTION, ktoru zapuzdruje. To znamena, ze DESTRUCTOR QUEUE uvolnuje VSETKY ITEMS UNDERLYING COLLECTION.
   D. QUEUE v 2. TEMPLATE PARAMETER definuje COLLECTION, ktoru QUEUE obaluje. DEFAULT VALUE je CLASS [deque<TItem,TAllocator>].
   E. ITEMS su pridavane iba na koniec QUEUE.
   F. ITEMS su odstranovane iba zo zaciatku QUEUE.
   !!!!! G. ZASADNOU poziadavkou na COLLECTION, ktoru QUEUE obaluje je existencia METHOD back(), METHOD front(), METHOD push_back() a METHOD pop_front().
7. CLASS [queue<TItem,TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu QUEUE a vnutorne ako MEMBER vytvara instanciu COLLECTION, ktoru QUEUE obaluje. OVERLOADED VERSION umoznuje definovat CUSTOM ALLOCATOR, ktory UNDERLYING COLLECTION bude pouzivat.
   B. DESTRUCTOR uvolnuje instanciu QUEUE ako aj jednotlive ITEMS pre ktore je zavolany ich DESTRUCTOR.
   C. TYPE [container_type] urcuje TYPE COLLECTION, ktoru QUEUE obaluje.
   D. TYPE [value_type] urcuje TYPE pre ITEMS ulozene vo QUEUE.
   E. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet.
   F. TYPE [reference] urcuje REFERENCE TYPE pre ITEMS ulozene v QUEUE.
   G. TYPE [const_pointer] urcuje CONST POINTER TYPE pre ITEMS ulozene v QUEUE.
   H. FIELD [c] obsahuje COLLECTION, ktory QUEUE obaluje.
   I. OPERATOR= priradzuje do QUEUE ITEMS inej QUEUE. QUEUE obsahuje COPY OPERATOR= a MOVE OPERATOR=.
   J. OPERATOR== zistuje ci dve instancie QUEUE su lexikograficky rovne.
   K. OPERATOR!= zistuje ci dve instancie QUEUE su lexikograficky rozne.
   L. OPERATOR< zistuje ci 1. QUEUE je lexikograficky mensia ako 2. QUEUE.
   M. OPERATOR<= zistuje ci 1. QUEUE je lexikograficky mensia, alebo rovna ako 2. QUEUE.
   N. OPERATOR> zistuje ci 1. QUEUE je lexikograficky vacsia ako 2. QUEUE.
   O. OPERATOR>= zistuje ci 1. QUEUE je lexikograficky vacsia, alebo rovna ako 2. QUEUE.
   P. METHOD push() pridava ITEM na koniec QUEUE.
   Q. METHOD emplace() pridava ITEM na koniec QUEUE pomocou PLACEMENT NEW. PARAMETERS METHOD emplace() su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do QUEUE.
   R. METHOD pop() odstranuje ITEM zo zaciatku QUEUE.
   S. METHOD front() vracia REFERENCE na ITEM na zaciatku QUEUE. Tento ITEM je ako prvy odstraneny z QUEUE.
   T. METHOD back() vracia REFERENCE na ITEM na konci QUEUE. Tento ITEM je ako ITEM, ktory bol ako posledny vlozdeny do QUEUE.
   U. METHOD empty() vracia informaciu ci je QUEUE prazdna.
   V. METHOD size() vracia pocet ITEMS v QUEUE.
   W. METHOD swap() vymiena obsah dvoch instancii QUEUE vymenou ich vnutornych FIELDS.
   X. FUNCTION swap() vymiena obsah dvoch instancii QUEUE vymenou ich vnutornych FIELDS.
8. CLASS [priority_queue<TItem,TContainer,TCompare>] reprezentuje PRIORITY COLLECTION. Pre CLASS [priority_queue<TItem,TContainer,TCompare>] platia nasledujuce fakty.
   A. PRIORITY QUEUE je definovana v LIBRARY <queue>.
   B. PRIORITY QUEUE reprezentuje PRIORITY COLLECTION, ktorej ITEMS su SORTED podla ITEM VALUE.
   !!!! C. PRIORITY QUEUE obsahuje ako MEMBER COLLECTION, ktoru zapuzdruje. To znamena, ze DESTRUCTOR PRIORITY QUEUE uvolnuje VSETKY ITEMS UNDERLYING COLLECTION.
   D. PRIORITY QUEUE v 2. TEMPLATE PARAMETER definuje COLLECTION, ktoru PRIORITY QUEUE obaluje. DEFAULT VALUE je CLASS [vector<TItem,TAllocator>].
   E. PRIORITY QUEUE v 3. TEMPLATE PARAMETER COMPARER, ktory sa pouziva na urcenie PRIORITY ITEMS v PRIORITY QUEUE. Dvojice ITEMS v PRIORITY QUEUE je identicka vtedy ak plati, ze [(ITEM_1 COMPARE ITEM_2)==false && (ITEM_2 COMPARE ITEM_1)==false]. DEFAULT VALUE je STRUCTURE less<TKey>, ktora na porovnavanie pouziva OPERATOR<.
   !!!!! F. ITEMS su pridavane do PRIORITY QUEUE na zaklade svojej PRIORITY, pricom operacia PUSH vklada podla hodnoty PRIORITY daneho ITEM. Zlozitost operacie je O(LOG(N)).
   !!!!! G. ITEMS su odstranovane z PRIORITY QUEUE na zaklade svojej PRIORITY, pricom operacia POP vybera ITEM s NAJVYSSHOU PRIORITOU. Zlozitost operacie je O(LOG(N)).
   !!!!! H. ZASADNOU poziadavkou na COLLECTION, ktoru PRIORITY QUEUE obaluje je existencia METHOD front(), METHOD push_back(), METHOD pop_back() a ZAROVEN COLLECTION MUSI podporovat RANDOM ACCESS ITERATOR.
   I. PRIORITY QUEUE nedefinuje poradie ITEMS s rovnakou PRIORITOU.
   !!! J. PRIORITY QUEUE pouziva HEAP ALGORITHMS z C++ ALGORITHMS.
9. CLASS [priority_queue<TItem,TContainer,TCompare>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu PRIORITY QUEUE a vnutorne ako MEMBER vytvara instanciu COLLECTION, ktoru PRIORITY QUEUE obaluje. OVERLOADED VERSION umoznuje definovat CUSTOM ALLOCATOR, ktory UNDERLYING COLLECTION bude pouzivat.
   B. DESTRUCTOR uvolnuje instanciu PRIORITY QUEUE ako aj jednotlive ITEMS pre ktore je zavolany ich DESTRUCTOR.
   C. TYPE [container_type] urcuje TYPE COLLECTION, ktoru PRIORITY QUEUE obaluje.
   D. TYPE [value_compare] urcuje TYPE COMPARER, ktory sa pouziva na urcenie PRIORITY jednotlivych ITEMS.
   E. TYPE [value_type] urcuje TYPE pre ITEMS ulozene vo PRIORITY QUEUE.
   F. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet.
   G. TYPE [reference] urcuje REFERENCE TYPE pre ITEMS ulozene v PRIORITY QUEUE.
   H. TYPE [const_pointer] urcuje CONST POINTER TYPE pre ITEMS ulozene v PRIORITY QUEUE.
   I. FIELD [c] obsahuje COLLECTION, ktory PRIORITY QUEUE obaluje.
   J. FIELD [comp] obsahuje instanciu COMPARER, ktory sa pouziva na urcenie PRIORITY jednotlivych ITEMS.
   K. OPERATOR= priradzuje do PRIORITY QUEUE ITEMS inej PRIORITY QUEUE. PRIORITY QUEUE obsahuje COPY OPERATOR= a MOVE OPERATOR=.
   L. METHOD push() pridava ITEM na do PRIORITY QUEUE na zaklade PRIORITY vkladaneho ITEM.
   M. METHOD emplace() pridava ITEM na do PRIORITY QUEUE na zaklade PRIORITY vkladaneho ITEM pomocou PLACEMENT NEW. PARAMETERS METHOD emplace() su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do PRIORITY QUEUE.
   N. METHOD pop() odstranuje ITEM s NAJVYSSOU PRIORITOU z PRIORITY QUEUE.
   O. METHOD top() vracia CONST REFERENCE na ITEM s NAJVYSSOU PRIORITOU v PRIORITY QUEUE.
   P. METHOD empty() vracia informaciu ci je PRIORITY QUEUE prazdna.
   Q. METHOD size() vracia pocet ITEMS v PRIORITY QUEUE.
   R. METHOD swap() vymiena obsah dvoch instancii PRIORITY QUEUE vymenou ich vnutornych FIELDS.
   S. FUNCTION swap() vymiena obsah dvoch instancii PRIORITY QUEUE vymenou ich vnutornych FIELDS.
10. STL SPECIAL COLLECTIONS definuju nasledujuce TYPES.
   A. TYPE [value_type] urcuje TYPE pre ITEMS ulozene v SPECIAL COLLECTION. Je identicky s [value_type] WRAPPED CONTAINER.
   B. TYPE [reference] urcuje REFERENCE TYPE pre ITEMS ulozene v SPECIAL COLLECTION. Je identicky s [reference] WRAPPED CONTAINER.
   C. TYPE [const_reference] urcuje CONST REFERENCE TYPE pre ITEMS ulozene v SPECIAL COLLECTION. Je identicky s [const_reference] WRAPPED CONTAINER.
   D. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet ako je napriklad pocet ITEMS v COLLECTION.  Je identicky s [size_type] WRAPPED CONTAINER.
   E. TYPE [container_type] urcuje TYPE WRAPPED CONTAINER.
11. STL SPECIAL COLLECTIONS definuju nasledujuce typy CONSTRUCTORS.
   A. CONSTRUCTOR [COLLECTION(void)] predstavuje DEFAULT CONSTRUCTOR, ktory vytvori prazdnu instanciu COLLECTION.
   B. CONSTRUCTOR [COLLECTION(const COLLECTION&)] predstavuje COPY CONSTRUCTOR, ktory vytvori kopiu COLLECTION obsahujucu tie iste ITEMS ako povodna COLLECTION.
   C. CONSTRUCTOR [COLLECTION(COLLECTION&&)] predstavuje MOVE CONSTRUCTOR, ktory presunie ITEMS z povodnej COLLECTION do novej COLLECTION pomocou MOVE SEMANTICS.
   D. CONSTRUCTOR [PRIORITY_QUEUE(const TCompareFunction&)] vytvori PRIORITY QUEUE s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING ITEMS v PRIORITY QUEUE.
   E. CONSTRUCTOR [PRIORITY_QUEUE(const TCompareFunction&, const TContainer&)] vytvori koipiu PRIORITY QUEUE zo zadanej instancie PRIORITY QUEUE s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING ITEMS v PRIORITY QUEUE.
   F. CONSTRUCTOR [PRIORITY_QUEUE(TInputIterator,TInputIterator)] vytvori PRIORITY QUEUE, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
   G. CONSTRUCTOR [PRIORITY_QUEUE(TInputIterator,TInputIterator,const TCompareFunction&)] vytvori PRIORITY QUEUE s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
   H. CONSTRUCTOR [PRIORITY_QUEUE(TInputIterator,TInputIterator,const TCompareFunction&, const TContainer&)] vytvori PRIORITY QUEUE s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS a vsetkymi ITEMS v zadanej COLLECTION.
12. METHOD [bool empty(void) const] vracia informaciu ci SPECIAL COLLECTION je prazdna.
13. METHOD [size_type size(void) const] vracia pocet ITEMS v SPECIAL COLLECTION.
14. METHOD [void front(const TType&)] pridava ITEM do SPECIAL COLLECTION pomocou COPY SEMANTICS.
15. METHOD [void front(TType&&)] pridava ITEM do SPECIAL COLLECTION pomocou MOVE SEMANTICS.
16. METHOD [void emplace(ARGUMENTS)] pridava ITEM do SPECIAL COLLECTION pomocou PLACEMENT NEW. PARAMETERS su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do SPECIAL COLLECTION.
17. METHOD [reference top(void)] vracia REFERENCE na PRVY ITEM v SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
18. METHOD [const_reference top(void) const] vracia REFERENCE na PRVY ITEM v SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
19. METHOD [reference front(void)] vracia REFERENCE na PRVY ITEM v SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
20. METHOD [const_reference front(void) const] vracia REFERENCE na PRVY ITEM v SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
21. METHOD [void pop(void)] odstranuje ITEM zo SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
22. METHOD [reference back(void)] vracia REFERENCE na POSLEDNY ITEM v SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
23. METHOD [const_reference back(void) const] vracia REFERENCE na POSLEDNY ITEM v SPECIAL COLLECTION. SPECIAL COLLECTION NESMIE byt PRAZDNA, inak dojde k RUNTIME ERROR.
24. OPERATOR [bool operator==(const COLLECTION&,const COLLECTION&)] zistuje ci dve instancie SPECIAL COLLECTION su lexikograficky rovne.
25. OPERATOR [bool operator!=(const COLLECTION&,const COLLECTION&)] zistuje ci dve instancie SPECIAL COLLECTION su lexikograficky rozne.
26. OPERATOR [bool operator<(const COLLECTION&,const COLLECTION&)] zistuje ci 1. SPECIAL COLLECTION je lexikograficky mensia ako 2. SPECIAL COLLECTION.
27. OPERATOR [bool operator<=(const COLLECTION&,const COLLECTION&)] zistuje ci 1. SPECIAL COLLECTION je lexikograficky mensia, alebo rovna ako 2. SPECIAL COLLECTION.
28. OPERATOR [bool operator>(const COLLECTION&,const COLLECTION&)] zistuje ci 1. SPECIAL COLLECTION je lexikograficky vacsia ako 2. SPECIAL COLLECTION.
29. OPERATOR [bool operator>=(const COLLECTION&,const COLLECTION&)] zistuje ci 1. SPECIAL COLLECTION je lexikograficky vacsia, alebo rovna ako 2. SPECIAL COLLECTION.
30. METHOD [void swap(COLLECTION&)] vymiena obsah dvoch instancii SPECIAL COLLECTION vymenou ich vnutornych FIELDS.
31. FUNCTION [void swap(COLLECTION&,COLLECTION&)] vymiena obsah dvoch instancii SPECIAL COLLECTION vymenou ich vnutornych FIELDS.
32. CLASS [bitset<SIZE>] reprezentuje FIXED SIZE BIT SEQUENCE. Pre CLASS [bitset<SIZE>] platia nasledujuce fakty.
   A. BITSET reprezentuje FIXED SIZE BIT SEQUENCE.
   B. BITSET je definovany v LIBRARY <bitset>.
   C. TEMPLATE PARAMETER 'SIZE' urcuje velkost BIT SEQUENCE v BITS.
   D. BITSET uklada data na STACK a NIE na HEAP.
   E. BITSET umoznuje konvertovat BITS na STRINGS a INTEGERS.
   !!! F. Kedze k jednotlivym BITS v BITSET NIE JE mozne pristupovat pomocou POINTERS ani REFERENCES, pretoze tie su BYTE-ORIENTED, BITSET definuje PROXY CLASS [bitset<SIZE>::reference], ktora reprezentuje VIRTUALNU REFERENCE na BIT.
   G. C++ definuje CLASS [hash<bitset<SIZE>], ktora repreznetuje HASH VALUE danej BITSET.
33. CLASS [bitset<SIZE>] ma nasledujuce MEMBERS.
   1. MEMBER CLASS [bitset<SIZE>::reference] je PROXY CLASS, ktora reprezentuje REFERENCE na BIT.
   2. HELPER CLASS [hash<biset<SIZE>>] umoznuje ziskat HASH VALUE z BITSET.
   3. CONSTRUCTOR vytvara instanciu BITSET. BITSET je mozne vytvorit s INTEGER VALUES, alebo aj zo STRING, kde je mozne definovat aky CHARACTER reprezentuje TRUE a aka FALSE.
   4. OPERATOR== porovnava ci su 2 instancie BITSET rovne.
   5. OPERATOR!= porovnava ci su 2 instancie BITSET rozne.
   !!! 6. OPERATOR[] vracia hodnotu BIT pre zadany INDEX. NON-CONST OVERLOADED VERSION vracia instanciu CLASS [bitset<SIZE>::reference] pomocou ktorej je mozne menit hodnoty jednotlivych BITS.
   7. OPERATOR&= vykonava operaciu BIT AND a vysledok zapise do instancie BITSET pre ktoru je volany.
   8. OPERATOR|= vykonava operaciu BIT OR a vysledok zapise do instancie BITSET pre ktoru je volany.
   9. OPERATOR^= vykonava operaciu BIT XOR a vysledok zapise do instancie BITSET pre ktoru je volany.
   10. OPERATOR~ vykonava operaciu BIT NOT a vysledok zapise do instancie pre ktoru je volany.
   11. OPERATOR& vykonava operaciu BIT AND medzi 2 instanciami BITSET, pricom vysledny BITSET vracia ako RETURN VALUE.
   12. OPERATOR| vykonava operaciu BIT OR medzi 2 instanciami BITSET, pricom vysledny BITSET vracia ako RETURN VALUE.
   13. OPERATOR^ vykonava operaciu BIT XOR medzi 2 instanciami BITSET, pricom vysledny BITSET vracia ako RETURN VALUE.
   14. OPERATOR<< vykonava operaciu BIT SHIFT LEFT nad instanciou BITSET pre ktoru je volany. OPERATOR<< NEMODIFIKUJE povodny BITSET a vysledny BITSET vracia ako RETURN VALUE.
   15. OPERATOR<<= vykonava operaciu BIT SHIFT LEFT nad instanciou BITSET pre ktoru je volany. OPERATOR<<= MODIFIKUJE povodny BITSET a ako RETURN VALUE vracia REFERENCE na volany BITSET.
   16. OPERATOR>> vykonava operaciu BIT SHIFT RIGHT nad instanciou BITSET pre ktoru je volany. OPERATOR>> NEMODIFIKUJE povodny BITSET a vysledny BITSET vracia ako RETURN VALUE.
   17. OPERATOR>>= vykonava operaciu BIT SHIFT RIGHT nad instanciou BITSET pre ktoru je volany. OPERATOR>>= MODIFIKUJE povodny BITSET a ako RETURN VALUE vracia REFERENCE na volany BITSET.
   18. NON-MEMBER OPERATOR<< vykonava zapis BITSET do STREAM.
   19. NON-MEMBER OPERATOR>> vykonava citanie BITSET zo STREAM.
   !!! 20. METHOD test() vracia hodnotu BIT pre zadany INDEX. METHOD vykonava kontrolu ci nedoslo k prekroceniu hranic BITSET a ak je tato prekrocena, generuje EXCEPTION [out_of_range].
   21. METHOD all() vracia TRUE ak su VSETKY BITS nastavene na TRUE. Inak vracia FALSE.
   22. METHOD any() vracia TRUE ak je aspon 1 BIT nastaveny na TRUE. Inak vracia FALSE.
   23. METHOD none() vracia TRUE ak ziaden BIT NIE JE nastaveny na TRUE. Inak vracia FALSE.
   24. METHOD count() vracia pocet BITS, ktore su nastavene na TRUE.
   25. METHOD size() vracia pocet BITS v BITSET. Hodnota je identicka s hodnotu TEMPLATE PARAMETER 'SIZE'.
   26. METHOD set() nastavuje hodnotu BIT so zadanym INDEXOM na TRUE. OVERLOADED VERSION nastavuje VSETKY BITS na TRUE.
   27. METHOD reset() nastavuje hodnotu BIT so zadanym INDEXOM na FALSE. OVERLOADED VERSION nastavuje VSETKY BITS na FALSE.
   28. METHOD flip() bitovo obracia hodnotu BIT so zadanym INDEXOM. OVERLOADED VERSION obracia hodnotu VSETKYCH BITS v BITSET.
   29. METHOD to_string() vracia STRING, kde za kazdu hodnotu FALSE zapise CHARACTER zadany ako 1. PARAMETER METHOD a za kazdu hodnotu TRUE zapise CHARACTER zadany ako 2. PARAMETER METHOD.
   30. METHOD to_ulong() konvertuje BITSET na UNSIGNED LONG hodnotu. V pripade, ze BITSET je prilis dlhy a nie je ho mozne reprezentovat ako UNSIGNED LONG METHOD generuje EXCEPTION [overflow_error].
   31. METHOD to_uulong() konvertuje BITSET na UNSIGNED LONG LONG hodnotu. V pripade, ze BITSET je prilis dlhy a nie je ho mozne reprezentovat ako UNSIGNED LONG LONG METHOD generuje EXCEPTION [overflow_error].
34. CLASS [bitset<SIZE>::reference] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu CLASS [bitset<SIZE>::reference].
   B. DESTRUCTOR uvolnuje instanciu CLASS [bitset<SIZE>::reference].
   C. OPERATOR= priradzuje jednu instanciu CLASS [bitset<SIZE>::reference] do druhej.
   D. OPERATOR BOOL() vracia hodnotu BIT na ktoru odkazuje instancia CLASS [bitset<SIZE>::reference].
   E. OPERATOR~ vracia NEGOVANU hodnotu BIT na ktoru odkazuje instancia CLASS [bitset<SIZE>::reference].
   F. METHOD flip() obracia hodnotu BIT na ktoru odkazuje instancia CLASS [bitset<SIZE>::reference].
//-------------------------------------------------------------------------------------------------------