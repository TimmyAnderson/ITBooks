//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie STL ITERATORS.
2. V C++ je akykolvek konstrukt, ktory sa chova ako ITERATOR povazovany za ITERATOR. To znamena, ze aj POINTERS su povazovane za ITERATORS, pretoze maju vsetky vlastnosti ITERATORS. ITERATORS su vsak casto implementovane ako CLASSES, ktore maju chovanie ITERATORS.
3. ITERATORS v C++ maju minimalne implementovane tieto OPERATIONS.
   A. OPERATOR++ na posun na nasledujuci ITEM v COLLECTION.
   B. OPERATOR* na pristup k ITEM na ktory ITERATOR ukazuje.
4. ITERATORS s vynimkou OUTPUT ITERATORS maju implementovane minimalne aj tieto OPERATIONS.
   A. OPERATOR-> na volanie METHODS ITEM na ktory ITERATOR ukazuje.
   B. OPERATOR== na porovnanie ci 2 ITERATORS su rovne.
   C. OPERATOR=! na porovnanie ci 2 ITERATORS su rozne. OPERATOR!= sa spravidla pouziva na detekciu ci ITERATOR nedosiahol koniec COLLECTION, resp. posledny ITEM, ktory sa mal spracovat.
5. Kazda STL COLLECTION si definuje vlastne ITERATORS. Niektore specializovane ITERATORS su definovane v LIBRARY <iteratror>.
!!! 6. C++ STANDARD ALGORITHMS pouzivaju COLLECTIONS tak, ze do ALGORITHMS je nutne zaslat spravidla ITERATOR PAIR, kde prvy ITERATOR ukazuje na 1. ITEM nad ktorym ma ALGORITHM pracovat a 2. ITERATOR ukazuje JEDNU POZICIU ZA POSLEDNY ITEM nad ktorym ma ALGORITHM pracovat. Jedna sa teda o POLOOTVORENY INTERVAL <BEGIN_ITERATOR,END_ITERATOR).
!!! 7. ITERATOR odkazujuci 1 poziciu za POSLEDNYM ITEM v COLLECTION je mozne pouzit IBA na POROVNAVANIE pomocou OPERATOR== a OPERATOR!=. Tento ITERATOR vsak NIE JE MOZNE DEREFERENCOVAT, pretoze by doslo k RUNTIME ERROR.
8. C++ rozdeluje ITERATORS podla ich vlastnosti do nasledujucich CATEGORIES.
   A. INPUT ITERATORS. Umoznuju citanie dat z COLLECTIONS.
   B. OUTPUT ITERATORS. Umoznuju zapis dat do COLLECTIONS.
   C. FORWARD ITERATORS. Umoznuju citanie dat z COLLECTIONS. Umoznuju iba dopredny posun po ITEMS v COLLECTION.
   D. BIDIRECTIONAL ITERATORS. Umoznuju citanie dat z COLLECTIONS. Umoznuju obojsmerny posun po ITEMS v COLLECTION.
   E. RANDOM-ACCESS ITERATORS. Umoznuju citanie dat z COLLECTIONS. Umoznuju okamzity pristup k lubovolnym ITEMS v COLLECTION.
!!! 9. ITERATORS mozu patrit naraz do viacero CATEGORIES.
10. Pre OUTPUT ITERATORS platia nasledujuce fakty.
   A. OUTPUT ITERATORS umoznuju iba zapis VALUES do COLLECTIONS.
   B. OUTPUT ITERATORS umoznuju iba DOPREDNY POSUN po ITEMS v COLLECTIONS.
   !!! C. OUTPUT ITERATORS NEGARANTUJU, ze opakovany pokus o zapis vykona zapis do toho isteho ITEM. OUTPUT ITERATORS mozu po zapise do ITEM automaticky inkrementovat svoju poziciu. Typickym prikladom su OSTREAMS (napriklad CLASS [wcout]), ktore po pridani ITEM do OUTPUT zaroven inkrementuju svoju poziciu.
   D. OUTPUT ITERATORS nedefinuju COMPARISION OPERATORS, takze nie je mozne skontrolovat ci je COLLECTION plna.
   E. OUTPUT ITERATORS neumoznuju skontrolovat ci bol zapis do COLLECTION uspesny, alebo nie.
11. OUTPUT ITERATORS definuju nasledujuce OPERATIONS.
   A. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   B. OPERATOR* moze byt pouzity iba na LEFT-SIDE danej EXPRESSION na zapis VALUE jednotlivych ITEMS do COLLECTION.
   C. OPERATOR= priradzuje do ITEM NOVU VALUE.
   D. ++OPERATOR inkrementuje ITERATOR POSITION.
   E. OPERATOR++ inkrementuje ITERATOR POSITION.
12. Pre INPUT ITERATORS platia nasledujuce fakty.
   A. INPUT ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. INPUT ITERATORS umoznuju iba DOPREDNY POSUN po ITEMS v COLLECTIONS.
   !!! C. INPUT ITERATORS NEGARANTUJU, ze ak 2 INPUT ITERATORS referuju na ROZNE ITEMS a zaroven nie su PAST-END ITERATORS, musi ich porovnanie skoncit NEROVNOSTOU.
   D. INPUT ITERATORS definuju COMPARISION OPERATORS.
   E. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
13. INPUT ITERATORS definuju nasledujuce OPERATIONS.
   A. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   B. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION.
   C. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION.
   D. ++OPERATOR inkrementuje ITERATOR POSITION.
   E. OPERATOR++ inkrementuje ITERATOR POSITION. C++ STANDARD nevyzaduje, aby ITERATOR musel vracat nejaku RETURN VALUE.
   F. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   G. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
14. Pre FORWARD ITERATORS platia nasledujuce fakty.
   A. FORWARD ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. FORWARD ITERATORS, ktore umoznuju aj zapis VALUES do COLLECTIONS sa nazyvaju MUTABLE FORWARD ITERATORS.
   C. FORWARD ITERATORS umoznuju iba DOPREDNY POSUN po ITEMS v COLLECTIONS.
   !!! D. FORWARD ITERATORS GARANTUJU, ze ak 2 FORWARD ITERATORS referuju na ROVNAKE ITEMS, musi ich porovnanie skoncit ROVNOSTOU a ak referuju na ROZNE ITEMS, musi ich porovnanie skoncit NEROVNOSTOU.
   E. FORWARD ITERATORS definuju COMPARISION OPERATORS.
   F. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
15. FORWARD ITERATORS definuju nasledujuce OPERATIONS.
   A. DEFAULT CONSTRUCTOR vytvara instanciu ITERATOR.
   B. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   C. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je FORWARD ITERATOR MUTABLE.
   D. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je FORWARD ITERATOR MUTABLE.
   E. OPERATOR= priradzuje jednu instanciu ITERATOR do druhej.
   F. ++OPERATOR inkrementuje ITERATOR POSITION.
   G. OPERATOR++ inkrementuje ITERATOR POSITION.
   H. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   I. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
16. Pre BIDIRECTIONAL ITERATORS platia nasledujuce fakty.
   A. BIDIRECTIONAL ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. BIDIRECTIONAL ITERATORS, ktore umoznuju aj zapis VALUES do COLLECTIONS sa nazyvaju MUTABLE BIDIRECTIONAL ITERATORS.
   C. BIDIRECTIONAL ITERATORS umoznuju OBOJSMERNY POSUN po ITEMS v COLLECTIONS.
   !!! D. BIDIRECTIONAL ITERATORS GARANTUJU, ze ak 2 BIDIRECTIONAL ITERATORS referuju na ROVNAKE ITEMS, musi ich porovnanie skoncit ROVNOSTOU a ak referuju na ROZNE ITEMS, musi ich porovnanie skoncit NEROVNOSTOU.
   E. BIDIRECTIONAL ITERATORS definuju COMPARISION OPERATORS.
   F. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
17. BIDIRECTIONAL ITERATORS definuju nasledujuce OPERATIONS.
   A. DEFAULT CONSTRUCTOR vytvara instanciu ITERATOR.
   B. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   C. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je BIDIRECTIONAL ITERATOR MUTABLE.
   D. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je BIDIRECTIONAL ITERATOR MUTABLE.
   E. OPERATOR= priradzuje jednu instanciu ITERATOR do druhej.
   F. ++OPERATOR inkrementuje ITERATOR POSITION.
   G. OPERATOR++ inkrementuje ITERATOR POSITION.
   H. --OPERATOR dekrementuje ITERATOR POSITION.
   I. OPERATOR-- dekrementuje ITERATOR POSITION.
   J. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   K. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
18. Pre RANDOM-ACCESS ITERATORS platia nasledujuce fakty.
   A. RANDOM-ACCESS ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. RANDOM-ACCESS ITERATORS, ktore umoznuju aj zapis VALUES do COLLECTIONS sa nazyvaju MUTABLE RANDOM-ACCESS ITERATORS.
   C. RANDOM-ACCESS ITERATORS umoznuju okamzity pristup k lubovolnemu ITEM v COLLECTIONS.
   !!! D. RANDOM-ACCESS ITERATORS GARANTUJU, ze ak 2 RANDOM-ACCESS ITERATORS referuju na ROVNAKE ITEMS, musi ich porovnanie skoncit ROVNOSTOU a ak referuju na ROZNE ITEMS, musi ich porovnanie skoncit NEROVNOSTOU.
   E. RANDOM-ACCESS ITERATORS definuju COMPARISION OPERATORS, vratane OPERATOR<, OPERATOR<=, OPERATOR> a OPERATOR>=.
   F. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
19. RANDOM-ACCESS ITERATORS definuju nasledujuce OPERATIONS.
   A. DEFAULT CONSTRUCTOR vytvara instanciu ITERATOR.
   B. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   C. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je RANDOM-ACCESS ITERATOR MUTABLE.
   D. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je RANDOM-ACCESS ITERATOR MUTABLE.
   E. OPERATOR[] umoznuje citat VALUE lubovolneho ITEM v COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je RANDOM-ACCESS ITERATOR MUTABLE.
   F. OPERATOR= priradzuje jednu instanciu ITERATOR do druhej.
   G. OPERATOR+= posuva ITERATOR POSITION o 'N' POSITIONS DOPREDU.
   H. OPERATOR-= posuva ITERATOR POSITION o 'N' POSITIONS DOZADU.
   I. OPERATOR+(ITERATOR,INTEGER) vracia ITERATOR posunuty o 'N' POSITIONS DOPREDU.
   J. OPERATOR+(INTEGER,ITERATOR) vracia ITERATOR posunuty o 'N' POSITIONS DOPREDU.
   L. OPERATOR-(ITERATOR,INTEGER) vracia ITERATOR posunuty o 'N' POSITIONS DOZADU.
   M. OPERATOR-(ITERATOR,ITERATOR) vracia vzdialenost medzi 2 ITEREATORS.
   N. ++OPERATOR inkrementuje ITERATOR POSITION.
   O. OPERATOR++ inkrementuje ITERATOR POSITION.
   P. --OPERATOR dekrementuje ITERATOR POSITION.
   Q. OPERATOR-- dekrementuje ITERATOR POSITION.
   R. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   S. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
   T. OPERATOR< vracia informaciu ci je prvy ITERATOR MENSI ako druhy ITERATOR.
   U. OPERATOR<= vracia informaciu ci je prvy ITERATOR MENSI, alebo ROVNY ako druhy ITERATOR.
   V. OPERATOR> vracia informaciu ci je prvy ITERATOR VACSI ako druhy ITERATOR.
   W. OPERATOR>= vracia informaciu ci je prvy ITERATOR VACSI, alebo ROVNY ako druhy ITERATOR.
20. STRUCTURE [iterator_traits<TIterator>] popisuje TYPES, ktore dany ITERATOR pouziva. C++ STANDARD LIBRARY definuje pre kazdy ITERATOR SPECIALIZATION, ktora definuje konkretne TYPES pre dany ITERATOR. STRUCTURE [iterator_traits<TIterator>] ma nasledujuce MEMBERS.
   A. TYPE [iterator_category] je TYPE urcujuci akej je CATEGORY dany ITERATOR.
   B. TYPE [difference_type] urcuje TYPE, ktory ITERATOR pouziva na vyjadrenie rozdielu v POSITIONS medzi ITERATORS.
   C. TYPE [value_type] urcuje TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza.
   D. TYPE [reference] urcuje REFERENCE na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza.
   E. TYPE [pointer] urcuje POINTER na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza.
21. C++ STANDARD LIBRARY definuje nasledujuce STRUCTURES na vyjadrenie ITERATOR CATEGORY.
   A. TYPE [output_iterator_tag] reprezentuje OUTPUT ITERATORS.
   B. TYPE [input_iterator_tag] reprezentuje INPUT ITERATORS.
   C. TYPE [forward_iterator_tag] reprezentuje FORWARD ITERATORS. Je DERIVED z TYPE [input_iterator_tag].
   D. TYPE [bidirectional_iterator_tag] reprezentuje BIDIRECTIONAL ITERATORS. Je DERIVED z TYPE [forward_iterator_tag].
   E. TYPE [random_access_iterator_tag] reprezentuje RANDOM-ACCESS ITERATORS. Je DERIVED z TYPE [bidirectional_iterator_tag].
22. CLASS [iterator<TCategory,TType,TDistance,TPointer,TReference>] ma nasledujuce MEMBERS.
   A. TYPE [iterator_category] je TYPE urcujuci akej je CATEGORY dany ITERATOR. Je rovny TEMPLATE PARAMETER 'TCategory'.
   C. TYPE [value_type] urcuje TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza. Je rovny TEMPLATE PARAMETER 'TType'.
   B. TYPE [difference_type] urcuje TYPE, ktory ITERATOR pouziva na vyjadrenie rozdielu v POSITIONS medzi ITERATORS. Je rovny TEMPLATE PARAMETER 'TDistance'.
   E. TYPE [pointer] urcuje POINTER na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza. Je rovny TEMPLATE PARAMETER 'TPointer'.
   D. TYPE [reference] urcuje REFERENCE na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza. Je rovny TEMPLATE PARAMETER 'TReference'.
23. Pre definovanie CUSTOM ITERATOR je potrebne vykonat nasledujuce kroky.
   A. Definovat do akej ITERATOR CATEGORY bude ITERATOR patrit. Z toho vyplyvaju OPERATIONS, ktore musi ITERATOR implementovat.
   B. Definovat CUSTOM CLASS, ktora bude reprezenovat CUSTOM ITERATOR.
   !!! C. Definovat TYPE [iterator_category], TYPE [difference_type], TYPE [value_type], TYPE [reference] a TYPE [pointer]. Tieto TYPES su bud definovane ako MEMBER TYPES CUSTOM ITERATOR CLASS, alebo sa definuje TEMPLATE SPECIALIZATION pre STRUCTURE [iterator_traits<TIterator>], kde 'TIterator' bude CUSTOM ITERATOR CLASS.
   D. Definovat vsetky OPERATIONS, ktore ITERATOR danej ITERATOR CATEGORY musi implementovat.
!!! 24. CUSTOM ITERATORS MUSIA definovat TYPE [iterator_category], TYPE [difference_type], TYPE [value_type], TYPE [reference] a TYPE [pointer]. Tuto definiciu je mozne vykonat 3 sposobmi.
   A. Definovat TEMPLATE SPECIALIZATION pre STRUCTURE [iterator_traits<TIterator>], kde 'TIterator' bude CUSTOM ITERATOR CLASS.
   B. V CUSTOM ITERATOR definovat vsetky TYPES pomocou KEYWORD [typedef], alebo KEYWORD [using].
   !!! C. CUSTOM ITERATOR je DERIVED zo STRUCTURE [iterator<TCategory,TType,TDistance,TPointer,TReference>], ktore definuje vsetky pozadovane TYPES.
25. REVERSE ITERATORS su ITERATOR ADAPTERS, ktore umoznuju iterovat ITEMS v COLLECTION v obratenom poradi od posledneho ITEM k prvemu ITEM. Pre REVERSE ITERATORS platia nasledujuce fakty.
   A. REVERSE ITERATORS maju vymenenu semantiku OPERATOR++ a OPERATOR-- (eventualne inych OPERATORS), tak aby umoznovali iterovanie ITEMS v COLLECTION od posledneho ITEM k prvemu ITEM.
   !!! B. COLLECTION METHOD rbegin() vracia REVERSE ITERATOR odkazujuci na POSLEDNY ITEM v COLLECTION. COLLECTION METHOD crbegin() vracia CONST REVERSE ITERATOR.
   !!! C. COLLECTION METHOD rend() vracia REVERSE ITERATOR odkazujuci PRED PRVY ITEM v COLLECTION. COLLECTION METHOD crend() vracia CONST REVERSE ITERATOR.
   !!!!! D. OPERATOR++ pre REVERSE ITERATORS posuva POSITION na PREDCHADZAJUCI ITEM v COLLECTION.
   !!!!! E. OPERATOR-- pre REVERSE ITERATORS posuva POSITION na NASLEDUJUCI ITEM v COLLECTION.
   !!!!! F. Normalne ITERATORS mozu byt IMPLITICNE CONVERTED na REVERSE ITERATORS. Pri CONVERSION dochadza k POSUNU POSITION o 1 POSITION DOZADU. Toto je FEATURE a NIE BUG.
   !!! G. REVERSE ITERATORS definuju METHOD base(), ktora umoznuje konverziu z REVERSE ITERATORS na NORMAL ITERATORS.
!!!!! 26. Kedze COLLECTIONS NEGARANTUJU, ze POSITION PRED PRVYM ITEM je validna (referuje na alokovanu MEMORY) na implementaciu REVERSE ITERATORS, ktore maju dodrzat HALF OPEN PRINCIPLE, kde BEGIN ITERATOR ukazuje na validny ITEM, zatial co END ITERATOR ukazuje 1 POSITION za posledny ITEM su REVERSE ITERATORS definovane nasledujucim sposobom.
   A. REVERSE ITERATORS definuju LOGICAL a PHYSICAL POSITIONS.
   !!! B. LOGICAL POSITION je VIRTUALNA POSITION, ktora respektuje HALF OPEN PRINCIPLE, kde BEGIN ITERATOR ukazuje na PRVY ITEM COLLECTION (v pripade REVERSE ITERATOR na POSLEDNY ITEM) a END ITERATOR ukazuje na 1 POSITION za POSLEDNYM ITEM (v pripade REVERSE ITERATORS je to 1 POSITION pred PRVYM ITEM).
   !!! C. PHYSICAL POSITION urcuje realny ITEM na ktory ITERATOR ukazuje. Kedze COLLECTIONS ako validne POSITIONS definuju iba POSITIONS od 1. ITEM az po 1 POSITION ZA POSLEDNYM ITEM, PHYSICAL POSITIONS musia referovat iba na tieto POSITIONS.
   !!!!! D. BEGIN REVERSE ITERATOR ma PHYSICAL POSITON 1 POSITION ZA POSLEDNYM ITEM v COLLECTION a END REVERSE ITERATOR ma PHYSICAL POSITON na PRVY ITEM v COLLECTION. Vdaka tomu PHYSICAL POSITION STALE referuje na VALIDNU POSITION v COLLECTION.
   !!! E. Pri CONVERSION normalneho ITERATOR na REVERSE ITERATOR NEDOCHADZA k ZMENE PHYSICAL POSITION, iba k zmene LOGICAL POSITION. Kedze pri REVERSE ITERATORS LOGICAL POSITION ukazuje 1 POSITION pred PHYSICAL POSITION, vysledkom CONVERSION je, ze REVERSE ITERATOR odkazuje 1 POSITION pred POSITION na ktoru odkazoval normalny ITERATOR.
27. INSERT ITERATORS su ITERATOR ADAPTERS, ktore namiesto priradzovania VALUES do ITEMS v COLLECTION vkladaju nove ITEMS do COLLECTION. Pre INSERT ITERATORS platia nasledujuce fakty.
   A. INSERT ITERATORS su CATEGORY typu OUTPUT ITERATORS.
   !!! B. Klucovou OPERATION je ASSIGNMENT, ktora pre OUTPUT ITERATORS vola INSERT OPERATION nad danou COLLECTION.
   C. Ostatne OPERATIONS nad INSERT ITERATORS su implementovane ako EMPTY OPERATIONS.
28. INSERT ITERATORS, kedze patria do CATEGORY OUTPUT ITERATORS, implementuju nasledujuce OPERATIONS.
   A. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   B. OPERATOR* moze byt pouzity iba na LEFT-SIDE danej EXPRESSION na zapis VALUE. Pre INSERT ITERATORS je to EMPTY OPERATION.
   !!! C. OPERATOR= priradzuje do ITEM NOVU VALUE. Pre INSERT ITERATORS je OPERATOR= zodpovedny za pridanie ITEM do COLLECTION volanim jej INSERT METHOD.
   D. ++OPERATOR inkrementuje ITERATOR POSITION. Pre INSERT ITERATORS je to EMPTY OPERATION.
   E. OPERATOR++ inkrementuje ITERATOR POSITION. Pre INSERT ITERATORS je to EMPTY OPERATION.
29. C++ STANDARD LIBRARY definuje 3 typy INSERT ITERATORS.
   A. BACK INSERT ITERATORS pridavaju ITEMS na koniec COLLECTION.
   B. FRONT INSERT ITERATORS pridavaju ITEMS na zaciatok COLLECTION.
   C. GENERAL INSERT ITERATORS pridavaju ITEMS na stanovenu POSITION v COLLECTION. POSITION je urcena pri vytvarani GENERAL INSERT ITERATORS pomocou ITERATOR.
30. Pre BACK INSERT ITERATORS platia nasledujuce fakty.
   A. BACK INSERT ITERATORS pridavaju ITEMS na koniec COLLECTION.
   B. BACK INSERT ITERATORS su implementovane ako CLASS [back_insert_iterator<TContainer>].
   C. Instancie BACK INSERT ITERATORS sa vytvaraju volanim FUNCTION back_inserter().
   D. BACK INSERT ITERATORS v CONSTRUCTOR definuju COLLECTION nad ktorou pracuju.
   !!! E. BACK INSERT ITERATORS pridavaju ITEMS do COLLECTION pomocou METHOD push_back().
   !!! F. BACK INSERT ITERATORS je mozne pouzit IBA pre COLLECTIONS, ktore definuju METHOD push_back().
31. CLASS [back_insert_iterator<TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu BACK INSERT ITERATOR. Ako PARAMETER sa definuje COLLECTION nad ktorou ma pracovat.
   B. TYPE [container_type] urcuje TYPE COLLECTION nad ktorou BACK INSERT ITERATOR pracuje.
   C. TYPE [container] urcuje TYPE POINTER na COLLECTION nad BACK GENERAL INSERT ITERATOR pracuje.
   D. TYPE [value_type] obsahuje TYPE [void].
   E. TYPE [difference_type] obsahuje TYPE [void].
   F. TYPE [pointer] obsahuje TYPE [void].
   G. TYPE [reference] obsahuje TYPE [void].
   H. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY danej COLLECTION.
   !!!!! I. OPERATOR= vklada NOVY ITEM do COLLECTION volanim jej METHOD push_back().
   J. OPERATOR* je EMPTY OPERATION.
   K. OPERATOR++ je EMPTY OPERATION.
   L. ++OPERATOR je EMPTY OPERATION.
   M. FUNCTION back_inserter<TContainer>() vytvara instanciu BACK INSERT ITERATOR.
32. Pre FRONT INSERT ITERATORS platia nasledujuce fakty.
   A. FRONT INSERT ITERATORS pridavaju ITEMS na zaciatok COLLECTION.
   B. FRONT INSERT ITERATORS su implementovane ako CLASS [front_insert_iterator<TContainer>].
   C. Instancie FRONT INSERT ITERATORS sa vytvaraju volanim FUNCTION front_inserter().
   D. FRONT INSERT ITERATORS v CONSTRUCTOR definuju COLLECTION nad ktorou pracuju.
   !!! E. FRONT INSERT ITERATORS pridavaju ITEMS do COLLECTION pomocou METHOD push_front().
   !!! F. FRONT INSERT ITERATORS je mozne pouzit IBA pre COLLECTIONS, ktore definuju METHOD push_front().
33. CLASS [front_insert_iterator<TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu FRONT INSERT ITERATOR. Ako PARAMETER sa definuje COLLECTION nad ktorou ma pracovat.
   B. TYPE [container_type] urcuje TYPE COLLECTION nad ktorou FRONT INSERT ITERATOR pracuje.
   C. TYPE [container] urcuje TYPE POINTER na COLLECTION nad FRONT GENERAL INSERT ITERATOR pracuje.
   D. TYPE [value_type] obsahuje TYPE [void].
   E. TYPE [difference_type] obsahuje TYPE [void].
   F. TYPE [pointer] obsahuje TYPE [void].
   G. TYPE [reference] obsahuje TYPE [void].
   H. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY danej COLLECTION.
   !!!!! I. OPERATOR= vklada NOVY ITEM do COLLECTION volanim jej METHOD push_front().
   J. OPERATOR* je EMPTY OPERATION.
   K. OPERATOR++ je EMPTY OPERATION.
   L. ++OPERATOR je EMPTY OPERATION.
   M. FUNCTION front_inserter<TContainer>() vytvara instanciu FRONT INSERT ITERATOR.
34. Pre GENERAL INSERT ITERATORS platia nasledujuce fakty.
   A. GENERAL INSERT ITERATORS pridavaju ITEMS na POSITION v COLLECTION definovanu pomocou ITERATOR.
   B. GENERAL INSERT ITERATORS su implementovane ako CLASS [insert_iterator<TContainer>].
   C. Instancie GENERAL INSERT ITERATORS sa vytvaraju volanim FUNCTION inserter().
   D. GENERAL INSERT ITERATORS v CONSTRUCTOR definuju COLLECTION nad ktorou pracuju a ITERATOR odkazujuci na POSITION v COLLECTION, kde budu ITEMS vkladane.
   !!! E. GENERAL INSERT ITERATORS pridavaju ITEMS do COLLECTION pomocou METHOD insert().
   !!! F. GENERAL INSERT ITERATORS je mozne pouzit IBA pre COLLECTIONS, ktore definuju METHOD insert().
35. CLASS [insert_iterator<TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu GENERAL INSERT ITERATOR. Ako 1. PARAMETER sa definuje COLLECTION nad ktorou ma pracovat a ako 2. PARAMETER je POSITION v COLLECTION, kde sa maju pridavane ITEMS vkladat.
   B. TYPE [container_type] urcuje TYPE COLLECTION nad ktorou GENERAL INSERT ITERATOR pracuje.
   C. TYPE [container] urcuje TYPE POINTER na COLLECTION nad ktorou GENERAL INSERT ITERATOR pracuje.
   D. TYPE [iter] urcuje TYPE ITERATOR danej COLLECTION nad ktorou GENERAL INSERT ITERATOR pracuje.
   E. TYPE [value_type] obsahuje TYPE [void].
   F. TYPE [difference_type] obsahuje TYPE [void].
   G. TYPE [pointer] obsahuje TYPE [void].
   H. TYPE [reference] obsahuje TYPE [void].
   I. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY danej COLLECTION.
   !!!!! J. OPERATOR= vklada NOVY ITEM do COLLECTION volanim jej METHOD insert().
   K. OPERATOR* je EMPTY OPERATION.
   L. OPERATOR++ je EMPTY OPERATION.
   M. ++OPERATOR je EMPTY OPERATION.
   N. FUNCTION inserter<TContainer>() vytvara instanciu GENERAL INSERT ITERATOR.
36. C-ARRAYS je mozne pouzivat ako STL COLLECTIONS, pretoze POINTER na ARRAY ITEM implementuje ITERATOR SEMANTICS. C++ STANDARD LIBRARY definuje nasledujuce FUNCTIONS, ktore pre C-ARRAYS vracaju ITERATORS.
   A. FUNCTION begin() pre C-ARRAY vracia BEGIN ITERATOR odkazujuci na 1. ITEM daneho ARRAY.
   B. FUNCTION cbegin() pre C-ARRAY vracia BEGIN CONST ITERATOR odkazujuci na 1. ITEM daneho ARRAY.
   C. FUNCTION end() pre C-ARRAY vracia END ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM daneho ARRAY.
   D. FUNCTION cend() pre C-ARRAY vracia END CONST ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM daneho ARRAY.
!!! 37. ITERATORS vracane FUNCTION begin(), FUNCTION cbegin(), FUNCTION end() a FUNCTION cend() pre C-ARRAYS su RANDOM ACCESS ITERATORS.
38. C++ STANDARD LIBRARY definuje nasledujuce FUNCTIONS, ktore pre CTL COLLECTION vracaju ITERATORS.
   A. FUNCTION begin() pre STL COLLECTION vracia BEGIN ITERATOR odkazujuci na 1. ITEM danej STL COLLECTION.
   B. FUNCTION cbegin() pre STL COLLECTION vracia BEGIN CONST ITERATOR odkazujuci na 1. ITEM danej STL COLLECTION.
   C. FUNCTION end() pre STL COLLECTION vracia END ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM danej STL COLLECTION.
   D. FUNCTION cend() pre STL COLLECTION vracia END CONST ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM danej STL COLLECTION.
39. C++ STANDARD LIBRARY v LIBRARY <functional> definuje nasledujuce FUNCTION OBJECTS.
   A. STRUCTURE [negate<TTYPE>] implementuje funkcionalitu UNARY OPERATOR-.
   B. STRUCTURE [plus<TTYPE>] implementuje funkcionalitu BINARY OPERATOR+.
   C. STRUCTURE [minus<TTYPE>] implementuje funkcionalitu BINARY OPERATOR-.
   D. STRUCTURE [multiples<TTYPE>] implementuje funkcionalitu BINARY OPERATOR*.
   E. STRUCTURE [divides<TTYPE>] implementuje funkcionalitu BINARY OPERATOR/.
   F. STRUCTURE [modulus<TTYPE>] implementuje funkcionalitu BINARY OPERATOR%.
   G. STRUCTURE [equal_to<TTYPE>] implementuje funkcionalitu BINARY OPERATOR==.
   H. STRUCTURE [not_equal_to<TTYPE>] implementuje funkcionalitu BINARY OPERATOR!=.
   I. STRUCTURE [less<TTYPE>] implementuje funkcionalitu BINARY OPERATOR<.
   J. STRUCTURE [greater<TTYPE>] implementuje funkcionalitu BINARY OPERATOR>.
   K. STRUCTURE [less_equal<TTYPE>] implementuje funkcionalitu BINARY OPERATOR<=.
   L. STRUCTURE [greater_equal<TTYPE>] implementuje funkcionalitu BINARY OPERATOR>=.
   M. STRUCTURE [logical_not<TTYPE>] implementuje funkcionalitu UNARY OPERATOR!.
   N. STRUCTURE [logical_and<TTYPE>] implementuje funkcionalitu BINARY OPERATOR&&.
   O. STRUCTURE [logical_or<TTYPE>] implementuje funkcionalitu BINARY OPERATOR||.
   P. STRUCTURE [bit_not<TTYPE>] implementuje funkcionalitu UNARY OPERATOR~.
   Q. STRUCTURE [bit_and<TTYPE>] implementuje funkcionalitu BINARY OPERATOR&.
   R. STRUCTURE [bit_or<TTYPE>] implementuje funkcionalitu BINARY OPERATOR|.
   S. STRUCTURE [bit_xor<TTYPE>] implementuje funkcionalitu BINARY OPERATOR~.
40. FUNCTION ADAPTERS su specificke FUNCTION OBJECTS, ktore sluzia na vytvaranie novych FUNCTION OBJECTS. Vytvaranie FUNCTION OBJECTS je realizovane substituovanim PARAMTERS povodnych FUNCTION OBJECTS za PLACEHOLDERS.
41. C++ STANDARD LIBRARY definuje FUNCTION bind<TReturnValue,TFunction,TArguments...>(), ktora umoznuje mapovat jednotlive PARAMETERS CALLABLE OBJECTS tak, ze RETURN VALUE predstavuje CALLABLE OBJECT, ktora uz ma namapovane prislusne PARAMETERS na definovane hodnoty. Pre FUNCTION bind<TReturnValue,TFunction,TArguments...>() platia nasledujuce zasady.
   A. FUNCTION bind() mapuje PARAMETERS CALLABLE OBJECT pricom vracia CALLABLE OBJECT, ktory vola povodny CALLABLE OBJECT uz s namapovanymi PARAMETERS.
   B. FUNCTION bind() existuje v 2 verziach, kde druha verzia umoznuje definovat RETURN VALUE TYPE, ktory ma novovytvoreny CALLABLE OBJECT vracat.
   !!! C. V NAMESPACE [std::placeholders] je definovanych 'N' PLACEHOLDERS. PLACEHOLDERS identifikuju PARAMETERS CALLABLE OBJECT, ktory FUNCTION bind() vracia ako RETURN VALUE. PLACEHOLDERS sa pouzivaju na urcenie, kde sa maju pouzit PARAMETERS novovytvoreneho CALLABLE OBJECT pri volani povodneho CALLABLE OBJECT.
   !!!!! D. PLACEHOLDERS sluzia ako PARAMETERS NOVODEFINOVANEHO CALLABLE OBJECT, ktory FUNCTION bind() vracia. To znaci, ze ak povodna FUNCTION ma napriklad 6 PARAMETERS a vo FUNCTION bind() sa definuju 2 PLACEHOLDERS, tak CALLABLE OBJECT, ktory FUNCTION bind() vrati ako RETURN VALUE bude mat 2 PARAMETERS. PLACEHOLDERS urcuju kde sa PARAMETERS NOVODEFINOVANEHO CALLABLE OBJECT pouziju pri volani povodneho CALLABLE OBJECT.
   E. FUNCTION bind() sa casto pouziva v spojeni s preddefinovanymi FUNCTION OBJECTS, ktore su definovane v LIBRARY <functional>, umoznujuc tak vytvarat komplexne FUNCTIONS OBJECTS s namapovanymi PARAMETERS.
   !!! F. FUNCTION bind() je mozne pouzit aj na volanie METHODS, kde PLACEHOLDER [_1] reprezentuje THIS POINTER.
   !!! G. Podla poctu PLACEHOLDERS moze vrateny CALLABLE OBJECT mat aj VIAC PARAMETERS ako povodny CALLABLE OBJECT, ktory volanim FUNCTION bind() sa zapuzdruje. Napriklad z FUNCTION, ktora ma 2 PARAMETRE je mozne spravit CALLABLE OBJECT s 3. PARAMETERS, kde 2. a 3. PLACEHOLDER sa scitavaju.
   !!!!! H. TEMPLATE PARAMETER 'TFunction' moze byt aj FIELD CLASS, alebo STRUCTURE. V takom pripade MUSI TEMPLATE PARAMETER 'TArguments...' obsahovat 1 ITEM reprezentujuci OBJECT, pre ktoru sma byt FIELD volany.
   I. FUNCTION bind() moze byt volana aj pre POINTERS, REFERENCES a SHARED POINTERS.
42. TEMPLATE FUNCTION mem_fn<TReturnValue,TClass,TArguments...>() je FUNCTION ADAPTER vytvarajuci FUNCTION OBJECT, ktory obaluje METHOD. Vysledkom je CALLABLE OBJECT volajuci METHOD daneho OBJECT.
43. Pouzitie LAMBDA FUNCTIONS namiesto BINDERS ci FUNCTION OBJECTS vyrazne zvysuje citatelnost CODE, a preto by LAMBDA FUNCTIONS mali byt preferovanym riesenim v situacii ked je potrebne do FUNCTION zaslat CALLABLE OBJECT.
44. Pouzitie FUNCTION OBJECTS moze byt vyhodnejsie oproti pouzitiu LAMBDA FUNCTIONS vtedy, ked CALLABLE OBJECT ma byt STATEFUL. LAMBDA FUNCTION vtedy musi STATE ulozit do externej VARIABLE, zatial co FUNCTION OBJECT ho moze ulozit do FIELD cim je CODE kompaktnejsi, pretoze nepotrebuje externe zavislosti.
45. LAMBDA FUNCTIONS je mozne pouzit aj na definovanie SORTING a HASH FUNCTIONS pouzivanych v STL COLLECTIONS. Kedze vsak STL COLLECTION vyzaduju definovanie TYPE pre SORTING a HASH FUNCTIONS, je vyhodne pouzit KEYWORD [decltype] na urcenie tohto TYPE. SORTING a HASH FUNCTIONS pomocou FUNCTION OBJECTS je vsak prehladnejsie a intitivnejsie ako pouzitie LAMBDA FUNCTIONS.
46. CLASS [function<R(TArgs...)>] zapudzdruje CALLABLE OBJECT (FUNCTION, METHOD, LAMBDA FUNCTION, FUNCTOR) tak, aby bolo s nim mozne pracovat ako s klasickym OBJECT co umoznuje jeho prenos ako PARAMETER do FUNCTIONS ci ulozenie do COLLECTIONS. CLASS [function<R(TArgs...)>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu CLASS [function<R(TArgs...)>].
   B. DESTRUCTOR uvolnuje instanciu CLASS [function<R(TArgs...)>].
   C. TYPE function<R(TArgs...)>::result_type vracia TYPE RETURN VALUE zapudzdenej FUNCTION.
   D. OPERATOR= priradzuje jednu instanciu CLASS [function<R(TArgs...)>] do inej.
   E. OPERATOR BOOL vracia TRUE, ak instancia CLASS [function<R(TArgs...)>] ma priradeny CALLABLE OBJECT.
   F. OPERATOR() vola CALLABLE OBJECT, ktory instancia CLASS [function<R(TArgs...)>] zapuzdruje.
   G. OPERATOR== urcuje ci instancia CLASS [function<R(TArgs...)>] je rovna NULL.
   H. OPERATOR!= urcuje ci instancia CLASS [function<R(TArgs...)>] je rozna od NULL.
   I. METHOD function<R(TArgs...)>.assign() priradzuje jednu instanciu CLASS [function<R(TArgs...)>] do inej.
   J. METHOD function<R(TArgs...)>.swap() vymiena CALLABLE OBJECTS medzi dvoma instanciami CLASS [function<R(TArgs...)>].
   K. METHOD function<R(TArgs...)>.target() vracia POINTER na CALLABLE OBJECT, ktory instancia CLASS [function<R(TArgs...)>] zapuzdruje.
   L. METHOD function<R(TArgs...)>.target_type() vracia REFERENCE na instanciu CLASS [typeinfo] reprezetnujucu TYPE CALLABLE OBJECT, ktory instancia CLASS [function<R(TArgs...)>] zapuzdruje.
!!! 47. CLASS [function<R(TArgs...)>] je MOZNE pouzit aj na ZAPUZDRENIE METHODS. V pripade METHODS MUSI byt ako 1. PARAMETER v TYPE PARAMETER 'TArgs' CONST REFERENCE na TYPE v ktorom je METHOD definovana. Tento PARAMETER reprezentuje THIS POINTER.
//-------------------------------------------------------------------------------------------------------