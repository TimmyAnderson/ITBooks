//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu DISCRIMINATED UNIONS v C++.
2. Pre DISCRIMINATED UNIONS platia nasledujuce fakty.
   A. DISCRIMINATED UNION je TYPE, ktory umoznuje v danom case ukladat 1 lubovolnu VALUE z serie roznych TYPES, ktore su zadane ako TEMPLATE TYPE PARAMETERS daneho DISCRIMINATED UNION.
   B. DISCRIMINATED UNION je implememtovany ako VARIADIC TEMPLATE CLASS, kde TEMPLATE TYPE PARAMETERS urcuju mozne TYPES, ktore DISCRIMINATED UNION moze ukladat.
   C. Kedze v danom case DISCRIMINATED UNION obsahuje vzdy iba VALUE 1 TYPE, tak jeho funkcionalita je podobna C++ UNION.
   D. DISCRIMINATED UNION na rozdiel od C++ UNION poskytuje TYPE SAFETY, pretoze si drzi informaciu tom akeho TYPE je VALUE, ktoru prave uklada.
   E. DISCRIMINATED UNIONS sa nazyvaju aj VARIANTS.
   F. C++ STANDARD LIBRARY implementuje VARIANT ako TYPE [variant].
3. DISCRIMINATED UNIONS mozu byt nasledujucich TYPES.
   A. OPEN DISCRIMINATED UNIONS, ked zoznam TYPES nie je dany v COMPILE TIME.
   B. CLOSED DISCRIMINATED UNIONS, ked zoznam TYPES je dany v COMPILE TIME. TYPE [variant] je CLOSED DISCRIMINATED UNION.
4. DISCRIMINATED UNIONS ako STORAGE pouzivaju RAW ARRAYS, kde RAW ARRAY je dostatocne dlhy, aby don bolo mozne ulozit aj najdlhsi mozny TYPE zo vsetkych TYPES, ktore VARIANT moze obsahovat.
5. DISCRIMINATED UNIONS ukladaju TYPE, ktoreho VALUE je prave ulozene v DISCRIMINATED UNION do DISCRIMINATOR FIELD.
6. DISCRIMINATED UNIONS pre implementaciu mnohych ALGORITHMS pouzivaju VISITOR PATTERN. Pri VISITOR PATTERN CODE v DISCRIMINATED UNIONS je VISITOR CALLBACK FUNCTION volana pre tu VALUE, ktoru DISCRIMINATED UNION aktualne obsahuje.
//----------------------------------------------------------------------------------------------------------------------