//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie TEMPLATE CLASSES.
2. C++ umoznuje definiciu TEMPLATE CLASSES. TEMPLATE CLASS je CLASS, ktora ma TEMPLATE PARAMETERS ako TYPES, alebo CONSTANTS.
3. CLASS TEMPLATES zacinaju DEFINITION TEMPATE PARAMETERS za ktorou sa nachadza DECLARATION samotnej CLASS. DEFINITION TEMPATE PARAMETERS sa vykonava pomocou SYNTAXE template <PARAMETER_1,PARAMETER_2,...,PARAMETER_N>], kde VALUE 'PARAMETER_X' je definicia TEMPLATE CLASS PARAMETER.
4. V DECLARAION a DEFINITION TEMPLATE CLASS je mozne pouzivat vsetky TEMPLATE CLASS PARAMETERS.
5. TEMPLATE CLASS ma TYPE [TEMPLATE_CLASS_NAME<ARGUMENT_1,ARGUMENT_2,...,ARGUMENT_N>], kde VALUE 'TEMPLATE_CLASS_NAME' je nazov TEMPLATE CLASS a VALUE 'ARGUMENT_X' je VALUE TEMPLATE CLASS PARAMETER.
6. Mimo DECLARATION a DEFINITION TEMPLATE CLASS medzi zlozenymi zatvorkami [{}] je NUTNE sa referovat na TEMPLATE CLASS pomocou SYNTAXE [TEMPLATE_CLASS_NAME<PARAMETER_1,PARAMETER_2,...,PARAMETER_N>].
!!! 7. V ramci DECLARATION a DEFINITION TEMPLATE CLASS medzi zlozenymi zatvorkami [{}] je mozne pouzit aj SYNTAX [TEMPLATE_CLASS_NAME].
8. CLASS TEMPLATES je mozne definovat iba v GLOBAL SCOPE. V METHOD SCOPE ci BLOCK SCOPE CLASS TEMPLATES na rozdiel od beznych CLASSES NIE JE MOZNE definovat.
9. CLASS TEMPLATE METHODS mozu byt implementovane nasledujucim sposobom.
   A. INLINE. METHOD je definovana v ramci DEFINITION TEMPLATE CLASS medzi zlozenymi zatvorkami [{}].
   B. NON-INLINE. METHOD je definovana mimo DEFINITION TEMPLATE CLASS. Takato METHOD MUSI byt oznacena pomcou FULL TYPE QUALIFICATION. METHOD DEFINITION musi mat SYNTAX [template<TEMPLATE_PARAMETERS> RETURN_TYPE CLASS_NAME<TEMPLATE_PARAMETERS>::METHOD_NAME(METHOD_PARAMETERS){METHOD_BODY}].
10. Az do verzie C++ 17 je nutne pri referovani sa na CLASS TEMPLATE pouzivat FULL TYPE QUALIFICATION. FULL TYPE QUALIFICATION ma SYNTAX [TEMPLATE_CLASS_NAME<ARGUMENT_1,ARGUMENT_2,...,ARGUMENT_N>].
!!! 11. C++ generuje CLASS z CLASS TEMPLATE az pri jej prvom pouziti v CODE. A CLASS TEMPLATE METHODS su pre dane TEMPLATE AGRUMENTS generovane IBA, ak su realne pouzite v CODE. To znamena, ze ak METHOD CLASS TEMPLATE pre dane TEMPLATE ARGUMENTS nie je v CODE nikde volana, jej CODE sa NEVYGENERUJE.
12. CLASS TEMPLATE je standardna CLASS, ktora moze byt DERIVED, jej instancie mozu byt oznacene pomocou KEYWORD [const] a KEYWORD [volatile]. Je mozne definovat nove TYPE DEFINITIONS pomocou KEYWORD [typedef] a KEYWORD [using].
13. Na to, aby C++ COMPILER dokazal pre dane TEMPLATE ARGUMENTS vygenerovat CLASS TEMPLATE a CLASS TEMPLATE METHODS, musia TEMPLATE ARGUMENTS podporovat OPERATIONS, ktore su v CLASS TEMPLATE a CLASS TEMPLATE METHODS pouzite. Medzi OPERATIONS patri volanie CONSTRUCTORS, volanie OPERATORS ci volanie METHODS. Ak pre dane TEMPLATE ARGUMENTS niektora OPERATION NIE JE PODPOROVANA, COMPILER hodi ERROR.
14. C++ definuje pre TEMPLATES pojem CONCEPT. Pre CONCEPTS platia nasledujuce fakty.
   A. CONCEPT je subor OPERATIONS, ktore musia TEMPLATE ARGUMENTS podporovat, aby pre ne mohol COMPILER vygenerovat CODE danej TEMPLATE.
   B. CONECPT sa aplikuje ako na TEMPLATE CLASSES, tak aj TEMPLATE FUNCTIONS.
   !!! C. CONECPTS su zatial iba na urovni C++ DOCUMENTATION, hoci v C++ 20 su uz CONCEPTS sucastou C++ SPECIFICATION a teda je ich mozne definovat v SOURCE CODE.
   D. CONCEPTS umoznuje presne definovanie CONSTRAINTS na TEMPLATE ARGUMENTS a umoznuje presnejsie ERROR MESSAGES v pripade, ze niektora CONSTRAINT je porusena.
15. TEMPLATE CLASSES mozu deklarovat aj definovat NON-MEMBERS METHODS a NON-MEMBERS OPERATORS ako FRIENDS nasledujucimi sposobmi.
   A. NON-MEMBER METHODS a NON-MEMBER OPERATORS su DECLARED a DEFINED v TEMPLATE CLASS SCOPE.
   B. NON-MEMBER METHODS a NON-MEMBER OPERATORS su DECLARED v TEMPLATE CLASS SCOPE a DEFINED mimo TEMPLATE CLASS SCOPE.
   C. NON-MEMBER METHODS a NON-MEMBER OPERATORS su DECLARED a DEFINED pomocou TEMPLATE SPECIALIZATIONS.
16. Ak NON-MEMBER METHODS a NON-MEMBER OPERATORS su DECLARED a DEFINED v TEMPLATE CLASS SCOPE, platia pre nich nasledujuce fakty.
   A. NON-MEMBER METHOD ci NON-MEMBER OPERATOR musi byt DECLARED a DEFINED v TEMPLATE CLASS SCOPE.
   !!! B. NON-MEMBER METHOD ci NON-MEMBER OPERATOR musi byt oznacena pomocou KEYWORD [friend], aby ju COMPILER nepovazoval za MEMBER METHOD ci MEMBER OPERATOR. Pretoze napriklad pre MEMBER OPERATORS je pocet PARAMETERS nizsi ako pri NON-MEMBER OPERATORS.
17. Ak NON-MEMBER METHODS a NON-MEMBER OPERATORS su DECLARED v TEMPLATE CLASS SCOPE a DEFINED mimo TEMPLATE CLASS SCOPE, platia pre nich nasledujuce fakty.
   A. NON-MEMBER METHOD ci NON-MEMBER OPERATOR musi byt DECLARED v TEMPLATE CLASS SCOPE.
   !!!!! B. DECLARATION NON-MEMBER METHOD ci NON-MEMBER OPERATOR v TEMPLATE CLASS SCOPE MUSI mat osobitne TEMPLATE PARAMETERS, ktore su NEZAVISLE na TEMPLATE PARAMETERS TEMPLATE CLASS.
   !!! C. DECLARATION NON-MEMBER METHOD ci NON-MEMBER OPERATOR musi byt oznacena pomocou KEYWORD [friend], aby ju COMPILER nepovazoval za MEMBER METHOD ci MEMBER OPERATOR. Pretoze napriklad pre MEMBER OPERATORS je pocet PARAMETERS nizsi ako pri NON-MEMBER OPERATORS.
   D. NON-MEMBER METHOD ci NON-MEMBER OPERATOR musi byt DEFINED mimo TEMPLATE CLASS SCOPE.
18. Ak NON-MEMBER METHODS a NON-MEMBER OPERATORS su DECLARED a DEFINED pomocou TEMPLATE SPECIALIZATIONS, platia pre nich nasledujuce fakty.
   !!! A. NON-MEMBER METHOD ci NON-MEMBER OPERATOR musi byt DECLARED mimo TEMPLATE CLASS SCOPE este pred DEFINITION TEMPLATE CLASS.
   !!!!! B. V TEMPLATE CLASS je pre NON-MEMBER METHOD ci NON-MEMBER OPERATOR DECLARED TEMPLATE SPECIALIZATION, ktora je SPECIALIZATION TEMPLATE FUNCTION, ktora bola DECLARED mimo DEFINITION TEMPLATE CLASS. SPECIALIZATION sa robi pre TEMPLATE PARAMETERS TEMPLATE CLASS.
   !!! C. DECLARATION NON-MEMBER METHOD SPECIALIZATION ci NON-MEMBER OPERATOR SPECIALIZATION musi byt oznacena pomocou KEYWORD [friend], aby ju COMPILER nepovazoval za MEMBER METHOD ci MEMBER OPERATOR. Pretoze napriklad pre MEMBER OPERATORS je pocet PARAMETERS nizsi ako pri NON-MEMBER OPERATORS.
   D. DEFINITION NON-MEMBER METHOD SPECIALIZATION ci NON-MEMBER OPERATOR SPECIALIZATION musi byt mimo TEMPLATE CLASS SCOPE.
19. C++ podporuje TEMPLATE SPECIALIZATIONS. Pre TEMPLATE SPECIALIZATIONS platia nasledujuce fakty.
   A. TEMPLATE SPECIALIZATION TEMPLATE CLASS je definicia novej CLASS, ktora ma rovnake meno ako TEMPLATE CLASS, ale 1, alebo viacero TEMPLATE PARAMETERS ma nahradene za konkretne TEMPLATE ARGUMENTS.
   !!! B. TEMPLATE SPECIALIZATION TEMPLATE CLASS je samostatna CLASS, ktora moze obsahovat lubovolny CODE. No zaroven by mala definovat vsetky METHODS, ktore definuje CLASS TEMPLATE, aby sa jednalo o plnohodnotnu TEMPLATE SPECIALIZATION.
   !!! C. TEMPLATE SPECIALIZATION METHODS je mozne vykonat aj nezavisle bez vykonania TEMPLATE SPECIALIZATION TEMPLATE CLASS. TEMPLATE SPECIALIZATION METHOD pouziva SYNTAX [template<> RETURN_VALUE TEMPLATE_NAME<TEMPLATE_ARGUMENTS>::TEMPLATE_METHOD_NAME(TEMPLATE_METHOD_PARAMETERS)].
   D. TEMPLATE SPECIALIZATION TEMPLATE CLASS je DECLARED pomocou SYNTAXE [template<> class TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENTS>{}].
   E. TEMPLATE SPECIALIZATION METHODS sa vykonava tak, ze TEMPLATE PARAMETERS su nahradene za TEMPLATE ARGUMENTS.
   F. Do TEMPLATE SPECIALIZATION TEMPLATE CLASS je mozne pridavat nove METHODS.
   !!! G. TEMPLATE SPECIALIZATION TEMPLATE CLASS umoznuje aj PARTIAL SPECIALIZATION, ked su iba niektore TEMPLATE PARAMETERS nahradene za TEMPLATE ARGUMENTS, alebo TEMPLATE ARGUMENTS zaroven obsahuju aj TEMPLATE PARAMETERS ako napriklad [TType*].
   !!!!! H. V pripade, ze existuje viacero SPECIALIZATIONS TEMPLATE CLASSES, ktore je mozne pre dane TEMPLATE PARAMETERS pouzit, COMPILER hodi ERROR.
20. CLASS TEMPLATES mozu mat definovane DEFAULT TEMPLATE AGRUMENTS pre TEMPLATE PARAMETERS.
21. C++ umoznuje pre lubovolny TYPE, vratane TEMPLATE CLASSES definovat TYPE ALIASES. TYPE ALIAS nie je novy TYPE, iba nove meno pre ten isty TYPE. TYPE ALIASES je mozne vytvarat nasledujucimi sposobmi.
   A. Pomocou KEYWORD [typedef]. Pre TEMPLATE CLASSES sa pouziva SYNTAX [typedef TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENTS> ALIAS_NAME], kde VALUE 'TEMPLATE_CLASS_NAME' je nazov TEMPLATE CLASS, VALUE 'TEMPLATE_ARGUMENTS' reprezentuje TEMPLATE CLASS ARGUMENTS a VALUE 'ALIAS_NAME' je nazov ALIAS.
   B. Pomocou KEYWORD [using]. Pre TEMPLATE CLASSES sa pouziva SYNTAX [using ALIAS_NAME=TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENTS>], kde VALUE 'TEMPLATE_CLASS_NAME' je nazov TEMPLATE CLASS, VALUE 'TEMPLATE_ARGUMENTS' reprezentuje TEMPLATE CLASS ARGUMENTS a VALUE 'ALIAS_NAME' je nazov ALIAS.
22. C++ 11 umoznuje definovat aj TEMPLATE ALIASES. Pre TEMPLATE ALIASES platia nasledujuce fakty.
   A. TEMPLATE ALIAS je ALIAS, ktory ma TEMPLATE PARAMETERS.
   B. TEMPLATE ALIAS definuje pomocou KEYWORD [using].
   C. TEMPALTE ALIAS pouziva nasledovnu SYNTAX [template<TEMPLATE_PARAMETERS> using ALIAS_NAME=TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENTS>], kde VALUE 'ALIAS_NAME' je nazov ALIAS, VALUE 'TEMPLATE_PARAMETERS' obsahuje TEMPLATE PARAMETERS a VALUE 'TEMPLATE_ARGUMENTS' obsahuje TEMPLATE ARGUMENTS i TEMPLATE PARAMETERS.
   !!! D. TEMPALTE ALIAS moze byt definovany iba v GLOBAL SCOPE, alebo NAMESPACE SCOPE, ale NIE v METHODS SCOPE.
23. ALIASES je mozne definovat aj v ramci TEMPLATE CLASS pre MEMBERS TEMPLATE CLASS. ALIASES je mozne definova ako pomocou KEYWORD [typedef], tak aj KEYWORD [using].
24. Od verzie C++ 17 uz nie je nutne zadavat vsetky TEMPLATE ARGUMENTS do TEMPLATE CLASSES, pretoze C++ 17 dokaze vykonavate TEMPLATE ARGUMENTS DEDUCTION pre TEMPLATE CLASSES. Pre TEMPLATE ARGUMENTS DEDUCTION platia nasledujuce fakty.
   A. DEDUCTION sa vykonava vtedy, ak ak existuje CONSTRUCTOR (moze byt aj COPY CONSTRUCTOR), z ktoreho je mozne jednoznacne vykonat TEMPLATE ARGUMENTS DEDUCTION.
   B. DEDUCTION sa VZDY vykonava pre VSETKY TEMPLATE ARGUMENTS. Nie je mozne vykonat PARTIAL DEDUCTION iba pre niektore TEMPLATE ARGUMENTS.
!!! 25. DEDUCTION TEMPLATE ARGUMENTS pre TEMPLATE CLASSES podla CONSTRUCTOR PARAMETERS zavisi do toho akym sposobom su CONSTRUCTOR PARAMETERS prenasane.
   A. Ak su CONSTRUCTOR PARAMETERS prenasane BY-VALUE, C++ robi TYPE DECAY. To znamena, ze zo STRING VALUE 'Timmy' C++ urci TYPE 'const char*'.
   B. Ak su CONSTRUCTOR PARAMETERS prenasane BY-REFERENCE, C++ NEROBI TYPE DECAY. To znamena, ze zo STRING VALUE 'Timmy' C++ urci TYPE 'const char[6]'.
26. C++ 17 umoznuje pomocou takzvanych USER DEFINED DEDUCTION GUIDES prikazat COMPILER ako ma vykonavat DEDUCTION TEMPLATE ARGUMENTS pre TEMPLATE CLASSES podla CONSTRUCTOR PARAMETERS. Pre USER DEFINED DEDUCTION GUIDES platia nasledujuce fakty.
   !!! A. USER DEFINED DEDUCTION GUIDES hovoria C++ COMPILER, ze ake TEMPLATE ARGUMENTS ma za TEMPLATE PARAMETERS TEMPLATE CLASS dosadit, ak je volany PSEUDO CONSTRUCTOR definovany pomocou DEDUCTION GUIDE s danymi PARAMETERS.
   B. USER DEFINED DEDUCTION GUIDES sa definuju pomocou SYNTAX [TEMPLATE_CLASS_NAME(CONSTRUCTOR_PARAMETER_TYPE_1 CONSTRUCTOR_PARAMETER_NAME_1, CONSTRUCTOR_PARAMETER_TYPE_2 CONSTRUCTOR_PARAMETER_NAME_2,...CONSTRUCTOR_PARAMETER_TYPE_N CONSTRUCTOR_PARAMETER_NAME_N) -> TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENTS>], kde VALUE 'TEMPLATE_CLASS_NAME' je nazov TEMPLATE CLASS NAME, VALUE 'CONSTRUCTOR_PARAMETER_TYPE_X' je TYPE TEMPLATE CLASS CONSTRUCTOR PARAMETER, VALUE 'CONSTRUCTOR_PARAMETER_NAME_X' je NAME TEMPLATE CLASS CONSTRUCTOR PARAMETER a VALUE 'TEMPLATE_ARGUMENTS' su TEMPLATE ARGUMENTS.
   C. USER DEFINED DEDUCTION GUIDES mozu byt tiez TEMPLATES pomocou SYNTAX [template<TEMPLATE_PARAMETERS> TEMPLATE_CLASS_NAME(CONSTRUCTOR_PARAMETER_TYPE_1 CONSTRUCTOR_PARAMETER_NAME_1, CONSTRUCTOR_PARAMETER_TYPE_2 CONSTRUCTOR_PARAMETER_NAME_2,...CONSTRUCTOR_PARAMETER_TYPE_N CONSTRUCTOR_PARAMETER_NAME_N) -> TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENTS>], kde VALUE 'TEMPLATE_PARAMETERS' su TEMPLATE PARMATERS, VALUE 'TEMPLATE_CLASS_NAME' je nazov TEMPLATE CLASS NAME, VALUE 'CONSTRUCTOR_PARAMETER_TYPE_X' je TYPE TEMPLATE CLASS CONSTRUCTOR PARAMETER, VALUE 'CONSTRUCTOR_PARAMETER_NAME_X' je NAME TEMPLATE CLASS CONSTRUCTOR PARAMETER a VALUE 'TEMPLATE_ARGUMENTS' su TEMPLATE ARGUMENTS.
   D. USER DEFINED DEDUCTION GUIDES musia byt definovane v rovnakom SCOPE ako TEMPLATE CLASS. Spravidla su definovane hned sa definiciou TEMPLATE CLASS.
27. C++ umoznuje definiciu TEMPLATES aj pre AGGREGATE CLASSES. AGGREGATE CLASS je CLASS, alebo STRUCTURE, ktora USER PROVIDED, EXPLICIT alebo INHERITED CONSTRUCTORS, nema PRIVATE, alebo PROTECTED DATA MEMBERS, nema VIRTUAL METHODS a nema VIRTUAL, PRIVATE, alebo PROTECTED BASE CLASSES.
28. C++ umoznuje definovat USER DEFINED DEDUCTION GUIDES aj pre AGGREGATE CLASSES vdaka comu je mozny DEDUCTION TEMPLATE ARGUMENTS pre AGGREGATE CLASSES.
//----------------------------------------------------------------------------------------------------------------------