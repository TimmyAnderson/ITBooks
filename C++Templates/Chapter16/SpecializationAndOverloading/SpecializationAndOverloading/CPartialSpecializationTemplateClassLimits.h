//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, int VALUE=3>
class CPartialSpecializationTemplateClassLimits final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, int VALUE>
void CPartialSpecializationTemplateClassLimits<TType,VALUE>::Print(void) const
{
	std::wcout << L"PRIMARY TEMPLATE CLASS [<typename TType, int VALUE=3>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
class CPartialSpecializationTemplateClassLimits<TType,5> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CPartialSpecializationTemplateClassLimits<TType,5>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION [<TType,5>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<int VALUE>
class CPartialSpecializationTemplateClassLimits<double,VALUE> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<int VALUE>
void CPartialSpecializationTemplateClassLimits<double,VALUE>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION [<double,VALUE>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
/*
// !!!!! COMPILER hodi ERROR, pretoze 2. TEMPLATE ARGUMENT je TEMPLATE TYPE ARGUMENT, hoci PRIMARY TEMPLATE ocakava TEMPLATE NON-TYPE ARGUMENT.
template<typename TType>
class CPartialSpecializationTemplateClassLimits<int,TType> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CPartialSpecializationTemplateClassLimits<int,TType>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION [<int,TType>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
*/
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
/*
// !!!!! COMPILER hodi ERROR, pretoze PARTIAL EXPLICIT SPECIALIZATIONS NESMU mat DEFAULT TEMPLATE ARGUMENTS.
template<typename TType=int>
class CPartialSpecializationTemplateClassLimits<TType,10> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CPartialSpecializationTemplateClassLimits<TType,10>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION [<TType,10>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
*/
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
/*
// !!!!! COMPILER hodi ERROR, pretoze v TEMPLATE NON-TYPE ARGUMENTS NIE JE mozne pouzit ZIADNE EXPRESSIONS.
template<int VALUE>
class CPartialSpecializationTemplateClassLimits<int,VALUE*2> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<int VALUE>
void CPartialSpecializationTemplateClassLimits<int,VALUE*2>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION [<int,VALUE*2>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
*/
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
/*
// !!!!! COMPILER hodi ERROR, pretoze zoznam TEMPLATE ARGUMENTS v PARTIAL EXPLICIT SPECIALIZATION je IDENTICKY so zoznamom TEMPLATE PARAMETERS v PRIMARY TEMPLATE.
template<typename TRenamedType, int RENAMED_VALUE>
class CPartialSpecializationTemplateClassLimits<TRenamedType,RENAMED_VALUE> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TRenamedType, int RENAMED_VALUE>
void CPartialSpecializationTemplateClassLimits<TRenamedType,RENAMED_VALUE>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION [<TRenamedType,RENAMED_VALUE>] - TYPE [" << GetTypeInfoName<decltype(*this)>() << L"]." << std::endl;
}
*/
//----------------------------------------------------------------------------------------------------------------------