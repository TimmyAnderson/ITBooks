//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie NULLABLE TYPES umoznujuce ukladat do VALUE TYPES aj NULL hodnoty.
2. NULLABLE TYPES su implementovane ako instancie VALUE TYPE Nullable<T>, kde T je VALUE TYPE, ktory ma byt pomocou NULLABLE TYPE zapuzdreny. VALUE TYPE Nullable<T> ma nasledujuce MEMBERS.
   A. PROPERTY Nullable<T>.HasValue urcuje ci NULLABLE TYPE ma hodnotu, alebo je rovna hodnote NULL.
   B. PROPERTY Nullable<T>.Value vracia VALUE NULLABLE TYPE typu 'T', alebo hodi EXCEPTION ak NULLABLE TYPE obsahuje hodnotu NULL.
   C. METHOD Nullable<T>.GetValueOrDefault() vracia VALUE NULLABLE TYPE, alebo DEFAULT VALUE pre 'T' ak NULLABLE TYPE obsahuje hodnotu NULL. OVERLOADED verzia METHOD umoznuje zaslat ako PARAMETER DEFAULT VALUE.
   D. IMPLICIT CAST OPERATOR konvertuje VALUE typu 'T' na NULLABLE TYPE.
   E. EXPLICIT CAST OPERATOR konvertuje VALUE NULLABLE TYPE na VALUE typu 'T', alebo hodi EXCEPTION ak NULLABLE TYPE obsahuje hodnotu NULL.
3. C# umoznuje definovat specialnu syntax pomocou znaku '?' za menom VALUE TYPE, ktory deklaruje NULLABLE TYPE daneho VALUE TYPE.
!!! 4. C# podporuje KONVERZIU medzi NULLABLE TYPE a VALUE TYPE, ktory NULLABLE TYPE zapuzduje.
!!! 5. C# podporuje OPERATORS nad NULLABLE TYPES nasledujucim sposobom.
   A. V pripade UNARY OPERATORS ak je hodnota NULL, tak sa vrati NULL, inak sa OPERATOR vykona.
   B. V pripade matematickych BINARY OPERATORS okrem BITOVYCH operatorov ak je hodnota aspon jedneho operandu NULL, tak sa vrati NULL, inak sa OPERATOR vykona.
   !!! C. Pre BITOVE OPERATORS nad type Boolean ma C# SPECIALNU PODPORU, aby sa operatory '&' a '|' vykonali na zaklade hodnoty laveho, resp. praveho operandu, ak niektory z nich obsahuje NULL.
   D. V pripade COMPARISON OPERATORS '<', '<=', '>=' a '>' ak je niektory z operandov NULL, tak vysledok operacie je NULL, inak sa OPERATOR vykona.
   E. V pripade COMPARISON OPERATORS '==' a '!=' ak su OBE OPERANDY NULL, tak sa operandy ZHODUJU, ak je IBA JEDEN NULL, tak sa operandy NEZHODUJU a ak su OBA OPERANDY NOT NULL, tak sa vykona OPERATOR.
!!!!! 6. C# podporuje i CUSTOM OPERATORY pre NULLABLE TYPES. Ak teda VALUE TYPE definuje pre CUSTOM OPERATORS, tak C# je schopny tieto OPERATORS volat aj pre NULLABLE TYPE daneho VALUE TYPE.
!!! 7. OPERATOR?? zapisany ako (Value1 ?? Value2) vracia 'Value1' ak je Value1!=NULL, inak vrati 'Value2'. Casto sa pouziva pri definovani DEFAULT VALUE pre NULLABLE TYPES. Avsak JE POUZITELNA i pre REFERENCE TYPES.
!!! 8. CLR ma SPECIALNU PODPORU pre vykonavanie BOXING a UNBOXING nad NULLABLE TYPES.
   A. Pred vykonanim BOXING sa zisti, ci hodnota NULLABLE TYPE nie je NULL a ak ano, tak sa BOXING NEVYKONA, ale preda sa PRIAMO HODNOTA NULL.
   B. Pred vykonanim UNBOXING sa zisti, ci BOXED VALUE, ktora sa ma ulozit do NULLABLE TYPE nie je NULL a ak ano, tak sa UNBOXING NEVYKONA, ale do NULLABLE TYPE sa uklada PRIAMO HODNOTA NULL.
!!! 9. CLR metodu Object.GetType() pre NULLABLE TYPES implementuje tak, ze vracia NAMIESTO TYPE Nullable<T> vzdy iba TYPE 'T', kde TYPE 'T' je VALUE TYPE nad ktorym je NULLABLE TYPE vytvoreny.
!!! 10. CLR umoznuje aby sa NULLABLE TYPES konverovali na INTERFACES, ktore IMPLEMENTUJE VALUE TYPE daneho NULLABLE TYPE, aj ked VALUE TYPE Nullable<T> tieto INTERFACES NEIMPLEMENTUJE.
//-------------------------------------------------------------------------------------------------------