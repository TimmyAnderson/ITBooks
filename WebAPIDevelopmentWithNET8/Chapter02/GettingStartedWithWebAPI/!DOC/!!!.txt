//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje vytvorenie ASP.NET WEB SERVICES.
2. COMMAND LINE COMMAND [dotnet --version] vracia aktualnu VERSION .NET SDK.
3. COMMAND LINE COMMAND [dotnet --list-sdks] vracia zoznam vsetkych nainstalovanych VERSIONS .NET SDKs.
4. COMMAND LINE COMMAND [dotnet new PROJECT_TYPE PARAMETERS] vytvara .NET PROJECT, ktory ma definovany PROJECT TYPE vo VALUE [PROJECT_TYPE] a OPTIONAL PARAMETERS vo VALUE [PARAMETERS]. COMMAND ma nasledujuce PARAMETERS. WEB PROJECTS maju PROJECT TYPE [webapi] a obsahuju nasledujuce PARAMETERS.
   A. PARAMETER [-n OUTPUT_NAME] urcuje PROJECT NAME vo VALUE [OUTPUT_NAME].
   B. PARAMETER [-o OUTPUT_PATH] urcuje PROJECT PATH vo VALUE [OUTPUT_PATH].
   C. PARAMETER [-controllers] urcuje, ze PROJECT bude vyuzivat CONTROLLERS.
   D. PARAMETER [-minimal] urcuje, ze PROJECT bude vyuzivat MINIMAL API, ktory nevyuziva CONTROLLERS.
5. COMMAND LINE COMMAND [dotnet build] vykonava BUILD PROJECT, ktory sa nachadza v CURRENT DIRECTORY (kde sa nachadza FILE [.csproj]).
6. COMMAND LINE COMMAND [dotnet run] vykonava RUN PROJECT, ktory sa nachadza v CURRENT DIRECTORY (kde sa nachadza FILE [.csproj]).
7. COMMAND LINE COMMAND [dotnet dev-certs https --trust] povoluje DEVELOPMENT CERTIFICATES, ktore su nutne pre pristup cez HTTPS PROTOCOL.
!!! 8. COMMAND LINE COMMAND [dotnet watch] je ALTERNATIVOU voci COMMAND [dotnet run]. Pri pouziti tohto COMMAND sa spusti PROGRAM, no zaroven sa povoli aj HOT RELOAD. Takze pri zmenach v SOURCE CODES su zmeny bud automaticky aplikovane, alebo ak sa jedna o zmeny vyzadujuce RESTART, tak je PROGRAM po potvrdeni USER restartovany.
!!! 9. DEFAULT URL je ulozena vo FILE [launchSettings.json]. Platia nasledujuce fakty.
   A. FILE [launchSettings.json] obsahuje LAUNCH PROFILES v OBJECT [profiles].
   B. BY DEFAULT LAUNCH PROFILE pre HTTP ma nahodne generovany PORT v INTERVALE <5000,5300>.
   C. BY DEFAULT LAUNCH PROFILE pre HTTPS ma nahodne generovany PORT v INTERVALE <7000,7300>.
!!! 10. DEFAULT WEB API PROJECT ma povoleny SWAGGER UI. Ten je pristupny na URL [BASE_URL/swagger], kde VALUE [BASE_URL] je BASE URL PROGRAMU.
11. VISUAL STUDIO poskytuje moznost testovanie HTTP REQUESTS pomocou FILES [.http]. Platia nasledujuce fakty.
   A. FILE [.http] moze obsahovat viacero HTTP REQUEST.
   B. Po otvoreni FILE [.http] VISUAL STUDIO priamo v EDITORE nad kazdym HTTP REQUEST zobrazuje BUTTON [Send request], pomocou ktoreho je mozne zaslat HTTP REQUEST.
   C. HTTP RESPONSE sa zobrazi vedla FILE [.http].
12. WEB API PROJECT je zalozeny na MODEL CONTROLLER PATTERN. MODEL CONTROLLER PATTERN pozostava z nasledujucich elementov.
   A. MODELS su DATA CLASSES, ktore reprezentuju DATA pouzivane vo WEB API.
   B. CONTROLLERS su CLASSES, ktore obsahuju BUSINESS LOGIC. CONTROLLERS su BY-CONVENTION ulozene v DIRECTORY [Controllers].
13. Pre MODELS platia nasledujuce fakty.
   A. MODELS su POCO C# CLASSES obsahujede DATA, ktore pouziva PROGRAM.
   B. MODELS su BY-CONVENTION ulozene v DIRECTORY [Models].
13. Pre CONTROLLERS platia nasledujuce fakty.
   A. CONTROLLERS su C# CLASSES, ktory BY-CONVENTION maju NAME POSTFIX [Controller].
   B. CONTROLLERS su BY-CONVENTION ulozene v DIRECTORY [Controllers].
   C. CONTROLLERS su oznacene pomocou ATTRIBUTE [ApiController].
   D. CONTROLLERS mozu mat OPTIONALY nastaveny ROUTE pomocou ATTRIBUTE [Route].
   E. CONTROLLERS obsahuju ACTION METHODS, ktore pre zaslany HTTP REQUEST vracaju prislusny HTTP RESPONSE.
14. Pre ACTION METHODS platia nasledujuce fakty.
   A. ACTION METHODS musia mat definovanu HTTP METHOD. Ta sa definuje pomocou ATTRIBUTE [HttpGet], ATTRIBUTE [HttpPost], ATTRIBUTE [HttpPut], alebo ATTRIBUTE [HttpDelete].
   B. ACTION METHODS mozu mat OPTIONALLY nastaveny ROUTE pomocou ATTRIBUTE [Route].
   C. ACTION METHODS mozu mat <0,N> PARAMETERS.
   !!! D. ACTION METHODS mozu vratit lubovolny RETURN VALUE TYPE. No velmi casto sa pouziva CLASS [ActionResult<TType>], ktora vykona SERIALIZATION RESPONSE MESSAGE BODY do JSON a umoznuje nastavit HTTP RESPOSNE STATUS CODE.
15. WEB API umoznuje definovat SERIVCES. Pre SERIVCES platia nasledujuce fakty.
   A. SERIVCE je C# CLASS, ktora implementuje BUSINESS LOGIC.
   B. SERIVCES spravidla implementuju INTERFACE cez ktory sa dosahuje nezavislost INTERFACE na IMPLEMENTATION.
   C. Instancie SERIVCES su vytvarane pomocou DEPENDENCY INJECTION.
16. DEPENDENCY INJECTION je DESIGN PATTERN, ktory vychadza z nasledujucich principov.
   A. DEPENDENCY INVERSION PRINCIPLE (DI). DEPENDENCY INVERSION PRINCIPLE definuje, ze HIGH LEVEL MODULES by nemali zavisiet na LOW LEVEL MODULES. Obe by mali zavisiet na ABSTRACTIONS. A ABSTRACTIONS by nemali zavisiet na DETAILS. DETAILS by mali zavisiet na ABSTRACTIONS.
   B. INVERSION OF CONTROL (IOC). INVERSION OF CONTROL definuje, ze instancie CLASSES by nemali byt vytvarane priamo v CODE, ale mal by ich vytvarat FRAMEWORK a v podobe INTERFACES poskytovat CLASSES.
17. DEPENDENCY INJECTION moze byt implementovana nasledujucimi sposobmi.
   A. CONSTRUCTOR INJECTION, kedy DEPENDENCIES su poskytovane ako PARAMETERS CONSTRUCTOR danej CLASS.
   B. SETTER INJECTION, kedy DEPENDENCIES su poskytovane ako SETTERS danej CLASS.
   C. INTERFACE INJECTION, kedy DEPENDENCIES su poskytovane ako METHODS danej CLASS.
18. ASP.NET CORE podporuje DEPENDENCY INJECTION FRAMEWORK. Pre DEPENDENCY INJECTION FRAMEWORK platia nasledujuce fakty.
   A. ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK je implementovany v PACKAGE [Microsoft.Extensions.DependencyInjection].
   B. ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK sa pouziva v nasledujucich krokoch.
      A. Definuje sa INTERFACE a SERVICE, ktory dany INTERFACE implementuje.
	  B. INTERFACE a SERVICE sa zaregistruju v ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK.
	  C. Do CONSTRUCTOR v CLIENT OBJECT sa prida PARAMETER typu daneho INTERFACE, ktory ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK nahradi za zaregistrovany SERVICE OBJECT.
   C. ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK definuje nasledujuce pojmy.
      A. INTERFACE. Je to INTERFACE daneho SERVICE.
	  B. SERVICE. Je to CLASS, ktora implementuje dany INTERFACE.
	  C. CLIENT. Je CLIENT OBJECT, ktory prijima SERVICE OBJECT.
	  D. INJECTOR. Je to sucast ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK, ktora sa pouziva na registraciu SERVICES.
   D. ASP.NET CORE DEPENDENCY INJECTION FRAMEWORK poskytuje nasledujuce moznosti LIFETIMES vytvaranych SERVICES.
      A. TRANSIENT. FRAMEWORK vytvara vzdy novy SERVICE OBJECT. SERVICE OBJECT je uvolneny ak skonci spracovanie HTTP REQUEST.
	  B. SCOPED. FRAMEWORK vytvara pre kazdy novy HTTP REQUEST novy SERVICE OBJECT. SERVICE OBJECT je uvolneny ak skonci spracovanie HTTP REQUEST.
	  C. SINGLETON. FRAMEWORK vytvara SERVICE OBJECT iba raz pocas celeho behu PROGRAMU. SERVICE OBJECT je uvolneny pri skonceni PROGRAMU.
19. V pripade, ze je potrebne zaregistrovat viacero previazanych SERVICES je mozne pouzit GROUP REGISTRATION. GROUP REGISTRATION sa implementuje v nasledujucich krokoch.
   A. Definuje sa STATIC CLASS, ktora bude obsahovat EXTENSION METHODS.
   B. V STATIC CLASS sa pre kazdu skupinu previazanych SERVICES definuje EXTENSION METHOD, ktora ma THIS PARAMETER TYPE [IServiceCollection]. V tychto METHODS su zaregistrovane vsetky previazane SERVICES.
   C. Pri registracii SERVICES sa pouziju vytvorene EXTENSION METHODS namiesto manualnej registracie vsetkych SERVICES.
20. DEPENDENCY INJECTION sa moze vykonavat aj na urovni ACTION METHODS. Platia nasledujuce fakty.
   A. ACTION METHODS mozu mat PARAMETERS oznacene pomocou ATTRIBUTE [FromServices], ktore su automaticky substituovane pomocou DEPENDENCY INJECTION FRAMEWORK.
   B. ATTRIBUTE [FromServices] nie je povinny, lebo ASP.NET CORE sa kazdy COMPLEX TYPE, ktory je PARAMETER ACTION METHOD a nie je sucastou HTTP REQUEST sa pokusi substituovat pomocou DEPENDENCY INJECTION FRAMEWORK.
   C. INJECTEED PARAMETERS prenasane pomocou PARAMETERS ACTION METHODS plne respektuju LIFETIMES.
21. ASP.NET CORE podporuje KEYED SERVICES. Pre KEYED SERVICES platia nasledujuce fakty.
   A. KEYED SERVICE je SERICE, ktory je v DEPENDENCY INJECTION FRAMEWORK identifikovany pomocou STRING KEY.
   B. STRING KEYS sa pouzivaju na identifikaciu SERVICES.
   C. KEYED SERVICE umoznuju definovat viacero SERVICES, ktore implementuju ten isty INTERFACE.
   D. Pre ziskanie KEYED SERVICE je na PARAMETER, ktorym sa prenasa SERVICE nutne aplikovat ATTRIBUTE [FromKeyedServices], v ktorom sa definuje STRING KEY pozadovaneho KEYED SERVICE.
   E. KEYED SERVICES sa registruju volanim nasledujucich METHODS.
      A. METHOD [IServiceCollection AddKeyedTransient<TService,TImplementation>(this IServiceCollection Services, object ServiceKey)] registruje KEYED SERVICE ako TRANSIENT SERVICE.
      B. METHOD [IServiceCollection AddKeyedScoped<TService,TImplementation>(this IServiceCollection Services, object ServiceKey)] registruje KEYED SERVICE ako SCOPED SERVICE.
      C. METHOD [IServiceCollection AddKeyedSingleton<TService,TImplementation>(this IServiceCollection Services, object ServiceKey)] registruje KEYED SERVICE ako SINGLETON SERVICE.
22. DEPENDENCY INJECTION FRAMEWORK umoznuje vytvarat CUSTOM SCOPES. Pre CUSTOM SCOPES platia nasledujuce fakty.
   A. CUSTOM SCOPE sa vyvara volanim METHOD [IServiceScope CreateScope(this IServiceProvider Provider)].
   B. SCOPE konci volanim METHOD [IServiceScope.Dispose()]. INTERFACE [IServiceScope] implementuje INTERFACE [IDisposable].
   C. Instanciu INTERFACE [IServiceProvider] je mozne ziskat pomocou DEPENDENCY INJECTION.
   D. Instancia INTERFACE [IServiceProvider] je pristupna aj v PROPERTY [IServiceProvider WebApplication.Services].
23. SERVICE je mozne ziskat aj programovo volanim nasledujucich METHODS.
   A. METHOD [TType GetRequiredService<TType>(this IServiceProvider Provider)] vracia SERVICE.
   B. METHOD [TType GetRequiredKeyedService<T>(this IServiceProvider Provider, object ServiceKey)] vracia KEYED SERVICE.
!!! 24. Ak SERVICE implementuje INTERFACE [IDisposable], DEPENDENCY INJECTION FRAMEWORK automaticky vola METHOD [IDisposable.Dispose()] pri skonceni SCOPE.
25. MINIMAL API je WEB API PROJECT, ktory nevyuziva CONTROLLERS. Pre MINIMAL API platia nasledujuce fakty.
   A. MINIMAL API nevyuziva CONTROLLERS.
   B. MINIMAL API definuje ACTION METHODS pomocou METHODS [MapMETHOD()], kde VALUE [METHOD] je nazov pozadovanej HTTP METHOD.
   C. MINIMAL API umoznuje vlozit suvisiace ACTION METHODS pomocou GROUPS. GROUP sa vytvara volanim METHOD [RouteGroupBuilder MapGroup(this IEndpointRouteBuilder Endpoints, string Prefix)].
   D. MINIMAL API umoznuje pouzitie DEPENDENCY INJECTION FRAMEWORK.
//----------------------------------------------------------------------------------------------------------------------