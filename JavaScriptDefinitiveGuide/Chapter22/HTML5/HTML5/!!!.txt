//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie HTML 5 FEATURES v JavaScripte.
2. GEOLOCATION API umoznuje urcit poziciu pouzivatela pomocou IP adresy, GPS (ak ho pocitac obsahuje), alebo napriklad i meranim sily signalu pre WIRELESS NETWORKS. Poziadavka na GEOLOCATION VZDY MUSI byt POTVRDENA POUZIVATELOM.
3. GEOLOCATION API je implementovane v OBJECT Geolocation, ktory je pristupny pomocou PROPERTY Navigator.geolocation.
4. METHOD Geolocation.getCurrentPosition() umoznuje zistit aktualnu POSITION.
   A. METHOD v 1. PARAMETRI prijima CALLBACK FUNCTION, ktora ma 1 PARAMETER typu OBJECT Position, ktory obsahuje informaciu o pozicii.
   B. METHOD v 2. PARAMETRI prijima ERROR CALLBACK FUNCTION, ktora ma 1 PARAMETER typu OBJECT PositionError, ktory obsahuje informaciu o CHYBE GEOLOCATION.
   C. METHOD v 3. PARAMETRI prijima GEOLOCATION OPTIONS.
5. METHOD Geolocation.watchPosition() umoznuje spustit WATCH, ktory sleduje ZMENY POSITIONS a pri zmene zavola CALLBACK.
   A. METHOD v 1. PARAMETRI prijima CALLBACK FUNCTION, ktora ma 1 PARAMETER typu OBJECT Position, ktory obsahuje informaciu o pozicii.
   B. METHOD v 2. PARAMETRI prijima ERROR CALLBACK FUNCTION, ktora ma 1 PARAMETER typu OBJECT PositionError, ktory obsahuje informaciu o CHYBE GEOLOCATION.
   C. METHOD v 3. PARAMETRI prijima GEOLOCATION OPTIONS.
   D. RETURN VALUE je INTEGER, ktory sa pouziva v METHOD Geolocation.clearWatch() na ZASTAVENIE WATCH.
6. METHOD Geolocation.clearWatch() ZASTAVUJE WATCH operaciu spustenu pomocou METHOD Geolocation.watchPosition(). Ako PARAMETER ma RETURN VALUE METHOD Geolocation.watchPosition().
7. OBJECT Position, ktory je PARAMETROM CALLBACK FUNCTION pre METHODS Geolocation.getCurrentPosition() a Geolocation.watchPosition() ma nasledujuce PROPERTIES.
   A. PROPERTY Position.timestamp udava TIMESTAMP ziskania GEOLOCATION informacii.
   B. PROPERTY Position.coords.longitude udava LONGITUDE aktualnej pozicie.
   C. PROPERTY Position.coords.latitude udava LATITUDE aktualnej pozicie.
   D. PROPERTY Position.coords.accuracy udava presnost merania pozicie v METROCH.
   E. PROPERTY Position.coords.altitude udava VYSKU v METROCH.
   F. PROPERTY Position.coords.altitudeAccuracy udava presnost merania VYSKY v METROCH.
   G. PROPERTY Position.coords.heading udava smerovanie ak je pocitac v pohybe.
   H. PROPERTY Position.coords.speed udava rychlost ak je pocitac v pohybe.
8. OBJECT PositionError, ktory je PARAMETROM ERROR CALLBACK FUNCTION pre METHODS Geolocation.getCurrentPosition() a Geolocation.watchPosition() ma nasledujuce PROPERTIES.
   A. PROPERTY PositionError.code obsahuje KOD CHYBY.
   B. PROPERTY PositionError.message obsahuje popis CHYBY.
9. Pomocou PROPERTY Location.hash je mozne realizovat HISTORY MANAGEMENT a to nasledujucim sposobom.
   A. Nastavenie hodnoty Location.hash znamena, ze sa do HISTORY ulozi nova ENTRY, ktora sa zobrazi v BACK a FORWARD BROWSERS BUTTONS.
   B. EVENT window.hashchange je volany pri ked sa zmeni hodnota Location.hash.
!!! 10. HISTORY MANAGEMENT je mozne vykonavat aj pomocou History OBJECT, ktory je pristupny pomocou PROPERTY Window.history.
   A. METHOD History.pushState() umoznuje vlozit novu ENTRY do HISTORY. Ako 1. PARAMETER obsahuje CUSTOM OBJECT, ktory reprezentuje CUSTOM STATE. Ako 2. PARAMETER obsahuje TITLE, ktory sa zobrazi v BROWSER. Ako 3. PARAMETER obsahuje URL, ktory sa zobrazi v BROWSERI.
   B. METHOD History.replaceState() umoznuje NAHRADIT aktualne ENTRY v HISTORY. Ako 1. PARAMETER obsahuje CUSTOM OBJECT, ktory reprezentuje CUSTOM STATE. Ako 2. PARAMETER obsahuje TITLE, ktory sa zobrazi v BROWSER. Ako 3. PARAMETER obsahuje URL, ktory sa zobrazi v BROWSERI.
   C. EVENT window.popstate je volany pri zmene HISTORY. Ako EVENT OBJECT ma OBJECT, ktory v PROPERTY 'state' obsahuje STATE, ktory bol ako 1. PARAMETER preneseny do METHODS History.pushState(), alebo History.replaceState().
11. METHOD Window.postMessage() umoznuje zasielat MESSAGES do ostatnych BROWSER TABS, alebo do <iframe> HTML ELEMENTS. Ma nasledujuce vlastnosti.
   A. Ako 1. PARAMETER ma CUSTOM OBJECT, ktory obsahuje lubovolny CUSTOM STATE.
   B. Ako 2. PARAMETER obsahuje SITE URL urcujuci, ktory BROWSER TABS a <iframe> HTML ELEMENTS sa bude MESSAGE zasielat. MESSAGE sa zasiela iba tym BROWSER TABS a <iframe> HTML ELEMENTS, ktore maju rovnaky PROTOCOL, HOST NAME a PORT. Hodnota '*' znamena, ze sa MESSAGE zasiela VSETKYM BROWSER TABS a <iframe> HTML ELEMENTS. Hodnota '/' znamena, ze sa MESSAGE zasiela BROWSER TABS a <iframe> HTML ELEMENTS s IDENTICKOU URL ako je URL odosielajuceho Window OBJECT.
!!! 12. METHOD Window.postMessage() generuje na DESTINATION Window OBJECT EVENT Window.message. Ako EVENT OBJECT ma OBJECT s nasledujucimi PROPERTIES.
   A. PROPERTY 'data' obsahuje STATE zaslany ako 1. PARAMETER do METHOD Window.postMessage() .
   B. PROPERTY 'source' obsahuje Window OBJECT, ktory METHOD Window.postMessage() ZAVOLAL.
   C. PROPERTY 'origin' obsahuje SITE URL z ktorej WEB PAGE bola METHOD Window.postMessage() volana.
!!! 13. WEB WORKERS je mechanizmus, ktory umoznuje vytvarat v JavaScript WORKER THREADS. THREADS vytvorene v JavaScript NEMOZU pristupovat ku GUI OBJECTS ako napriklad Window, alebo Document a s MAIN THREAD mozu komunikovat iba prostrednictvom zasielania MESSAGES.
14. WEB WORKER THREAD je implementovany pomocou Worker OBJECT a ma nasledujuce vlastnosti.
   A. CONSTRUCTOR Worker ma PARAMETER obsahujuci URI k .JS FILE, ktory obsahuje kod, ktory sa ma vo WORKER THREAD vykonat.
   !!! B. METHOD Worker.postMessage() zasiela CUSTOM OBJECT do WORKER THREAD, ktory tento CUSTOM OBJECT moze zachytit pomocou EVENT WorkerGlobalScope.message. METHOD sluzi na zasielanie MESSAGES z MAIN THREAD do WORKER THREAD.
   !!! C. EVENT Worker.message zachytava v MAIN THREAD CUSTOM OBJECTS zaslane z WORKER THREAD pomocou METHOD WorkerGlobalScope.postMessage(). EVENT OBJECT typu MessageEvent obsahuje PROPERTY MessageEvent.data v ktorej je ulozeny CUSTOM OBJECT zaslany z METHOD WorkerGlobalScope.postMessage(). PROPERTY MessageEvent.origin je URL odkial bola MESSAGE odoslana. PROPERTY MessageEvent.source obsahuje WorkerGlobalScope OBJECT, ktory MESSAGE ODOSLAL.
   D. EVENT Worker.error zachytava v MAIN THREAD EXCEPTIONS, ktore WORKER THREAD NEZACHYTIL. EVENT OBJECT typu ErrorEvent obsahuje PROPERTY ErrorEvent.message s textom ERROR MESSAGE, PROPERTY ErrorEvent.filename s nazvom FILE, kde doslo k ERROR a PROPERTY ErrorEvent.lineno s cislom LINE, kde doslo k ERROR.
   E. METHOD Worker.terminate() NASILNE ukoncuje WORKER THREAD.
15. WORKER THREADS bezia v SEPARATNOM ENVIRONMENT, ktory je reprezentovany GLOBAL OBJECT WorkerGlobalScope. Ma nasledujuce MEMBERS.
   !!! A. METHOD WorkerGlobalScope.postMessage() zasiela CUSTOM OBJECT do MAIN THREAD, alebo WORKER THREAD, ktory tento CUSTOM OBJECT moze zachytit pomocou EVENT Worker.message.
   !!! B. EVENT WorkerGlobalScope.message zachytava vo WORKER THREAD CUSTOM OBJECTS zaslane z MAIN THREAD pomocou METHOD Worker.postMessage(). EVENT OBJECT typu MessageEvent obsahuje PROPERTY MessageEvent.data v ktorej je ulozeny CUSTOM OBJECT zaslany z METHOD Worker.postMessage(). PROPERTY MessageEvent.origin je URL odkial bola MESSAGE odoslana. PROPERTY MessageEvent.source obsahuje Worker OBJECT, ktory MESSAGE ODOSLAL.
   C. METHOD WorkerGlobalScope.terminate() ukoncuje WORKER THREAD.
   D. METHOD WorkerGlobalScope.importScripts() umoznuje importovat .JS FILES do WORKER THREAD.
!!!!! 16. Standardne WEB WORKER vykona NAJPRV CELY KOD v .JS FILE a AZ NASLEDNE zachytava EVENTS cez EVENT WorkerGlobalScope.message a spracova ich. Ak teda chcem vytvorit WORKER THREAD, ktory by spustil svoju CINNOST AZ po obdrzani DAT (CUSTOM OBJECT z MAIN THREAD) je NUTNE zaregistrovat EVENT EVENT WorkerGlobalScope.message a AZ pri prichode dat spustit vypocet. Ten potom bude bezat vo WORKER THREAD.
!!!!! 17. IE WEB WORKER NEPODPORUJE.
18. HTML 5 definuje TYPED ARRAYS co su ARRAYS, ktore mozu obsahovat IBA NUMERIC HODNOTY a su specialne optimalizovane na vykon. Platia pre nich nasledujuce fakty.
   A. TYPED ARRAYS sa vytvaraju pomocou CONSTRUCTORS Int8Array(), Uint8Array(), Int16Array(), Uint16Array(), Int32Array(), Uint32Array(), Float32Array() a Float64Array().
   B. TYPED ARRAYS maju FIXED LENGTH, ktora sa zadava ako PARAMETER ich CONSTRUCTORS.
   C. TYPED ARRAYS su inicializovane na hodnotu 0.
   D. TYPED ARRAYS DEDIA z OBJECT ArrayBuffer, ktory predstavuje BYTE BUFFER.
   E. PROPERTY 'length' vracia dlzku TYPED ARRAY.
   F. METHOD set() umoznuje nastavit 1-N PROPERTIES TYPED ARRAY.
   G. METHOD get() umoznuje ziskat hodnoty 1-N PROPERTIES TYPED ARRAY.
   H. METHOD subaray() umoznuje ziskat SUBARRAY daneho TYPED ARRAY.
   I. PROPERTY ArrayBuffer.buffer vracia RAW BYTE BUFFER z PARENT ArrayBuffer OBJECT.
   J. PROPERTY ArrayBuffer.byteOffset vracia poziciu daneho TYPED ARRAY v ArrayBuffer OBJECT. Ma NOT 0 hodnotu napriklad pri vrateni TYPED ARRAY METHOD subaray().
   K. PROPERTY ArrayBuffer.byteLength vracia velkost RAW BYTE BUFFER v BYTES.
   K. CONSTRUCTOR DataView vracia DataView OBJECT, ktory robi WRAPPER nad TYPED ARRAY a umoznuje pomcou METHODS DataView.get() a DataView.set() citat a nastavovat hodnoty TYPED ARRAY pre odlisne ENDIANS.
!!! 19. BLOBS v JavaScripte su OPAQUE data pre ktore je mozne ziskat ich VELKOST, ROZDELIT ICH na MENSIE BLOBS a ziskat ich MIME TYPE. WEB BROWSER moze BLOBS ulozit do MEMORY, alebo na DISK.
20. OBJECT Blob ma nasledujuce MEMBERS.
   A. PROPERTY Blob.size vracia VELKOST BLOBU.
   B. PROPERTY Blob.type vracia MIME TYP BLOBU.
   C. METHOD Blob.slice() vracia NOVY Blob OBJECT, ktory obsahuje BYTES <1. PARAMETER,2. PARAMETER) z POVODNEHO Blob OBJECT a ma TYPE urceny 3. PARAMETROM.
!!! 21. HTML ELEMENT <input type="file"> ma PROPERTY 'files' typu FileList. OBJECT FileList obsahuje OBJECTS typu File. OBJECT typu File je BLOB (OBJECT typu Blob), ktory ma PROPERTIES 'name' a 'lastModifiedDate'.
!!! 22. OBJECT FileList ma nasledujuce MEMBERS.
   A. METHOD FileList.item() vracia File OBJECT pre dany INDEX.
   B. PROPERTY FileList.length vracia pocet File OBJECTS vo FileList.
!!! 23. OBJECT File ma nasledujuce MEMBERS.
   A. PROPERTY File.size vracia VELKOST FILE.
   B. PROPERTY File.name vracia NAZOV FILE.
   C. PROPERTY File.getAsBinary() vracia FILE ako BINARY DATA.
   D. PROPERTY File.getAsText() vracia FILE ako STRING DATA.
   E. PROPERTY File.getAsDataURL() vracia FILE ako URL.
24. OBJECT BlobBuilder sluzi na vytvaranie Blob OBJECTS. Ma nasledujuce MEMBERS.
   A. METHOD BlobBuilder.append() umoznuje zlucit viacero STRING, Blob, alebo ArrayBuffer OBJECTS do jedneho Blob OBJECT. Spravidla sa vyuziva na zlucene Blob OBJECTS vytvorenych pomocou METHOD Blob.slice().
   B. METHOD BlobBuilder.getBlob() vracia Blob OBJECT, ktory OBJECT BlobBuilder vytvoril.
!!!!! 25. OBJECT BlobBuilder je DEPRECATED. Namiesto neho je treba pouzivat Blob CONSTURCTOR.
!!! 26. METHOD URL.createObjectURL() umoznuje vytvorit URL z BLOB OBJECT. Vytvorene URL je napriklad mozne pouzit v <img> HTML ELEMENT na zobrazenie OBRAZKU, ak Blob obsahuje OBRAZOK. Vdaka tomu je napriklad mozne, aby OBRAZOK, ktory vlozi USER pomocou <input type="file"> sa zobrazil v <img> HTML ELEMENT. BLOB URL je platne iba pokial je platna WEB PAGE. Pri navigacii na INU WEB PAGE STRATI PLATNOST.
!!! 27. METHOD URL.revokeObjectULR() ZRUSI platnost URL vytvorenej pomocou URL.createObjectURL(). Je to DOLEZITE kvoli PAMATI, aby sa Blob OBJECT, ktory uz nie je potrebny, ale na ktory este odkazuje URL sa mohol ODSTRANIT v GARBAGE COLLECTOR. Ak by sa URL.revokeObjectULR() NEZAVOLALA, tak sa Blob OBJECT odstrani az pri navigovani na inu WEB PAGE.
!!!!! 28. Ak BROWSER vyvori z Blob OBJECT URL, tak sa chova ako WEB SERVER, kde pri pristupe k tejto URL vracia HTTP RESPONSE na HTTP GET REQUEST, vratane HTTP ERROR CODES. Vdaka tomu je z URL generovanymi pomocou URL.createObjectURL() moze pracovat akokeby boli na skutocnom WEB SERVERI.
29. OBJECT FileReader umoznuje citat Blob OBJECTS. Ma nasledujuce MEMBERS.
   A. METHOD FileReader.readAsArrayBuffer() ASYNCHRONNE cita Blob OBJECT (1. PARAMETER) ako ArrayBuffer.
   B. METHOD FileReader.readAsBinaryString() ASYNCHRONNE cita Blob OBJECT (1. PARAMETER) ako BINARY STRING.
   C. METHOD FileReader.readAsText() ASYNCHRONNE cita Blob OBJECT (1. PARAMETER) ako STRING.
   D. METHOD FileReader.readAsDataURL() pre Blob OBJECT (1. PARAMETER) ASYNCHRONNE vytvori URL na ktory sa je mozne odkazovat v HTML ELEMENTS.
   E. METHOD FileReader.abort() ASYNCHRONNE vykona ABORT AKTUALNEJ READ OPERACIE.
   F. PROPERTY FileReader.readyState obsahuje STATE v ktorom sa FileReader OBJECT nachadza.
   G. PROPERTY FileReader.result obsahuje NACITANY Blob OBJECT a to bud ako STRING, alebo ako ArrayBuffer OBJECT.
   H. PROPERTY FileReader.error obsahuje ERROR, ktory nastal pri READ OPERATION.
   I. EVENT FileReader.onloadstart je volany pri spusteni nacitavania Blob OBJECT.
   J. EVENT FileReader.onprogress je pravidelne volany pri citani Blob OBJECT.
   K. EVENT FileReader.onload je volany po USPESNOM nacitani Blob OBJECT.
   L. EVENT FileReader.onabort je volany po vykonani ABORT READ OPERATION pomocou METHOD FileReader.abort().
   M. EVENT FileReader.onerror je volany pri vyskyte ERROR pocas READ OPERATION.
   N. EVENT FileReader.onloadend je volany na KONCI READ OPERATION BEZ OHLADU na to ci skoncila USPESNE, alebo NEUSPESNE.
30. OBJECT FileReaderSync je ANALOGIOU FileReader, ale jeho METHODS su SYNCHRONNE.
31. WEB SOCKET je PROTOCOL, ktory umoznuje aby WEB BROWSER nadviazal BIDIRECTIONAL SOCKET CONNECTION s WEB SERVER, ktory WEB SOCKETS podporuje.
32. WEB SOCKETS su realizovane pomocou OBJECT WebSocket, ktory ma nasledujuce MEMBERS.
   A. CONSTRUCTOR ako parameter prebera URL na HOST podporujuci 'ws', alebo 'wss' PROTOCOLS.
   B. METHOD WebSocket.send() odosiela STRING, ArrayBuffer OBJECT, alebo Blob OBJECT na WEB SERVER.
   C. METHOD WebSocket.close() uzatvara WEB SOCKET spojenie.
   D. EVENT WebSocket.onerror je volany pri ERROR na WEB SOCKET.
   !!! E. EVENT WebSocket.onmessage je volany ak z WEB SERVER pride NOVY MESSAGE. Ako EVENT OBJECT ma MessageEvent OBJECT, ktory ma PROPERTY 'data' obsahujuci STRING, ArrayBuffer OBJECT, alebo Blob OBJECT zaslany z WEB SERVER.
   !!! F. EVENT WebSocket.onclose je volany pri ukonceni WEB SOCKET. Ako EVENT OBJECT ma CloseEvent OBJECT, ktory ma PROPERTY 'code' obsahujuci CLOSE CODE, PROPERTY 'reason' obsahujuci STRING popisujuci dovod CLOSE a 'wasClean' indikujuci ci WEB SOCKET bol korektne CLOSED.
33. Filesystem API je API na pristup k SANDBOX FILE SYSTEM na klientskom PC. Momentalne je implementovany iba v Google Chrome.
34. IndexedDB je OBJECT-ORIENTED CLIENT-SIDE DB, umoznujuca ukladat OBJECTS do CLIENT-SIDE DB. Pre IndexedDB platia nasledujuce zasady.
   A. DATABASE je COLLECTION KEY-VALUES, kde VALUE je CLONABLE JavaScript OBJECT.
   B. Ako KEY je mozne dat TYPE, ktory je SORTABLE, ako napriklad NUMBERS ci STRINGS.
   C. Nad PROPERTIES vlozenych VALUES je mozne definovat INDEXES podla ktorych je mozne vykonavat SORTING a SEARCH.
   D. IndexedDB PODPORUJU TRANSACTIONS.
//-------------------------------------------------------------------------------------------------------