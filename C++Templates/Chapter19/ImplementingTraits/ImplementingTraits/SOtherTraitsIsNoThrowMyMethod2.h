//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "STypeFunctionBoolConstant.h"
#include "SVoidType.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! PRIMARY TEMPLATE CLASS.
template<typename TType, typename=SVoidType<>>
struct SOtherTraitsIsNoThrowMyMethod2 : public TypeFunctionFalseType
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS SPECIALIZATION, ktora moze byt odstranena na zaklade principu SFINAE.
// !!!!! Na urcenie ci dany CODE moze, alebo nemoze hodit EXCEPTION sa pouziva OPERATOR [noexcept()].
// !!!!! V pripade, ze TYPE [TType] NEMA METHOD [void MyMethod(void)], je TEMPLATE CLASS SPECIALIZATION oodstranena pomocou principu SFINAE.
template<typename TType>
struct SOtherTraitsIsNoThrowMyMethod2<TType,SVoidType<decltype((TType(std::declval<TType>())).MyMethod())>> : public STypeFunctionBoolConstant<noexcept((TType(std::declval<TType>())).MyMethod())>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------