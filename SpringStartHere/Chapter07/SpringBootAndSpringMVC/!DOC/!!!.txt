//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie SPRING BOOT a SPRING MVC.
2. WEB APPLICATION je kazdy PROGRAM, ku ktoremu sa pristupuje cez WEB BROWSER.
3. WEB APPLICATION sa deli na nasledujuce casti.
   A. CLIENT SIDE (FRONTEND) bez na WEB BROWSERS a vykonava interakciu s USER, zasiela REQUESTS na SERVER SIDE a spracovava a zobrazuje RESPONSES zo SERVER SIDE.
   B. SERVER SIDE (BACKEND) bezi na SERVERS a prijima z CLIENT SIDE REQUESTS, ktore spracovava. Vysledok spracovania vracia vo forme RESPONSES na CLIENT SIDE. SERVER SIDE casto pristupuje k DATABASE.
4. Pre SERVER SIDE WEB APPLICATIONS je typicke, ze prijimaju paralelne viacero REQUESTS z viacerych WEB BROWSERS, ktore musia paralelne spracovavat. Spracovanie kazdeho REQUEST by malo byt nazavisla na inych REQUESTS.
5. WEB APPLICATIONS na zaklade toho, ako su implementovane sa rozdeluju do nasledujucich kategorii.
   A. WEB APPLICATIONS, ktorych BACKEND vracia RESPONSES obsahujuce HTML/CSS/JavaScript. Tieto RESPONSES su priamo zaslane do WEB BROWSER, ktory ich dalej nijako nespracuva, iba ich zobrazi.
   B. WEB APPLICATIONS, ktorych BACKEND vracia RESPONSES vo formate JSON/XML. Tieto RESPONSES BWEB BROWSER nedokaze priamo zobrazit a vo WEB BROWSER musi bezat CLIENT SIDE APPLICATION, ktora tieto data dokaze transformovat na HTML/CSS/JavaScript, ktore uz moze WEB BROWSER zobrazit.
6. WEB BROWSERS komunikuju s WEB APPLICATIONS pomocou PROTOCOL HTTP. Tento PROTOCOL vsak nie je nutne manualne implementovat, pretoze JAVA poskytuje viacere implementacie WEB SERVERS.
!!! 7. Implementacia WEB SERVER v JAVE sa nazyva SERVLET CONTAINER. SERVLET CONTAINER vykonava nasledujuce cinnosti.
   A. SERVLET CONTAINER vytvori SERVER SOCKET, ktorym prijma TCP CLIENT SOCKETS, po ktorych WEB BROWSER zasielaju svoje REQUESTS v HTTP PROTOCOL.
   B. SERVLET CONTAINER po prijati novej HTTP REQUEST identifikuje PATH, ktory bol v HTTP REQUEST zaslany.
   !!! C. SERVLET CONTAINER pre dany PATH najde instanciu SERVLET OBJECT, ktora ma dany HTTP REQUEST spracovat. SERVLET OBJECT je JAVA OBJECT.
   D. SERVLET CONTAINER zavola METHOD SERVLET OBJECT, ktorej zasle JAVA OBJECT reprezentujuci HTTP REQUEST a JAVA OBJECT reprezentujuci HTTP RESPONSE. Do JAVA OBJECT reprezentujuci HTTP RESPONSE zapisuje SERVLET OBJECT generovany HTTP RESPONSE.
   E. SERVLET CONTAINER pocka na skoncenie METHOD SERVLET OBJECT a JAVA OBJECT reprezentujuci HTTP RESPONSE pouzije na vytvorenie HTTP RESPONSE, ktora je odoslana spat na WEB BROWSER.
8. JAVA implementuje viacero SERVLET CONTAINER (WEB SERVERS). Najpouzivanejsi je TOMCAT.
!!! 9. Bez pouzitia SPRING FRAMEWORK sa v JAVE vykonava implementacia WEB APPLICATIONS nasledujucim sposobom.
   A. Pre kazdu PATH, na ktoru ma WEB APPLICATION reagovat sa definuje SERVLET OBJECT. SERVLET OBJECT je JAVA OBJECT, ktory implementuje INTERFACE [javax.servlet.Servlet].
   B. Pre kazdu PATH, na ktoru ma WEB APPLICATION reagovat sa zaregistruje vytvoreny SERVLET OBJECT v SERVLET CONTAINER.
   C. SERVLET CONTAINER pri prichode HTTP REQUEST zisti pre ktoru PATH je urceny a zavola METHOD prislusneho SERVLET OBJECT.
   !!!!! D. Nevyhodou implementacie WEB APPLICATIONS priamom implementaciou SERVLET OBJECT je, ze je nutne manualne implementovat SERVLET OBJECTS a implementovat ich INTERFACE [javax.servlet.Servlet].
10. SPRING FRAMEWORK poskytuje zjednoduseny model implementacie WEB APPLICATIONS.
   A. SPRING FRAMEWORK implementuje SERVLET OBJECT, ktory automaticky zaregistruje v SERVLET CONTAINER pre VSETKY PATHS danej WEB APPLICATION.
   B. Pri prichode HTTP REQUEST je VZDY volana METHOD SERVLET OBJECT, ktoru implementuje SPRING FRAMEWORK.
   !!! C. Vyhodou pouzitia SERVLET OBJECT implementovaneho SPRING FRAMEWORK je ta, ze nie je nutne manualne implementovat SERVLET OBJECTS, ale staci implementovat iba BUSINESS LOGIC WEB APPLICATION.
11. Vytvorenie WEB APPLICATION pomocou SPRING FRAMEWORK vyzaduje vykonanie nasledujucich krokov.
   A. Konfiguraciu SERVLET CONTAINER.
   B. Vytvorenie instancie SERVLET OBJECT.
   C. Konfiguraciu SERVLET OBJECT, aby bol sprave zaregistrovany v SERVLET CONTAINER.
!!! 12. Konfiguracia SERVLET CONTAINER a SERVLET OBJECT ja KOMPLIKOVANA. SPRING FRAMEWORK definuje SPRING BOOT PROJECT, ktory tuto konfiguraciu vyrazne zjednodusuje.
13. SPRING BOOT poskytuje nasledujuce funkcionality.
   A. Zjednodusene vytvaranie PROJECTS pomocou, ktore je mozne vytvorit plne nakonfigurovanu EMPTY WEB APPLICATION.
   B. SPRING BOOT definuje DEPENDENCY STARTERS pomocou, ktorych je mozne definovat DEPENDENCIES daneho PROJECT, vratane spravnych verzii DEPENDENCIES.
   C. Autokonfiguraciu DEPENDENCIES, ktora vytvori DEFAULT CONFIGURATIONS pre DEPENDENCIES, ktore boli do daneho PROJECT pridane.
14. SPRING BOOT PROJECT je mozne vytvorit nasledujucimi sposobmi.
   A. Priamo z IDE, ak IDE vytvaranie SPRING BOOT PROJECTS podporuje.
   B. Vygenerovanim PROJECT na WEB PAGE [start.spring.io].
15. Vygenerovanie SPRING BOOT PROJECT pomocou WEB PAGE [start.spring.io] sa vykonava v nasledujucich krokoch.
   A. Vo WEB BROWSER sa otvori WEB PAGE [start.spring.io].
   B. Nastavi sa BUILDING TOOL. Standardne sa pouziva MAVEN.
   C. Nastavi sa PROGRAMMING LANGUAGE. Standardne sa pouziva JAVA.
   D. Nastavi sa verzia SPRING BOOT.
   E. Nastavi sa PROJECT PROPERTIES ako GROUP, ARTIFACT a NAME.
   F. Nastavi sa PACKAGING. Standardne sa pouziva JAR.
   G. Nastavi sa verzia JAVY.
   H. Pridaju sa DEPENDENCIES. Pre WEB APPLICATIONS je potrebne pridat DEPENDENCY [SPRING WEB].
   I. Nasledne sa vygeneruje PROJECT, ktory je mozne ulozit ako .ZIP FILE.
16. Vygenerovany SPRING BOOT PROJECT sa importu je ECLIPSE nasledujucim sposobom.
   A. Stiahnuty PROJECT z .ZIP tvare je potrebne rozbalit a nakopirovat do DIRECTORY v ECLIPSE WORKSPACE.
   B. Pomocou COMMAD [File -> Import... -> Maven -> Existing Maven Projects].
   C. Teraz je PROJECT mozne spustit.
17. SPRING BOOT PROJECT obsahuje nasledujuce casti.
   A. Vygenerovany CLASS s METHOD [void main(String[] args)]. Tento CLASS je oznaceny pomocou ANNOTATION [@SpringBootApplication] a METHOD [void main(String[] args)] vola METHOD [ConfigurableApplicationContext SpringApplication.run(Class<?> PrimarySource, String... Args)], ktora spusta SERVLET CONTAINER (WEB SERVER).
   B. Vo FILE [pom.xml] je v XML ELEMENT [<parent>...</parent>] pridana REFERENCE na ARTIFACT [spring-boot-starter-parent]. VERSION je nastavena AUTOMATICKY, tak aby bola kompatibilna s VERSION MAVEN a JAVA.
   C. Vo FILE [pom.xml] je v XML ELEMENT [<build><plugins><plugin>...</build></plugins></plugin>] pridana REFERENCE na ARTIFACT [spring-boot-maven-plugin]. Tento PLUGIN je zodpovedny za pridavanie DEFAULT CONFIGURATIONS do PROJECT.
   D. Vo FILE [pom.xml] je v XML ELEMENT [<dependencies><dependency>...</dependencies></dependency>] pridana REFERENCE na ARTIFACT [spring-boot-starter-web]. Tento ARTIFACT je zodpovedny za beh WEB APPLICATION a beh SERVLET CONTAINER.
   E. Vygenerovany FILE [application.properties], ktory obsahuje CUSTOM CONFIGURATIONS.
18. Na zjednodusenie pridavania DEPENDENCIES do SPRING BOOT PROJECT pouziva SPRING BOOT koncept DEPENDENCY STARTERS. Pre DEPENDENCY STARTERS platia nasledujuce fakty.
   A. Bez pouzitia DEPENDENCY STARTERS je nutne kazdu DEPENDENCY, vratane jej VERSION konfigurovat osobitne. Kedze WEB APPLICATION ma desiatky DEPENDENCIES, kde iba niektore VERSIONS su COMPATIBLE, je manualna konfiguracia tychto DEPENDENCIES pracna a zlozita.
   B. DEPENDENCY STARTERS umoznuju namiesto konfiguracie jednotlivych DEPENDENCIES konfigurovat celu CAPABILITY. Ak napriklad PROGRAM je WEB APPLICATION, tak DEPENDENCY STARTER [spring-boot-starter-web] umoznuje nakonfigurovat vsetky DEPENDENCIES, ktore WEB APPLICATION potrebuje.
   !!! C. DEPENDENCY STARTERS su vytvorene tak, ze vzdy pridavaju vzajomne kompatibilne DEPENDENCIES. To znamena, ze pridavaju take VERSIONS jednotlivych DEPENDENCIES, ktore su vzajomne COMPTABILE. Tym padom nie je nutne zistovat ci su jednotlive DEPENDENCIES COMPATIBLE, lebo to robi DEPENDENCY STARTER.
   !!! D. DEPENDENCY STARTERS su implementovane ako DEPENDENCES. Pridanim DEPENDENCY typu DEPENDENCY STARTER do PROJECT su do PROJECT automaticky pridane vsetky DEPENDENCIES, ktore dany DEPENDENCY STARTER definuje, aj s korektnymi VERSIONS.
19. SPRING BOOT pouziva mechanizmus CONVENTION OVER CONFIGURATION.
   A. CONVENTION OVER CONFIGURATION znamena, ze SPRING BOOT na zaklade toho ake CAPABILITIES boli do SPRING BOOT PROJECT pridane, vytvori DEFAULT CONFIGURATIONS, aby bolo mozne PROJECT na zaklade najbeznejsich CONVENTIONS spusit.
   B. CONVENTION OVER CONFIGURATION ulahcuje CONFIGURATION SPRING BOOT PROJECTS, pretoze automaticky vytvori DEFAULT CONFIGURATIONS, kde su najbeznejsie pouzivane. Tieto CONFIGURATIONS je vsak mozne manualne zmenit.
20. SPRING BOOT PROJECT BY-DEFAULT otvara TCP SERVER SOCKET na PORTE [8080].
21. WEB APPLICATION vytvorena pomocou SPRING BOOT PROJECT pouziva MODEL-VIEW-CONTROLLER PATTERN pri vytvarani WEB APPLICATIONS. Na vytvorenie STATICKEJ WEB PAGE, ktora len zobrazuje staticky CONTENT je potrebne vykonat nasledujuce kroky.
   A. Vytvorit HTML FILE, ktory obsahuje STATIC CONTENT.
   B. Vytvorit CONTROLLER CLASS, ktora vraci HTML FILE pre danu PATH.
22. Vyvorenie STATIC HTML FILE sa vykonava nasledujucim sposobom.
   A. Vytvori sa .HTML FILE s NAME 'NAME.html', ktory obsahuje lubovolny STATIC CONTENT.
   B. Vytvoreny .HTML FILE 'NAME.html' musi byt BY-DEFAULT ulozeny v DIRECTORY [resources/static].
23. Vytvorenie CONTROLLER CLASS sa vykonava nasledujucim sposobom.
   A. Definuje sa PUBLIC CLASS.
   !!! B. Na CLASS sa aplikuje STEREOTYPE ANNOTATION [@Controller]. Tato ANNOTATION oznaci CLASS ako CONTROLLER, a zaroven ako BEAN OBJECT. ANNOTATION [@Controller] je podobna ako ANNOTATION [@Component] na oznacenie BEAN OBJECT, avsak explicitne oznacuje dany BEAN OBJECT ako CONTROLLER.
   !!! C. Definuje sa ACTION METHOD. ACTION METHODS mozu mat rozlicne PROTOTYPES. Najjednoduchsim PROTOTYPE je METHOD BEZ PARAMETERS, ktora vracia STRING. STRING reprezentuje nazov HTML FILE, ktory bude vrateny v HTTP RESPONSE.
   !!! D. ACTION METHOD sa oznaci pomocou ANNOTATION [@RequestMapping(URL)], ktora ma ako PARAMETER URL PATH pre ktoru sa ma dany CONTROLLER vyvolat.
   E. ACTION METHOD vrati ako STRING 'NAME.html' co je nazov HTML FILE, ktory sa ma vrati ako RESPONSE.
   F. Po spusteni WEB APPLICATION je po dotaze na URL zadanom v ANNOTATION [@RequestMapping(URL)] s DEFAULT PORT [8080] vrateny HTML FILE 'NAME.html'.
24. Interne SPRING BOOT WEB APPLICATION spracovava HTTP REQUEST v nasledujucich krokoch.
   A. HTTP CLIENT zasle HTTP REQUEST.
   B. HTTP REQUEST je zachyteny TOMCAT SERVLET CONTAINER. TOMCAT SERVLET CONTAINER zasle HTTP REQUEST na spracovanie do DISPATCHER SERVLET.
   C. DISPATCHER SERVLET je SERVLET OBJECT implementovany SPRING FRAMEWORK. Je zodpoveny za spracovanie HTTP REQUEST a vytvorenie HTTP RESPONSE. DISPATCHER SERVLET je volany pre vsetky URL PATH danej WEB APPLICATION.
   !!! D. DISPATCHER SERVLET pomocou COMPONENT HANDLER MAPPING vyhlada CONTROLLER a ACTION METHOD, ktora ma dany HTTP REQUEST spracovat. Vyhladavanie sa robi na zaklade URL PATH a na zaklade HTTP VERB.
   !!! E. Ak DISPATCHER SERVLET pomocou HANDLER MAPPING najde CONTROLLER a ACTION METHOD, tak ju spusti. Ak CONTROLLER a ACTION METHOD nie su najdene, tak DISPATCHER SERVLET vrati HTTP RESPONSE obsahujuci HTTP CODE 404, ze HTTP RESOURCE nebol najdeny.
   F. ACTION METHOD daneho CONTROLLER spracuje HTTP REQUEST vratenim VIEW a VIEW DATA. VIEW je spravidla HTTP PAGE a VIEW DATA su lubovolne DATA, ktore maju byt do VIEW vlozene.
   !!! G. Po skonceni ACTION METHOD DISPATCHER SERVLET nacita VIEW z DISKU (ak sa jedna o HTTP FILE) a pomocou COMPONENT VIEW RESOLVER spoji obsah VIEW s VIEW DATA pomcou VIEW RENDERING. VIEW pomocou MARKUP LANGUAGE obsahuje pozicie, na ktore sa maju dane VIEW DATA vlozit a VIEW RESOLVER toto spojenie vykona.
   H. Ked DISPATCHER SERVLET vykona VIEW RENDERING, vrati pripraveny VIEW do TOMCAT SERVLET CONTAINER.
   I. TOMCAT SERVLET CONTAINER z VIEW vytvori HTTP RESPONSE, ktory je vrateny na HTTP CLIENT.
//----------------------------------------------------------------------------------------------------------------------