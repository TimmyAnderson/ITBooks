//------------------------------------------------------------------------------
1. Program demonstruje pouzitie operacie Interlocked.Exchange() na implementaciu CS LOCK.
2. Operacia Interlocked.Exchange() ATOMICKY realizuje zapis hodnoty do pametovej lokacie a navrat POVODNEJ HODNOTY, ktora v danej pametovej lokacii bola pred zapisom.
3. Operacia Interlocked.Exchange() ma viacero pretazeni, vratane GENERICS pre parameter T, ktory MUSI BYT 'class' - nesmie byt 'struct', pretoze tie sa prenasaju hodnotou a ich dlzka moze byt lubovolna - dlhsia ako 32/64 bits, ktorych atomickost zarucuje CPU.
!!!!! 4. Aj ked to nie je nevyhnutne, je VEELMI VHODNE aby pametova lokacia nad ktorou pracuje Operacia Interlocked.Exchange() bola oznacena ako VOLATILE - aby sa tak predislo optimailzaciam kompilatora, ktore by mohli viest k reorderingu operacii co moze viest k naruseniu atomicity operacii.
!!! 5. Kompilator ale i samotny CPU pre potreby optimalizacie moze za istych okolnosti realizovat REORDERING INSTRUKCII. To znaci, ze sa instrukcie vykonavaju v INOM PORADI ako si zapisane v ZDROJOVOM KODE. K REORDERINGU dochadza iba za istych okolnosti kedy nie je mozne narusit beh SEKVENCNEHO PROGRAMU. AVSAK REORDEDING moze narusit BEH MULTITRHEADOVEHO PROGRAMU. Riesenim na zaberanenie REORDERING je pouzitie CS.
!!!!! 6. Podla typu CPU su niektore operacie ATOMICKE. V 32 bitovych architekturach su 32 bitove operacie a v 64 bitobyvh architekturach su to 64 bitove operacie citania a zapisu do pameti. Tieto operacie ALE IBA AK su adresy zarovnane na 32 resp. 64 bitoch SU ATMOICKE. Ak toto zarovnanie nie je aplikovane, tak NIE SU OPERACIE ATOMICKE.
//------------------------------------------------------------------------------