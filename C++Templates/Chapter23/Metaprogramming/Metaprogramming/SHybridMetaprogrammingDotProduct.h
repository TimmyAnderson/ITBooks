//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! CLASS demonstruje implementaciu HYBRID METAPROGRAMMING, kde v COMPILE TIME je generovany CODE ma efekt v RUN TIME.
// !!!!! PRIMARY TEMPLATE CLASS pre RECURSIVE CASE.
template<typename TType, size_t SIZE>
struct SHybridMetaprogrammingDotProduct final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static inline TType CalculateResult(const TType* Array1, const TType* Array2)
		{
			TType												Result=(((*Array1)*(*Array2))+SHybridMetaprogrammingDotProduct<TType,SIZE-1>::CalculateResult(Array1+1,Array2+1));

			return(Result);
		}
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS SPECIALIZATION pre FINAL CASE.
template<typename TType>
struct SHybridMetaprogrammingDotProduct<TType,0> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static inline TType CalculateResult(const TType*, const TType*)
		{
			TType												Result{};

			return(Result);
		}
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------