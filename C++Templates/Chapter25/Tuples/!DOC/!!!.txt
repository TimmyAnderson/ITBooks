//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu TUPLES v C++.
2. TUPLES su TYPES, ktore ukladaju FIELDS rozlicnych TYPES. Pristup k FIELDS vsak nie je pomocou ich NAMES, ale pomocou ich INDEXES. To umoznuje jednoduchu pracu s TUPLES v METAPROGRAMMING.
3. C++ STANDARD LIBRARY obsahuje CLASS [template<typename... TYPES> tuple] ako implementaciu TUPLE.
4. TUPLE uklada do FIELDS nasledujuce VALUES.
   A. FIELD HEAD obsahuje 1. ELEMENT danej TUPLE.
   B. FIELD TAIL obsahuje instanciu TUPLE, ktora obsahuje vsetky ostatne ELEMENTS danej TUPLE.
5. K VALUES v TUPLE sa pristupuje pomocou METHOD GET, ktora v NON-TYPE TEMPLATE PARAMETER obsahuje INDEX VALUE, ktora ma byt vratena. METHOD vola rekurzivne samu seba az kym INDEX neklesne na 0, kedy vrati HEAD.
!!! 6. Kedze C++ NEUMOZNUJE PARTIAL TEMPLATE FUNCTION SPECIALIZATIONS, pre implementaciu mnohych TUPLE ALGORITM je nutne pouzit WORKAROUND s pouzitim TEMPLATE CLASS SPECIALIZATIONS.
7. ALGORITHMS nad TUPLES vyzaduju COMPILE TIME COMPUTATION aj RUN TIME COMPUTATION. Napriklad ALGORITHM REVERSE meni TYPE a je ho mozne vykonat v COMPILE TIME. No ine ALGORITHMS je nutne vykonat v RUN TIME.
8. INDEX LISTS su LISTS, ktore obsahuju INDEXES. INDEX LISTS je mozne vyuzit pri implementacii TUPLE ALGHORITHMS, kedze TUPLES maju svoje ELEMENTS indexovane a pristupuje sa k nim pomocou INDEXES.
9. TUPLES je mozne optimalizovat vyuzitim EMPTY BASE CLASS OPTIMIZATION. TUPLE je v takom pripade implementovana nasledovne.
   A. TUPLE nema TAIL ulozeny v specialnom FIELD, ale TUPLE je DERIVED z TUPLE, ktory ma ako TYPE PARAMETERS TYPES v TAIL. Vdaka ulozeniu TAIL do TEMPLATE BASE CLASS moze COMPILER aplikovat EMPTY BASE CLASS OPTIMIZATION.
   !!!!! B. Ak je TAIL ako TUPLE BASE CLASS, potom je poradie inicializacie TUPLE ELEMENTS v CONSTRUCTORS OBRATENE. To je mozne riesit tym, ze aj TUPLE HEAD bude ulozeny v BASE CLASS, ktory sa nachadza pred TUPLE BASE CLASS. V takom priprade je inicializacia TUPLE ELEMENTS rovnaka.
   !!! C. BASE TYPE, ktory sluzi na ulozenie TUPLE HEAD musi mat ako NON-TYPE TEMPLATE PARAMETER unikatny IDENTIFIER, aby bolo mozne do TUPLE ukladat aj viacero FIELDS rovnakeho TYPE. Inak by doslo k ABMIGUITY.
!!! 10. Ak su TUPLE ELEMENTS ulozene v podobe BASE CLASS, ktora ma ako NON-TYPE TEMPLATE PARAMETER unikatny IDENTIFIER zodpovedajuci INDEXU daneho TUPLE ELEMENT v TUPLE, tak je ziskanie takehoto TUPLE ELEMENT mozne ziskat iba C++ CONVERSION z TUPLE SPECIALIZATION na TUPLE BASE TYPE [TUPLE_ELEMENT<IDENTIFIER,TYPE>]. Tento CODE C++ dokaze vykonat v CONSTANT TIME bez nutnosti rekurzivneho prechadzania TUPLE ELEMENTS. C++ pri tejto CONVERSION je schopna vratit ten TUPLE ELEMENT, ktory zodpoveda danemu IDENTIFIER.
//----------------------------------------------------------------------------------------------------------------------