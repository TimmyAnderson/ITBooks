using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//-------------------------------------------------------------------------------------------------------
namespace PEVerifierUnsafe
{
//-------------------------------------------------------------------------------------------------------
	// !!!!! UMYSELNE EMULUJEM CHYBY, aby ich PEVERIFY.EXE dokazal odhalit.
	public unsafe abstract class CMyClass : IMyInterface
	{
//-------------------------------------------------------------------------------------------------------
		private int												MStaticFieldInt;
//-------------------------------------------------------------------------------------------------------
		private int												MFieldInt;
		private int*											MPointerFieldInt;
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public CMyClass()
		{
			// VERIFIER.EXE hodi ERROR [0x8013185D - Expected numeric type on the stack.].
			fixed(int* Pointer=&MFieldInt)
			{
				MPointerFieldInt=Pointer;
			}
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public void*											VoidPointerProperty
		{
			get
			{
				// VERIFIER.EXE hodi ERROR [0x80131854 - Unexpected type on the stack.].
				void*											Pointer=System.Runtime.InteropServices.Marshal.StringToBSTR("").ToPointer();

				// VERIFIER.EXE hodi ERROR [0x801318DE - Unmanaged pointers are not a verifiable type.].
				return(Pointer);
			}
		}
//-------------------------------------------------------------------------------------------------------
		// VERIFIER.EXE hodi ERROR [0x8013185D - Expected numeric type on the stack.].
		public int*												SomeIntPointerProperty1
		{
			get
			{
				int												Param;

				return(&Param);
			}
			set
			{
				// EMPTY.
			}
		}
//-------------------------------------------------------------------------------------------------------
		// VERIFIER.EXE hodi ERROR [0x8013185D - Expected numeric type on the stack.].
		public int*												SomeIntPointerProperty2
		{
			get
			{
				fixed(int* Pointer=&MFieldInt)
				{
					return(Pointer);
				}
			}
			set
			{
				// EMPTY.
			}
		}
//-------------------------------------------------------------------------------------------------------
		// VERIFIER.EXE hodi ERROR [0x8013185D - Expected numeric type on the stack.].
		public int*												SomeIntPointerProperty3
		{
			get
			{
				fixed(int* Pointer=&MStaticFieldInt)
				{
					return(Pointer);
				}
			}
			set
			{
				// EMPTY.
			}
		}
//-------------------------------------------------------------------------------------------------------
		public int												SomeProperty
		{
			get
			{
				return(0);
			}
			set
			{
				// EMPTY.
			}
		}
//-------------------------------------------------------------------------------------------------------
		public sbyte											SomeSByteProperty
		{
			get
			{
				return(0);
			}
			set
			{
				// EMPTY.
			}
		}
//-------------------------------------------------------------------------------------------------------
		public ulong											SomeULongProperty
		{
			get
			{
				return(0);
			}
			set
			{
				// EMPTY.
			}
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		protected abstract void SomeVirtualMethod();
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public void SomeMethod()
		{
			// EMPTY.
		}
//-------------------------------------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------------------------