//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "CString.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
class CStructuredBindingTupleMethods;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<>
class std::tuple_size<CStructuredBindingTupleMethods> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static const size_t										value=3;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<>
class std::tuple_element<0,CStructuredBindingTupleMethods> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													type=CString;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<>
class std::tuple_element<1,CStructuredBindingTupleMethods> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													type=int;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<>
class std::tuple_element<2,CStructuredBindingTupleMethods> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													type=double;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
class CStructuredBindingTupleMethods final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		CString													MValue1;
		int														MValue2;
		double													MValue3;

	public:
		CString& GetValue1(void);
		int& GetValue2(void);
		double& GetValue3(void);

	public:
		template<size_t>
		auto get(void);

	public:
		CStructuredBindingTupleMethods(const CString& Value1, int Value2, double Value3);
		virtual ~CStructuredBindingTupleMethods(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<>
inline auto CStructuredBindingTupleMethods::get<0>(void)
{
	return(MValue1);
}
//----------------------------------------------------------------------------------------------------------------------
template<>
inline auto CStructuredBindingTupleMethods::get<1>(void)
{ 
	return(MValue2);
}
//----------------------------------------------------------------------------------------------------------------------
template<>
inline auto CStructuredBindingTupleMethods::get<2>(void)
{
	return(MValue3);
}
//----------------------------------------------------------------------------------------------------------------------