//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie POINTERS, ARRAYS a STRUCTURES.
2. Adresa ENTITY (premenna, funkcia, objekt) sa zistuje pomocou operatora '&'.
3. Hodnota ENTITY (premenna, funkcia, objekt) na danej adrese sa ziskava pomocou operatora '*'.
4. Pointer na FUNKCIU ma tvar [wstring (*ToUpperVariable)(wstring);].
5. ARRAY sa oznacuje pomocou symbolu [X], kde X je CISELNA KONSTANTA udavajuca velkost pola.
!!! 6. V C++ ARRAYS NEMOZU mat VARIABILNU VELKOST. Ak chcem strukturu s variabilnou velkostou je najlepsie pouzit 'vector<T>'.
7. Ak ma ARRAY v INITIALIZER casti MENEJ ELEMENTOV ako je jeho definovana velkost, ostatne ELEMENTY AK JE ARRAY CISELNY TYP su nastavene na hodnotu 0. Pre NECISELNE TYPY obsahuju NEDEFINOVANU HODNOTU. Ak naopak v INITIALIZER dam VIAC ELEMENTOV ako je definovana velkost pola, je vratena KOMPILACNA CHYBA.
8. Pre STRING LITERALS platia nasledujuce fakty.
   A. STRING LITERALS su KONSTANTNE. Zapisovat do nich je NEODPORUCANE a niektore C++ kompilatory generuju RUN-TIME CHYBU.
   B. STRING LITERALS mozu byt ukladane tak, ze ak 2 LITERALS obsahuju TU ISTU HODNOTU, tak su ulozene iba raz.
   C. STRING LITERALS s prefixom 'L' su TYPU 'wchar_t'.
!!! 9. ARRAY sa IMPLCITNE pri priradeni do POINTER KONVERTUJE na POINTER. Opacna konverzia z POINTER na ARRAY vsak NIE JE MOZNA, pretoze ARRAYS NIE SU LVALUES.
!!!!! 10. POINTER ukazujuci HNED za POSLEDNY ITEM ARRAY je VALIDNY POINTER do ktoreho vsak NIE JE MOZNE ZAPISOVAT, ani z neho CITAT.
11. KEYWORD 'const' urcuje ze dana premenna je KONSTANTNA. Do konstantnej premennej nie je mozne zapisovat a musi byt pri definicii inicializovana.
12. Na POINTERS je takisto mozne pouzit KEYWORD 'const' a to s nasledujucim vyznamom.
   A. Zapisy [const int* Variable] a [int const* Variable] urcuju POINTER na KONSTANTNY INTEGER.
   B. Zapis [int* const Variable] urcuje KONSTANTNY POINTER na INTEGER.
   C. Zapis [const int* const Variable] urcuje KONSTANTNY POINTER na KONSTANTNY INTEGER.
!!! 13. VELMI UZITOCNE na pochopenie vyznamu zapisu je citat zapis RIGHT-TO LEFT. V pripade [const int* Variable] sa da tento zapis citat nasledovne.
   A. '*Variable' - PONTER.
   B. 'const int' - odkazuje na CONST INTEGER.
!!!!! 14. REFERENCE predstavuje ALIAS na EXISTUJUCU PREMENNU. Ak vytvorim REFERENCE na PREMENNU, tak REFERENCE odkazuje na TO ISTE MIESTO v PAMATI ako PREMENNA na ktoru bola REFERENCE VYTVORENA a teda KAZDA ZMENA HODNOTY REFERENCE znamena ZMENU HODNOTY REFEROVANEJ PREMENNEJ.
15. Pre REFERENCES v C++ platia nasledujuce pravidla.
   A. REFERENCE MUSI byt v case svojho VZNIKU INICIALIZOVANA na REFEROVANU PREMENNU.
   !!! B. REFERENCE po vytvoreni a INICIALIZOVANI uz NIE JE MOZNE PREREFERENCOVAT na INU PREMENNU na aku bola REFERENCOVANA v case INICIALIZACIE.
   C. REFERENCE je mozne INICIALIZOVAT IBA NA LVALUE - ENTITU, ktora MA PAMAT.
   !!! D. CONST REFERENCE je mozne INICIALIZOVAT aj na NON-LVALUE OBJEKT ako napriklad KONSTANTA. V tomto pripade prekladac vytvori TEMPORARY PREMENNU (LVALUE), na ktoru REFERUJE REFERENCE.
   !!! E. REFERENCE na POINTER je mozne ziskat pomocou operatora '&'. Vysledkom je POINTER na premennu na ktoru REFERUJE REFERENCE.
   !!! F. POINTER na REFERENCE NIE JE MOZNE VYTVORIT.
   !!! G. ARRAY REFERENCES NIE JE MOZNE VYTVORIT.
   !!!!! H. RETURN VALUE typu REFERENCE musi odkazovat na premennu, ktora EXISTUJE v pamati aj po SKONCENI VOLANIA FUNKCIE, inak dojde k CHYBNEMU PRISTUPU k PAMATI.
   !!!!! I. Ak vo funkcii, ktora ma RETURN VALUE typu REFERENCE vratim hodnotu LOKALNEJ, alebo TEMPORARY PREMENNEJ tak kompilator hodi WARINING. Je to upozornenie, ze pouzitie takehoto kodu moze viest k CHYBNEMU PRISTUPU k PAMATI.
16. Na POINTER typu 'void' je mozne aplikovat nasledujuce operacie.
   A. Lubovolny POINTER je mozne IMPLICITNE konverovat na POINTER typu 'void'.
   B. POINTER typu 'void' je nutne EXPLICITNE konvertovat na POINTER konkretneho typu.
   C. Dva POINTERS typu 'void' je mozne porovnat operatorom '==' a '!='.
   D. POINTER typu 'void' je mozne priradit do ineho POINTER typu 'void'.
!!! 17. POINTER na FUNKCIU NIE JE MOZNE priradit do POINTER typu 'void'.
18. STRUCTURE je mozne definovat pomocou KEYWORD 'struct'.
!!! 19. STRUCTURE je mozne INICIALIZOVAT rovnako ako ARRAY pomocou zapisu '{}'.
//-------------------------------------------------------------------------------------------------------