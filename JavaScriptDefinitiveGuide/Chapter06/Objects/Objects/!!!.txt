//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pracu s OBJECTS v JavaScripte.
!!!!! 2. OBJECT v JavaScripte je reprezentovany ako DICTIONARY, kde KEY je STRING reprezentujuci NAME danej PROPERTY a VALUE je VALUE danej PROPERTY. METHODS su implementovane ako PROPERTIES typu FUNCTION.
!!! 3. OBJECTS v JavaScripte umoznuje DEDIT z ineho OBJECT oznacovaneho ako PROTOTYPE. Takto je v JavaScripte implementovana PROTOTYPE INHERITANCE.
!!! 4. OBJECTS v JavaScripte su DYNAMICKE, teda PROPERTIES je z OBJECT mozne DYNAMICKY PRIDAVAT a ODSTRANOVAT.
   A. PRIDANIE PROPERTY do OBJECT sa vykonava priradenim HODNOTY PROPERTY, ktora v OBJECT este NEEXISTUJE. JavaScript ak zisti, ze taka PROPERTY v OBJECT NEEXISTUJE, tak ju AUTOMATICKY PRIDA.
   B. ODSTRANOVANIE PROPERTY do OBJECT sa vykonava pomocou KEYWORD 'delete'.
!!!!! 5. V JavaScripte VSETKO okrem STRING, NUMBER, 'true', 'false', 'undefined' a 'null' je OBJECT. Teda aj ARRAYS reprezentuju OBJECTS, ktore maju ako PROPERTY NAMES INDEXY svojich ITEMS.
!!! 6. Kazda OBJECT PROPERTY ma okrem NAME a VALUE asociovane i PROPERTY ATTRIBUTES.
   A. WRITABLE urcuje ci PROPERTY je ZAPISOVATELNA.
   B. ENUMERABLE urcuje ci PROPERTY bude ENUMEROVANE v prikaze 'for-in'.
   C. CONFIGURABLE urcuje ci PROPERTY je mozne vymazat pomocou prikazu 'delete' a ci jeho ATTRIBUTES mozu byt ZMENENE.
!!! 7. Okrem PROPERTIES aj OBJECTS mozu mat ATTRIBUTES.
   A. PROTOTYPE obsahuje REFERENCE na BASE OBJECT z ktoreho dany OBJECT DEDI.
   B. CLASS obsahuje STRING definujuci TYPE daneho OBJECT.
   C. EXTENSIBLE urcuje ci do daneho OBJECT je mozne PRIDAVAT NOVE PROPERTIES.
8. JavaScript kategorizuje OBJECTS do nasledujucich kategorii.
   A. NATIVE OBJECTS su OBJECTS definovane ECMA STANDARDOM.
   B. HOST OBJECTS su OBJECTS definovane HOSTING ENVIRONMENT (BROWSER).
   C. USER-DEFINED OBJECT su CUSTOM OBJECTS definovane programatorom.
9. OBJECT je mozne v JavaScripte vytvarat VIACERYMI sposobmi.
   A. OBJECT LITERAL je OBJECT deklarovany priamo vo 'var' STATEMENT pouzitim SYNTAXE [var MyObject={Property1:Value1,PropertyN:ValueN};].
   B. Pouzitim OPERATORA new. Pomocou OPERATOR new je mozne VYVOLAT CONSTRUCTOR daneho OBJECT, ktory vytvori INSTANCIU OBJECT. Pre NATIVE OBJECTS su deklarovane CONSTRUCTORS ako sucast JavaScriptu. Samozrejme je mozne definovat i CUSTOM CONSTRUCTORS.
   !!! C. Pouzitim STATICKEJ FUNCTION Object.Create(). Pomocou tejto FUNCTION je mozne realizovat OBJECT PROTOTYPE INHERITANCE.
!!!!! 10. S KAZDYM OBJECT okrem (OBJECT typu Object) je asocitovany PROTOTYPE OBJECT. Tento OBJECT obsahuje TYPOVU INFORMACIU (ake PROPERTIES ma OBJECT po vytvoreni) o OBJECT s ktorym je asociovany. Pre PROTOTYPE OBJECTS platia nasledujuce zasady.
   A. OBJECT typu Object NEMA asociovany ZIADEN PROTOTYPE OBJECT.
   B. K asociovanemu PROTOTYPE OBJECT je mozne pristupovat pomocou PROPERTY 'prototype'.
   C. PROTOTYPE OBJECTS mozu vytvarat CHAIN viacerych PROTOTYPE OBJECTS, vdaka comu OBJECTS podporuju DEDICNOST.
11. K OBJECT PROPERTIES je mozne pristupovat 2 sposobmi.
   A. SYNTAX [Object.PropertyName] umoznuje citat, alebo zapisovat hodnotu PROPERTY. V pripade, ze PRI ZAPISE sa PROPERTY NENACHADZA v OBJECT, PROPERTY sa PRIDA do OBJECT.
   B. SYNTAX [Object["PropertyName"]] umoznuje citat, alebo zapisovat hodnotu PROPERTY. V pripade, ze PRI ZAPISE sa PROPERTY NENACHADZA v OBJECT, PROPERTY sa PRIDA do OBJECT. Hodnota 'PropertyName' musi byt BUD STRING, alebo hodnota KONVERTIBILNA na STRING.
!!!!! 11. DEDENIE OBJECTS sa vykonava volanim STATIC FUNCTION Object.create() [InheritedObject=Object.create(BaseObject)], kde 'BaseObject' je OBJECT z ktoreho chce dedit.
!!! 12. DEDENIE OBJECTS v popisuju nasledujuce zasady.
   !!! A. BASE a DERIVED OBJECT NIE SU UPLNE VZAJOMNE NEZAVISLE. Napriklad ak zmenim hodnotu PROPERTY v BASE OBJECT a tato NIE JE PREKRYTA v DERIVED OBJECT, tak sa hodnota zmeni v PROPERTY AKO BASE, tak sa MOZE (i NEMUSI) zmenit hodnota tejto PROPERTY i DERIVED OBJECT.
   B. Pri CITANI PROPERTY ak sa PROPERTY s danym NAME v DERIVED OBJECT NENACHADZA, tak sa prechadzaju VSETKY BASE OBJECT v INHERITANCE CHAIN a hlada sa PROPERTY s danym NAME.
   !!! C. Pri ZAPISE PROPERTY do DERIVED OBJECT sa nastavi hodnota PROPERTY s danym NAME IBA v DERIVED OBJECT. V BASE OBJECT tato PROPERTY NEBUDE EXISTOVAT (bude mat hodnotu 'undefined'). Ak vsak v BASE OBJECT takto pomenovana PROPERTY UZ EXISTUJE, tak sa tato PROPERTY v BASE OBJECT stane HIDDEN a de-facto budu existovat 2 NEZAVISLE PROPERTIES, jedna v BASE OBJECT a druha v DERIVED OBJECT.
   !!! D. Pri ZAPISE PROPERTY do BASE OBJECT sa nastavi hodnota PROPERTY s danym NAME AKO v BASE OBJECT TAK i v DERIVED OBJECT. Cize PROPERTY sa ZDEDI do DERIVED OBJECT. AVSAK, ak uz predtym bola PROPERTY v BASE OBJECT HIDDEN (vid vyssie), tak sa zmeni IBA hodnota PROPERTY v BASE OBJECT. Je to dosledok toho, ze vykonanim HIDDEN vznikaju 2 NEZAVISLE PROPERTIES, jedna v BASE OBJECT a druha v DERIVED OBJECT.
13. JavaScript podporuje GETTER a SETTER METHODS pri pristupe k OBJECT PROPERTIES.
   A. SYNTAX [get PropertyName(){}] definuje GETTER METHOD, kde PropertyName je meno PROPERTY.
   B. SYNTAX [set PropertyName(){}] definuje SETTER METHOD, kde PropertyName je meno PROPERTY.
   C. GETTER a SETTER METHODS su pri DEDENI DEDENE do DERIVED OBJECTS.
!!!!! 14. JScript (implementacia JavaScript na IE) NEPODPORUJE GETTER a SETTER METHODS pri pristupe k OBJECT PROPERTIES.
!!! 15. OPERATOR delete umoznuje odstranovat PROPERTIES z OBJECT. Platia prenho nasledujuce vlastnosti.
   A. Vracia BOOLEAN hodnotu informujucom o tom ci odstranenie PROPERTY bolo uspesne, alebo nie.
   !!! B. Pri INHERITANCE sa PROPERTY AUTOMATICKY NEODSTRANUJE aj v BASE OBJECTS.
   C. PROPERTY, ktora ma nastaveny CONFIGURABLE ATTRIBUTE NIE JE MOZNE ODSTRANIT a OPERATOR delete vrati 'false'.
16. Pomocou OPERATOR in je mozne zistit ci PROPERTY je v danom OBJECT DEFINOVANA.
17. FUNCTION hasOwnProperty() vracia TRUE, ak dana PROPERTY sa nachadza v OBJECT. Ak sa PROPERTY nechadza v BASE OBJECT, vrati sa FALSE.
18. FUNCTION propertyIsEnumerable vracia TRUE, ak dana PROPERTY sa nachadza v OBJECT a ZAROVEN ma nastaveny ATTRIBUTE ENUMERABLE na TRUE. Ak sa PROPERTY nechadza v BASE OBJECT, vrati sa FALSE.
!!! 19. Prikaz 'for-in' sluzi na ENUMERACIU vsetkych ENUMEROVATELNYCH PROPERTIES daneho OBJECT. Tie PROPERTIES, ktore NIE SU ENUMEROVATELNE (nemaju nastaveny ATTRIBUTE ENUMERABLE) prikaz 'for-in' NEVRACIA.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
Priklad HIDDEN PROPERTIES.

1. OBJECT BaseObject ma PROPERTY 'X'.
2. Z BaseObject pomocou Object.create() vytvorim DERIVED OBJECT DerivedObject.
3. Momentalny stav OBJECTS [BaseObject ma PROPERTY 'X'], [DerivedObject NEMA ZIADNE PROPERTIES].
4. Pri CITANI DerivedObject.X, kedze DerivedObject tuto PROPERTY NEOBSAHUJE, prejde sa BASE OBJECT BaseObject a v nom sa 'X' uz nachadza, takze tato hodnota bude vratena.
!!! 5. Pri ZAPISE do BaseObject.X sa ZMENI hodnota BaseObject.X. To znamena, ze ak vykonam teraz CITANI DerivedObject.X, kedze DerivedObject NEOBSAHUJE PROPERTY 'X', tak sa vrati hodnota BaseObject.X, ktora ma ZMENENU HODNOTU.
!!!!! 6. Pri ZAPISE do DerivedObject.X sa VYTVORI NOVA PROPERTY 'X' v DerivedObject.
7. Momentalny stav OBJECTS [BaseObject ma PROPERTY 'X'], [DerivedObject ma PROPERTY 'X'].
!!! 8. Pri CITANI (alebo aj ZAPISE) DerivedObject.X, kedze DerivedObject UZ OBSAHUJE TUTO PROPERTY sa vrati hodnota DerivedObject.X.
!!! 9. Pri CITANI (alebo aj ZAPISE) BaseObject.X, kedze BaseObject MA VLASTNU NEZAVISLU PROPERTY 'X' vrati sa hodnota BaseObject.X.
10. PROPERTY ATTRIBUES su ATTRIBUTES, ktore su asociovane s PROPERTY daneho object. v ECMAScript 5.0. je ich mozne citat i modifikovat.
   !!! A. FUNCTION Object.getOwnPropertyDescriptor() (NEFUNGUJE pre PRIMITIVNE TYPY) vracia pre PROPERTY daneho OBJECT PROPERTY DESCRIPTOR, ktory obsahuje hodnoty PROPERTY ATTRIBUES. PROPERTY DESCRIPTOR je WRITABLE OBJECT a teda zapisom do jeho PROPERTIES (predstavujucich ATTRIBUTES) sa menia hodnoty tychto ATTRIBUTES.
   !!! B. FUNCTION Object.defineProperty() umoznuje PRIDAVAT PROPERTIES s nastavenymi ATTRIBUTES.
   C. FUNCTION Object.defineProperties() je analogiou voci Object.defineProperty(), ale dokaze modifikovat viacero PROPERTIES.
11. FUNCTION Object.getPrototypeOf(MyObject) vracia PROTOTYPE ATTRIBUTE daneho OBJECT.
12. FUNCTION BaseObject.isPrototypeOf(DerivedObject) vracia BOOLEAN informaciu ci 'DerivedObject' je PROTOTYPE 'BaseObject'.
!!! 13. CLASS ATTRIBUTE urcuje TYPE daneho OBJECT. Bohuzial JavaScript NEPODPORUJE ZIADNU STANDARDNIZOVANU VERZIU ako jeho hodnotu ZISKAT.
14. FUNCTION Object.isExtensible() vracia BOOLEAN informaciu ci dany OBJECT je EXTENSIBLE.
15. FUNCTION Object.preventExtensions() spravi z daneho OBJECT NON-EXTENSIBLE OBJECT.
16. FUNCTION Object.seal() spravi z daneho OBJECT SEALED OBJECT. SEALED OBJECT je NON-EXTENSIBLE a VSETKY JEHO VLASTNE PROPERTIES (nie BASE) su NON-CONFIGURABLE.
17. FUNCTION Object.isSealed() vracia BOOLEAN informaciu ci dany OBJECT je SEALED.
18. FUNCTION Object.freeze() spravi z daneho OBJECT FROZEN OBJECT. FROZEN OBJECT je NON-EXTENSIBLE a VSETKY JEHO VLASTNE PROPERTIES (nie BASE) su NON-CONFIGURABLE a READ-ONLY.
19. FUNCTION Object.isFrozen() vracia BOOLEAN informaciu ci dany OBJECT je FROZEN.
!!! 20. FUNCTION Object.seal() a Object.freeze() menia iba VLASTNE PROPERTIES. PROPERTIES BASE OBJECT NEMENIA.
21. JavaScript podporuje SERIALIZACIU a DESERIALIZACIU OBJECTS do JSON formatu pomocou METHODS OBJECT JSON.
   A. METHOD JSON.stringify() vykonava SERIALIZATION do STRING. Metoda prijima aj dodatocny formatovaci parameter.
   B. METHOD JSON.parse() vykonava DESERIALIZATION zo STRING. Metoda prijima aj dodatocny formatovaci parameter.
!!! 22. JSON OBJECT dokaze serializovat VACSINU OBJECT a ich PROPERTIES. Avsak napriklad FUNCTIONS, alebo RegEx OBJECT su NESERIALIZOVATELNE.
!!! 23. Kedze KAZDY OBJECT (okrem tych, ktore su EXPLICITNE vytvorene BEZ PROTOTYPE) dedia PROPERTIES z Object.prototype, tak KAZDY OBJECT obsahuje PROPERTIES. Tieto PROPERTIES su zvacsa FUNCTIONS.
   A. FUNCTION toString() vracia STRING hodnotu daneho OBJECT.
   B. FUNCTION toLocaleString() vracia LOKALIZOVANU STRING hodnotu daneho OBJECT.
   C. FUNCTION toJSON() NIE JE SUCAST Object.property, avsak ak OBJECT tuto metodu obsauje, tak je volana na vykonanie SERIALIZATION do JSON.
   D. FUNCTION tovalueOf() vracia konverovanu hodnotu daneho OBJECT.
//-------------------------------------------------------------------------------------------------------
Popis PROTOTYPE OBJECTS.

1. The javascript object prototype is javascript’s way of sharing implementation across similar objects, much like the way classes are used to do this in many other languages. Although constructor functions look a lot like classes, javascript does not have a class based object system like C# or Java. Instead it has a prototype based object system.
2. The main difference between the two types of languages is all about objects and classes. In a class based language there is a clear distinction between the ideas of a class and an object. A class is a template for creating an object and an object is a specific instance of a class. In C# you cannot create an object without instantiating it from a class. Even the most basic object of type Object is instantiated from a class. Once the object is created you cannot make it into a different type of object by adding different properties.
3. In a prototype based systems there are no classes. All objects are created by adding properties and methods to an empty object or by cloning an existing one. Although a constructor function may look like a class (probably so people from more traditional class based languages would be able to use it), it’s really just a function that knows how to add the right properties and methods to create a particular type of object.
4. This approach is called prototype-based inheritance because an existing object is used as a template (or a prototype – a typical example) to build other objects. The existing object will be used as a starting point to build the new object but the new object does not have to be exactly the same.
//-------------------------------------------------------------------------------------------------------