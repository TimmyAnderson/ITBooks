//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie gRPC FRAMEWORK.
2. gRPC je FRAMEWORK, ktory umoznuje vykonavanie REMOTE PROCEDURE CALLS cez HTTP PROTOCOL.
3. Pre gRPC FRAMEWORK platia nasledujuce fakty.
   A. gRPC FRAMEWORK je postaveny na PROTOCOLE HTTP 2.0..
   B. gRPC FRAMEWORK prenasa data pomocou FORMAT [PROTOBUF], ktory je BINARNY.
   C. gRPC FRAMEWORK pouziva CONTRACT FIRST pristup, kedy sa najprv definuje CONTRACT v LANGUAGE NEUTRAL FORMATE z ktoreho je mozne generovat CODE pre rozne LANGUAGES.
   D. gRPC FRAMEWORK podporuje STREAMING.
   !!! E. gRPC FRAMEWORK NIE JE podporovany vo WEB BROWSERS, a preto sa da pouzivat iba na komunikaciu SERVICE TO SERVICE.
4. gRPC FRAMEWORK prenasa data pomocou FORMAT [PROTOBUF]. REMOTE PROCEDURE CALLS METHODS a REMOTE PROCEDURE CALLS MESSAGES sa definuju v FILES [.proto]. Pre FILES [.proto] platia nasledujuce fakty.
   A. FILES [.proto] obsahuju definicie REMOTE PROCEDURE CALLS METHODS.
   B. FILES [.proto] obsahuju definicie REMOTE PROCEDURE CALLS MESSAGES, ktore su vyuzivane v REMOTE PROCEDURE CALLS METHODS.
   C. FILES [.proto] mozu obsahovat COMMENTS.
      A. Jednoriadkove COMMENTS sa definuju pomocou SYNTAX [//COMMENT].
      B. Viacriadkove COMMENTS sa definuju pomocou SYNTAX [/*COMMENT*/].
   D. LINES su oddelene CHARACTER [;].
   E. BLOCKS su definovane pomocou SYNTAX [{BLOCK_CONTENT}], kde VALUE [BLOCK_CONTENT] je obsah BLOCK.
   F. Verzia PROTOBUF sa definuje pomocou SYNTAX [syntax = "VERSION"], kde VALUE [VERSION] je verzia PROTOBUF. Aktualne sa pouziva VALUE [proto3].
   G. OPTIONS sa definuje pomocou SYNTAX [option OPTION_NAME = "OPTION_VALUE"], kde VALUE [OPTION_NAME] je nazov OPTION a VALUE [OPTION_VALUE] je VALUE danej OPTION.
   H. Nazov PACKAGE sa definuje pomocou SYNTAX [package PACKAGE_NAME], kde VALUE [PACKAGE_NAME] je nazov PACKAGE.
   I. SERVICES sa vo FILES [.proto] definuju nasledujucim sposobom.
      A. SERVICE sa definuje pomocou SYNTAX [service SERVICE_NAME], kde VALUE [SERVICE_NAME] je nazov SERVICE.
      B. SERVICE METHOD sa definuje pomocou SYNTAX [rpc METHOD_NAME (INPUT_MESSAGE) returns (OUTPUT_MESSAGE)], kde VALUE [METHOD_NAME] je nazov METHOD, VALUE [INPUT_MESSAGE] je nazov INPUT MESSAGE a VALUE [OUTPUT_MESSAGE] je nazov OUTPUT MESSAGE.
   J. MESSAGES sa vo FILES [.proto] definuju nasledujucim sposobom.
      A. MESSAGE sa definuje pomocou SYNTAX [message MESSAGE_NAME], kde VALUE [MESSAGE_NAME] je nazov MESSAGE.
	  B. MESSAGE FIELD sa definuje pomocou SYNTAX [TYPE FIELD_NAME=ORDER], kde VALUE [TYPE] je TYPE FIELD, VALUE [FIELD_NAME] je FIELD NAME a VALUE [ORDER] je poradove cislo FIELD.
5. Podpora pre gRPC FRAMEWORK je v ASP.NET CORE implementovana v PACKAGE [Grpc.AspNetCore].
6. Vo FILE [.csproj] v ELEMENTS [Protobuf] a ich PROPERTY [GrpcServices] a urcuje type CODE, ktory sa ma pre dany FILE [.proto] generovat. PROPERTY moze nadobudat nasledujucich VALUES.
   A. VALUE [None] znamena, ze PROTOBUF COMPILER nebude generovat ziaden CODE.
   B. VALUE [Client] znamena, ze PROTOBUF COMPILER bude generovat iba CLIENT SIDE CODE.
   C. VALUE [Server] znamena, ze PROTOBUF COMPILER bude generovat iba SERVER SIDE CODE.
   D. VALUE [Both] znamena, ze PROTOBUF COMPILER bude generovat CLIENT SIDE CODE aj SERVER SIDE CODE.
7. Pre kazdy FILE [NAME.proto] generuje PROTO COMPILER C# FILES BY DEFAULT do DIRECTORY [Debug\Proto], alebo do DIRECTORY urcenom ELEMENT [Protobuf] a FIELD [OutputDir] v FILE [.csproj]. PROTO COMPILER generuje nasledujuce FILES.
   A. FILE [NAME.cs], ktory obsahuje CLASSES pre vsetky REQUEST MESSAGES a RESPONSE MESSAGES, ktore boli vo FILE [NAME.proto] generovane.
   B. FILE [NAMEGrpc.cs], ktory pre kazdy SERVICE definovany vo FILE [NAME.cs] obsahuje prislusnu CLASS.
8. Pre MESSAGE CLASSES platia nasledujuce fakty.
   A. MESSAGE CLASS implementuje INTERFACE [IMessage<MESSAGE_TYPE>], kde VALUE [MESSAGE_TYPE] je TYPE MESSAGE CLASS.
   B. MESSAGE CLASS pre kazdy FIELD definovany vo FILE [NAME.proto] obsahuje C# FIELD.
   C. MESSAGE CLASS pre kazdy FIELD definovany vo FILE [NAME.proto] obsahuje C# PROPERTY.
   D. MESSAGE CLASS definuje EMPTY CONSTRUCTOR a COPY CONSTRUTOR.
   E. MESSAGE CLASS definuje METHOD [bool Equals(TYPE Other)].
   F. MESSAGE CLASS definuje METHOD [bool Equals(object Other)].
   G. MESSAGE CLASS definuje METHOD [int GetHashCode()].
   H. MESSAGE CLASS definuje METHOD [string ToString()].
9. FILE [NAMEGrpc.cs] obsahuje CLASS [NAMEBase] pre ktoru platia nasledujuce fakty.
   A. CLASS sluzi ako BASE CLASS pre SERVICE CLASS, ktora implementuje funkcionalitu daneho SERVICE.
   B. CLASS je ABSTRACT.
   C. CLASS ma pre kazdu METHOD definovanu pre dany SERVICE vo FILE [.proto] definovanu VIRTUAL METHOD, ktora reprezentuje METHOD, ktora sa vola. DEFAULT implementacia vracia EXCEPTION. Tato METHOD MUSI byt OVERRIDEN v DERIVED CLASS.
!!! 10. Implementacia SERVICES definovanych vo FILE [.proto] sa realizuje v SERVICE CLASSES. Pre SERVICE CLASS platia nasledujuce fakty.
   A. SERVICE CLASS MUSI byt INHERITED z CLASS [NAMEBase].
   B. SERVICE CLASS musi vykona METHOD OVERRIDING pre vsetky VIRTUAL METHODS definovane v CLASS [NAMEBase], ktore reprezentuju METHODS daneho SERVICE.
   C. SERVICE CLASS v CONSTRUCTOR moze vyuzivat DEPENDENCY INJECTION.
11. METHOD [IGrpcServerBuilder AddGrpc(this IServiceCollection Services)] vklada gRPC FRAMEWORK SERVICE do DEPENDENCY INJECTION CONTAINER.
12. METHOD [GrpcServiceEndpointConventionBuilder MapGrpcService<TService>(this IEndpointRouteBuilder Builder)] vklada gRPC SERVICE do PROGRAMU.
//----------------------------------------------------------------------------------------------------------------------