//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje HTTP PROTOCOL.
2. HTTP je STATELESS, TEXT-BASED, REQUEST RESPONSE PROTOCOL vyuzivajuci CLIENT SERVER ARCHITECTURE. Pre HTTP platia nasledujuce fakty.
   A. HTTP je STATELES co znamena, ze na HTTP SERVER sa neukladaju ziadne SESSION DATA a vsetky data potrebne na vykonanie OPERATION na SERVER musia byt prenesene v kazdom jednom HTTP REQUEST.
   B. HTTP je TEXT-BASED co znamena, ze data su prenasane ako PLAIN TEXT.
   C. HTTP je REQUEST RESPONSE PROTOCOL co znamena, ze CLIENT po zaslani HTTP REQUEST musi pockat na spracovanie tohto REQUEST a nasledne odoslanie HTTP RESPONSE, ktory moze nasledne spracovat.
   D. Jednotlive HTTP REQUESTS a HTTP RESPONSES su vzajomne nezavisle.
3. HTTP REQUEST obsahuje informacie potrebne na spracovanie na HTTP SERVER. HTTP REQUEST obsahuje nasledujuce data.
   A. REQUEST URI idenfitikujuci HTTP RESOURCE pre ktory je HTTP REQUEST urceny.
   B. REQUEST METHOD (VERB) urcuje OPERATION, ktora ma byt nad HTTP HTTP RESOURCE vykonana.
   C. REQUEST PARAMETERS (QUERY STRING PARAMETERS) obsahuje PARAMETERS, ktore su sucastou REQUEST URI.
   D. REQUEST HEADERS obsahuje HEADERS vo formate [KEY:VALUE].
   E. REQUEST BODY obsahuje lubovolne data HTTP REQUEST.
4. URI ma FORMAT [PROTOCOL://SERVER_LOCATION:APPLICATION_PORT/RESOURCE_PATH]. URI sa sklada z nasledujucich casti.
   A. PROTOCOL urcuje typ PROTOCOL pouzivany na prenos dat. U HTTP je to VALUE [HTTP].
   B. SERVER LOCATION urcuje APPLICATION pre ktoru je HTTP REQUEST urceny.
   C. APPLICATION PORT urcuje pPORT na ktorej APPLICATION bezi.
   D. RESOURCE PATH obsahuje LOCAL PATH v ramci APPLICATION, ktora identifikuje RESOURCE nad ktorym ma byt HTTP REQUEST vykonany.
!!! 5. URI a URL NIE JE TO ISTE. Plati, ze [URI=URL+PATH].
   A. VALUE [PROTOCOL://SERVER_LOCATION:APPLICATION_PORT] predstavuje URL cast URI.
   B. VALUE [RESOURCE_PATH] predstavuje PATH cast URI.
6. REQUEST METHOD (VERB) urcuje OPERATION, ktora ma byt nad HTTP HTTP RESOURCE vykonana. HTTP podporuje nasledujuce REQUEST METHODS.
   A. GET vracia data z HTTP SERVER na HTTP CLIENT.
   B. POST vykonava zapis (INSERT) novych dat z HTTP CLIENT na HTTP SERVER.
   C. PUT vykonava zmenu (UPDATE) existujucich dat z HTTP CLIENT na HTTP SERVER.
   D. DELETE vykonava zmazanie (DELETE) existujucich dat z HTTP CLIENT na HTTP SERVER.
   E. PATCH vykonava zmenu (UPDATE) CASTI existujucich dat z HTTP CLIENT na HTTP SERVER.
   F. OPTIONS hovori HTTP SERVER, aby vratil zoznam PARAMETERS, ktore podporuje.
7. HTTP RESPONSE obsahuje vysledok spracovania HTTP REQUEST. HTTP RESPONSE obsahuje nasledujuce data.
   A. RESPONSE STATUS. Obsahuje STATUS CODE, ktory urcuje ci OPERATION na HTTP SERVER bola uspesne vykonana.
   B. RESPONSE HEADERS obsahuje HEADERS vo formate [KEY:VALUE].
   C. RESPONSE BODY obsahuje lubovolne data HTTP RESPONSE.
8. HTTP PROTOCOL je STATELESS co znamena, ze medzi 2 HTTP REQUEST, ani ked su poslane tym istym USER neexistuje ziadna korelacia. Tu je vsak mozne vytvorit pomocou SESSIONS. SESSIONS nie su sucastou HTTP STANDARD, ale je to iba pouzitie HTTP, ktore musi akceptovat HTTP CLIENT aj HTTP SERVER. SESSIONS funguju nasledovnym sposobom.
   A. HTTP CLIENT posle HTTP REQUEST v ktorom je ulozeny SESSION ID. SESSION ID je unikatny identifikator SESSION. SESSION ID moze byt ulozeny v REQUEST PARAMETERS, REQUEST HEADERS aj REQUEST BODY.
   B. HTTP SERVER si na zaklade SESSION ID ulozi do PERSISENT STORE CUSTOM informacie tykajuce sa SESSION.
   C. Ak ten isty HTTP CLIENT chce pokracovat v tej iste SESSION, posle novy HTTP REQUEST s tym istym SESSION ID.
   D. Na zaklade SESSION ID si HTTP SERVER vytiahne z PERSISENT STORE CUSTOM informacie tykajuce sa SESSION a tym padom vie oba HTTP REQUEST sparovat, ze patria do tej istej SESSION.
   E. SESSION by mala mat obmedzeny LIFETIME. Spravidla sa nastavuje SESSION LIFETIME na 1 hodinu.
//----------------------------------------------------------------------------------------------------------------------