//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie a pokrocile vlastnosti BLAZOR SERVER.
2. BLAZOR COMPONENTS je mozne vzajomne kombinovat, kedy do jednej BLAZOR COMPONENT je vlozena ina BLAZOR COMPONENT. Pre kombinovanie BLAZOR COMPONENTS platia nasledujuce fakty.
   A. Do PARENT BLAZOR COMPONENT je mozne vlozit CHILD BLAZOR COMPONENT vlozenim HTML ELEMENT [<XXX>], kde VALUE 'XXX' je nazov CHILD BLAZOR COMPONENT. Tento nazov je CASE SENSITIVE.
   B. CHILD BLAZOR COMPONENT moze definovat PARAMETERS, ktore je mozne z PARENT BLAZOR COMPONENT nastavit. PARAMETER je C# PROPERTY, ktora je oznacena ATTRIBUTE [ParameterAttribute]. PARENT BLAZOR COMPONENT moze nastavit hodnoty PARAMETERS aplikovanim HTML ATTRIBUTES na HTML ELEMENT reprezentujuci CHILD BLAZOR COMPONENT. Nazvy HTML ATTRIBUTES MUSIA byt v LOWER CAMEL CASE (prve pismeno je v LOWER CASE a nasledovne zaciatky slov v UPPER CASE).
   C. CHILD BLAZOR COMPONENT moze definovat CATCH ALL PARAMETER, do ktoreho sa ulozia hodnoty vsetky HTML ELEMENTS, ktore neboli namapovane na C# PROPERTIES CHILD BLAZOR COMPONENT pomocou ATTRIBUTE [ParameterAttribute]. CATCH ALL PARAMETER sa definuje ako C# PROPERTY TYPE [Dictionary<string,object>] na ktoru je aplikovny ATTRIBUTE [ParameterAttribute(CaptureUnmatchedValues=true)].
   D. CHILD BLAZOR COMPONENT moze definovat EVENTS, ktore moze zachytavat PARENT BLAZOR COMPONENT. EVENT je definovany ako C# PROPERTY TYPE [EventCallback<TType>], kde VALUE 'TType' je lubovolny TYPE na ktory je aplikovany ATTRIBUTE [ParameterAttribute]. PARENT BLAZOR COMPONENT moze EVENT CHILD BLAZOR COMPONENT zaregistrovat rovnako ako ine typy PARAMETERS, kde EVENT HANDLER METHOD v PARENT BLAZOR COMPONENT MUSI mat PROTOTYP [void EVENT_HANDLER(TType PARAMETER)].
!!! 3. Ako EVENT DELEGATE moze byt pouzity LUBOVOLNY DELEGATE TYPE, nielen TYPE [EventCallback<TType>]. Teda napriklad aj TYPE [Action].
!!!!! 4. Medzi EVENTS realizovanymi pomocou EVENT DELAGATES LUBOVOLNEHO TYPE a EVENT DELEGATES TYPE [EventCallback<TType>] je OBROVSKY ROZDIEL v tom ako na ne PARENT BLAZOR COMPONENT reaguje.
   !!! A. Ak sa vyvola CALLBACK METHOD EVENT DELAGATE LUBOVOLNEHO TYPE na PARENT BLAZOR COMPONENT, tak tento po vykonanie CALLBACK NESPOSOBI VYKONANIE RENDERING PARENT BLAZOR COMPONENT. To znamena, ze ak sa v CALLBACK METHOD zmeni VALUE niektorej PROPERTY, ktoru PARENT BLAZOR COMPONENT zobrazuje, tak sa VALUE v HTML CODE NEZMENI.
   !!!!! B. Ak sa vyvola CALLBACK METHOD EVENT DELAGATE [EventCallback<TType>] na PARENT BLAZOR COMPONENT, tak vykonanie CALLBACK SPOSOBI VYKONANIE RENDERING PARENT BLAZOR COMPONENT. To znamena, ze ak sa v CALLBACK METHOD zmeni VALUE niektorej PROPERTY, ktoru PARENT BLAZOR COMPONENT zobrazuje, tak sa VALUE v HTML CODE ZMENI.
   !!!!! C. Ak sa vyvola CALLBACK METHOD EVENT DELAGATE LUBOVOLNEHO TYPE je mozne v jej CODE PRINUTIT PARENT BLAZOR COMPONENT k RENDERINGU volanim METHOD [void ComponentBase.StateHasChanged()]. V takomto pripade sa PARENT BLAZOR COMPONENT RENDERUJE ako pri volani CALLBACK METHOD EVENT DELAGATE TYPE [EventCallback<TType>].
5. Ak BLAZOR COMPONENT definuje C# PROPERTY TYPE [Dictionary<string,object>], tak tuto PROPERTY je mozne pomocou SPECIALNEHO KEYWORD [@attributes="CSHARP_PROPERTY"], kde VALUE 'CSHARP_PROPERTY' je nazov C# PROPERTY rozvinut na HTML ATTRIBUTES.
   A. BLAZOR COMPONENT definuje C# PROPERTY TYPE [Dictionary<string,object>].
   B. BLAZOR COMPONENT na niektory z HTML ELEMENTS aplikuje KEYWORD [@attributes="CSHARP_PROPERTY"].
   !!! C. BLAZOR FRAMEWORK do HTML ELEMENT na ktory je aplikovany KEYWORD [@attributes="CSHARP_PROPERTY"] prida HTML ATTRBUTES, kde NAMES a VALUES HTML ATTRBUTES budu vybrate z C# PROPERTY. To znamena, ze ak C# PROPERTY obsahuje VALUES [XXX=1,YYY=2], tak po aplikacii [@attributes="CATCH_ALL_PARAMETER"] sa do daneho HTML ELEMENT pridaju HTML ATTRIBUTE ["XXX"="1"] a HTML ATTRIBUTE ["XXX"="2"].
!!! 6. Ak BLAZOR COMPONENT definuje PARAMETERS, tieto PARAMETERS je mozne nastavit vo VIEW, alebo RAZOR PAGE pomocou SYNTAXE [@param-PARAMETER_NAME="VALUE"], kde VALUE 'PARAMETER_NAME' je nazov PARAMETER BLAZOR COMPONENT a VALUE 'VALUE' je VALUE PARAMETER BLAZOR COMPONENT.
!!! 7. BLAZOR COMPONENTS mozu definovat CUSTOM 2 WAY BINDING.
   A. Pri CUSTOM 2 WAY BINDING CHILD BLAZOR COMPONENT definuje C# PROPERTY, ktorej zmena moze byt monitorovana PARENT BLAZOR COMPONENT.
   B. Pri CUSTOM 2 WAY BINDING PARENT BLAZOR COMPONENT vykona BINDING svojej C# PROPERTY na C# PROPERTY CHILD BLAZOR COMPONENT.
   !!! C. 2 WAY BINDING zabezpecuje, ze v pripade zmeny VALUE C# PROPERTY PARENT BLAZOR COMPONENT sa tato zmena AUTOMATICKY prenesie do C# PROPERTY CHILD BLAZOR COMPONENT a opacne, v pripade zmeny VALUE C# PROPERTY CHILD BLAZOR COMPONENT sa tato zmena AUTOMATICKY prenesie do C# PROPERTY PARENT BLAZOR COMPONENT.
8. CUSTOM 2 WAY BINDING v BLAZOR COMPONENTS sa implementuje nasledujucim sposobom.
   A. CHILD BLAZOR COMPONENT musi definovat C# PROPERTY 'XXX' oznacenu ATTRIBUTE [ParameterAttribute], ktora reprezentuje VALUE, ktorej zmena ma byt BOUND na C# PROPERTY PARENT BLAZOR COMPONENT.
   !!! B. CHILD BLAZOR COMPONENT musi definovat C# PROPERTY TYPE [EventCallback<TYPE>] oznacenu ATTRIBUTE [ParameterAttribute], ktora reprezentuje EVENT, ktory 2 WAY BINDING vyvolava pri zmene VALUE C# PROPERTY CHILD BLAZOR COMPONENT. Nazov C# PROPERTY TYPE [EventCallback<TType>] MUSI dodrzat konvenciu [XXXChanged], kde VALUE 'XXX' je nazov PROPERTY ktora reprezentuje VALUE, ktorej zmena ma byt BOUND na PROPERTY PARENT BLAZOR COMPONENT.
   C. PARENT BLAZOR COMPONENT musi definovat C# PROPERTY 'YYY' TYPE [TYPE], ktorej TYPE je zhodny s GENERIC PARAMETER 'TYPE' TYPE [EventCallback<TYPE>].
   D. PARENT BLAZOR COMPONENT musi na HTML ELEMENT reprezentujuci CHILD BLAZOR COMPONENT aplikovat HTML ATTRIBUTE [@bind-XXX="YYY"], kde VALUE 'XXX' je nazov C# PROPERTY v CHILD BLAZOR COMPONENT a VALUE 'YYY' je nazov C# PROPERTY v PARENT BLAZOR COMPONENT. Tym sa vytvori BINDING medzi oboma C# PROPERTIES.
   !!!!! E. V pripade, ze VALUE C# PROPERTY 'XXX' CHILD BLAZOR COMPONENT je zmenena, tato zmena sa OKAMZITE PRENESIE do VALUE C# PROPERTY 'YYY' PARENT BLAZOR COMPONENT.
   !!!!! F. V pripade, ze VALUE C# PROPERTY 'YYY' PARENT BLAZOR COMPONENT je zmenena, tato zmena sa OKAMZITE PRENESIE do VALUE C# PROPERTY 'XXX' CHILD BLAZOR COMPONENT.
9. BLAZOR COMPONENTS mozu zobrazovat HTML CONTENT, ktory je pri pouziti BLAZOR COMPONENT vlozeny medzi OPEN TAG a CLOSE TAG. Zobrazenie HTML CONTENT medzi OPEN TAG a CLOSE TAG sa vykonava nasledujucim sposobom.
   A. Do BLAZOR COMPONENT sa vlozi C# PROPERTY [ChildContent] TYPE [RenderFragment]. Do tejto C# PROPERTY je AUTOMATICKY vlozeny CONTENT, ktory pouzivatel BLAZOR COMPONENT vlozi medzi OPEN TAG a CLOSE TAG.
   B. C# PROPERTY MUSI byt oznacena ATTRIBUTE [ParameterAttribute].
   C. V [.RAZOR] FILE je na miesto, kde ma byt HTML CONTENT, ktory bol vlozeny medzi OPEN TAG a CLOSE TAG umiestneny je nutne pouzit KEYWORD [@ChildContent].
   !!! D. Do BLAZOR COMPONENT je ako HTML CONTENT IBA ak je BLAZOR COMPONENT pouzita v PARENT BLAZOR COMPONENT, ale NIE vo VIEWS a RAZOR PAGES.
!!! 10. BLAZOR FRAMEWORK sa pokusa o maximalny HTML ELEMENT REUSING. To znaci, ze ak BLAZOR COMPONENT je REFRESHED, tak zoberie existujuce HTML ELEMENTS, ktory CONTENT sa ma zmenit a radsej zmeni ich CONTENT, akoby mal tieto HTML ELEMENTS uvolnit a vytvorit nove. Toto vsak moze sposobovat problemy, ak su HTML ELEMENTS modifikovane aj MIMO BLAZOR FRAMEWORK ako napriklad pomocou JAVA SCRIPT. REUSED HTML ELEMENTS mozu obsahovat ATTRIBUTES, ktore boli nastavene pre predchadzajucom RENDERING a uz by nemali byt pri novom RENDERING nastavene. BLAZOR FRAMEWORK ponuka nasledujuce riesenie.
   A. HTML ELEMENTS v BLAZOR COMPONENT, ktore NEMAJU byt REUSED sa oznacia pomocou KEYWORD [@key="VALUE"], kde VALUE 'VALUE' je jedinecny identifikator daneho HTML ELEMENT.
   !!! B. Pri opatovnom RENDERINGU BLAZOR COMPONENT BLAZOR FRAMEWORK vykona REUSING iba tych HTML ELEMENTS, ktorych hodnota VALUE 'VALUE' nastavena [@key="VALUE"] sa NEZMENILA.
!!! 11. CHILD BLAZOR COMPONENTS mozu definovat TEMPLATES, kde TEMPLATE pozostava z viacerych SECTIONS do ktorych mozu PARENT BLAZOR COMPONENTS vkladat svoj CONTENT. Pre vytvaranie TEMPLATES platia nasledovne pravidla.
   A. CHILD BLAZOR COMPONENT, moze definovat lubovolny pocet SECTIONS, kde SECTION je definovana ako C# PROPERTY TYPE [RenderFragment] na ktory je aplikovany ATTRIBUTE [ParameterAttribute].
   B. V [.RAZOR] FILE danej CHILD BLAZOR COMPONENT je kazdu SECTION moze aplikovat volanim KEYWORD [@SECTION_NAME], kde VALUE 'SECTION_NAME' je nazov C# PROPERTY reprezentujucej danu SECTION.
   C. V PARENT BLAZOR COMPONENT su jednotlive SECTIONS definovane pomocou HTML ELEMENT [<SECTION_NAME>CONTENT</SECTION_NAME>], kde VALUE 'SECTION_NAME' je nazov SECTION a VALUE 'CONTENT' je CONTENT, ktory dana SECTION obsahuje.
12. BLAZOR FRAMEWORK umoznuje definovat TEMPLATES, ktore maju GENERIC TYPE PARAMETERS. Pre TEMPLATES s GENERIC TYPE PARAMETERS platia nasledujuce fakty.
   A. CHILD BLAZOR COMPONENT moze definovat 1-N GENERIC TYPE PARAMETERS co su PARAMETERS, ktore maju GENERIC TYPE.
   B. GENERIC TYPE PARAMETERS mozu byt v CHILD BLAZOR COMPONENT vyuzite na parametrizaciu SECTIONS. To znaci, ze SECTIONS NEMAJU TYPE [RenderFragment], ale TYPE [RenderFragment<TYPE>], kde VALUE 'TYPE' je TYPE GENERIC TYPE PARAMETER.
   !!! C. PARAMETRIZED SECTIONS je mozne renderovat tak, ze CHILD BLAZOR COMPONENT posle do PARAMETRIZED SECTION OBJECT GENERIC TYPE PARAMETER, ktoru PARENT BLAZOR COMPONENT, ktory definuje CONTENT danej SECTION vyuzije pre rendering daneho OBJECT.
13. BLAZOR COMPONENTS pouzivajuce PARAMETRIZED CTIONS, ktore maju GENERIC TYPE PARAMETERS sa implementuju nasledujucim sposobom.
   A. CHILD BLAZOR COMPONENT, ktora definuje PARAMETRIZED SECTIONS musi na zaciatku [.RAZOR] FILE pouzit pre KAZDY GENERIC TYPE PARAMETER KEYWORD [@typeparam GENERIC_TYPE_NAME], kde VALUE 'GENERIC_TYPE_NAME' je nazov GENERIC TYPE PARAMETER.
   !!! B. Ak CHILD BLAZOR COMPONENT pouziva CODE BEHIND [.CS] FILE, tak CLASS, ktora je DERIVED z BASE CLASS [ComponentBase] MUSI pre kazdy KEYWORD [@typeparam GENERIC_TYPE_NAME] mat GENERIC TYPE PARAMETER. To znamena, ze ak CHILD BLAZOR COMPONENT 'XXX' pouziva 1 GENERIC TYPE PARAMETER 'TParam', tak CODE BEHIND CLASS MUSI byt TYPE [XXX<TParam>].
   !!! C. Ak CHILD BLAZOR COMPONENT definuje PARAMETRIZED SECTION pouzivajucu GENERIC TYPE PARAMETER, potom MUSI definovat C# PROPERTY TYPE [RenderFragment<TYPE>], kde VALUE 'TYPE' je GENERIC TYPE PARAMETER. C# PROPERTY MUSI byt oznacena ATTRIBUTE [ParameterAttribute].
   !!! D. Ak CHILD BLAZOR COMPONENT chce renderovat PARAMETRIZED SECTION pre instanciu GENERIC TYPE PARAMETER, potom [.RAZOR] FILE MUSI pouzit SYNTAX [@SECTION_NAME(OBJECT)], kde VALUE 'SECTION_NAME' je nazov PARAMETRIZED SECTION a VALUE 'OBJECT' je instancia GENERIC TYPE PARAMETER. Aplikaciou tohto KEYWORD dojde k rendering PARAMETRIZE SECTION podla TEMPLATE, ktoru definuje PARENT BLAZOR COMPONENT.
   E. PARENT BLAZOR COMPONENT v [.RAZOR] FILE ak pouziva CHILD BLAZOR COMPONENT aplikovanim HTML ELEMENT s ronakym nazvom ako CHILD BLAZOR COMPONENT pricom CHILD BLAZOR COMPONENT pouziva GENERIC TYPE PARAMETERS, PARENT BLAZOR COMPONENT musi pre kazdy GENERIC TYPE PARAMETER subsituovat realny C# TYPE. Realny C# TYPE sa substituuje aplikaciu HTML ATTRIBUTE [GENERIC_TYPE_PARAMETER_NAME="CSHARP_TYPE"] na HTML ELEMENT reprezentujuci CHILD BLAZOR COMPONENT.
   !!! F. Ak PARENT BLAZOR COMPONENT definuje TEMPLATE pre PARAMETRIZED SECTION, MUSI definovat CONTEXT VARIABLE pomocou ktorej sa bude referovat na PROPERTIES C# OBJECT reprezentujuci GENERIC TYPE PARAMETER. CONTEXT VARIABLE sa definuje aplikaciu HTML ATTRIBUTE [Context="VARIABLE_NAME"] na HTML ELEMENT reprezentujuci PARAMETRIZED SECTION.
14. BLAZOR FRAMEWORK umoznuje definovat CASCADING PARAMETERS. CASCADING PARAMETERS su PARAMETERS, ktore su definovane na urovni CHILD BLAZOR COMPONENTS. Tieto CHILD BLAZOR COMPONENTS mozu byt aj VIACNASOBNE VNORENE v inych BLAZOR COMPONENTS. VALUES CASCADING PARAMETERS vsak aj napriek viacnasobnemu vnoreniu mozu byt definovane na urovni NAJVRCHNEJSEJ PARENT BLAZOR COMPONENT pomocou HTML ELEMENT [<CascadingValue>], pricom BLAZOR FRAMEWORK AUTOMATICKY zabezpeci ich prenos cez celu hierachiu CHILD BLAZOR COMPONENTS az do CHILD BLAZOR COMPONENT, ktora dany CASCADING PARAMETER pouziva. Vdaka tomu NIE JE NUTNE prenasat MANUALNE PARAMETERS cez celu hierarchiu CHILD BLAZOR COMPONENTS, pretoze BLAZOR FRAMEWORK to pomocou CASCADING PARAMETERS zabezpecuje AUTOMATICKY.
15. CASCADING PARAMETERS sa definuju nasledujucim sposobom.
   A. CHILD BLAZOR COMPONENT, ktora chce pouzivat CASCADING PARAMETERS, musi pre kazdy CASCADING PARAMETER definovat C# PROPERTY, ktora je oznacena ATTRIBUTE [CascadingParameterAttribute]. ATTRIBUTE [CascadingParameterAttribute] umoznuje definovat NAME CASCADING PARAMETER pomocou ktoreho sa na dany CASCADING PARAMETER je mozne referovat z HTML ELEMENT [<CascadingValue>].
   B. PARENT BLAZOR COMPONENT, ktory moze byt v hierarchii BLAZOR COMPONENTS aj o niekolko urovni nizsie moze VALUES CASCADING PARAMETERS nastavit tak, ze v [.RAZOR] FILE aplikuje na tu cast HTML CODE, ktora obsahuje CHILD BLAZOR COMPONENT pouzivajuci CASCADING PARAMETERS HTML ELEMENT [<CascadingValue>].
   C. HTML ELEMENT [<CascadingValue>] v HTML ATTRIBUTE [Name] definuje nazov CASCADING PARAMETER, ktory chce nastavit. Tento nazov sa MUSI zhodovat s nazvom nastavenym pomocou ATTRIBUTE [CascadingParameterAttribute].
   !!! D. HTML ELEMENT [<CascadingValue>] v HTML ATTRIBUTE [Value] definuje C# EXPRESSION (spravidla C# PROPERTY), z ktorej sa ma nacitat VALUE CASCADING PARAMETER.
   !!! E. HTML ELEMENT [<CascadingValue>] v HTML ATTRIBUTE [IsFixed] urcuje ci sa VALUE CASCADING PARAMETER moze dynamicky menit. V pripade, ze sa VALUE DYNAMICKY MENI, tak nova VALUE je AUTOMATICKY zaslana do CHILD BLAZOR COMPONENT, ktora pouziva dany CASCADING PARAMETER.
   !!!!! F. Ak CHILD BLAZOR COMPONENT pouziva VIACERO CASCADING PARAMETERS, alebo v HTML ELEMENT [<CascadingValue>] sa nachadza VIACERO rozlicnych CASCADING PARAMETERS, ktore je treba nastavit, tak je NUTNE aplikovat HTML ELEMENT [<CascadingValue>] VIACKRAT - jedenkrat pre kazdy CASCADING PARAMETER.
16. BLAZOR FRAMEWORK zabezpecuje ERROR HANDLING pri strate CONNECTION nasledujucim sposobom.
   A. BLAZOR FRAMEWORK vo VIEW, alebo v RAZOR PAGE vyhlada HTML ELEMENT s ID nastavenym na VALUE [components-reconnect-modal].
   B. Podla toho v akom STATE sa CONNECTION nachadza, nastavuje hodnotu CSS CLASS na VALUE [components-reconnect-show], VALUE [components-reconnect-failed], alebo VALUE [components-reconnect-rejected] pomocou, ktorych je mozne zmenit CONTENT HTML ELEMENT s ID [components-reconnect-modal].
   !!!!! C. Ak ma HTML ELEMENT s ID [components-reconnect-modal] nastaveny CSS CLASS na VALUE [components-reconnect-hide], tak BLAZOR FRAMEWORK pri vzniku CONNECTION ERROR NAHRADI tuto VALUE za [components-reconnect-show], VALUE [components-reconnect-failed], alebo VALUE [components-reconnect-rejected], podla toho k akej CONNECTION ERROR doslo.
   !!! D. Ak dojde ku CONNECTION LOST (napriklad pre docasny vypadok na sieti), BLAZOR FRAMEWORK nastavi CSS CLASS v HTML ELEMENT s ID [components-reconnect-modal] na VALUE [components-reconnect-show]. BLAZOR FRAMEWORK sa AUTOMATICKY pokusa nadviazat CONNECTION so SERVER SIDE.
   !!! E. Ak dojde ku CONNECTION FAILED (LOST CONNECTION sa AUTOMATICKY nepodarilo obnovit), BLAZOR FRAMEWORK nastavi CSS CLASS v HTML ELEMENT s ID [components-reconnect-modal] na VALUE [components-reconnect-failed]. Pokial vypadok siete bol len dlhodoby no docasny a SERVER SIDE stale bezi a ma stale uchovany STATE BLAZOR COMPONENTS, je mozne pomocou JAVA SCRIPT CODE [window.Blazor.reconnect()]. Po zavolani tohto CODE sa BLAZOR FRAMEWORK znova pokusi nadviazat CONNECTION so SERVER SIDE.
   !!! F. Ak dojde ku CONNECTION REJECTION (CONNECTION sa OBNOVILA, no SERVER SIDE bol RESTARTED a teda pre BLAZOR COMPONENTS uz NEEXISTUJE ich SERVER SIDE), BLAZOR FRAMEWORK nastavi CSS CLASS v HTML ELEMENT s ID [components-reconnect-modal] na VALUE [components-reconnect-rejected]. CLIENT SIDE moze v takomto pripade ponuknut BUTTON, ktory zavola JAVA SCRIPT CODE [location.reload()], ktory obnovi cez PAGE vykonanim POSTBACK.
   !!!!! G. V pripade, ze CONNECTION je USPESNE OBNOVENA (napriklad doslo iba k docasnemu vypadku siete), BLAZOR FRAMEWORK ODSTRANI nastaveny CSS CLASS v HTML ELEMENT s ID [components-reconnect-modal]. Ak HTML ELEMENT s ID [components-reconnect-modal] mal pred vypadkom CONNECTION CSS CLASS na VALUE [components-reconnect-hide], tak je tato VALUE OBNOVENA.
17. Pre ERROR STATE CONNECTION LOST platia nasledujuce fakty.
   A. K vzniku CONNECTION LOST dojde vtedy, ak doslo k vypadku komunikacie medzi CLIENT SIDE a SERVER SIDE.
   !!! B. Pri vzniku CONNECTION LOST, v pripade, ze HTML ELEMENT s ID [components-reconnect-modal] mal pred vznikom ERROR nastaveny CSS CLASS na VALUE [components-reconnect-hide], tak je tato VALUE odstranena.
   !!! C. Pri vzniku CONNECTION LOST, BLAZOR FRAMEWORK nastavi CSS CLASS HTML ELEMENT s ID [components-reconnect-modal] na VALUE [components-reconnect-show].
   !!!!! D. BLAZOR FRAMEWORK sa po nejaky cas AUTOMATICKY pokusa OBNOVIT CONNECTION. Ak sa mu to NEPODARI, prechadza do ERROR STATE CONNECTION FAILED.
18. Pre ERROR STATE CONNECTION FAILED platia nasledujuce fakty.
   A. K vzniku CONNECTION FAILED dochadza po vzniku CONNECTION LOST, kedy po definovany cas sa BLAZOR FRAMEWORK NEPODARILO nadviazat CONNECTION so SERVER SIDE.
   !!! B. Pri vzniku CONNECTION FAILED, v pripade, ze HTML ELEMENT s ID [components-reconnect-modal] mal pred vznikom ERROR nastaveny CSS CLASS na VALUE [components-reconnect-hide], tak je tato VALUE odstranena.
   !!! C. Pri vzniku CONNECTION FAILED, BLAZOR FRAMEWORK nastavi CSS CLASS HTML ELEMENT s ID [components-reconnect-modal] na VALUE [components-reconnect-failed].
   !!!!! D. V pripade obnovenia dlheho vypadku SERVER SIDE, pri ktorom vsak NEDOSLO k RESTART SERVER SIDE a teda STATE jednotlivych BLAZOR COMPONENTS je na SERVER SIDE stale uchovany, je mozne vykonat MANUALNY RECONNECT volanim JAVA SCRIPT CODE [window.Blazor.reconnect()].
19. Pre ERROR STATE CONNECTION REJECTED platia nasledujuce fakty.
   A. K vzniku CONNECTION REJECTED dochadza vtedy, ak SERVER SIDE bola RESTARTED a teda uz NEOBSAHUJE STATES jednotlivych BLAZOR COMPONENTS.
   !!! B. Pri vzniku CONNECTION REJECTED, v pripade, ze HTML ELEMENT s ID [components-reconnect-modal] mal pred vznikom ERROR nastaveny CSS CLASS na VALUE [components-reconnect-hide], tak je tato VALUE odstranena.
   !!! C. Pri vzniku CONNECTION REJECTED, BLAZOR FRAMEWORK nastavi CSS CLASS HTML ELEMENT s ID [components-reconnect-modal] na VALUE [components-reconnect-rejected].
   !!!!! D. Pomocou JAVA SCRIPT CODE [location.reload()] je mozne vykona RELOAD celej PAGE kedy su STATES vsetkych BLAZOR COMPONENTS obnovene do povodnych STATES.
20. Ak doslo k obnoveniu CONNECTION, BLAZOR FRAMEWORK vykonava nasledujuce kroky.
   A. Ak mal HTML ELEMENT s ID [components-reconnect-modal] nastaveny CSS CLASS na VALUE [components-reconnect-show], VALUE [components-reconnect-failed], alebo VALUE [components-reconnect-rejected], tak su tieto CSS CLASSES ODSTRANENE.
   !!!!! B. V pripade, ze PRED VZNIKOM CONNECTION ERROR mal HTML ELEMENT s ID [components-reconnect-modal] nastaveny CSS CLASS na VALUE [components-reconnect-hide], tak je tento CSS CLASS OBNOVENY.
21. V pripade, ze pri spracovani BLAZOR COMPONENT EVENTS dojde k UNHANDLED EXCEPTION, vysledkom je ZLYHANIE BLAZOR COMPONENT, ktora prestane komunikovat so SERVER SIDE. BLAZOR COMPONENT pri vzniku UNHANDLED EXCEPTION vykona nasledujuce kroky.
   A. BLAZOR FRAMEWORK vyhlada HTML ELEMENT, ktoreho HTML ATTRIBUTE [id] je nastaveny na VALUE [blazor-error-ui] a pre tento HTML ELEMENT nastavi CSS PROPERTY [display] na VALUE [block]. Vdaka tomu je mozne zobrazit HTML CONTENT, ktory informuje USER o vzniku UNHANDLED EXCEPTION.
   B. Po nastaveni CSS PROPERTY [display] na VALUE [block] prestane by BLAZOR COMPONENT aktivna.
   !!! C. HTML CONTENT v HTML ELEMENT, ktoreho HTML ATTRIBUTE [id] je nastaveny na VALUE [blazor-error-ui] moze obsahovat volanie JAVA SCRIPT CODE [location.reload()], ktory spravi REFRESH CELEJ HTML PAGE.
//----------------------------------------------------------------------------------------------------------------------