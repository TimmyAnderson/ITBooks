//------------------------------------------------------------------------------
1. Program demonstruje pouzitie Controls a Buttons.
2. Vo WPF je kazdy GUI prvok nazyvany ako ELEMENT.
3. Control je SPECIALNY TYP ELEMENTU, ktory AKTIVNE zachytava USER INPUTS.
!!! 4. Hoci i ELEMENTS ako Image, ci TextBlock, ktore NIE SU CONTROLS maju KEYBOARD a MOUSE EVENTS, kedze tie dedia z UIElement, tak ich IGNORUJU.
!!! 5. Button dedi od ContentControl (ktora dedi od Control) a tak obsahuje Content property.
!!! 6. TextBox dedi IBA OD Control a teda NEOBSAHUJE Content property.
7. Properties HorizontalContentAlignment a VerticalContentAlignment sluzia na umiestnenie CONTENT v ramci obsahu Button. Su PODOBNE HorizontalAlignment a VerticalAlignment, ktore vsak sluzia na umiestnenie BUTTON VOCI CONTAINER na ktorom sa BUTTON NACHADZA.
8. Padding sluzi na odsadenie Content v RAMCI obsahu Button. Je podobna property Margin, ktora vsak sluzi na odsadenie BUTTON voci okraju CONTAINER, v ktorom je Button umiestneny.
9. Metodou Focus() je mozne danemu Button priradit FOCUS.
10. Property IsDefault urcuje, ktory Button je Default - reaguje na klavesnu Enter.
11. Property IsCancel urcuje, ktory Button je Cancel button - reaguje na klavesu Esc.
12. K Resources (nastavenie Resource v Build Action) je mozne pristupovat pomozou 'pack' syntaxe.
!!! 13. Button dedi z ButtonBase property Command, ktora moze byt nastavena na COMMAND - instanciu triedy implementujucej ICommand. Command umoznuje zdruzit VYVOLANIE TEJ ISTEJ LOGICKEJ AKCIE do jedneho OBJEKTU, pomocou ktoreho sa budem na nu odkazovat. Pouzitie je nasledovne.
   A. Vyberiem triedu implementujucu ICommand z preddefinovanych, alebo implementujem CUSTOM IMPLEMENTACIU. .NET podporuje pre STANDARDNE ACTIONS ako napriklad Copy, Paste, Undo, Application Exit mnozstvo ICommand v triedach ako ApplicationCommands, ComponentCommands, MediaCommands, NavigationCommands ci EditingCommands.
   B. Instanciu triedy priradim do property Command - napriklad pre Button, ci MenuItem.
   C. Vytvorim 2 METODY. Jedna implementujuca logiku, ktora sa vyvola pri vyvolani COMMAND a druha na urcenie ci Command je mozne vykonat. Napriklad Paste je mozne vykonat iba ak je Clipboard naplneny.
   D. Do kolekcie CommandBinding (zdedenu z UIElement) priradim cez Add() metody danemu COMMAND.
14. Trieda ToggleButton je NEABSTRAKTNA TRIEDA z ktorej dedi ako RadioButton, tak i CheckBox. Kedze je NEABSTRAKTNA, tak je mozne vytvorit i instanciu ToggleButton.
15. Trieda FrameworkElement obsahuje property ToolTip, ktora je typu object a umoznuje nastavit Tool Tip pre dany element.
16. Trieda Label dokaze definovat UNDERSCORE pod pismenom. Toto pismeno potom symbolizuje SHORTCUT s klavesou Alt pomocou, ktoreho sa ZMENI FOCUS na ELEMENT odkazovany v property Target triedy Label.
17. Trieda TextBox je klasickym TextBoxom. Standardne je JEDNORIADKOVY, avsak nastavenim property AcceptReturn je mozne z neho spravit viac riadkovy TextBox.
18. Trieda RichTextBox umoznuje zobrazovat RTF text.
!!! 19. Trieda RichTextBox umoznuje zobrazovat i INE FORMATY ako SPECIALIZOVANY XAML format.
//------------------------------------------------------------------------------