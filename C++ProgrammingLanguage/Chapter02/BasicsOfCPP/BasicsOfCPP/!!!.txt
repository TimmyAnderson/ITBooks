//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje niektore zakladne koncepty C++.
2. C++ je objektovo orientovany jazyk, pretoze jednoduchym sposobom umoznuje vytvarat triedy a objekt z tychto tried.
!!! 3. NAMESPACES mozu obsahovat LUBOVOLNU DEKLARACIU. Teda mozu obsahovat CLASSES, FUNCTIONS i VARIABLES.
4. NAMESPACE je mozne pouzit ako istu formu ZAPUZDENIA DAT a vystavenia 'INTERFACE' cez, ktory k datam je mozne pristupovat. Sposob pouzitia NAMESPACES na realizaciu ZAPUZDRENIA DAT je nasledovny.
   A. V .H subore definujem funkcie INTERFACE, ktore sluzia na pristup k ZAPUZDRENYM DATAM.
   B. V .CPP subore definujem DATA, ktore maju byt zapuzdrene.
   C. V .CPP subore implementujem funkcie definovane v INTERFACE v .H subore.
   !!! D. Vysledkom je, ze k ZAPUZDRENYM DATAM v .CPP subore NIE JE MOZNE PRISTUPIT INAK ako cez funkcie INTERFACE.
   !!!!! E. Samozrejme ZASADNYM ROZDIELOM oproti CLASSES je v tom, ze NIE JE MOZNE VYTVARAT INSTANCIE NAMESPACE a ZAPUZDRENE DATA su GLOBALNYMI DATAMI.
!!! 5. V C++ je MODULE definovany ako JEDEN CPP subor. MODULE je KOMPILOVANY NEZAVISLE na INYCH MODULES.
6. C++ umoznuje vyhadzovat a zachytavat EXCEPTIONS. EXCEPTIONS za vyhadzuju pomocou klucoveho slova 'throw' a zachytavaju sa v 'try-catch' bloku.
!!! 7. C++ NEPODPORUJE klucove slovo 'finally'.
8. C++ PODPORUJE TEMPLATES, ktore vsak na rozdiel od .NET GENERICS su realizovane vytvorenim NOVEHO TYPU uz POCAS COMPILE TIME a NIE POCAS RUN-TIME, ako je to v pripade .NET GENERICS.
9. V C++ je mozne definovat TEMPLATES na urovni CLASSES, alebo FUNCTIONS.
//-------------------------------------------------------------------------------------------------------