//------------------------------------------------------------------------------
1. Program demonstruje pouzitie Conditional Variables (CV) v Native kode.
2. CV su v Managed prostredi HBOKO INTEGORVANE s .NET Monitors.
3. Princip CV je nasledovny.
   A. Thread 1 vstupi do CS (Monitor) a vykonava svoju cinnost az kym nezisti, ze potrebuje aby Thread 2 vykonal nejaku akciu aby Thread 1 mohol pokracovat.
   B. Thread 1 volanim Monitor.Wait() ATOMICKY VYSKOCI z CS a zaradi Thread 1 do WAIT LIST na CV, ktora je symbolizovana TYM ISTYM OBJEKTOM NA KTORY SOM PRAVE ODBLOKOVAL LOCK.
   C. Thread 2 teraz MOZE VSTUPIT do CS (lebo lock nanho vo volani Wait() Thread 1 ukoncil) a VYKONAT SVOJU CINNOST.
   D. Ked Thread 2 vykona co mal a Thread 1 vdaka tomu moze pokracovat, tak to Thread 2 SIGNALIZUJE tym, ze SIGNALIZUJE pomocou Monitor.Pulse() to, ze CV je SIGNALIZOVANA.
   E. AZ VSAK KED Thread 2 VYSKOCI z CS, tak Thread 1, ktory ma AKO SIGNALIZOVANU CV, tak AJ UVOLNENI CS, moze pokracovat vo vykonavani kodu, pricom PRED NAVRATOM z Wait() ZISKA ZNOVA CS.
!!! 4. Timeout je podobne ako v Native CS zavadzajuci, kedze je to iba Timeout cakania na signalizovanie CV. AK PRETECIE, tak Wait() CAKA DALEJ, AZ KYM SA NEUVOLNI CS. Wait() NIKDY NEPORKACUJE BEZ TOHO ABY ZNOVA NEZISKALA CS. Ak do stanoveneho Timeout sa CV NESIGNALIZUJE, tak vrati FALSE, inak TRUE. ALE STALE PLATI, ze PRI NAVRATE z Wait() je CS ZNOVA LOCKNUTA.
5. CV su interne implementovane pomocou Events.
//------------------------------------------------------------------------------