//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "SVoidType.h"
#include "STypeFunctionBoolConstant.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! PRIMARY TEMPLATE CLASS pre FALSE CASE.
template<typename, typename=SVoidType<>>
struct STypeClassificationHasVariousMembers final : TypeFunctionFalseType
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS SPECIALIZATION, ktora testuje ci TYPE [TType] ma METHOD [GetValue()] a ZAROVEN ci TYPE [TType] ma TYPE [MY_TYPE].
template<typename TType>
struct STypeClassificationHasVariousMembers<TType, SVoidType<decltype(std::declval<TType>().GetValue()),typename TType::MY_TYPE>> final : public TypeFunctionTrueType
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------