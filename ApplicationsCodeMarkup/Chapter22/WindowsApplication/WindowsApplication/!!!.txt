//-----------------------------------------------------------------------------------------------------------------
1. Program demonstruje rozlicne formy vytvarania programov vo WPF.
2. Vo WPF je mozne vytvorit 3 rozlicne typy programov.
   A. Klasicka WINDOWS .EXE aplikacia vo forme spustatelnych binarnych suborov.
   B. Subor typu .XAML, ktory umoznuje vytvorit iba velmi primitivne programy neobzahujuce C# kod, ktore sa spustaju v IE.
   C. Browser XBAP application su subory typu .XBAP. Tieto aplikacie sa spustaju v IE, ale obsahuju ako XAML, tak i C#. Na navigaciu vsak pouzivaju HYPERLINKS podobne ako KLASICKE WEB APLIKACIE.
!!! 3. Browser XBAP aplikacie sa vyznacuju tym, ze na navigaciu v ramci aplikacie pouzivaju navigacne prvky podobne ako pri WEB aplikaciach ako su HYPERLINKS ci tlacika Back a Forward.
!!! 4. Na Browser XBAP aplikacie sa vztahuju SECURITY RESTRICTION, aby nemohli byt zneuzite na vyvoj virusov. Preto ich funkcionalita je obmedzena security nastavenim IE.
!!!!! 5. Trieda Hyperlink umoznuje urobit skok na WEB PAGE, alebo i XAML, ale ODLISNE FUNGUJE podla toho v AKOM TYPE Window je umiestnena.
   A. Ak ju umiestnim do Window, tak MUSIM NASTAVIT event RequestNavigate a v nom RUCNE SPUSTIT NAPRIKLAD instanciu IE, ktory zobrazi Web Page, alebo XAML.
   !!! B. Ak ju umiestnim do NavigationWindow, tak sa CELY OBSAH WINDOWS zmeni na obsah danej Web Page, alebo XAML. V tomto pripade NEMUSIM DEFINOVAT EVENT RequestNavigate, pretoze pri kliknuti na Hyperlink OKAMZITE dojde k presmerovaniu na INY Web Page, alebo XAML.
!!! 6. Zakladom XBAP aplikacii je trieda NavigationWindow v ktorej definujem HYPERLINKS, ktore sa budu odkazovat na ine XAML NavigationWindows.
7. Na vytvorenie XBAP aplikacii je mozne pouzit 2 zakladne triedy.
   A. NavigationWindow umoznuje definovat WINDOW - cely Window BROWSERA, aby zaplnal XBAP aplikaciu a pri prepinani medzi jednotlivymi Pages sa meni obsah CELEHO OKNA BROWSER.
   B. Frame umoznuje definovat CAST WINDOW v ktorom sa bude realizovat navigacia.
!!! 8. Ako NavigationWindow tak i Frame maju Source property, ktorou je mozne odkazovat na XAML subor (zbvycajne XAML obsahuje ako ROOT objekt Page). Obsah Source sa potom zobrazi v IE. ALTERNATIVOU voci Source je property Content, kde je mozne definovat takisto obsah NavigationWindow a Frame. Zvycajne vyhodnejsie je pouzivat Source.
!!! 9. Property Source sa spravidla odkazuje na Page, ktory ma okrem ineho property Title sluziacu na definovanie mena PAGE, ktora sa zobrazi v NAVIGATION HISTORY pod Back a Forward tlacitkami. Takisto Page ma property NavigationService, ktorou sa mozem odkazat na objekt NavigationService.
10. Objekt NavigationService (odkazy cez property NavigationService nan obsahuju i triedy NavigationWindow a Frame) obsahuje metody umoznujuce navigaciu medzi jednotlivymi Pages. Ak potrebujem ziskat odkaz na NavigationService mozem pouziti i STATICKU metodu NavigationService.GetNavigationService().
!!!!! 11. Pri prepinani medzi Pages dochadza k STRATE OBSAHU - VYTVORI SA NOVY OBJEKT PAGE a tak nie je mozne uchovat v Page FIELDS, kedze pri zmene Page sa tieto udaje stratia.
12. Ak mam v Page viacero Frames, tak KAZDY FRAME ma VLASTNE NAVIGACNE ELEMENTS, ktore su vzajomne nezavisle.
13. Wizards su typy programov, ktore maju Next a Previous buttons, ktorymi sa je mozne prepinat medzi jednotlivymi Pages.
!!! 14. Pre Wizards je typicke ze pouzivaju NavigationWindow alebo Frame, kedze VELMI ZJEDNODUSUJU IMPLEMENTACIU WIZARDS vdaka podpore zurnalovania navstivenych Pages. Zaroven vsak Wizard zvycajne NEPOUZIVA DEFAULT NAVIGACNE ELEMENTS, ale radsej impelementuje VLASTNE BUTTONS na navigaciu. Vypnutie DEFAULT NAVIGATION ELEMENTS je mozne v NavigationWindow pomocou property ShowNavigationUI na FALSE a v pripade Frame je to nastavenie property NavigationUIVisibility na FALSE.
!!! 15. Je DOBRYM ZVYKOM, ze Wizards pri prepinani medzi PAGES si ZACHOVAVAJU SVOJ STAV.
16. Frame ci NavigationWindow (prostrednictvom property NavigationService) obsahuje properties CanGoBack a CanGoForward urcujuce ci je mozne pouziot BACK/FORWARD button a metody GoBack() a GoForward() vykonavajuce prechod na BACK/FORWARD PAGE.
!!! 17. Vyhodou pouzitia NAVIGACNYCH METOD GoBack() a GoForward() je, ze sa prepinaju medzi EXISTUJUCIMI INSTANCIAMI Page objektov a teda tie si ZACHOVAVAJU SVOJ STAV.
18. Jednoduchy sposob ako realizovat funkcionalitu DIALOG BOX poskytuje trieda PageFunction<Type>. Pomocou tejto triedy je mozne implementovat funkcionalitu DIALOG BOX nasledovne.
   A. Parameter typu PageFunction<Type> (v XAML definovany v x:TypeArguments) urcuje NAVRATOVU HODNOTU PAGE.
   B. Pri prechode na PageFunction<Type> si tato trieda SAMA MANAGEUJE JOURNAL a to tak, ze pri odchode z tejto PAGE - navrate na PAGE odkial bola volana, NEPRIDA ZAZNAM do JOURNAL a teda pri navrate na PAGE, ktora ju volala pri volani GoForward() sa NEDOSTANEM na PageFunction<Type> PAGE - co by aj bolo dost nelogicke, kedze PageFunction<Type> ma simulovat DIALOG BOX.
   C. Ak chcem ukoncti PageFunction<Type>, musim zavola jej metodu OnReturn() a ako parameter jej predat navatovu hodnotu typu Type prostrednictvom triedy ReturnEventArgs<Type>.
   !!! D. V Page, ktora vyvolava PageFunction<Type> je potrebne zaregistrovat EVENT Return, ktory je zavolany pri UKONCENI PageFunction<Type>.
!!! 19. Hyperlink pouzivany na navigaciu ma property TargetName, ktorym sa mozem odkazat na Frame, ktory HYPERLINK presunie na INU PAGE.
!!! 20. Vo FlowDocument pri definovani Paragraph mozem definovat jeho Name, na ktore sa MOZEM v Hyperlink ANCHOR pomocou konvencie 'FileName.XAML#AnchorName'. Takto mozem v dokumente vytvarat linky na svoje casti.
//-----------------------------------------------------------------------------------------------------------------