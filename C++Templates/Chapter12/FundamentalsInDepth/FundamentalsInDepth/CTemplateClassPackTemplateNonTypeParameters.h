//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! DECLARATION, ale nie DEFINITION PRIMARY TEMPLATE.
template<int... VALUES>
class CTemplateClassPackTemplateNonTypeParameters;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre 0 PARAMETERS.
template<>
class CTemplateClassPackTemplateNonTypeParameters<> final
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre 1-N PARAMETERS.
template<int FIRST, int... VALUES>
class CTemplateClassPackTemplateNonTypeParameters<FIRST,VALUES...> final
{
//----------------------------------------------------------------------------------------------------------------------
	// !!!!! V TEMPLATE CLASS pre 'M' PARAMETERS spravi FRIEND TEMPLATE CLASS pre 'N' PARAMETERS.
	template<int... LOCAL_VALUES>
	friend class CTemplateClassPackTemplateNonTypeParameters;

	private:
		CTemplateClassPackTemplateNonTypeParameters<VALUES...>	MFields;

	private:
		void PrintInternal(size_t Index) const;

	public:
		void Print(void) const;

	public:
		CTemplateClassPackTemplateNonTypeParameters(void);
		virtual ~CTemplateClassPackTemplateNonTypeParameters(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<int FIRST, int... VALUES>
CTemplateClassPackTemplateNonTypeParameters<FIRST,VALUES...>::CTemplateClassPackTemplateNonTypeParameters(void)
	: MFields()
{
}
//----------------------------------------------------------------------------------------------------------------------
template<int FIRST, int... VALUES>
CTemplateClassPackTemplateNonTypeParameters<FIRST,VALUES...>::~CTemplateClassPackTemplateNonTypeParameters(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<int FIRST, int... VALUES>
void CTemplateClassPackTemplateNonTypeParameters<FIRST,VALUES...>::PrintInternal(size_t Index) const
{
	std::wcout << L"TEMPLATE NON-TYPE PARAMETERS - PARAMETER [" << Index << L"] - TYPE [" << GetTypeInfoName<decltype(FIRST)>() << L"] - VALUE [" << FIRST << L"]." << std::endl;

	if constexpr (sizeof...(VALUES)>0)
	{
		MFields.PrintInternal(Index+1);
	}
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<int FIRST, int... VALUES>
void CTemplateClassPackTemplateNonTypeParameters<FIRST,VALUES...>::Print(void) const
{
	PrintInternal(1);
}
//----------------------------------------------------------------------------------------------------------------------