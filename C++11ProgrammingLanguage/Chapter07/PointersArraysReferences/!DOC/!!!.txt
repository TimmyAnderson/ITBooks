//-----------------------------------------------------------------------------
1. Solution demonstruje pouzitie POINTERS, ARRAYS a REFERENCES.
2. POINTER je C++ konstrukt, ktory umoznuje ulozit ADDRESS na ELEMENT ulozeny v MEMORY. C++ podporuje nasledujuce typy POINTERS.
   A. POINTER na VARIABLE.
   B. POINTER na FUNCTION.
   C. POINTER na MEMBER VARIABLE.
   D. POINTER na MEMBER FUNCTION (METHOD).
3. POINTER na VARIABLE umoznuje ulozit ADDRESS na VARIABLE. Pre POINTER na VARIABLE platia nasledujuce fakty.
   A. POINTER na VARIABLE je definovany pomocou SYNTAXE [TYPE* VARIABLE_NAME].
   B. OPERATOR& umoznuje ziskat ADDRESS z VARIABLE a priradit ju do POINTER.
   C. OPERATOR* vykonava POINTER DEREFERENCING. POINTER DEREFERENCING vracia VALUE daneho POINTER.
   D. OPERATOR-> vykonava POINTER DEREFERENCING, ak POINTER odkazuje na instanciu CLASS, alebo STRUCTURE. OPERATOR-> vracia VALUE OBJECT MEMBER daneho POINTER.
   E. C++ umoznuje definovanie POINTER na POINTER na VARIABLE.
   !!! F. Konverzia POINTER na VARIABLE na POINTER na VARIABLES INEHO TYPE je NEBEZPECNA a je ju nutne vykonat EXPLICITNE pomocou prikazu [reinterpret_cast<TYPE*>(EXPRESSION)].
   !!! G. Nad POINTER na VARIABLE je mozne vykonavat POINTER ARITHMETICS.
4. POINTER na FUNCTION umoznuje ulozit ADDRESS na FUNCTION. Pre POINTER na FUNCTION platia nasledujuce fakty.
   A. POINTER na FUNCTION je definovany pomocou SYNTAXE [RETURN_VALUE_TYPE (POINTER_TO_FUNCTION_VARIABLE_NAME*)(PARAMETER_TYPE_1, PARAMETER_TYPE_2, ..., PARAMETER_TYPE_N)].
   !!! B. OPERATOR& umoznuje ziskat ADDRESS z FUNCTION a priradit ju do POINTER. Pouzitie OPERATOR& je OPTIONAL. C++ dokaze detekovat pokus o priradenie ADDRESS danej FUNCTION do POINTER na FUNCTION, a preto pouzitie OPERATOR& NIE JE POVINNE.
   !!! C. OPERATOR* vykonava POINTER DEREFERENCING. POINTER DEREFERENCING zavola FUNCTION na ktoru POINTER na FUNCTION odkazuje. Pouziva sa SYNTAX [RETURN_VALUE=(*POINTER_TO_FUNCTION_VARIABLE_NAME)(ARGUMENT_1,ARGUMENT_2,...,ARGUMENT_N)]. Pouzitie OPERATOR* NIE JE POVINNE. C++ umoznuje volat FUNCTION na ktoru odkazuje POINTER na FUNCTION aj pomocou SYNTAXE [RETURN_VALUE=POINTER_TO_FUNCTION_VARIABLE_NAME(ARGUMENT_1,ARGUMENT_2,...,ARGUMENT_N)].
   !!!!! D. Do POINTER na FUNCTION je mozne priradit ADDRESS IBA na TIE FUNCTIONS, ktore maju ROVNAKY PROTOTYPE, VRATANE RETURN VALUE TYPE. To znaci, ze PROTOTYPE FUNCTION a POINTER na FUNCTION MUSI byt UPLNE IDENTICKY, inak COMPILER hodi ERROR. Jedinou vynimkou je, moznost do priradit NOEXCEPT FUNCTION do POINTER NA FUNCTION, ktory nema v PROTOTYPE NOEXEPT.
   E. V pripade, ze sa do POINTER na FUNCTION priradzuje ADDRESS FUNCTION, ktora je OVERLOADED, C++ COMPILER vyberie IBA tu verziu, ktora ma PROTOTYPE UPLNE IDENTICKY s PROTOTYPE POINTER na FUNCTION. Ak taka OVERLOADED FUNCTION NEEXISTUJE, COMPILER hodi ERROR.
   !!! F. POINTERS na FUNCTIONS je mozne konvertovat na ine typy POINTERS na FUNCTIONS pomocou KEYWORD [reinterpret_cast<POINTER_TO_FUNCTION_TYPE>(POINTER_TO_FUNCTION)]. Jedna sa vsak o EXTREMNE NEBEZPECNU KONVERZIU, ktora moze sposobit, ze PROGRAM sa dostane do UNDEFINED BEHAVIOR.
   G. PROTOTYPE POINTERS na FUNCTIONS sa musi zhodovat s PROTOTYPE ADDRESS priradzovanej FUNCTION aj v LINKAGE.
   H. C++ umoznuje definovanie POINTER na POINTER na FUNCTION.
5. POINTERS na MEMBER VARIABLES su specialne typy POINTERS pomocou ktorych je mozne odkazovat na FIELDS danej CLASS. Pre POINTERS na MEMBER VARIABLES platia tieto vlastnosti.
   A. Pomocou POINTERS na MEMBER VARIABLES je mozne vytvorit na POINTERS na FIELDS daneho OBJECT.
   !!!!! B. POINTERS na MEMBER VARIABLES su interne implementovane ako INDEXES v ramci CLASSES. Tieto POINTERS MOZU byt prenesene do inych ADDRESS SPACES.
   C. Ak je OBJECT reprezentovany cez VARIABLE, ktora JE typu OBJECT, k VALUES FIELDS na ktore odkazuju POINTERS na MEMBER VARIABLES je mozne pristupovat pomocou OPERATOR.*.
   D. Ak je OBJECT reprezentovany cez VARIABLE, ktora JE typu POINTER na OBJECT, k VALUES FIELDS na ktore odkazuju POINTERS na MEMBER VARIABLES je mozne pristupovat pomocou OPERATOR->*.
   !!! E. POINTERS na MEMBER VARIABLES NEMOZU byt priradene do VARIABLES TYPE [void*].
   F. POINTERS na MEMBER VARIABLES MOZU byt obsahovat VALUE [nullptr].
   !!! G. POINTERS na MEMBER VARIABLES NEMOZU referovat na STATIC FIELDS, kedze tie nie su sucastou instancii referovanej CLASS.
   H. POINTERS na MEMBER VARIABLES mozu odkazovat iba do tie FIELDS na ktore ma dany CODE ACCESS RIGHT.
6. POINTERS na MEMBER FUNCTIONS su specialne typy POINTERS pomocou ktorych je mozne odkazovat na METHODS a OPERATORS danej CLASS. Pre POINTERS na MEMBER FUNCTIONS platia tieto vlastnosti.
   A. Pomocou POINTERS na MEMBER FUNCTIONS je mozne vytvorit na POINTERS na METHODS a POINTERS na OPERATORS.
   !!! B. POINTERS na NON-VIRTUAL METHODS su implementovane ako KLASICKE POINTERS odkazujuce na MEMORY ADDRESS. Tieto POINTERS NEMOZU byt prenesene do inych ADDRESS SPACES.
   !!! C. POINTERS na VIRTUAL METHODS su implementovane ako INDEXES vo VIRTUAL METHOD TABLE. Tieto POINTERS MOZU byt prenesene do inych ADDRESS SPACES.
   D. Ak je OBJECT reprezentovany cez VARIABLE, ktora JE typu OBJECT, volanie MEMBER FUNCTIONS na ktore odkazuju POINTERS na MEMBER FUNCTIONS je mozne pristupovat pomocou OPERATOR.*.
   E. Ak je OBJECT reprezentovany cez VARIABLE, ktora JE typu POINTER na OBJECT, volanie MEMBER FUNCTIONS na ktore odkazuju POINTERS na MEMBER FUNCTIONS je mozne pristupovat pomocou OPERATOR->*.
   !!! F. POINTERS na MEMBER FUNCTIONS NEMOZU byt priradene do VARIABLES TYPE [void*].
   G. POINTERS na MEMBER FUNCTIONS MOZU byt obsahovat VALUE [nullptr].
   !!! H. POINTERS na MEMBER FUNCTIONS NEMOZU referovat na STATIC METHODS, kedze tie nie su sucastou instancii referovanej CLASS.
   I. POINTERS na MEMBER FUNCTIONS mozu odkazovat iba na tie METHODS na ktore ma dany CODE ACCESS RIGHT.
   !!! J. POINTERS na MEMBER FUNCTIONS podporuju INHERITANCE. Ak sa POINTER na MEMBER odkazuje na VIRTUAL METHOD, a je volany POINTER, alebo REFERENCE, tak sa tato METHODS zavola POLYMORFNE.
!!!!! 7. POINTERS na MEMBERS su implementovane SPECIFICKY podla toho na aky typ MEMBER referuju.
   A. POINTERS na FIELDS su implementovane ako INDEXES v ramci CLASSES. Tieto POINTERS MOZU byt prenesene do inych ADDRESS SPACES.
   B. POINTERS na NON-VIRTUAL METHODS su implementovane ako KLASICKE POINTERS odkazujuce na MEMORY ADDRESS. Tieto POINTERS NEMOZU byt prenesene do inych ADDRESS SPACES.
   C. POINTERS na VIRTUAL METHODS su implementovane ako INDEXES vo VIRTUAL METHOD TABLE. Tieto POINTERS MOZU byt prenesene do inych ADDRESS SPACES.
8. POINTER na VOID je specialny POINTER pre ktore platia nasledujuce fakty.
   A. Kazdy POINTER na VARIABLE je mozne IMPLICITNE konvertovat na POINTER na VOID.
   !!! B. POINTER na FUNCTION NIE JE MOZNE IMPLICITNE konvertovat na POINTER na VOID.
   !!! C. POINTER na MEMBER VARIABLE a POINTER na MEMBER FUNCTION NIE JE MOZNE konvertovat na POINTER na VOID.
   D. POINTER na VOID je mozne konvertovat spatne na POINTER na VARIABLE IBA pomocou EXPLICIT CAST [static_cast<TYPE*>(EXPRESSION)].
   !!! E. POINTER na VOID NIE JE MOZNE DEREFERENCOVAT pomocou OPERATOR*. Pred vykonanim DEREFERENCING je NUTNE najprv vykonat EXPLICIT CAST na konkretny TYPE.
   F. Na POINTER na VOID NIE JE MOZNE aplikovat POINTER ARITHMETICS pretoze velkost OBJECT na ktory POINTER referuje ne NEZNAMA.
9. CONSTANT [nullptr] reprezentuje NULL POINTER. CONSTANT [nullptr] je mozne priradit do LUBOVOLNEHO POINTER TYPE.
10. ARRAY v C++ reprezentuje kontinualny blok MEMORY, ktory ma PEVNU DLZKU. Pre ARRAYS v C++ platia nasledujuce fakty.
   A. ARRAYS su vzdy ulozene ako KONTINUALNY BLOCK MEMORY, ktory ma PEVNU DLZKU, ktora MUSI byt znama v COMPILE TIME.
   B. ARRAYS su indexovatelne pomocou OPERATOR[], kde PRVY ELEMENT ma INDEX 0.
   C. ARRAYS su IMPLITICNE konvertovatelne na POINTER na 0. ELEMENT ARRAY.
   D. ARRAYS mozu byt alokovane na STACK, alebo na HEAP pomocou OPERATOR NEW.
   E. Pri alokacii ARRAYS na HEAP je potrebne ARRAY uvolnit volanim OPERATOR DELETE[].
   F. ARRAYS NEPODPORUJU COPY SEMANTICS a MOVE SEMANTICS.
   G. MULTIDIMENSIONAL ARRAYS su reprezentovane ako ARRAYS obsahujuce ARRAYS.
   !!! H. Pristup k ARRAY ELEMENT, ktory lezi MIMO ROZSAHU ARRAY sposbi UNDEFINED BEHAVIOR.
   I. ARRAYS mozu byt inicializovane pomocou SYNTAX [{}].
11. STRING LITERALS reprezentuju postupnost CHARACTERS, ktore su definovane v COMPILE TIME. Pre STRING LITERALS platia nasledujuce fakty.
   A. STRING LITERALS su definovane pomocou SYNTAX ["TEXT"], kde 'TEXT' su CHARACTERS tvoriace STRING LITERAL.
   B. STRING LITERALS maju TYPE [const CHAR [SIZE+1]], kde 'SIZE' je pocet CHARACTERS v STRING LITERAL. Alokovana dlzka ARRAY je VACSIA o 1 CHARACTER, ktory obsahuje NULL CHARACTER ['\0'].
   C. STRING LITERALS mozu obsahovat aj viacero NULL CHARACTERS, ale standardne C FUNCTIONS pre pracu so STRINGS povazuju vyskyt 1. NULL CHARACTER za KONIEC STRING a dalsie CHARACTERS IGNORUJU.
   D. STRING LITERALS su definovane ako polia CONST CHARACTERS. To znaci, ze CHARACTERS NIE JE MOZNE MODIFIKOVAT.
   E. STRING LITERALS su STATICKY ALOKOVANE, preto je ich napriklad mozne vracat ako RETUN VALUES z FUNCTIONS.
   F. C++ COMPILER moze IDENTICKE STRING LITERALS zlucit. Je to vsak COMPILER DEPENDENT FEATURE. C++ STANDARD NEDEFINUJE ci tato optimalizacia ma, alebo nema byt vykonana.
   G. STRING LITERALS, ktore maju 0 DLZKU maju TYPE [const CHAR [1]], kde jedinym znakom v STRING LITERAL je NULL CHARACTER.
   H. Ak su dve STRING LITERALS zadane za sebou, oddelene iba WHITE SPACE, potom C++ taketo STRING LITERALS pocas kompilacie ZLUCI do jedneho STRING LITERAL.
   I. STRING LITERALS mozu obsahovat SPECIAL CHARACTERS, ako NEW LINES, alebo UVODZOVKY, no musia byt oznacene pomocou PREFIXU [\]. To znaci, ze napriklad NEW LINE v STRING LITERAL sa zapisuje pomocou SYNTAX ['\n'].
12. RAW STRING LITERALS su STRING LITERALS, ktore NEPOUZIVAJU CHARACTER [\] ako ESCAPE CHARACTER. Pre RAW STRING LITERALS platia nasledujuce fakty.
   A. RAW STRING LITERALS maju SYNTAX [R"(TEXT)"], kde 'TEXT' je STRING LITERAL, ktory moze obsahovat LUBOVOLNE CHARACTERS, okrem CHARACTERS [)"], ktore oznacuju koniec STRING LITERAL.
   B. RAW STRING LITERALS mozu vyjadrit aj CHARACTERS [)"] pomocou nasledujucej SYNTAXE [R"XXX(TEXT)XXX"], kde 'TEXT' je STRING LITERAL, ktory uz MOZE OBSAHOVAT aj CHARACTERS [)"] a 'XXX' je LUBOVOLNA CHARACTER SEQUENCE, ktora MUSI byt ROVNAKA na ZACIATKU aj na KONCI STRING LITERAL. Kedze CHARACTER SEQUENCE [)XXX"] reprezentuje identifikator konca STRING LITERAL, tak tato CHARACTER SEQUENCE sa NESMIE vyskytovat v STRING LITERAL.
   C. RAW STRING LITERALS mozu obsahovat aj NEW LINE CHARACTERS, ktore vsak nemaju SYNTAX [\n], ale jednoducho staci NEW LINE vlozit do SOURCE CODE medzi zaciatok a koniec RAW STRING LITERAL.
   D. RAW STRING LITERALS pre WIDE CHARACTERS maju SYNTAX [LR"(TEXT)"].
13. C++ definuje STRING LITERALS PREFIXES pre rozlicne typy CHARACTERS.
   A. SYNTAX ["TEXT"] reprezentuje STRING LITERAL pre TYPE [char].
   B. SYNTAX [R"(TEXT)"] reprezentuje RAW STRING LITERAL pre TYPE [char].
   C. SYNTAX [L"TEXT"] reprezentuje STRING LITERAL pre TYPE [wchar_t].
   D. SYNTAX [LR"(TEXT)"] reprezentuje RAW STRING LITERAL pre TYPE [wchar_t].
   E. SYNTAX [u8"TEXT"] reprezentuje STRING LITERAL pre TYPE [char] vyjadreny v UTF-8.
   F. SYNTAX [u8R"(TEXT)"] reprezentuje RAW STRING LITERAL pre TYPE [char] vyjadreny v UTF-8.
   G. SYNTAX [u"TEXT"] reprezentuje STRING LITERAL pre TYPE [char16_t] vyjadreny v UTF-16.
   H. SYNTAX [uR"(TEXT)"] reprezentuje RAW STRING LITERAL pre TYPE [char16_t] vyjadreny v UTF-16.
   I. SYNTAX [U"TEXT"] reprezentuje STRING LITERAL pre TYPE [char32_t] vyjadreny v UTF-32.
   J. SYNTAX [UR"(TEXT)"] reprezentuje RAW STRING LITERAL pre TYPE [char32_t] vyjadreny v UTF-32.
14. Medzi ARRAYS a POINTERS existuju nasledujuce vztahy.
   A. ARRAYS su IMPLICITNE KONVERTOVATELNE na POINTERS daneho TYPE.
   B. POINTERS NIE su KONVERTOVATELNE na ARRAYS daneho TYPE.
   C. Z LUBOVOLNEHO ARRAY ITEM je mozne ziskat POINTER, ktory nan odkazuje pomocou OPERATOR&.
   D. POINTER na 1. ITEM v ARRAY s INDEXOM 0 obsahuje tu istu ADDRESS ako ARRAY.
   E. C++ UMOZNUJE ziskat POINTER na JEDEN ITEM za KONCOM ARRAY.  C++ garantuje, ze tato POSITION je VALIDNA, aj ked ju NIE JE MOZNE DEREFERENCOVAT, pretoze NEOBSAHUJE VALID VALUE.
   !!! F. C++ NEUMOZNUJE ziskat POINTER na ITEMS PRED ZACIATKOM ARRAY, alebo ITEMS nachadzajumi sa viac ako 1 ITEM za KONCOM ARRAY. Pokus o ziskanie ADDRESSES na tychto POSITIONS sposobi UNDEFINED BEHAVIOR.
   G. ARRAYS do FUNCTIONS su prenesene ako POINTERS na 1. ITEM s INDEXOM 0. Velkosti ARRAYS sa pri prenose do FUNCTIONS STRATIA.
   H. Na POINTERS, ktore odkazuju do TOHO ISTEHO ARRAY je mozne aplikovat POINTER ARITHMETICS. POINTER ARITHMETICS sa vykonava pomocou OPERATOR+, OPERATOR-, OPERATOR++ a OPERATOR--.
   I. Na POINTERS, ktore odkazuju do ARRAYS je mozne aplikovat OPERATOR[].
15. C++ podporuje MULTIDIMENSIONAL ARRAYS. Pre MULTIDIMENSIONAL ARRAYS platia nasledujuce fakty.
   A. MULTIDIMENSIONAL ARRAYS sa definuju pomocou SYNTAXE [TYPE ARRAY_NAME[DIMESION_1][DIMESION_2]...[DIMESION_N]], kde VALUES 'DIMESION_*' urcuju rozmery danej DIMENSION v MULTIDIMENSIONAL ARRAY.
   B. MULTIDIMENSIONAL ARRAYS su v MEMORY reprezentovane ako SUVISLY MEMORY BLOCK, ktoreho velkost je rovna [DIMESION_1*DIMESION_2*...*DIMESION_N*sizeof(TYPE)].
   C. MULTIDIMENSIONAL ARRAYS mozu byt pri prenose ako ARGUMENTS do FUNCTIONS prenasane ako ARRAYS s 1. DIMENSION, ktora NEMA URCENU VELKOST. To znaci, ze ARRAY [TYPE ARRAY_NAME[DIMESION_1][DIMESION_2]...[DIMESION_N]] sa do FUNCTION prenasa ako ARRAY [TYPE ARRAY_NAME[][DIMESION_2]...[DIMESION_N]].
16. ARRAYS su do FUNCTIONS prenasane ako POINTERS na 1. ELEMENT. To znaci, ze ARRAYS su prenasane BY-POINTER a NIE BY-VALUE. Zmena ARRAY ITEMS v CALLED FUNCTION sa prejavi v ARGUMENT zaslanom z CALLER FUNCTION.
17. C++ podporuje nasledujuce typy CONST POINTERS.
   A. SYNTAX [const TYPE*] definuje POINTER na CONST VALUE. VALUE takehoto POINTER JE MOZNE ZMENIT, ale VALUE na ktoru POINTER ukazuje NIE JE MOZNE ZMENIT.
   B. SYNTAX [TYPE* const] definuje CONST POINTER na VALUE. VALUE takehoto POINTER NIE JE MOZNE ZMENIT, ale VALUE na ktoru POINTER ukazuje JE MOZNE ZMENIT.
   C. SYNTAX [const TYPE* const] definuje CONST POINTER na CONST VALUE. VALUE takehoto POINTER NIE JE MOZNE ZMENIT, a takisto ani VALUE na ktoru POINTER ukazuje NIE JE MOZNE ZMENIT.
18. C++ REFERENCES reprezentuju mechanizmus, ktory umoznuje bezpecnejsiu alternativu k POINTERS. Pre POINTERS a REFERENCES platia nasledujuce fakty.
   A. POINTERS a REFERENCES odkazuju na VARIABLES cez ich ADDRESSES. To znaci, ze prenos POINTERS a REFERENCES ako ARGUMENTS do FUNCTIONS sa vykonava prenosom BY-REFERENCE a NIE BY-VALUE. To znaci, ze prenos ARGUMENTS NESPOSOBUJE vytvorenie KOPIE ARGUMENTS a CALLED FUNCTION moze MODIFIKOVAT VALUE ARGUMENTS, ak su PARAMETERS definovane ako NON-CONST PARAMETERS.
   B. Pre pouzitie POINTERS je NUTNE pouzit SPECIALIZOVANE OPERATORS ako su OPERATOR&, OPERATOR* a OPERATOR->.
   !!! C. Pre pouzitie REFERENCES NIE JE NUTNE pouzit SPECIALIZOVANE OPERATORS, pretoze SYNTAX ich pouzitia je ROVNAKA ako pri NON-POINTER VARIABLES. To umoznuje JEDNODUCHSIE pouzitie REFERENCES.
   D. NON-CONST POINTERS je mozne presmerovat, aby odkazovali na INE VARIABLES.
   !!! E. REFERENCES NEMOZU byt PRESMEROVANE, aby odkazovali na INE VARIABLES. REFERENCES VZDY odkazuju na VARIABLES na ktore boli na zaciatku inicializovane.
   F. POINTERS mozu nadobudat NULL VALUES.
   !!! G. REFERENCES NEMOZU nedobudat NULL VALUES.
19. C++ definuje nasledujuce typy REFRENCES.
   A. LVALUE REFERENCES su REFERENCES na VARIABLES, ktore mozu byt CONST REFERENCES, alebo NON-CONST REFERENCES. NON-CONST REFERENCES mozu modifikovat VALUES na ktore NON-CONST REFERENCES odkazuju.
   B. RVALUE REFERENCES su REFERENCES na TEMPORARY VARIABLES, ktorych platnost konci po vykonani EXPRESSIONS v ktorych sa pouzivaju.
20. Pre LVALUE REFERENCES platia nasledujuce fakty.
   A. NON-CONST LVALUE REFERENCES su definovane pomocou SYNTAXE [TYPE& VARIABLE]. NON-CONST LVALUE REFERENCES MOZU MODIFIKOVAT VARIABLES na ktore referuju.
   B. CONST LVALUE REFERENCES su definovane pomocou SYNTAXE [const TYPE& VARIABLE]. CONST LVALUE REFERENCES NEMOZU MODIFIKOVAT VARIABLES na ktore referuju.
   C. LVALUE REFERENCES MUSIA byt VZDY INICIALIZOVANE uz vo svojej DEFINICII. To znaci, ze LVALUE REFERENCES NIKDY NEMOZU byt NEINICIALIZOVANE.
   D. NON-CONST LVALUE REFERENCES MUSIA byt inicializovane VZDY na LVALUES. To znaci, ze NON-CONST LVALUE REFERENCES VZDY MUSIA odkazovat na FYZICKE VARIABLES.
   !!! E. CONST LVALUE REFERENCES mozu byt inicializovane na LVALUES, alebo RVALUES. To znaci, ze CONST LVALUE REFERENCES mozu odkazovat na FYZICKE VARIABLES, alebo na TEMPORARY VARIABLES.
   !!! F. CONST LVALUE REFERENCES mozu byt inicializovane aj RVALUES, ktore maju INE TYPES ako su TYPES CONST LVALUE REFERENCES. V takom pripade COMPILER vytvori TEMPORARY VARIABLES do ktorych po vykonani STANDARD CONVERSIONS priradi zadane RVALUES a CONST LVALUE REFERENCES sa referuju na tieto TEMPORARY VARIABLES. COMPILER GARANTUJE, ze zivotnost TEMPORARY VARIABLES je ROVNAKA ako zivotnost CONST LVALUE REFERENCES, ktore na nich referuju.
   !!!!! G. C++ NEUMOZNUJE vytvarat ARRAYS ani COLLECTIONS z LVALUE REFERENCES.
   !!!!! H. C++ NEUMOZNUJE vytvarat POINTERS na LVALUE REFERENCES.
21. Pre RVALUE REFERENCES platia nasledujuce fakty.
   A. RVALUE REFERENCES su definovane pomocou SYNTAXE [TYPE&& VARIABLE]. RVALUE REFERENCES MOZU MODIFIKOVAT VARIABLES na ktore referuju.
   !!! B. Hlavnou ideou definovania RVALUE REFERENCES je umoznenie definovania REFERENCE na TEMPORARY OBJECT z ktoreho je mozne pomocou MOVE SEMANTICS presunut obsah VNUTORNYCH FIELDS danej CLASS do LVALUE REFERENCE BEZ casovo narocneho KOPIROVANIA celeho OBJECT. Po vykonani MOVE SEMANTICS je TEMPORARY OBJECT na ktory referuje RVALUE REFERENCE povazovany za NEPLATNY a jedina validna operacia je zavolanie DESTRUCTOR.
   !!! C. CONST RVALUE REFERENCES sa NEPOUZIVAJU, pretoze ich pouzitie NEMA PRAKTICKY VYZNAM. RVALUE REFERENCES sa vyuzivaju pri vykonavani MOVE SEMANTICS pri ktorej s MODIFIKUJE OBJECT na ktory ukazuje RVALUE REFERENCE. Preto aj ked C++ podporuje CONST RVALUE REFERENCES, NEMAJU PRAKTICKY VYZNAM.
   !!!!! D. RVALUE REFERENCES MOZU byt naviazane na RVALUES (TEMPORARY OBJECTS), ale NEMOZU byt naviazane na LVAUES (VARIABLES).
   E. RVALUE REFERENCES MUSIA byt VZDY INICIALIZOVANE uz vo svojej DEFINICII. To znaci, ze RVALUE REFERENCES NIKDY NEMOZU byt NEINICIALIZOVANE.
22. C++ definuje FUNCTION move<TType>(), ktora vykonava konverziu svojho PARAMETER z LVALUE REFERENCE na RVALUE REFERENCE. Alternativnou je pouzitie CODE [static_cast<TYPE&&>(VARIABLE)], ale FUNCTION move<TType>() je CITATELNEJSIA.
23. C++ NEPODPORUJE definovanie REFERENCES na REFERENCES. Pri definovani REFERENCES na REFERENCES sa aplikuje pravidlo REFERENCE COLLAPSE, kde platia nasleduje pravidla.
   A. TYPE [TYPE&& &&] sa modifikuje na RVALUE REFERENCE [TYPE&&].
   B. TYPE [TYPE& &&] sa modifikuje na LVALUE REFERENCE [TYPE&].
   C. TYPE [TYPE&& &] sa modifikuje na LVALUE REFERENCE [TYPE&].
   D. TYPE [TYPE&&] sa modifikuje na LVALUE REFERENCE [TYPE&].
!!! 24. C++ NEPODPORUJE definovanie REFERENCES na REFERENCES pomocou SYNTAX [TYPE&& &&], SYNTAX [TYPE& &&], SYNTAX [TYPE&& &] a SYNTAX [TYPE& &]. Umoznuje vsak pouzit USING SYNTAX pri ktorej dochadza k REFERENCE COLLAPSE.
//-----------------------------------------------------------------------------