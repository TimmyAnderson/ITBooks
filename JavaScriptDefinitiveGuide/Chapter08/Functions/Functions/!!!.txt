//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pracu s FUNCTIONS v JavaScripte.
2. FUNCTIONS su definovane pomocou KEYWORD 'function' za ktorym nasleduje MENO FUNCTION a v zatvorkach potom zoznam PARAMETROV danej FUNCTION.
!!! 3 FUNCTION moze vracat pomocou KEYWORD 'return' RETURN VALUE. V pripade, ze ziadnu RETURN VALUE NEVRATI, tak RETURN VALUE ma hodnotu 'undefined'.
4. V JavaScript sa rozlisuju 2 typy FUNCTIONS.
   A. FUNCTION je typ FUNCTION, ktora NIE JE SUCASTOU ineho OBJECT.
   B. METHOD je typ FUNCTION, ktora JE SUCASTOU ineho OBJECT.
!!!!! 5. V JavaScript je FUNCTION typom OBJECT co znaci, ze napriklad do FUNCTION je mozne pridavat PROPERTIES ci METHODS.
!!! 6. Kedze FUNCTION je klasicky JavaScript OBJECT, je ho mozne priradzovat do VARIABLES.
!!! 7. FUNCTIONS mozu byt NESTED, pricom INNER FUNCTION moze pristupovat v LOCAL VARIABLES a PARAMETERS OUTER FUNCTION.
!!!!! 8. Pre NESTED FUNCTIONS plati, ze MOZU byt deklarovane IBA v TOP LEVEL STATEMENTS a teda NEMOZU byt deklarovane napriklad v LOOPS ci IF prikazoch. Toto pravidlo vsak mnohe implementacie JavaScript (napriklad i JScript) NEDODRZUJU. Okrem toho FUNCTIONS deklarovane ako EXPRESSIONS (priradene do VARIABLES) JE mozne definovat i v LOOPS ci IF prikazoch.
9. JavaScript umoznuje vyvolat FUNCTIONS nasledujucimi sposobmi.
   A. Ako FUNCTION. FUNCTION NIE JE SUCASTOU ZIADNEHO OBJECT.
   !!! B. Ako METHOD. FUNCTION JE SUCASTOU OBJECT. Ak v METHOD chcem pristupovat k OBJECT PROPERTIES, tak MUSIM pouzit KEYWORD 'this' [this.PropertyName=Value]. Ak NEPOUZIJEM 'this', tak PROPERTY NEBUDE NAJDENA. METHOD je mozne volat AJ POMOCOU OPERATOR[] [MyObject["MyMethod"](Param1,...,ParamN].
   C. Ako CONSTRUCTOR pomocou OPERATOR new.
   D. Volanim METHODS FUNCTION OBJECT call() a apply().
!!!!! 10. V JavaScript NEEXISTUJE SEMANTICKA KONTROLA pri volani FUNCTIONS. Takze napriklad FUNCTION je mozne volat s INYM POCTOM PARAMETERS, ako ich v skutocnosti FUNCTION ma.
!!! 11. Ak do FUNCTION prenesiem MENSI POCET PARAMETERS ako FUNCTION v skutocnosti ma, tak chybajuce PARAMETERS budu mat hondnotu 'undefined'.
!!! 12. Ak do FUNCTION prenesiem VACSI POCET PARAMETERS ako FUNCTION v skutocnosti ma, tak ku PARAMETROM, ktore su NAVYSE je mozne pristupovat pomocou OBJECT typu Arguments. OBJECT Arguments je v tele FUNCTION pristupny pomocou mena 'arguments' a jeho PROPERTIES obsahuju vsetky PARAMETRES, ktore boli prenesene do FUNCTION. Ma takisto PROPERTY 'length', takze s OBJECT Arguments je mozne pracovat podobne ako so SKUTOCNYMI ARRAYS, aj ked sa NEJEDNA o SKUTOCNY Array OBJECT.
13. V ECMAScript 3 su PROPERTIES OBJECT Arguments ALIASES k skutocnym PARAMETROM. A teda zmena hodnoty v Arguments vedie z k zmene hodnoty prislusneho PARAMETRA a naopak. Nastastie tento NEZMYSEL bol v ECMAScript 5 v STRICT MODE ZRUSENY.
14. OBJECT Arguments obsahuje v ECMAScript 3 aj PROPERTY 'caller' (FUNCTION, ktora zavolala danu FUNCTION) a 'callee' (aktualne volana FUNCTION). V ECMAScript 5 v STRICT MODE vsak pristup k tymto PROPERTIES znamena HODENIE EXCEPTION a to aj pri CITANI.
!!! 15. Kedze FUNCTIONS v JavaScript su OBJECTS, je ich mozne priradzovat do VARIABLES, alebo zasielat do inych FUNCTIONS ako PARAMETERS.
!!! 16. V JavaScript KAZDA FUNCTION funguje ako CLOSURE. To znamena, ze moze pristupovat k VARIABLES v SCOPE v ktorom je definovana.
!!!!! 17. V JavaScript sa s FUNCTION VZDY PRENASA aj SCOPE v ktorom bola FUNCTION DEFINOVANA. To znaci, ze ak CLOSURE prenesiem do UPLNE INEJ FUNCTION s INYM SCOPE (napriklad GLOBAL FUNCTION), tak pri jej volani bude mat CLOSURE pristupne VARIABLES zo SCOPE v ktorom bola DEFINOVANA a NIE v ktorom bola VOLANA a to aj napriek tomu, ze VOLANA je z UPLNE INEJ FUNCTION.
!!!!! 18. SCOPE, ktory je asociovany s FUNCTION v ktorom je FUNCTION ASOCIOVANA je ZIVY. Teda NEVYKONAVA sa KOPIA tohto SCOPE pri jeho asociovani s FUNCTION. Vysledkom tohto chovania je fakt, ze zmena hodnot VARIABLES v SCOPE sa premieta do CLOSURE pri jej volani.
!!! 19. Pomocou CLOSURES je mozne simulovat PRIVATE FIELDS.
20. FUNCTION je OBJECT, ktory ma viacero MEMBERS.
   A. PROPERTY 'length' vracia POCET PARAMETROV, ktore FUNCTION OCAKAVA.
   B. PROPERTY 'prototype' vracia PROTOTYPE OBJECT z ktoreho FUNCTION OBJECT DEDI.
   C. METHOD call() umoznuje vyvolat FUNCTION, ktoru reprezentuje dany FUNCTION OBJECT. Prvy PARAMETER zaslany do call() sa stava 'this' hodnotou vo FUNCTION a ostatne PARAMETRE su prenesene ako PARAMETRE do volanej FUNCTION.
   D. METHOD apply() umoznuje vyvolat FUNCTION, ktoru reprezentuje dany FUNCTION OBJECT. Prvy PARAMETER zaslany do apply() sa stava 'this' hodnotou vo FUNCTION a druhy PARAMETER typu ARRAY je preneseny ako zoznam PARAMETROV do volanej FUNCTION.
   E. METHOD bind() umoznuje zviazat 'this' hodnotu a 1 az N PARAMETERS s hodnotami, ktore su posunute do bind() ako PARAMETRE. METHOD bind() vracia NOVY FUNCTION OBJECT, ktory je WRAPPER okolo povodnemu FUNCTION OBJECT, ktory vyvolava tuto povodnu FUNCTION.
   F. METHOD toString() je implementacne zavisla, ale vacsinou vracia SOURCE CODE FUNCTION.
!!! 21. ANONYMNE FUNCTIONS je mozne definovat aj pomocou CONSTRUCTOR Function(). Tento CONSTRUCTOR ma ako POSLEDNY PARAMETER STRING obsahujuci SOURCE CODE danej FUNCTION a predchadzajuce PARAMETRE su PARAMETRE DEFINOVANEJ FUNCTION.
22. Aj ked JavaScript NIE JE FUNCTIONAL LANGUAGE, je mozne v nom programovat i funkcionalne najma vdaka metodam ako Array.map(), Array.reduce() ci Function.bind().
//-------------------------------------------------------------------------------------------------------