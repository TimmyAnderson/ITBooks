//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "CTypeList.h"
#include "CTypeListIsEmpty.h"
#include "CTypeListFront.h"
#include "CTypeListPopFront.h"
#include "STraitsIfThenElse.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! 1. TEMPLATE PARAMETER je TYPE LIST a 2. TEMPLATE PARAMETER urcuje ci je TYPE LIST EMPTY.
// !!! PRIMARY TEMPLATE CLASS DECLARATION.
template<typename TTypeList, bool Empty=CTypeListIsEmpty<TTypeList>>
class CTypeListGetLargestTypeType;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE CLASS SPECIALIZATION pre NON-EMPTY TYPE LISTS.
template<typename TTypeList>
class CTypeListGetLargestTypeType<TTypeList,false>
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		// !!! 1. TYPE.
		using													Contender=CTypeListFront<TTypeList>;

		// !!! Najde TYPE, ktory ma v TYPE LIST bez 1. TYPE najvacsiu dlzku.
		using													Best=typename CTypeListGetLargestTypeType<CTypeListPopFront<TTypeList>>::TYPE;

	public:
		using													TYPE=STraitsIfThenElseUsing<(sizeof(Contender)>=sizeof(Best)),Contender,Best>;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE CLASS SPECIALIZATION pre EMPTY TYPE LISTS.
template<typename TTypeList>
class CTypeListGetLargestTypeType<TTypeList,true>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		// !!! NAJMENSI mozny TYPE.
		using													TYPE=char;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList>
using															CTypeListGetLargestType=typename CTypeListGetLargestTypeType<TTypeList>::TYPE;
//----------------------------------------------------------------------------------------------------------------------