//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie ARRAYS.
2. V CLR su ARRAYS CLASSES, ktore su DERIVED z CLASS Array. CLASS Array ma nasledujuce MEMBERS.
   A. PROPERTY Array.Length vracia CELKOVY POCET ITEMS v ARRAY. V pripade MULTI-DIMENSIONS ARRAYS vracia nasobok vsetkych DIMENSIONS.
   B. PROPERTY Array.LongLength vracia tu istu hodnotu ako PROPERTY Array.Length, ale typovanu ako Int64.
   C. PROPERTY Array.Rank vracia pocet DIMENSIONS daneho ARRAY.
   D. PROPERTY Array.SyncRoot vracia SYNCHRONIZATION ROOT, ktory je mozne pouzit na synchronizaciu pristupu k ARRAY.
   E. PROPERTY Array.IsSynchronized urcuje ci ARRAY je SYNCHRONIZED.
   F. PROPERTY Array.IsReadOnly urcuje ci ARRAY je READ-ONLY.
   G. PROPERTY Array.IsFixedSize urcuje ci ARRAY je FIXED-SIZE.
   H. STATIC METHOD Array.AsReadOnly<T>() vracia ARRAY ako instanciu TYPE ReadOnlyCollection<T>.
   I. STATIC METHOD Array.BinarySearch() vykonava BINARY SEARCH v ARRAY. Funguje iba pre SINGLE DIMENSION ARRAYS, ktore zacinaju INDEXOM 0.
   J. METHOD Array.Clear() vymazava ARRAY ITEMS v ARRAY.
   K. STATIC METHOD Array.Clone() vracia kopiu ARRAY.
   L. STATIC METHOD Array.ConstrainedCopy() vykonava kopirovanie a CASTING ARRAYS a to tak, ze ak ak CELY CASTING NEZBEHNE, tak sa DESTINATION ARRAY NEZMENI. Interne vyuziva CONSTRAINED EXECUTION REGIONS (CER).
   M. STATIC METHOD Array.ConvertAll<TInput,TOutput>() vykonava konverziu ARRAY ITEMS. Funguje iba pre SINGLE DIMENSION ARRAYS, ktore zacinaju INDEXOM 0.
   N. STATIC METHOD Array.Copy() kopiruje vsetky, alebo cast ARRAY ITEMS do ineho ARRAY.
   O. METHOD Array.CopyTo() kopiruje vsetky ARRAY ITEMS do ineho ARRAY. Funguje iba pre SINGLE DIMENSION ARRAYS.
   P. STATIC METHOD Array.CreateInstance() vytvara ARRAY. Umoznuje vytvarat aj MULTI-DIMENSIONS ARRAYS, alebo ARRAYS, ktore nazacinaju INDEXOM 0.
   Q. STATIC METHOD Array.Exists<T>() zistuje ci sa ARRAY ITEM nachadza v danom ARRAY. Funguje iba pre SINGLE DIMENSION ARRAYS, ktore zacinaju INDEXOM 0.
   R. METHOD Array.GetValue() vracia ARRAY ITEM nachadzajuci sa na danych INDEXES.
   S. METHOD Array.SetValue() nastavuje ARRAY ITEM nachadzajuci sa na danych INDEXES.
   T. STATIC METHOD Array.Sort() vykonava triedenie ARRAY. Funguje iba pre SINGLE DIMENSION ARRAYS.
   U. METHOD Array.GetLength() vracia LENGTH danej DIMENSION.
   V. METHOD Array.GetLongLength() vracia LENGTH danej DIMENSION ako Int64 VALUE.
   W. METHOD Array.GetLowerBound() vracia spodny INDEX pre danu DIMENSION.
   X. METHOD Array.GetUpperBound() vracia horny INDEX pre danu DIMENSION.
   Y. STATIC METHODS Array.IndexOf() a Array.FindIndexOf() vracia INDEX prveho ARRAY ITEM, ktory sa zhodnuje s hladanym ARRAY ITEM (Array.IndexOf() priama zhoda a Array.FindIndexOf() vysledok PREDICATE). Funguje iba pre SINGLE DIMENSION ARRAYS, ktore zacinaju INDEXOM 0.
   Z. STATIC METHODS Array.LastIndexOf() a Array.FindLastIndexOf() vracaju INDEX prveho ARRAY ITEM hladaneho odzadu, ktory sa zhodnuje s hladanym ARRAY ITEM (Array.LastIndexOf() priama zhoda a Array.LastFindIndexOf() vysledok PREDICATE). Funguje iba pre SINGLE DIMENSION ARRAYS, ktore zacinaju INDEXOM 0.
!!!!! 3. Pre kazdy definovany ARRAY CLR AUTOMATICKY vytvori NOVY TYPE, ktory je DERIVED z CLASS Array. Ak sa napriklad definuje ARRAY Stream[], tak CLR DYNAMICKY prida do AppDomain NOVY TYPE Stream[], ktory je DERIVED z Array.
4. V CLR umoznuje definovat nasledujuce typy ARRAYS.
   A. SINGLE DIMENSION ARRAYS.
   B. MULTI DIMENSIONS ARRAYS.
   C. JAGGED ARRAYS. Je to ARRAY, ktore v svojich ITEMS obsahuje ine ARRAYS, pricom dlzky kazdeho ARRAY mozu byt odlisne.
5. ARRAY OBJECTS su ulozene na HEAP rovnako ako ARRAY ITEMS, ktore su tiez ulozene na HEAP. V pripade VALUE TYPES, CLR okamzite alokuje na HEAP MEMORY pre ulozenie tychto ITEMS o dlzke NUMBER_OF_ITEMS*SIZEOF(ITEM). V pripade REFERENCE TYPE sa alokuju ITEMS o dlzke NUMBER_OF_ITEMS*SIZEOF(ITEM), kde velkost ITEM sa rovna SIZEOF(REFERENCE_TYPE) je je 4 BYTES pre X86 a 8 BYTES pre X64. Samotne ITEMS na ktore ARRAY referuje sa pri alokovani REFERENCE TYPE ARRAY NEALOKUJE.
6. CLR pre SAFE CODE NEPODPORUJE ARRAYS, ktore by boli ulozene na STACK.
!!! 7. Standardne CLR kontroluje pri pristupe do ARRAY ci INDEX nie je MIMO RANGE. Ak je, CLR generuje EXCEPTION [IndexOutOfRangeException].
!!!!! 8. Aj ked CLR umoznuje definovat i ARRAYS, ktore zacinaju INYM INDEXOM ako 0, tak CLR ma SPECIALIZOVANE MSIL INSTRUCTIONS (newarray, ldlen, ldelema, ldelem.i1, ldelem.u1, ldelem.i2, ldelem.u2, ldelem.i4, ldelem.u4, ldelem.i8, ldelem.i, ldelem.r4, ldelem.r8, ldelem.ref, ldelem, stelem.i, stelem.i1, stelem.i2, stelem.i4, stelem.i8, stelem.r4, stelem.r8, stelem.ref a stelem) pre pracu so SINGLE DIMENSION ARRAYS, ktore zacinaju indexom 0.
!!! 9. V CLR je mozne vykonat CASTING medzi rozlicnymi typmi ARRAYS. Pre konverziu ARRAYS platia nasledujuce zasady.
   A. SOURCE a DESTINATION ARRAYS musia mat rovnaky pocet DIMENSIONS.
   B. Medzi SOURCE a DESTINATION ARRAY ITEMS musi existovat implicitny, alebo explicitny CASTING. Napriklad ARRAY vytvoreny ako [new string[]] moze byt CASTED do ARRAY string[], pretoze ARRAY bol vytvoreny ako string[].
   !!!!! C. CLR vsak NEPODPORUJE CASTING ARRAY vytvoreneho ako [new object[]], ktory je ulozeny do VARIABLE object[] na ARRAY string[], aj ked SOURCE ARRAY obsahuje IBA STRINGS. Takyto typ konverzie podporuje iba STATIC METHOD Array.Copy().
   !!! D. CLR NEPODPORUJE CASTING medzi VALUE TYPES, ani CASTING VALUE TYPES a REFERENCE TYPES. Taketo konverzie podporuje STATIC METHOD Array.Copy().
10. STATIC METHOD Array.Copy() umoznuje vykonavat nasledujuce typy CASTING.
   A. CASTING z VALUE TYPE ARRAY na REFERENCE TYPE ARRAY (napriklad z Int32[] na Object[]).
   B. CASTING z REFERENCE TYPE ARRAY na VALUE TYPE ARRAY (napriklad z Object[] na Int32[]).
   C. CASTING medzi rozlicnymi typmi VALUE TYPE ARRAYS (napriklad z Int32[] na Double[]).
   D. CASTING z VALUE TYPE ARRAY a REFERENCE TYPE ARRAY na INTERFACE ARRAY, ktory dany VALUE/REFERENCE TYPE implementuju.
11. STATIC METHOD Array.ConstrainedCopy() vykonava kopirovanie a CASTING ARRAYS a to tak, ze ak ak CELY CASTING NEZBEHNE, tak sa DESTINATION ARRAY NEZMENI. Interne vyuziva CONSTRAINED EXECUTION REGIONS (CER).
12. STATIC METHOD Buffer.BlockCopy() je efektivnejsou alternativou k METHODS Array.Copy() a Array.ConstrainedCopy(), pretoze nevykonava ziadne CHECKS a kopirovanie sa robi po BYTES, bez ohladu na TYPES konvertovanych ARRAYS.
!!! 13. ARRAYS implementuju rozlicne INTERFACES v zavislosti ci su vytvorene pre REFERENCE TYPES, alebo VALUE TYPES.
   A. VSETKY ARRAYS implementuju NON-GENERIC INTERFACES IEnumerable, ICollection a IList.
   B. Pre ARRAYS, ktore maju VALUE TYPE ITEMS CLR pri ich vytvarani pre ne generuje aj implementacie GENERIC INTERFACES IEnumerable<TType>, ICollection<TType> a IList<TType>, kde TType je TYPE ARRAY ITEM.
   !!! C. Pre ARRAYS, ktore maju ako REFERENCE TYPE ITEM CLR pri ich vytvarani pre ne generuje aj implementacie GENERIC INTERFACES IEnumerable<TType>, ICollection<TType> a IList<TType>, kde TType je TYPE ARRAY ITEM. Takisto pre nej generuje aj implementacie GENERIC INTERFACES IEnumerable<TBase>, ICollection<TBase> a IList<TBase>, kde TBase je KAZDY BASE TYPE TYPE ARRAY ITEM. Teda napriklad pre ARRAY CDerived[], kde CLASS CDerived je DERIVED z CLASS CBase a ta z CLASS Object, tak CLR pre tento ARRAY implementuje INTERFACESIEnumerable<CDerived>, ICollection<CDerived>, IList<CDerived>, IEnumerable<CBase>, ICollection<CBase>, IList<CBase>, IEnumerable<object>, ICollection<object> a IList<object>.
14. ARRAYS su REFERENCE TYPES, ktore su prenasane do METHODS BY-REFERENCE, co znamena, ze METHODS mozu modifikovat ARRAY ITEMS.
!!! 15. CLR podporuje 3 rozlicne typy ARRAYS.
   A. SINGLE DIMENSION ARRAYS s pociatocnym INDEXOM 0. Pre tieto ARRAYS CLR definuje SPECIALIZOVANE MSIL INSTRUCTIONS, ktore umoznuju rychlu pracu s nimi. Tieto ARRAYS sa nazyvaju aj VECTORS.
   B. SINGLE DIMENSION ARRAYS s pociatocnym INDEXOM INYM ako 0. Pre tieto ARRAYS CLR nedefinuje ziadne specializovane MSIL INSTRUCTIONS a pristup k ARRAY ITEMS sa vykonava pomocou METHODS Array.GetValue() a Array.SetValue().
   C. MULTI DIMENSIONS ARRAYS bez ohladu na pociatocny INDEX. Pre tieto ARRAYS CLR nedefinuje ziadne specializovane MSIL INSTRUCTIONS a pristup k ARRAY ITEMS sa vykonava pomocou METHODS Array.GetValue() a Array.SetValue().
16. Pre SINGLE DIMENSION ARRAYS s pociatocnym INDEXOM 0 platia nasledujuce fakty.
   A. C# pre ne podporuje specializovanu SYNTAX [ITEM_TYPE[]], kde ITEM_TYPE je TYPE ARRAY ITEM.
   B. C# umoznuje citat a zapisovat ARRAY ITEMS pomocou OPERATOR[]. Je vsak takisto mozne pouzit METHODS Array.GetValue() a Array.SetValue().
   !!! C. CLR definuje SPECIALIZOVANE MSIL INSTRUCTIONS, ktore umoznuju vytvarat, inicializovat, citat a zapisovat ARRAY ITEMS v tychto typoch ARRAYS.
17. Pre SINGLE DIMENSION ARRAYS s pociatocnym INDEXOM INYM ako 0 platia nasledujuce fakty.
   !!! A. C# pre ne NEPODPORUJE SPECIALIZOVANU SYNTAX a ich vytvaranie je NUTNE pomocou STATIC METHOD Array.CreateInstance(), kde sa urcuje pociatocny INDEX i velkost ARRAYS.
   !!! B. C# pre ne NEPODPORUJE SPECIALIZOVANU SYNTAX pre pristup k ich ARRAY ITEMS. Pristup ARRAY ITEMS je NUTNY cez METHODS Array.GetMethod() a Array.SetMethod().
   C. CLR nedefinuje SPECIALIZOVANE MSIL INSTRUCTIONS pre pracu s tymito ARRAYS a pracuje s nimi pomocou METHODS CLASS Array.
   D. TYPE takychto ARRAYS je [TYPE_ITEM[*]], kde znak '*' charakterizuje, ze sa jedna o ARRAY, ktory nezacina INDEXOM 0.
   E. Zistenie pociatocneho a koncoveho INDEXU je mozne pomocou METHODS Array.GetLowerBound() a Array.GetUpperBound().
18. Pre MULTI DIMENSIONS ARRAYS bez ohladu na pociatocny INDEX platia nasledujuce fakty.
   A. C# pre ne podporuje specializovanu SYNTAX [ITEM_TYPE[,,...,]], kde ITEM_TYPE je TYPE ARRAY ITEM.
   !!! B. Ak ARRAY vo VSETKYCH DIMENSIONS zacina INDEXOM 0, tak v C# je ich mozne vytvorit pomocou SYNTAXE [new ITEM_TYPE[,,...,].
   !!!!! C. Ak ARRAY v aspon 1 DIMENSION zacina INDEXOM INYM ako 0, tak je ich NUTNE vytvorit pomocou STATIC METHOD Array.CreateInstance().
   D. C# umoznuje citat a zapisovat ARRAY ITEMS pomocou OPERATOR[,,...,]. Je vsak takisto mozne pouzit METHODS Array.GetValue() a Array.SetValue().
   E. CLR nedefinuje SPECIALIZOVANE MSIL INSTRUCTIONS pre pracu s tymito ARRAYS a pracuje s nimi pomocou METHODS CLASS Array.
   F. Zistenie pociatocneho a koncoveho INDEXU je mozne pomocou METHODS Array.GetLowerBound() a Array.GetUpperBound().
!!!!! 19. CLR a JIT COMPILER dokazu vykonavat SOFISTIKOVANE OPTIMALIZACIE nad ARRAY, ak dany SINGLE DIMENSION ARRAY, ktore zacinaju INDEXOM 0. CLR a JIT COMPILER vykonavaju napriklad aj tieto optimalizacie.
   A. CLR definuje specializovane MSIL INSTRUCTIONS, ktore umoznuju JIT COMPILER, aby vykonat nad SINGLE DIMENSION ARRAY, ktore zacinaju INDEXOM 0 OPTIMALIZACIE.
   B. Pri pristupe k ITEMS nie je nutne na zistenie pozicie ARRAY ITEM odratavat INDEX od ARRAY LOWER BOUND, kedze ten ma hodnotu 0.
   C. Ak sa pri iterovani ARRAY porovnava INDEX s hodnotou PROPERTY Array.Length, tak JIT COMPILER dokaze ulozit hodnotu PROPERTY Array.Length do TEMPORARY VARIABLE a nemusi pri kazdej iteracii volat PROPERTY PROPERTY Array.Length, co by znamenalo volanie METHOD.
   D. Ak sa iterovani ARRAY INDEX NEMENI inde ako v KEYWORD [for], potom JIT COMPILER je schopny vykonat PRED ZACIATKOM CYKLU kontrolu ci INDEX pocas celeho cyklu bude v INTERVALE <0,Array.Length-1> a pocas iterovania uz NETESTOVAT INDEX ci INDEX je v tomto INTERVALE.
!!! 20. Pri pristupe k ARRAY ITEMS MULTI-DIMENSIONS ARRAYS a ARRAYS, ktore nezacinaju INDEXOM 0 (bez ohladu na pocet DIMENSIONS) JIT COMPILER NEROBI ZIADNE OPTIMALIZACIE a VZDY vykonava BOUND CHECKS. Eliminovat tieto BOUND CHECKS je mozne pristupom k tymto ARRAYS cez POINTER v UNSAFE CODE. V tomto pripade sa BOUND CHECKS NEROBIA a pristup k ARRAYS je RYCHLEJSI, za cenu, ze CODE je UNSAFE.
21. CLR poskytuje 2 specialne OPTIMALIZACIE ARRAYS, tak aby ARRAY ITEMS boli definovane na STACK a NIE na HEAP. Pracovat s tymito ARRAYS je moze VZDY len v UNSAFE CODE.
   A. INLINE ARRAYS su ARRAYS definovane v ramci UNMANAGED VALUE TYPE, ktore su alokovane na STACK.
   B. STACK ARRAYS su ARRAYS definovane pomocou KEYWORD [stackallock], ktore su alokovane na STACK.
22. INLINE ARRAYS su VALUE TYPES, ktore obsahuju PRIMITIVE TYPE ARRAY. Instancie INLINE ARRAYS su alokovane na STACK. S INLINE ARRAYS moze pracovat IBA UNSAFE CODE. INLINE ARRAYS sa definuju nasledujucim sposobom.
   A. INLINE ARRAY je vzdy VALUE TYPE, ktory je oznaceny KEYWORD [unsafe]. Jedna sa teda o UNSAFE VALUE TYPE.
   B. VALUE TYPE musi obsahovat ARRAY FIELD typu SINGLE DIMENSION ARRAY s konstantnou dlzkou s pociatocnym INDEXOM 0.
   C. ARRAY ITEM TYPE moze byt iba z TYPES [Boolean], [Char], [SByte], [Byte], [Int16], [UInt16], [Int32], [UInt32], [Int64], [UInt64], [Single] a [Double].
   D. ARRAY FIELD musi byt oznaceny KEYWORD [fixed].
23. KEYWORD [stackallock] umoznuje definovat MEMORY BLOCK na STACK s ktorym je mozne pracovat cez POINTERS. So STACK ARRAYS moze pracovat IBA UNSAFE CODE.
//-------------------------------------------------------------------------------------------------------