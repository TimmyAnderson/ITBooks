//-------------------------------------------------------------------------------------------------------
1. Soulution demonstruje pouzitie STATEMENTS v JavaScript.
2. EXPRESSION, ktora ma SIDE EFFECTS, teda ovplyvnuje STATE programu sa povazuje za STATEMENT. Sem patria napriklad EXPRESSIONS obsahujuce 'delete', INCREMENT, DECREMENT a ASSIGNMENT OPERATORS. Sem patria i FUNCTION CALLS.
!!! 3. COMPOUND STATEMENT na ROZDIEL od C++ NEDEFINUJE VLASTNY SCOPE. Inak povedane VARIABLES deklarovane COMPOUND STATEMENT su PRISTUPNE i MIMO COMPOUND STATEMENT.
4. KEYWORD 'var' reprezentuje STATEMENT umoznujuci deklarovat VARIABLE. Platia prenho nasledujuce pravidla.
   A. KEYWORD 'var' pouzity v GLOBALNOM SCOPE deklaruje GLOBALNE PREMENNE.
   B. KEYWORD 'var' pouzity na urovni FUCTION deklaruje LOKALNE PREMENNE.
   !!! C. LOKALNE PREMENNE maju SCOPE v CELEJ FUNCTION a nie iba na urovni COMPOUND STATEMENT v ktorom su deklarovane.
   D. INITIALIZER sa vola AZ v MIESTE VYSKYTU KEYWORD 'var' a teda ak VARIABLE pouzijem PRED KEYWORD 'var', tak jeho hodnota je 'undefined'.
   E. Ak sa INITIALIZER NEPOUZIJE, tak hodnota VARIABLE je 'undefined'.
   F. Pomocou KEYWORD 'var' je mozne deklarovat i LOKALNE FUNCTIONS.
   G. KEYWORD 'var' je mozne pouzit v TOM ISTOM SCOPE i VIACKRAT, pricom 2. a nasledovne pouzitie, ak obsahuje INITIALIZER tak je zmenene na ASSIGNMENT.
   F. KEYWORD 'var' je mozne pouzit i v STATEMENTS 'for' a 'for-in'.
5. KEYWORD 'function' reprezentuje STATEMENT umoznujuci deklarovat FUNCTION. Platia prenho nasledujuce pravidla.
   A. FUNCTION moze mat NAME cez ktore je FUCTION volana.
   B. Ak sa FUNCTION priradzuje do VARIABLE cez KEYWORD 'var', tak FUNCTION NEMA MENO a pristupuje sa k nej pomocou VARIABLE.
   C. FUNCTIONS do seba MOZU byt NESTED, ale NESTING sa musi spravit VZDY na ZACIATKU FUNCTION v ktorej je NESTED FUNCTION NESTED. Teda NESMIE byt napriklad deklarovana v 'if' STATEMENT. Ak to implementacia JavaScript umoznuje, tak sa jedna o NON-PORTABLE FEATURE.
   !!! D. FUNCTIONS deklarovane obsahujuce MENO, ktore su deklarovane ako NESTED FUNCTIONS v INEJ FUNCTION je mozne zavolat i PRED DEKLARACIOU NESTED FUNCTION. Avsak FUNCTIONS, ktore su deklarovane ako NESTED FUNCTION, ale NEMAJU MENO (su priradene do VARIABLE) NIE JE MOZNE TAKTO VOLAT, kedze VARIABLE PRED DEKLARACIOU obsahuje hodnotu 'undefined' a spustenie taketo VARIABLE ako FUNCTION sposobi hodenie EXCEPTION.
6. SYNTAX STATEMENT 'if-else' je IDENTICKA s C++. V CONDITION moze byt aj NON-BOOL hodnota, ktoru si JavaScript AUTOMATICKY konvertuje na BOOL hodnotu.
7. SYNTAX STATEMENT 'switch' je IDENTICKA s C++ vratane moznosti PREPADAVANIA sa cez 'case' BLOCKS. V CONDITION moze byt aj NON-BOOL hodnota, ktoru si JavaScript AUTOMATICKY konvertuje na BOOL hodnotu. Rozdiely medzi 'switch' v JavaScript a C++ su nasledujuce.
   A. V 'case' BLOCKS NEMUSIA byt IBA CONSTANTS ako v C++, ale mozu tam by LUBOVOLNE EXPRESSIONS, vratane napriklad VOLANIA FUNCTIONS.
   B. Na porovnanie 'case' BLOCKS sa pouziva OPERATOR=== a NIE OPERATOR==.
8. SYNTAX STATEMENT 'while' je IDENTICKA s C++. V CONDITION moze byt aj NON-BOOL hodnota, ktoru si JavaScript AUTOMATICKY konvertuje na BOOL hodnotu.
9. SYNTAX STATEMENT 'do-while' je IDENTICKA s C++. V CONDITION moze byt aj NON-BOOL hodnota, ktoru si JavaScript AUTOMATICKY konvertuje na BOOL hodnotu.
10. SYNTAX STATEMENT 'for' je IDENTICKA s C++. V CONDITION moze byt aj NON-BOOL hodnota, ktoru si JavaScript AUTOMATICKY konvertuje na BOOL hodnotu.
11. SYNTAX STATEMENT 'for-in' umoznuje ENUMEROVAT VSETKY MENA PROPERTIES daneho OBJECT. Pre SYNTAX STATEMENT 'for-in' platia nasledujuce zasady.
   !!! A. Do VARIABLE vo 'for-in' sa uklada NIE HODNOTA PROPERTY, ale MENO PROPERTY. Ak chcem pristupit k HODNOTE PROPERTY, tak musim pouzit OPERATOR[]. OPERATOR. (bodka) NEFUNGUJE.
   B. V CUSTOM OBJECTS su enumerovane VSETKY PROPERTIES daneho objektu.
   C. V BUILT-IN OBJECTS su enumerovane IBA ENUMEROVATELNE PROPERTIES. Medzi NEENUMEROVATELNE PROPERTIES patria BUILT-IN METHODS tychto objektov.
   D. Kedze ARRAYS v JavaScript maju ITEMS ulozene ako PROPERTIES s INDEXOM ako menom PROPERTY, tak i ARRAYS je mozne prechadzat pomocou SYNTAX STATEMENT 'for-in'.
   !!! E. Poradie enumeracie je NEDEFINOVANE.
   !!! F. Za 'VARIABLE' vo 'for-in' mozem dosadit i lubovolny EXPRESSION, ktory sa evaluuje na LVALUE.
12. SYNTAX STATEMENT 'LABEL_NAME:' reprezentuje LABEL na ktory sa mozu odkazovat prikazy 'break' a 'continue'.
13. SYNTAX STATEMENT 'break;' reprezentuje KLASICKY C++ 'break'.
!!! 14. SYNTAX STATEMENT 'break LABEL_NAME;' reprezentuje 'break', ktory skoci na LABEL s menom 'LABEL_NAME'. Pre tuto SYNTAX platia nasledujuce pravidla.
   !!! A. Skok je vykonany na KONIEC STATEMENT, ktory bol oznaceny pomocou LABEL 'LABEL_NAME'.
   B. Moze byt pouzita na vyskocenie z LOOPS, ale i NON-LOOPS STATEMENTS ako je napriklad 'if'.
   !!! C. LABEL musi byt definovany v kode SKOR ako je pouzity v 'break'.
14. SYNTAX STATEMENT 'continue;' reprezentuje KLASICKY C++ 'continue'.
!!! 15. SYNTAX STATEMENT 'continue LABEL_NAME;' reprezentuje 'continue', ktory skoci na LABEL 'LABEL_NAME' oznacujuci LOOP. Pre tuto SYNTAX platia nasledujuce pravidla.
   !!! A. Skok je vykonany na ZACIATOK STATEMENT (naseldujucu iteraciu LOOP), ktory bol oznaceny pomocou LABEL 'LABEL_NAME'.
   !!! B. Moze byt pouzita na vyskocenie IBA z LOOPS.
   !!! C. LABEL musi byt definovany v kode SKOR ako je pouzity v 'continue'.
16. SYNTAX STATEMENT 'return' je IDENTICKA s C++.
!!! 17. Ak FUNCTION NEVRATI ZIADNU RETURN VALUE, tak vysledna RETURN VALUE ma hodnotu 'undefined'.
18. JavaScript podporuje EXCEPTIONS nasledujucim sposobom.
   A. SYNTAX STATEMENT 'throw' umoznuje hodit EXCEPTION a funguje IDENTICKY ako v C#. ROZDIELOM je iba to, ze ako EXCEPTION je mozne hodit LUBOVOLNY aj PRIMITIVNY TYPE. Takisto SYNTAX [throw;] NIE JE PODPOROVANA a RETHROW sa robi hodeni TOHO ISTEHO EXCEPTION OBJEKTU.
   B. SYNTAX STATEMENT 'try' umoznuje oznacit blok, kde moze vzniknut EXCEPTION a funguje IDENTICKY ako v C#.
   !!! C. SYNTAX STATEMENT 'catch' obsahuje VARIABLE popisujucu EXCEPTION, no na ROZDIEL od C# NEUMOZNUJE definovat TYP EXCEPTION, ktora sa ma zachytavat. Za 'try' blokom teda moze nasledovat MAXIMALNE jeden 'catch' blok.
   D. SYNTAX STATEMENT 'finally' je podobna ako v C#. ROZDIELOM je, ze ak sa pouzije prikaz 'return', tak EXCEPTION (AJ KED NEBOL ZACHYTENA v 'catch' bloku) NIE JE DALEJ PROPAGOVANA.
!!! 19. JavaScript definuje CLASS Error, ktora sluzi ako BASE CLASS pre EXCEPTION, ktore hadza samotny JavaScript RUNTIME. Obsahuje nasledujuce MEMBERS.
   A. PROPERTY 'name' obsahuje TYPE EXCEPTION.
   B. PROPERTY 'message' obsahuje TEXTOVY POPIS EXCEPTION.
!!! 20. SYNTAX STATEMENT 'with' umoznuje definovat OBJECT, ktory bude pouzity ako DEFAULT OBJECT pri vykonavani SCOPE VARIABLE RESOLUTION. Ak napriklad mam prikaz [with(MyObject){XXX=100;}), tak v pripade, ze 'MyObject' OBSAHUJE PROPERTY 'XXX', tak jej bude priradena hodnota 100. Ak 'MyObject' NEOBSAHUJE PROPERTY 'XXX', tak sa 100 priradi do GLOBALNEJ, alebo LOKALNEJ VARIABLE XXX (ak taka existuje).
!!!!! 21. SYNTAX STATEMENT 'with' je v STRICT MODE povazovany sa DEPRECATED a NEMAL BY SA POUZIVAT.
!!! 22. SYNTAX STATEMENT 'debugger' v PRIPADE, ze je DEBUGGER SPUSTENY nastavi BREAKPOINT, takze ak kod nan narazi, tak DEBUGGER pozastavi vykonavanie programu a je mozne vykonat standardny debugging.
!!!!! 23. STRICT MODE sa v JavaScript zapina zadanim STRING "use strict", ktory MUSI BYT na ZACIATKU FUNCTION, alebo CELEHO SCRIPTU. Jedna sa o DIREKTIVU JavaScript - preto format STRINGU, ktoru dane implementacia JavaScript PARSERA dokaze rozpoznat a podla toho prisposobit chovanie kodu.
!!!!! 24. STRICT MODE je podporovany AZ v IE od verzie 10.0.. Tato informacia je PRIAMO s MSDN.
//-------------------------------------------------------------------------------------------------------