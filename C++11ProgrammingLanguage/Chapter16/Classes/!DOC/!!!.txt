//-----------------------------------------------------------------------------
1. Solution demonstruje definiciu CLASSES.
2. CLASS je USER DEFINED TYPE, ktory moze mat nasledujuce MEMBERS.
   A. INNER TYPES.
   B. FIELDS.
   C. METHODS.
   D. OPERATORS.
   E. CONSTRUCTORS.
   F. DESTRUCTORS. CLASS moze mat maximalne 1 DESTRUCTOR.
3. OBJECT moze pristupovat k MEMBERS CLASS, ktoru reprezentuje nasledujucimi sposobmi.
   A. OPERATOR.() sluzi na pristup k OBJECT, ak je reprezentovany BY-VALUE, alebo BY-REFERENCE.
   B. OPERATOR->() sluzi na pristup k OBJECT, ak je reprezentovany BY-POINTER.
4. NON-STATIC METHODS su FUNCTIONS, ktore su asociovane s CLASS. Pre METHODS platia nasleldujuce fakty.
   A. NON-STATIC METHODS maju pristup k NON-STATIC FIELDS danej CLASS.
   !!! B. NON-STATIC METHODS maju SKRYTY 1. PARAMETER obsahujuci THIS POINTER na OBJECT, pre ktory je METHOD volana. Vdaka tomuto THIS POINTER mozu NON-STATIC METHODS pristupovat k NON-STATIC FIELDS.
5. CLASSES umoznuju definovat ACCESS MODIFIERS urcujuce, ktore ELEMENTS budu mat pristup k specifickemu MEMBER danej CLASS. C++ definuje nasledujuce ACCESS MODIFIERS.
   A. PRIVATE. K PRIVATE MEMBERS mozu pristupovat IBA MEMBERS danej CLASS.
   B. PROTECTED. K PROTECTED MEMBERS mozu mozu pristupovat IBA MEMBERS danej CLASS a MEMBERS vsetkych DERIVED CLASSES.
   C. PUBLIC. K PUBLIC MEMBERS moze pristupovat lubovolna cast CODE.
6. CLASSES mozu pouzit ACCESS MODIFIERS na jednotlive MEMEBERS, alebo skupiny MEMBERS.
7. STRUCTURES su takmer identicke s CLASSES. Jedinym rozdielom je, ze DEFUALT ACCESS MODIFIER pre STRUCTURES je PUBLIC, zatial co DEFUALT ACCESS MODIFIER pre CLASSES je PRIVATE.
8. CONSTRUCTOR je specialna METHOD danej CLASS, ktora sluzi na inicializaciu OBJECT. CLASS moze mat viacero OVERLOADED CONSTRUCTORS.
9. Pre CONSTRUCTORS sa aplikuju rovnake OVERLOADING RULES ako pre bezne FUNCTIONS.
10. C++ deli CONSTRUCTORS na zaklade toho ci sa implicitne pouzivaju na CONVERSIONS na 2 kategorie.
   A. IMPLICIT CONSTRUCTORS su CONSTRUCTORS, ktore C++ moze pouzit na vykonanie IMPLICIT CONVERSIONS. To znaci, ze ak CLASS ma CONSTRUCTOR s PARAMETER TYPE [int], potom C++ vzdy pri volanie FUNCTION vyzadujucej ako parameter instanciu danej CLASS, ak za PARAMETER bola pouzita VALUE TYPE [int] C++ AUTOMATICKY vola dany CONSTRUCTOR.
   B. EXPLICIT CONSTRUCTORS su CONSTRUCTORS oznacene KEYWORD [explicit]. Tieto CONSTRUCTORS C++ NEMOZE pouzit na vykonanie IMPLICIT CONVERSIONS.
!!! 11. EXPLICIT CONSTRUCTORS je mozne pouzit na CONSTRUCTORS s LUBOVOLNYM poctom PARAMETERS.
12. C++ poskytuje moznost inicializovat NON-STATIC FIELDS priamo v definicii CLASS pri definovani jednotlivych FIELDS. Pre IN-CLASS INITIALIZERS platia nasledujuce fakty.
   A. IN-CLASS INITIALIZERS sa zapisuju vedla DEFINICIE FIELDS, pricom sa pouziva bud SYNTAX [{}], alebo OPERATOR=.
   !!! B. IN-CLASS INITIALIZERS NEUMOZNUJU inicializaciu FIELDS pomocou OPERATOR().
   !!! C. Ak CLASS pouziva IN-CLASS INITIALIZERS a MEMBER INITIALIZER LIST, tak MEMBER INITIALIZER LIST sa IN-CLASS INITIALIZERS IGNORUJU.
   !!!!! D. EXPRESSIONS v IN-CLASS INITIALIZERS su CONTEXT DEPENDENT. To znaci, ze ak napriklad IN-CLASS INITIALIZERS mozu pouzivat GLOBAL VARIABLES a GLOBAL FUNCTIONS ak su pristupne pri definicii CLASS.
   E. Pokial CONSTURCTOR inicializuje FIELDS pomocou OPERATOR= a NIE pomocou MEMBER INITIALIZER LIST, tak sa IN-CLASS INITIALIZERS VOLAJU.
13. METHODS mozu byt definovane nasledujucimi sposobmi.
   A. METHOD moze byt DEFINOVANA v .H FILE. V tomto pripade je METHOD definovana priamo pri definicii CLASS. Z takejto METHOD COMPILER spravi INLINE METHOD.
   B. METHOD moze byt DEKLAROVANA v .H FILE a DEFINOVANA v .CPP FILE. Tento zapis vedie k citatelnejsiemu CODE.
14. CLASS moze mat definovane CONST MEMBERS.
   A. CONST FIELDS su FIELDS oznacene KEYWORD [const]. Hodnoty CONST FIELDS je mozne nastavit IBA v CONSTRUCTORS a nasledne ich VALUE NESMIE byt MENENA.
   B. CONST METHODS su METHODS, ktore maju pridany KEYWORD [const] na kocni PROTOTYPE. CONST METHODS NEMOZU MODIFIKOVAT FIELDS daneho OBJECT.
15. Pre CONST FIELDS platia nasledujuce fakty.
   A. CONST FIELDS su FIELDS oznacene KEYWORD [const].
   B. CONST FIELDS MUSIA byt inicializovane v CONSTRUCTOR v MEMBER INITIALIZER LIST.
   C. Hodnoty CONST FIELDS sa NESMU MENIT po svojom nainicializovani v CONSTRUCTOR.
   D. CONST OBJECTS mozu pristupovat IBA ku CONST FIELDS.
16. Pre CONST METHODS platia nasledujuce fakty.
   A. CONST METHODS su METHODS oznacene KEYWORD [const].
   !!! B. KEYWORD [const] je SUCAST PROTOTYPE danej METHOD a MUSI byt pouzity ako v DEKLARACII METHOD v .H FILE, tak aj v DEFINICII METHOD v .CPP FILE.
   C. Kedze KEYWORD [const] je SUCAST PROTOTYPE tak 2 METHODS s ROVNAKYM PROTOTYPE, ktore sa lisia iba v tom ci je na nich aplikovany KEYWORD [const], alebo nie su 2 ROZDIELNE METHODS.
   D. CONST METHODS NEMOZU modifikovat VALUES FIELDS.
   E. CONST METHODS mozu volat iba ine CONST METHODS. NEMOZU volat NON-CONST METHODS.
   F. CONST OBJECTS mozu volat IBA CONST METHODS.
   !!! G. V CONST METHODS THIS POINTER je IMPLICITNE oznaceny ako CONST THIS POINTER, vdaka comu CONST METHODS mozu volat iba ine CONST METHODS, ale NIE NON-COST METHODS.
   !!!!! H. CONST METHODS MOZU volat NON-CONST METHODS POINTER FIELDS a REFERENCE FIELDS.
!!! 17. FIELDS mozu byt oznacene pomocou KEYWORD [mutable]. Taketo FIELDS mozu byt modifikovane v CONST METHODS.
!!! 18. METHOD CHAINING je technika, kde METHODS, ktore NORMALNE NEMAJU RETURN VALUE vracaju ako RETURN VALUE hodnotu [*this] typu [const TYPE&] v CONST METHODS, alebo v [TYPE&] NON-CONST METHODS. Taketo RETURN VALUES umoznuju CHAINING VIACERYCH METHODS METOD [OBJECT.Method1().Method2().Method3()].
19. K CLASS MEMBERS je mozne v C++ pristupovat pomocou nasledujucich OPERATORS.
   A. OPERATOR. sluzi na pristup k MEMBERS daneho OBJECT, ktore su definovany BY-VALUE, alebo BY-REFERENCE.
   B. OPERATOR-> sluzi na pristup k MEMBERS daneho OBJECT, ktore su definovane BY-POINTER.
   C. OPERATOR:: sluzi na pristup k MEMBERS NEZAVISLE od konkretneho OBJECT. OPERATOR:: sa pouziva pre STATIC MEMBERS ako aj pre ziskanie POINTER na MEMBER.
20. C++ umoznuje definovat v CLASSES STATIC FIELDS. Pre STATIC FIELDS platia nasledujuce fakty.
   A. STATIC FIELDS NIE SU asociovane so ZIADNYM OBJECT. Su spolocne pre VSETKY INSTANCIE danej CLASS.
   B. STATIC FIELDS su vytvorene IBA RAZ v MEMORY.
   C. K STATIC FIELDS mozu pristupovat ako STATIC METHODS, tak aj NON-STATIC METHODS.
   D. STATIC FIELDS su v .H FILES iba DEKLAROVANE. DEFINOVANE su v .CPP FILES. Vynimkou su iba INTEGER a ENUM TYPES, ktore mozu byt DEFINOVANE v .H FILES.
   !!! E. CONSTRUCTORS STATIC FIELDS sa volaju pri STARTE PROGRAMU a NIE PRI PRVOM POUZITI. Ich DESTRUCTORS sa volaju pri UKONCENI PROGRAMU.
21. C++ umoznuje definovat v CLASSES STATIC METHODS. Pre STATIC METHODS platia nasledujuce fakty.
   A. STATIC METHODS NIE SU asociovane so ZIADNYM OBJECT. Su spolocne pre VSETKY INSTANCIE danej CLASS.
   B. STATIC METHODS mozu pristupovat k STATIC FIELDS.
   !!! C. STATIC METHODS NEMOZU pristupovat k NON-STATIC FIELDS, pretoze nie su asociovane so ziadnym OBJECT.
   !!! D. STATIC METHODS NEMAJU skryty THIS PARAMETER co je dovod, preco nemozu pristupovat k NON-STATIC FIELDS.
22. CLASSES umoznuju deklarovat NESTED CLASSES v deklaracii OUTER CLASSES. Pre NESTED CLASSES platia nasledujuce fakty.
   A. NESTED CLASSES MAJU pristup k PRIVATE a PROTECTED MEMBERS OUTER CLASSES.
   B. OUTER CLASSES NEMAJU pristup PRIVATE a PROTECTED MEMBERS NESTED CLASSES.
   C. NESTED mozu byt aj STRUCTURES a ENUMS.
   !!! D. OBJECTS, ktore su instanciami NESTED CLASSES NEMAJU s OBJECTS, ktore su instanciami OUTER CLASSES ZIADNU VAZBU. Instancie  ako NESTED CLASSES, tak aj instancie OUTER CLASSES su VYTVARANE NEZAVISLE a maju NEZAVISLY LIVECYCLE.
23. V CLASSES je mozne definovat aj TYPE ALIASES. Tie je potom mozne definovat v ramci CLASS, alebo ak su definovane ako PUBLIC, tak aj mimo danej CLASS.
24. C++ pre CUSTOM TYPES umoznuje definovat CUSTOM OPERATORS. Pre CUSTOM OPERATORS plati nasledujuce fakty.
   A. C++ umoznuje definovat CUSTOM OPERATORS iba pre EXISTUJUCE TOKENS. C++ NEUMOZNUJE pridavat NOVE TOKENS, ktore C++ nepozna.
   B. C++ NEUMOZNUJE menit ARITU OPERATORS. Pocet PARAMETERS kazdeho OPERATOR musi byt identicky s pocetom PARAMETERS v STANDARD OPERATORS.
   C. C++ umoznuje pouzit iba tie CUSTOM OPERATORS, ktore su DEFINOVANE. Napriklad ak pre dany TYPE sa definuje OPERATOR= a OPERATOR+, NEZNAMENA to, ze OPERATOR+= je tym definovany, pretoze logicky jeho cinnost pozostava z vykonania OPERATOR+ a OPERATOR=. Ak pre dany TYPE ma byt OPERATOR+= pouzity, potom MUSI byt EXPLICITNE DEFINOVANY.
//-----------------------------------------------------------------------------