//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje VALUE CATEGORIES v C++.
2. V C++ ma kazda EXPRESSION okrem TYPE definovany aj VALUE CATEGORY. VALUE CATEGORY ako bola VALUE danej EXPRESSION formovana a ako sa VALUE sprava.
3. V C++ do verzie 11 existovali pre EXPRESSIONS nasledujuce VALUE CATEGORIES.
   A. LVALUE EXPRESSIONS.
   B. RVALUE EXPRESSIONS.
4. Pre LVALUE EXPRESSIONS platia nasledujuce fakty.
   A. LVALUE EXPRESSIONS sa spravidla vyskytuju na LAVEJ STRANE pri pouziti OPERATOR=.
   !!! B. LVALUE EXPRESSIONS sa mozu nachadzat aj na LAVEJ STRANE pri pouziti OPERATOR=. Typickym prikladom je EXPRESSION [X=Y]. V tomto pripade dochadza k IMPLICITNEJ LVALUE tu RVALUE CONVERSION.
   C. LVALUE EXPRESSIONS mozu vracat VARIABLE, ktora ma svoju MEMORY a moze byt modifikovana, pokial nebola oznacena pomocou KEYWORD [const].
   D. Medzi LVALUE EXPRESSIONS patri aj pouzitie OPERATOR*, ktory vytvara POINTER DEREFERENCE.
   E. Medzi LVALUE EXPRESSIONS patri aj pristup ku CLASS DATA MEMBER pomocou OPERATOR->.
   F. Medzi LVALUE EXPRESSIONS patri aj volanie METHOD, ktora vracia RETURN VALUE BY-REFERENCE, ktoru je mozne modifikovat.
   G. Medzi LVALUE EXPRESSIONS patria aj STRING LITERALS, ktore su vsak implicitne oznacene pomocou KEYWORD [const] a teda ich VALUE nemoze byt modifikovana.
5. Pre RVALUE EXPRESSIONS platia nasledujuce fakty.
   A. RVALUE EXPRESSIONS sa spravidla vyskytuju na PRAVEJ STRANE pri pouziti OPERATOR=.
   B. RVALUE EXPRESSIONS nemaju priradenu MEMORY, a preto nemozu byt ani modifikovane.
   !!! C. CLASS RVALUES sa mozu vyskytovat aj na LAVEJ STRANE pri pouziti OPERATOR=, pretoze pri pouziti OPERATOR= nad CLASS TYPE sa v skutocnosti vola OVERWRITTEN CLASS OPERATOR=.
   D. Typickym prikladom RVALUE EXPRESSIONS su LITERAL VALUES ako NUMERIC VALUES ci CHARACTERS s vynimkou STRING LITERALS. Patria sem aj EXPRESSIONS nad LITERAL VALUES.
   E. RVALUE EXPRESSIONS patria vsetky aritmeticke operacie.
   F. Medzi RVALUE EXPRESSIONS patri aj volanie METHOD, ktora vracia RETURN VALUE BY-VALUE, ktoru NIE je mozne modifikovat a sluzi iba ako TEMPORARY VALUE.
6. C++17 zaviedla nove VALUE CATEGORIES.
   A. LVALUE (LEFT HAND VALUE). Je to CORE VALUE CATEGORY.
   B. XVALUE (EXPIRING VALUE). Je to CORE VALUE CATEGORY.
   C. PRVALUE (PURE RIGHT HAND VALUE). Je to CORE VALUE CATEGORY.
   D. GLVALUE (GENERALIZED LEFT HAND VALUE). Je to COMPOSITE VALUE CATEGORY, ktora obsahuje zjednotenie LVALUES a XVALUES.
   E. RVALUE (RIGHT HAND VALUE). Je to COMPOSITE VALUE CATEGORY, ktora obsahuje zjednotenie PRVALUES a XVALUES.
7. GLVALUE je EXPRESSION, ktorej EVALUTATION urcuje identitu OBJECT, BIT-FIELD ci FUNCTION.
8. PRVALUE je EXPRESSION, ktorej EVALUTATION inicializuje OBJECT, alebo BIT-FIELD, alebo EXPRESSION, ktora vypocitava OPERAND BUILT-IN OPERATOR.
9. XVALUE je GLVALUE, ktora oznacuje OBJECT, alebo BIT-FIELD, ktoreho RESOURCES mozu byt znova pouzitelne.
10. LVALUE je GLVALUE, ktora NIE je XVALUE.
11. RVALUE je PRVALUE, alebo XVALUE.
12. Medzi LVALUES patria nasledujuce EXPRESSIONS.
   !!! A. Nazov VARIABLE, nazov FUNCTION, nazov TEMPLATE PARAMETER a nazov DATA MEMBER. Aj ked VARIABLE je RVALUE, pri pouziti MOVE SEMANTICS sa z nej stava LVALUE.
   !!! B. Volanie FUNCTION, METHOD, alebo OVERLOADED OPERATOR, ktory vracia ako RETURN TYPE LVALUE REFERENCE.
   C. Volanie ASSIGNMENT OPERATOR. Patria sem EXPRESSION [A=B], EXPRESSION [A+=B], EXPRESSION [A%=B] a vsetky ostatne volania ASSIGNMENT OPERATORS.
   D. Volanie PRE-INCREMENT a PRE-DECREMENTS OPERATORS. Patria sem EXPRESSION [++A] a EXPRESSION [--A].
   E. Volanie OPERATOR* vykonavajuceho POINTER DEREFERENCE.
   F. Volanie OPERATOR[]. Patri sem EXPRESSION [OBJECT[INDEX]] a EXPRESSION [POINTER[INDEX]]. EXPRESSION [OBJECT[INDEX]] je LVALUE ak EXPRESSION 'OBJECT', alebo EXPRESSION 'INDEX' je ARRAY LVALUE.
   G. Volanie OPERATOR.. Patri sem EXPRESSION [OBJECT.MEMBER] pre vsetky EXPRESSIONS 'MEMBER' s vynimkou MEMBER ENUMERATORS a NON-STATIC METHODS. Nepatri sem ani [OBJECT.MEMBER], ak OBJECT 'OBJECT' je RVALUE a MEMBER 'MEMBER' je NON-STATIC DATA MEMBER OBJECT TYPE.
   H. Volanie OPERATOR->. Patri sem EXPRESSION [POINTER->MEMBER] pre vsetky MEMBERS s vynimkou MEMBER ENUMERATORS a NON-STATIC METHODS.
   I. Volanie OPERATOR.*. Patri sem EXPRESSION [OBJECT.*POINTER_TO_MEMBER], kde EXPRESSION 'OBJECT' je LVALUE a EXPRESSION 'POINTER_TO_MEMBER' je POINTER na DATA MEMBER.
   J. Volanie OPERATOR.->. Patri sem EXPRESSION [POINTER->*POINTER_TO_MEMBER], kde EXPRESSION 'POINTER_TO_MEMBER' je POINTER na DATA MEMBER.
   K. Volanie OPERATOR,. Patri sem EXPRESSION [A,B], kde EXPRESSION 'B' je LVALUE.
   L. Volanie OPERATOR?:. Patri sem EXPRESSION [A?B:C], kde EXPRESSION 'B' a EXPRESSION 'C' su LVALUES.
   M. STRING LITERALS.
   N. CAST EXPRESSIONS konvertujuce na LVALUE REFERENCE TYPES.
   O. NON-TYPE TEMPLATE PARAMETER, ktory ma TYPE LVALUE REFERENCE TYPES.
   !!! P. Volanie FUNCTION, METHOD, alebo OVERLOADED OPERATOR, ktory vracia ako RETURN TYPE RVALUE REFERENCE na FUNCTION.
   Q. CAST EXPRESSIONS konvertujuce na RVALUE REFERENCE na FUNCTION TYPE.
13. Medzi PRVALUES patria nasledujuce EXPRESSIONS.
   A. Vsetky LITERALS s vynimkou STRING LITERALS.
   !!! B. Volanie FUNCTION, METHOD, alebo OVERLOADED OPERATOR, ktory vracia ako RETURN TYPE NON-REFERENCE.
   C. Volanie POST-INCREMENT a POST-DECREMENTS OPERATORS. Patria sem EXPRESSION [A++] a EXPRESSION [A--].
   D. Volanie MATHEMATICAL OPERATORS. Patria sem EXPRESSION [A+B], EXPRESSION [A%B], EXPRESSION [A&B], EXPRESSION [A<<B] a vsetky ostatne volania MATHEMATICAL OPERATORS.
   E. Volanie LOGICAL OPERATORS. Patria sem EXPRESSION [A&&B], EXPRESSION [A||B] a EXPRESSION [!A].
   F. Volanie COMPARISON OPERATORS. Patria sem EXPRESSION [A==B], EXPRESSION [A<B], EXPRESSION [A>=B] a vsetky ostatne volania COMPARISON OPERATORS.
   G. Volanie OPERATOR& vracajuceho ADDRESS.
   H. Volanie OPERATOR.. Patri sem EXPRESSION [OBJECT.MEMBER] ak je EXPRESSION 'MEMBER' ENUMERATOR, alebo NON-STATIC METHOD.
   I. Volanie OPERATOR->. Patri sem EXPRESSION [POINTER->MEMBER] ak je EXPRESSION 'MEMBER' ENUMERATOR, alebo NON-STATIC METHOD.
   J. Volanie OPERATOR.*. Patri sem EXPRESSION [OBJECT.*POINTER_TO_MEMBER], kde EXPRESSION 'POINTER_TO_MEMBER' je POINTER na MEMBER METHOD.
   K. Volanie OPERATOR.->. Patri sem EXPRESSION [POINTER->*POINTER_TO_MEMBER], kde EXPRESSION 'POINTER_TO_MEMBER' je POINTER na MEMBER METHOD.
   L. Volanie OPERATOR,. Patri sem EXPRESSION [A,B], kde EXPRESSION 'B' je RVALUE.
   M. Volanie OPERATOR?:. Patri sem EXPRESSION [A?B:C], pre niektore typy EXPRESSION 'B' a EXPRESSION 'C'.
   N. CAST EXPRESSIONS konvertujuce na NON-REFERENCE TYPES.
   O. THIS POINTERS.
   P. ENUMERATORS.
   Q. NON-TYPE TEMPLATE PARAMETERS, ktory su SCALAR TYPES.
   R. LAMBDA EXPRESSIONS.
   S. REQUIRES EXPRESSIONS.
   T. Specializacia CONCEPTS.
14. Medzi XVALUES patria nasledujuce EXPRESSIONS.
   A. Volanie OPERATOR.. Patri sem EXPRESSION [OBJECT.MEMBER] ak EXPRESSION 'OBJECT' je RVALUE a EXPRESSION 'MEMBER' je NON-STATIC DATA MEMBER OBJECT TYPE.
   B. Volanie OPERATOR.*. Patri sem EXPRESSION [OBJECT.*POINTER_TO_MEMBER], kde EXPRESSION 'OBJECT' je RVALUE a EXPRESSION 'POINTER_TO_MEMBER' je POINTER na DATA MEMBER.
   C. Volanie OPERATOR?:. Patri sem EXPRESSION [A?B:C], pre niektore typy EXPRESSION 'B' a EXPRESSION 'C'.
   !!! D. Volanie FUNCTION, METHOD, alebo OVERLOADED OPERATOR, ktory vracia ako RETURN TYPE RVALUE REFERENCE na OBJECT. Patri sem EXPRESSION [move(EXPRESSION)].
   E. Volanie OPERATOR[]. Patri sem EXPRESSION [OBJECT[INDEX]] ak EXPRESSION 'OBJECT', alebo EXPRESSION 'INDEX' je ARRAY RVALUE.
   F. CAST EXPRESSIONS konvertujuce na RVALUE REFERENCE TYPES.
   G. Kazda EXPRESSION, ktora oznacuje TEMPORARY OBJECT.
   H. MOVE-ELIGIBLE EXPRESSIONS. Patri sem EXPRESSION [return(EXPRESSION)], EXPRESSION [co_return(EXPRESSION)] a EXPRESSION [throw(EXPRESSION)].
15. Ak je VARIABLE inicializovana inou VARIABLE tak LVALUE (inicializacna VARIABLE) je konvertovana na RVALUE, pretoze iba RVALUES mozu sluzit na inicializaciu VARIABLES.
16. V C++17 moze dojst k TEMPORARY MATERIALIZATION, ktora vykonava konverziu PRVALUE na XVALUE. Pre TEMPORARY MATERIALIZATION platia nasledujuce fakty.
    A. Ak CODE vyzaduje GLVALUE, no v skutocnosti EXPRESSION je PRVALUE, C++ vytvori TEMPORARY OBJECT.
	B. TEMPORARY OBJECT je inicializovany EVALUATION povodnej PRVALUE.
	C. Povodna PRVALUE je nahradena TEMPORARY OBJECT, ktory reprezentuje XVALUE EXPRESSION.
17. TEMPORARY MATERIALIZATION sa vykonava v nasledujucich pripadoch.
   A. Ak sa PRVALUE ma pouzit v situacii, kde je vyzadovana REFERENCE na OBJECT.
   B. Pri pristupe k MEMBER pre CLASS OBJECT, ktory je PRVALUE.
   C. Pri pouziti OPERATOR[] pre ARRAY, ktory je PRVALUE.
   D. Pri konverzii ARRAY TO POINTER.
   E. Ked pri inicializacii OBJECT pomocou INITIALIZER LIST v INITIALIZER LIST nachadza PRVALUE.
   F. Ak sa OPERATOR [typeid(EXPRESSION)] aplikuje na PRVALUE.
   G. Ak sa OPERATOR [sizeof(EXPRESSION)] aplikuje na PRVALUE.
   H. Ak PRVALUE je TOP LEVEL EXPRESSION v EXPRESSION [EXPRESSION;].
   I. Ak je EXPRESSION konvertovana na TYPE [void].
!!! 18. TEMPORARY MATERIALIZATION sa NEVYKONAVA VZDY, iba ako to CODE vyzaduje. Napriklad ak FUNCTION vracia OBJECT, ktory vytvara, tak pred verziou C++17 sa vzdy vytvarata TEMPORARY VARIABLE. No od verzie C++17 uz sa nevytvara a vytvoreny OBJECT sa priamo pouziva na inicializaciu VARIABLE do ktorej je RETURN VALUE danej FUNCTION priradeny.
19. C++ umoznuje pomocou KEYWORD [decltype] zistit nasledujuce fakty.
   !!! A. CODE [decltype(ENTITY)] vracia TYPE VALUE 'ENTITY' v pripade, ze VALUE 'ENTITY' obsahuje IDENTIFIER NEUZATVORENY do ZATVORIEK [()], alebo VALUE 'ENTITY' obsahuje CLASS MEMBER ACCESS NEUZATVORENY do ZATVORIEK [()].
   !!!!! B. CODE [decltype(EXPRESSION)] vracia VALUE CATEGORY a TYPE EXPRESSION 'EXPRESSION', ak je EXPRESSION uzatvorena do ZATVORIEK [()].
!!! 20. Pomocou CODE [decltype(EXPRESSION)] je mozne zistit VALUE CATEGORY EXPRESSION 'EXPRESSION', ak je EXPRESSION uzatvorena do ZATVORIEK [()]. Ak EXPRESSION 'EXPRESSION' je TYPE 'TYPE' potom CODE [decltype(EXPRESSION)] vracia nasledujuce VALUES.
   A. Ak EXPRESSION 'EXPRESSION' je PRVALUE, CODE [decltype(EXPRESSION)] vracia TYPE [TYPE].
   B. Ak EXPRESSION 'EXPRESSION' je LVALUE, CODE [decltype(EXPRESSION)] vracia TYPE [TYPE&].
   C. Ak EXPRESSION 'EXPRESSION' je XVALUE, CODE [decltype(EXPRESSION)] vracia TYPE [TYPE&&].
21. REFERENCE TYPES v C++ ovplyvnuju VALUE CATEGORIES nasledujucimi sposobomi.
   A. REFERENCE TYPE limituje VALUE CATEGORIES EXPRESSIONS, ktore mozu byt naviazane na REFERENCE TYPES. Napriklad, NON-CONST LVALUE TYPE [int&] moze byt inicializovany iba LVALUE EXPRESSION TYPE [int]. Podobne RVALUE TYPE [int&&] moze byt inicializovany iba RVALUE EXPRESSION TYPE [int].
   B. Ak je REFERENCE TYPE pouzity ako FUNCTION RETURN VALUE TYPE, tak REFERENCE TYPE urcuje VALUE CATEGORY RETURN VALUE TYPE.
22. REFERENCE TYPE pouzity ako FUNCTION RETURN VALUE TYPE urcuje VALUE CATEGORY RETURN VALUE TYPE nasledovnym sposobom.
   A. Volanie FUNCTION, ktorej RETURN VALUE TYPE je LVALUE vracia LVALUE.
   B. Volanie FUNCTION, ktorej RETURN VALUE TYPE je LVALUE REFERENCE na OBJECT TYPE vracia XVALUE.
   C. Volanie FUNCTION, ktorej RETURN VALUE TYPE je NON-REFERENCE TYPE vracia PRVALUE.
//----------------------------------------------------------------------------------------------------------------------