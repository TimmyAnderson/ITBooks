//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje vytvorenie realnej APPLICATION pomocou ASP.NET CORE.
2. ASP.NET CORE definuje COMMAND LINE TOOL [dotnet new], ktory umoznuje vytvarat nove VISUAL STUDIO SOLUTIONS a NET CORE PROJECTS, ktore je potom mozne otvorit vo VISUAL STUDIO. COMMAND LINE TOOL [dotnet new] umoznuje vytvarat aj niektore typy FILES ako napriklad JSON CONFIGURATION FILES.
3. VISUAL STUDIO SOLUTIONS je mozne vytvorit pomocou COMMAND LINE [dotnet sln -o SOLUTION_NAME], kde VALUE 'SOLUTION_NAME' je nazov SOLUTION.
4. ASP.NET CORE PROJECT je mozne vytvorit pomocou COMMAND LINE [dotnet web --output PROJECT_NAME --framework FRAMEWORK_VERSION], kde VALUE 'PROJECT_NAME' je nazov PROJECT a VALUE 'FRAMEWORK_VERSION' je verzia .NET CORE FRAMEWORK.
5. XUNIT TEST PROJECT je mozne vytvorit pomocou COMMAND LINE [dotnet xunit --output PROJECT_NAME --framework FRAMEWORK_VERSION], kde VALUE 'PROJECT_NAME' je nazov PROJECT a VALUE 'FRAMEWORK_VERSION' je verzia .NET CORE FRAMEWORK.
6. ASP.NET CORE APPLICATIONS, ktore vyuzivaju MVC PATTERN obsahuju nasledujuce DIRECTORIES.
   A. DIRECTORY [Controllers] obsahuje vsetky CONTROLLERS ASP.NET CORE APPLICATION.
   B. DIRECTORY [Models] obsahuje vsetky MODEL OBJECTS ASP.NET CORE APPLICATION.
   C. DIRECTORY [Views] spolu so svojimi SUBDIRECTORIES obsahuje vsetky VIEWS ASP.NET CORE APPLICATION.
7. ASP.NET CORE implementuje DEPENDENCY INJECTION pomocou koceptu SERVICES. Pre SERVICES platia nasledujuce fakty.
   A. SERVICE je CLASS, ktora implementuje konkretny INTERFACE, alebo PARENT CLASS.
   B. SERVICE spolu s INTERFACE, alebo PARENT CLASS je zaregistrovany v METHOD [void ConfigureServices(IServiceCollection Services)] STARTUP CLASS.
   C. ASP.NET CORE dokaze pri vytvarani instancii CLASSES (napriklad CONTROLLERS) v CONTRUCTORS identifikovat, ze PARAMETER ma TYPE SERVICE INTERFACE, alebo SERVICE PARENT CLASS a SERVICE INTERFACE, alebo SERVICE PARENT CLASS ASP.NET CORE nahradi za CLASS, ktora bola zaregistrovana v STARTUP CLASS.
   D. SERVICES umoznuju jednoduchu vymenu implementovanych CLASSES za ine verzie, pretoze jedine co je treba vykonat je nahradit existujuci CLASS za iny CLASS pri registracii SERVICE v STARTUP CLASS.
!!! 8. ASP.NET CORE APPLICATION vyuzivajuce MVC by MUSIA mat zaregistrovany SERVICE, ktory implementuje MVC FRAMEWORK. MVC FRAMEWORK SERVICE sa registruje volanim METHOD [IMvcBuilder IServiceCollection.AddControllersWithViews()].
9. BY-DEFAULT, ASP.NET CORE pri vzniku UNHANDLED EXCEPTION vracia HTTP STATUS CODE 500 (INTERNAL SERVER ERROR). Pri DEVELOPMENT procese vsak takato indikacia ERROR prilis vseobecna. Riesenim je pouzit DEVELOPER EXCEPTION PAGE MIDDLEWARE COMPONENT generujuci HTML PAGE s podrobnymi informaciami o EXCEPTION.
   A. Volanim METHOD [IApplicationBuilder IApplicationBuilder.UseDeveloperExceptionPage()] je do REQUEST PIPELINE mozne pridat DEVELOPER EXCEPTION PAGE MIDDLEWARE COMPONENT, ktory pri vzniku UNHANDLED EXCEPTION vygeneruje podrobnu HTML PAGE popisujucu danu EXCEPTION.
   B. DEVELOPER EXCEPTION PAGE MIDDLEWARE COMPONENT by mal byt pridany na zaciatku REQUEST PIPELINE, aby zachytil EXCEPTIONS generovane vsetkymi nasledujucimi MIDDLEWARE COMPONENTS.
   C. DEVELOPER EXCEPTION PAGE MIDDLEWARE COMPONENT by mal byt pouzity IBA v DEVELOPMENT ENVIRONMENT, lebo podrobnosti o EXCEPTION by v PRODUCTION ENVIRONMENT nemali byt NIKDY zasielane.
10. Pre HTTP STATUS CODES v intervale <400,599> poskytuje ASP.NET CORE STATUS CODE PAGES MIDDLEWARE COMPONENT. Pre STATUS CODE PAGES MIDDLEWARE COMPONENT platia nasledujuce fakty.
   A. STATUS CODE PAGES MIDDLEWARE COMPONENT umoznuje generovat CUSTOM HTML PAGES pre HTTP STATUS CODES v intervale <400,599>.
   !!! B. STATUS CODE PAGES MIDDLEWARE COMPONENT NEFUNGUJE, ak uz HTTP RESPONSE MESSAGE BODY zacala byt niektorym z MIDDLEWARE COMPONENT generovany.
   C. STATUS CODE PAGES MIDDLEWARE COMPONENT NESPRACUVAVA EXCEPTIONS. Iba generuje HTTP RESPONSE MESSAGE BODY pre HTTP STATUS CODES v intervale <400,599>.
11. STATUS CODE PAGES MIDDLEWARE COMPONENT je mozne zaregistrovat volanim nasledujucich METHODS.
   A. Volanim METHOD [IApplicationBuilder IApplicationBuilder.UseStatusCodePages(StatusCodePagesOptions Options)] sa registruje STATUS CODE PAGES MIDDLEWARE COMPONENT, ktory definuje CALLBACK METHOD zodpovednu za generovanie HTTP RESPONSE MESSAGE BODY.
   B. Volanim METHOD [IApplicationBuilder IApplicationBuilder.UseStatusCodePagesWithRedirects(string LocationFormat)] sa registruje STATUS CODE PAGES MIDDLEWARE COMPONENT, ktory umoznuje vykona REDIRECT na URL, cez ktoru je mozne vygenerovat HTTP RESPONSE MESSAGE.
   C. Volanim METHOD [IApplicationBuilder IApplicationBuilder.UseStatusCodePagesWithReExecute(string PathFormat, string QueryFormat)] sa registruje STATUS CODE PAGES MIDDLEWARE COMPONENT, ktory umoznuje znova spustit spracovanie HTTP REQUEST MESSAGE v novou REQUEST PIPELINE, ktora umoznuje vygenerovat HTTP RESPONSE MESSAGE.
12. STATIC FILE MIDDLEWARE COMPONENT umoznuje vracat STATIC FILES, ktore su sucastou ASP.NET CORE PROJECT. Pre STATIC FILE MIDDLEWARE COMPONENT platia nasledujuce fakty.
   A. STATIC FILE MIDDLEWARE COMPONENT vracia CONTENT STATIC FILES, ktore su sucastou ASP.NET CORE PROJECT.
   B. STATIC FILE MIDDLEWARE COMPONENT sa pridava do REQUEST PIPELINE volanim METHOD [IApplicationBuilder IApplicationBuilder.UseStaticFiles(StaticFileOptions Options)], kde instancia CLASS [StaticFileOptions] umoznuje nakonfigurovat STATIC FILE MIDDLEWARE COMPONENT.
   C. STATIC FILE MIDDLEWARE COMPONENT je optimalne pridavat na zaciatok REQUEST PIPELINE.
   D. STATIC FILE MIDDLEWARE COMPONENT je mapovana na DIRECTORY z ktoreho cita STATIC FILES.
   !!! E. REQUEST PIPELINE moze obsahovat aj VIACERO STATIC FILE MIDDLEWARE COMPONENTS, kde kazda STATIC FILE MIDDLEWARE COMPONENT moze byt mapovana na iny DIRECTORY.
13. ENTITY FRAMEWORK CORE je OBJECT to RELATIONSHIP MAPPER, ktory mapuje C# OBJECTS na DB TABLES.
14. ENTITY FRAMEWORK CORE sa instaluje ako seria osobitnych NUGET PACKAGES.
   A. NUGET PACKAGE [Microsoft.EntityFrameworkCore.Tools] obsahuje ENTITY FRAMEWORK CORE TOOLS.
   !!! B. NUGET PACKAGE [Microsoft.EntityFrameworkCore.Sqlite] obsahuje podporu pre SQLITE.
15. DB CONNECTIONS STRINGS sa zadavaju v CONFIGURATION FILE [Application.json].
16. V pripade, ze ASP.NET CORE APPLICATION pristupuje k DB, je vyhodne, aby pristup bol vykonavany cez INTERFACE [IQueryable<TYPE>], pretoze tento TYPE umoznuje vykonat QUERIES voci DB bez nutnosti, aby DB vracala vsetky data do APPLICATION. Namiesto toho je do DB zaslany cely LINQ EXPRESSION, ktory je transformovany na QUERY.
17. DB MIGRATIONS je mechanizmus ENTITY FRAMEWORK CORE, ktory umoznuje vytvarat a modifikovat DB SCHEMU. DB MIGRATIONS sa pouzivaju pomocou nasledujucich COMMANDS.
   A. COMMAND [dotnet ef migrations add XXX] prida MIGRATION s nazvom 'XXX'.
   B. COMMAND [dotnet ef migrations remove] odstrani POSLEDNU pridanu MIGRATION.
18. TAG HELPERS umoznuje vytvarat znova pouzitelne COMPONENTS, ktore v C# umoznuju vytvarat HTML CODE. Pre TAG HELPERS platia nasledujuce pravidla.
   A. TAG HELPERS su CLASSES, ktore su DERIVED z CLASS [TagHelper].
   B. TAG HELPERS generuju HTML CONTENT.
   C. TAG HELPERS musia byt zaregistrovane pomocou KEYWORD [@addTagHelper].
19. LIBRARY MANAGER je PACKAGE MANAGER, ktory umoznuje pouzivanie CLIENT LIBRARIES obsahujucich [.JS] FILES, [.CSS] FILES, IMAGES a dalsieho obsahu, ktory sa posiela na CLIENT SIDE (do BROWSERA) v ASP.NET CORE APPLICATIONS. Pre LIBRARY MANAGER platia nasledujuce fakty.
   A. LIBRARY MANAGER je PACKAGE MANAGER, ktory umoznuje pouzivanie CLIENT LIBRARIES obsahujucich [.JS] FILES, [.CSS] FILES, IMAGES a dalsieho obsahu, ktory sa posiela na CLIENT SIDE (do BROWSERA) v ASP.NET CORE APPLICATIONS.
   B. V ASP.NET CORE APPLICATIONS sa pouziva LIBRARY MANAGER [LibMan].
   C. LIBRARY MANAGER [LibMan] je mozne instalovat pomocou COMMAND LINE COMMAND [dotnet tool install --global Microsoft.Web.LibraryManager.Cli].
   D. CLIENT LIBRARIES, ktore VISUAL STUDIO PROJECT obsahuje su ulozene vo FILE [libman.json]. Tento FILE je mozne do PROJECT vykonanim COMMAND [Project->Manage Client-Side Libraries].
   E. VISUAL STUDIO obsahuje aj VISUAL TOOL na jednoduchsiu editaciu FILE [libman.json]. TOOL sa spusta pomocou COMMAND [CONTEXT MENU na PROJECT->Add->Client-Side Library].
   F. Pri editacii FILE [libman.json] VISUAL STUDIO poskytuje INTELLISENSE zobrazujuci nazov PACKAGES.
   !!! G. Po vykonani SAVE FILE [libman.json] VISUAL STUDIO stiahne nove PACKAGES.
   H. Pomocou COMMAND [CONTEXT MENU na [libman.json]->Restore Client-Side Libraries] je mozne vykonat obnovenie CLIENT SIDE LIBRARIES.
   I. Pomocou COMMAND [CONTEXT MENU na [libman.json]->Clean Client-Side Libraries] je mozne vykonat odstranit CLIENT SIDE LIBRARIES.
   J. Pomocou COMMAND [CONTEXT MENU na [libman.json]->Enable Restore Client-Side Libraries on Build] je mozne povolit automaticke obnovenie CLIENT SIDE LIBRARIES pri REBUILD.
20. Pomocou COMMAND LINE COMMAND [libman init -p PROVIDER] vytvori FILE [libman.json], ktory bude mat nastaveny PROVIDER na VALUE 'PROVIDER'. Najcastejsie pouzivanym PROVIDER je [cdnjs].
21. Pomocou COMMAND LINE COMMAND [libman install CLIENT_SIDE_LIBRARY -d DIRECTORY] je mozne do FILE [libman.json] vlozit CLIENT SIDE LIBRARY 'CLIENT_SIDE_LIBRARY'. Tato CLIENT SIDE LIBRARY bude ulozena do DIRECTORY 'DIRECTORY'.
!!! 22. ASP.NET CORE podporuje PARTIAL VIEWS. Pre PARTIAL VIEWS platia nasledujuce fakty.
   A. PARTIAL VIEWS su [.CSHTML] FILES, ktore obsahuju RAZOR WEB PAGES.
   B. PARTIAL VIEWS sluzia na zdielanie HTML CONTENT.
   !!! C. Do VIEWS je mozne vlozit obsah PARTIAL VIEWS pomocou volania METHOD [Task<IHtmlContent> IHtmlHelper.PartialAsync(string PartialViewName, object Model)], kde PARAMETER 'PartialViewName' obsahuje nazov PARTIAL VIEW a PARAMETER 'Model' obsahuje MODEL OBJECT.
   !!! D. Alternativne do VIEWS je mozne vlozit obsah PARTIAL VIEWS pomocou volania TAG HELPER CLASS [PartialTagHelper]. TAG HELPER pouziva SYNTAX [<partial name="PARTIAL_VIEW_NAME" model="MODEL_NAME"/>], kde VALUE 'PARTIAL_VIEW_NAME' je nazov PARTIAL VIEW a VALUE 'MODEL_NAME' je OPTIONAL MODEL OBJECT zasielany do STRONGLY TYPED PARTIAL VIEWS.
//----------------------------------------------------------------------------------------------------------------------