// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RelationalProperties;

#nullable disable

namespace RelationalProperties.Migrations
{
    [DbContext(typeof(CDBContext))]
    partial class CDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("My_PROPERTY_BAG_PRINCIPAL", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValueInt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueString")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("My_PROPERTY_BAG_PRINCIPAL");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnForeignKeyDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID");

                    b.ToTable("EntitiesAttributeOnForeignKeyDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnForeignKeyPrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesAttributeOnForeignKeyPrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnNavigationPropertyDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID");

                    b.ToTable("EntitiesAttributeOnNavigationPropertyDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnNavigationPropertyPrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesAttributeOnNavigationPropertyPrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany1MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesAutoManyToMany1MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany1MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesAutoManyToMany1MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany1NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesAutoManyToMany1NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany2MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesAutoManyToMany2MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany2MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesAutoManyToMany2MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany2NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesAutoManyToMany2NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys1MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesAutoManyToManyMixedKeys1MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys1MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID", "EntityNID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesAutoManyToManyMixedKeys1MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys1NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesAutoManyToManyMixedKeys1NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys2MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesAutoManyToManyMixedKeys2MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys2MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID", "EntityNID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesAutoManyToManyMixedKeys2MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys2NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesAutoManyToManyMixedKeys2NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany1MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesAutoZeroManyToMany1MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany1MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesAutoZeroManyToMany1MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany1NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesAutoZeroManyToMany1NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany2MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesAutoZeroManyToMany2MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany2MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesAutoZeroManyToMany2MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany2NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesAutoZeroManyToMany2NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityCompositeForeignKeyDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalID2")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID1", "EntityPrincipalID2");

                    b.ToTable("EntitiesCompositeForeignKeyDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityCompositeForeignKeyPrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalID2")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID1", "EntityPrincipalID2");

                    b.ToTable("EntitiesCompositeForeignKeyPrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName1DependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesForeignKeyName1DependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName1PrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesForeignKeyName1PrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName2DependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CEntityForeignKeyName2PrincipalConventionsEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("CEntityForeignKeyName2PrincipalConventionsEntityPrincipalID");

                    b.ToTable("EntitiesForeignKeyName2DependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName2PrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesForeignKeyName2PrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName3DependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalEntityPrincipalID");

                    b.ToTable("EntitiesForeignKeyName3DependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName3PrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesForeignKeyName3PrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasAlternateKeyCompositeFluentAPI", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyAlternateKey1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MyAlternateKey2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.HasAlternateKey("MyAlternateKey1", "MyAlternateKey2");

                    b.ToTable("EntitiesHasAlternateKeyCompositeFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasAlternateKeyFluentAPI", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyAlternateKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.HasAlternateKey("MyAlternateKey");

                    b.ToTable("EntitiesHasAlternateKeyFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasConstraintNameDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID")
                        .HasName("My_PRIMARY_KEY_DEPENDENT");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesHasConstraintNameDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasConstraintNamePrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID")
                        .HasName("My_PRIMARY_KEY_PRINCIPAL");

                    b.ToTable("EntitiesHasConstraintNamePrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyCompositeDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyPrincipalKeyInEntityDependent1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyPrincipalKeyInEntityDependent2")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("MyPrincipalKeyInEntityDependent1", "MyPrincipalKeyInEntityDependent2");

                    b.ToTable("EntitiesHasPrincipalKeyCompositeDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyCompositePrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyPrincipalKeyInEntityPrincipal1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MyPrincipalKeyInEntityPrincipal2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesHasPrincipalKeyCompositePrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyPrincipalKeyInEntityDependent")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("MyPrincipalKeyInEntityDependent");

                    b.ToTable("EntitiesHasPrincipalKeyDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MyPrincipalKeyInEntityPrincipal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesHasPrincipalKeyPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityInversePropertyDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntityPrincipalID2")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID1");

                    b.HasIndex("EntityPrincipalID2");

                    b.ToTable("EntitiesInversePropertyDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityInversePropertyPrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesInversePropertyPrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany1MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesManyToMany1MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany1MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesManyToMany1MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany1NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesManyToMany1NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany2MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesManyToMany2MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany2MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesManyToMany2MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany2NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesManyToMany2NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys1MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesManyToManyMixedKeys1MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys1MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID", "EntityNID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesManyToManyMixedKeys1MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys1NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesManyToManyMixedKeys1NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys2MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesManyToManyMixedKeys2MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys2MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID", "EntityNID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesManyToManyMixedKeys2MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys2NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesManyToManyMixedKeys2NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey1DependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesNoForeignKey1DependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey1PrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesNoForeignKey1PrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey2DependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CEntityNoForeignKey2PrincipalConventionsEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("CEntityNoForeignKey2PrincipalConventionsEntityPrincipalID");

                    b.ToTable("EntitiesNoForeignKey2DependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey2PrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesNoForeignKey2PrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey3DependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CEntityNoForeignKey3PrincipalConventionsEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("CEntityNoForeignKey3PrincipalConventionsEntityPrincipalID");

                    b.ToTable("EntitiesNoForeignKey3DependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey3PrincipalConventions", b =>
                {
                    b.Property<int>("CEntityNoForeignKey3PrincipalConventionsEntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("CEntityNoForeignKey3PrincipalConventionsEntityPrincipalID");

                    b.ToTable("EntitiesNoForeignKey3PrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteCascadeNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteCascadeNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteCascadeNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteCascadeNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientCascadeNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientCascadeNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientCascadeNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientCascadeNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientNoActionNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientNoActionNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientNoActionNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientNoActionNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientSetNullNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientSetNullNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientSetNullNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteClientSetNullNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteNoActionNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteNoActionNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteNoActionNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteNoActionNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteRestrictNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteRestrictNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteRestrictNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteRestrictNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNotNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteSetNullNotNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNotNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteSetNullNotNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNullDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteSetNullNullDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNullPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOnDeleteSetNullNullPrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany1DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToMany1DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany1PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToMany1PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany2DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToMany2DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany2PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToMany2PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyDependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyDependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID");

                    b.ToTable("EntitiesOneToManyDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyPrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyPrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyPrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyPrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne1DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesOneToOne1DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne1PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOne1PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne2DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesOneToOne2DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne2PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOne2PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneDependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesOneToOneDependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesOneToOneDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys1DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.ToTable("EntitiesOneToOneMixedKeys1DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys1PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOneMixedKeys1PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys2DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityDependentID");

                    b.ToTable("EntitiesOneToOneMixedKeys2DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys2PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOneMixedKeys2PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOnePrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOnePrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOnePrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOnePrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOwnedTypeInMultiTables", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesOwnedTypeInMultiTables", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOwnedTypeInOneTable", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesOwnedTypeInOneTable", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityOwnedTypeOneAndMany", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesOwnedTypeOneAndMany", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityPropertyBagDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesPropertyBagDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredFalseDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesRequiredFalseDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredFalsePrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesRequiredFalsePrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredTrueDependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesRequiredTrueDependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredTruePrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesRequiredTruePrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerHierarchyBaseConventions", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesTablePerHierarchyBaseConventions", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("CEntityTablePerHierarchyBaseConventions");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerHierarchyBaseFluentAPI", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("Discriminator")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesTablePerHierarchyBaseFluentAPI", (string)null);

                    b.HasDiscriminator<int>("Discriminator");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerTypeBaseFluentAPI", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesTablePerTypeBaseFluentAPI", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RelationalProperties.CEntityTableSplittingDependent1FluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntitySharedValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SHARED_COLUMN");

                    b.HasKey("EntityDependentID");

                    b.ToTable("EntitiesTableSplittingFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTableSplittingDependent2FluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue2")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntitySharedValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SHARED_COLUMN");

                    b.HasKey("EntityDependentID");

                    b.ToTable("EntitiesTableSplittingFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTableSplittingPrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesTableSplittingFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany1MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesZeroManyToMany1MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany1MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesZeroManyToMany1MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany1NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesZeroManyToMany1NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany2MFluentAPI", b =>
                {
                    b.Property<int>("EntityMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityMID");

                    b.ToTable("EntitiesZeroManyToMany2MFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany2MNFluentAPI", b =>
                {
                    b.Property<int>("EntityMNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntityMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityMNValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityNID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMNID");

                    b.HasIndex("EntityMID");

                    b.HasIndex("EntityNID");

                    b.ToTable("EntitiesZeroManyToMany2MNFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany2NFluentAPI", b =>
                {
                    b.Property<int>("EntityNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityNValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityNID");

                    b.ToTable("EntitiesZeroManyToMany2NFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany1DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToMany1DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany1PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToMany1PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany2DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToMany2DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany2PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToMany2PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyDependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToManyDependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID");

                    b.ToTable("EntitiesZeroToManyDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyPrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToManyPrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyPrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToManyPrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne1DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesZeroToOne1DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne1PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToOne1PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne2DependentFluentAPI", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesZeroToOne2DependentFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne2PrincipalFluentAPI", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToOne2PrincipalFluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOneDependentConventions", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesZeroToOneDependentConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOneDependentDataAnnotations", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesZeroToOneDependentDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOnePrincipalConventions", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToOnePrincipalConventions", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOnePrincipalDataAnnotations", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToOnePrincipalDataAnnotations", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CTestEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("TestEntities", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerHierarchyDerived1Conventions", b =>
                {
                    b.HasBaseType("RelationalProperties.CEntityTablePerHierarchyBaseConventions");

                    b.Property<string>("DerivedValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivedValueInSharedColumn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SHARED_COLUMN");

                    b.Property<string>("DerivedValueWithSameName")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SAME_NAME_1");

                    b.HasDiscriminator().HasValue("CEntityTablePerHierarchyDerived1Conventions");
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerHierarchyDerived2Conventions", b =>
                {
                    b.HasBaseType("RelationalProperties.CEntityTablePerHierarchyBaseConventions");

                    b.Property<string>("DerivedValue2")
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivedValueInSharedColumn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SHARED_COLUMN");

                    b.Property<string>("DerivedValueWithSameName")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SAME_NAME_2");

                    b.HasDiscriminator().HasValue("CEntityTablePerHierarchyDerived2Conventions");
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerHierarchyDerived1FluentAPI", b =>
                {
                    b.HasBaseType("RelationalProperties.CEntityTablePerHierarchyBaseFluentAPI");

                    b.Property<string>("DerivedValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivedValueInSharedColumn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SHARED_COLUMN");

                    b.Property<string>("DerivedValueWithSameName")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SAME_NAME_1");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerHierarchyDerived2FluentAPI", b =>
                {
                    b.HasBaseType("RelationalProperties.CEntityTablePerHierarchyBaseFluentAPI");

                    b.Property<string>("DerivedValue2")
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivedValueInSharedColumn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SHARED_COLUMN");

                    b.Property<string>("DerivedValueWithSameName")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_SAME_NAME_2");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerTypeDerived1FluentAPI", b =>
                {
                    b.HasBaseType("RelationalProperties.CEntityTablePerTypeBaseFluentAPI");

                    b.Property<string>("DerivedValue1")
                        .HasColumnType("TEXT");

                    b.ToTable("EntitiesTablePerTypeDerived1FluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerTypeDerived2FluentAPI", b =>
                {
                    b.HasBaseType("RelationalProperties.CEntityTablePerTypeBaseFluentAPI");

                    b.Property<string>("DerivedValue2")
                        .HasColumnType("TEXT");

                    b.ToTable("EntitiesTablePerTypeDerived2FluentAPI", (string)null);
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnForeignKeyDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAttributeOnForeignKeyPrincipalDataAnnotations", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("ForeignKeyEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnNavigationPropertyDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAttributeOnNavigationPropertyPrincipalDataAnnotations", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("ForeignKeyEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany1MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAutoManyToMany1MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityAutoManyToMany1NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany2MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAutoManyToMany2MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityAutoManyToMany2NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys1MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAutoManyToManyMixedKeys1MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityAutoManyToManyMixedKeys1NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys2MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAutoManyToManyMixedKeys2MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityAutoManyToManyMixedKeys2NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany1MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAutoZeroManyToMany1MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID");

                    b.HasOne("RelationalProperties.CEntityAutoZeroManyToMany1NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID");

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany2MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityAutoZeroManyToMany2MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID");

                    b.HasOne("RelationalProperties.CEntityAutoZeroManyToMany2NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID");

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityCompositeForeignKeyDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityCompositeForeignKeyPrincipalDataAnnotations", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID1", "EntityPrincipalID2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName1DependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityForeignKeyName1PrincipalConventions", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName2DependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityForeignKeyName2PrincipalConventions", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("CEntityForeignKeyName2PrincipalConventionsEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName3DependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityForeignKeyName3PrincipalConventions", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasConstraintNameDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityHasConstraintNamePrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("My_FOREIGN_KEY_CONSTRAINT");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyCompositeDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityHasPrincipalKeyCompositePrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("MyPrincipalKeyInEntityDependent1", "MyPrincipalKeyInEntityDependent2")
                        .HasPrincipalKey("MyPrincipalKeyInEntityPrincipal1", "MyPrincipalKeyInEntityPrincipal2");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityHasPrincipalKeyPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("MyPrincipalKeyInEntityDependent")
                        .HasPrincipalKey("MyPrincipalKeyInEntityPrincipal");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityInversePropertyDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityInversePropertyPrincipalDataAnnotations", "EntityPrincipal1")
                        .WithMany("EntitiesDependent1")
                        .HasForeignKey("EntityPrincipalID1");

                    b.HasOne("RelationalProperties.CEntityInversePropertyPrincipalDataAnnotations", "EntityPrincipal2")
                        .WithMany("EntitiesDependent2")
                        .HasForeignKey("EntityPrincipalID2");

                    b.Navigation("EntityPrincipal1");

                    b.Navigation("EntityPrincipal2");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany1MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityManyToMany1MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityManyToMany1NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany2MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityManyToMany2MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityManyToMany2NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys1MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityManyToManyMixedKeys1MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityManyToManyMixedKeys1NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys2MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityManyToManyMixedKeys2MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationalProperties.CEntityManyToManyMixedKeys2NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey1DependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityNoForeignKey1PrincipalConventions", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey2DependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityNoForeignKey2PrincipalConventions", null)
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("CEntityNoForeignKey2PrincipalConventionsEntityPrincipalID");
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey3DependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityNoForeignKey3PrincipalConventions", null)
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("CEntityNoForeignKey3PrincipalConventionsEntityPrincipalID");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteCascadeNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteCascadeNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteClientCascadeNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteClientCascadeNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteClientNoActionNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteClientNoActionNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteClientSetNullNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteClientSetNullNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteNoActionNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteNoActionNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteRestrictNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteRestrictNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNotNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteSetNullNotNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNullDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOnDeleteSetNullNullPrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany1DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToMany1PrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany2DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToMany2PrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyDependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToManyPrincipalConventions", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToManyPrincipalDataAnnotations", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("ForeignKeyEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne1DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToOne1PrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityOneToOne1DependentFluentAPI", "EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne2DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToOne2PrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityOneToOne2DependentFluentAPI", "EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneDependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToOnePrincipalConventions", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityOneToOneDependentConventions", "EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToOnePrincipalDataAnnotations", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityOneToOneDependentDataAnnotations", "ForeignKeyEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys1DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToOneMixedKeys1PrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityOneToOneMixedKeys1DependentFluentAPI", "EntityDependentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys2DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityOneToOneMixedKeys2PrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityOneToOneMixedKeys2DependentFluentAPI", "EntityDependentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOwnedTypeInMultiTables", b =>
                {
                    b.OwnsOne("RelationalProperties.COwnedTypeDataAnnotations", "OwnedTypeDataAnnotations", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeInMultiTablesEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeInMultiTablesEntityID");

                            b1.ToTable("OwnedType1", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeInMultiTablesEntityID");
                        });

                    b.OwnsOne("RelationalProperties.COwnedTypeDataAnnotations", "OwnedTypeDataAnnotationsRequired", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeInMultiTablesEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeInMultiTablesEntityID");

                            b1.ToTable("OwnedType2", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeInMultiTablesEntityID");
                        });

                    b.Navigation("OwnedTypeDataAnnotations");

                    b.Navigation("OwnedTypeDataAnnotationsRequired")
                        .IsRequired();
                });

            modelBuilder.Entity("RelationalProperties.CEntityOwnedTypeInOneTable", b =>
                {
                    b.OwnsOne("RelationalProperties.COwnedTypeDataAnnotations", "OwnedTypeDataAnnotations", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeInOneTableEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeInOneTableEntityID");

                            b1.ToTable("EntitiesOwnedTypeInOneTable");

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeInOneTableEntityID");
                        });

                    b.OwnsOne("RelationalProperties.COwnedTypeDataAnnotations", "OwnedTypeDataAnnotationsRequired", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeInOneTableEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeInOneTableEntityID");

                            b1.ToTable("EntitiesOwnedTypeInOneTable");

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeInOneTableEntityID");
                        });

                    b.OwnsOne("RelationalProperties.CNestedOwnedType", "NestedOwnedType", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeInOneTableEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("NestedOwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("NestedOwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeInOneTableEntityID");

                            b1.ToTable("EntitiesOwnedTypeInOneTable");

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeInOneTableEntityID");

                            b1.OwnsOne("RelationalProperties.COwnedTypeDataAnnotations", "OwnedType1", b2 =>
                                {
                                    b2.Property<int>("CNestedOwnedTypeCEntityOwnedTypeInOneTableEntityID")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("OwnedTypeInt")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("OwnedTypeString")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("OwnedTypeStringRequired")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("CNestedOwnedTypeCEntityOwnedTypeInOneTableEntityID");

                                    b2.ToTable("EntitiesOwnedTypeInOneTable");

                                    b2.WithOwner()
                                        .HasForeignKey("CNestedOwnedTypeCEntityOwnedTypeInOneTableEntityID");
                                });

                            b1.OwnsOne("RelationalProperties.COwnedTypeDataAnnotations", "OwnedType2", b2 =>
                                {
                                    b2.Property<int>("CNestedOwnedTypeCEntityOwnedTypeInOneTableEntityID")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("OwnedTypeInt")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("OwnedTypeString")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("OwnedTypeStringRequired")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("CNestedOwnedTypeCEntityOwnedTypeInOneTableEntityID");

                                    b2.ToTable("EntitiesOwnedTypeInOneTable");

                                    b2.WithOwner()
                                        .HasForeignKey("CNestedOwnedTypeCEntityOwnedTypeInOneTableEntityID");
                                });

                            b1.Navigation("OwnedType1");

                            b1.Navigation("OwnedType2");
                        });

                    b.OwnsOne("RelationalProperties.COwnedTypeFluentAPI", "OwnedTypeFluentAPI", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeInOneTableEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeInOneTableEntityID");

                            b1.ToTable("EntitiesOwnedTypeInOneTable");

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeInOneTableEntityID");
                        });

                    b.Navigation("NestedOwnedType");

                    b.Navigation("OwnedTypeDataAnnotations");

                    b.Navigation("OwnedTypeDataAnnotationsRequired")
                        .IsRequired();

                    b.Navigation("OwnedTypeFluentAPI");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOwnedTypeOneAndMany", b =>
                {
                    b.OwnsMany("RelationalProperties.COwnedTypeMany", "OwnedTypesMany", b1 =>
                        {
                            b1.Property<int>("OwnedTypeID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CEntityOwnedTypeOneAndManyEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("OwnedTypeID");

                            b1.HasIndex("CEntityOwnedTypeOneAndManyEntityID");

                            b1.ToTable("COwnedTypeMany");

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeOneAndManyEntityID");
                        });

                    b.OwnsOne("RelationalProperties.COwnedTypeOne", "OwnedTypeOne", b1 =>
                        {
                            b1.Property<int>("CEntityOwnedTypeOneAndManyEntityID")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OwnedTypeInt")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("OwnedTypeString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnedTypeStringRequired")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CEntityOwnedTypeOneAndManyEntityID");

                            b1.ToTable("EntitiesOwnedTypeOneAndMany");

                            b1.WithOwner()
                                .HasForeignKey("CEntityOwnedTypeOneAndManyEntityID");
                        });

                    b.Navigation("OwnedTypeOne");

                    b.Navigation("OwnedTypesMany");
                });

            modelBuilder.Entity("RelationalProperties.CEntityPropertyBagDependentFluentAPI", b =>
                {
                    b.HasOne("My_PROPERTY_BAG_PRINCIPAL", null)
                        .WithMany()
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredFalseDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityRequiredFalsePrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredTrueDependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityRequiredTruePrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityTableSplittingDependent1FluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityTableSplittingPrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent1")
                        .HasForeignKey("RelationalProperties.CEntityTableSplittingDependent1FluentAPI", "EntityDependentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityTableSplittingDependent2FluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityTableSplittingPrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent2")
                        .HasForeignKey("RelationalProperties.CEntityTableSplittingDependent2FluentAPI", "EntityDependentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany1MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroManyToMany1MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID");

                    b.HasOne("RelationalProperties.CEntityZeroManyToMany1NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID");

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany2MNFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroManyToMany2MFluentAPI", "EntityM")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityMID");

                    b.HasOne("RelationalProperties.CEntityZeroManyToMany2NFluentAPI", "EntityN")
                        .WithMany("EntitiesMN")
                        .HasForeignKey("EntityNID");

                    b.Navigation("EntityM");

                    b.Navigation("EntityN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany1DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToMany1PrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany2DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToMany2PrincipalFluentAPI", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyDependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToManyPrincipalConventions", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToManyPrincipalDataAnnotations", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("ForeignKeyEntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne1DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToOne1PrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityZeroToOne1DependentFluentAPI", "EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne2DependentFluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToOne2PrincipalFluentAPI", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityZeroToOne2DependentFluentAPI", "EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOneDependentConventions", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToOnePrincipalConventions", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityZeroToOneDependentConventions", "EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOneDependentDataAnnotations", b =>
                {
                    b.HasOne("RelationalProperties.CEntityZeroToOnePrincipalDataAnnotations", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("RelationalProperties.CEntityZeroToOneDependentDataAnnotations", "ForeignKeyEntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerTypeDerived1FluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityTablePerTypeBaseFluentAPI", null)
                        .WithOne()
                        .HasForeignKey("RelationalProperties.CEntityTablePerTypeDerived1FluentAPI", "EntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RelationalProperties.CEntityTablePerTypeDerived2FluentAPI", b =>
                {
                    b.HasOne("RelationalProperties.CEntityTablePerTypeBaseFluentAPI", null)
                        .WithOne()
                        .HasForeignKey("RelationalProperties.CEntityTablePerTypeDerived2FluentAPI", "EntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnForeignKeyPrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAttributeOnNavigationPropertyPrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany1MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany1NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany2MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToMany2NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys1MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys1NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys2MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoManyToManyMixedKeys2NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany1MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany1NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany2MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityAutoZeroManyToMany2NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityCompositeForeignKeyPrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName1PrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName2PrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityForeignKeyName3PrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasConstraintNamePrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyCompositePrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityHasPrincipalKeyPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityInversePropertyPrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntitiesDependent1");

                    b.Navigation("EntitiesDependent2");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany1MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany1NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany2MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToMany2NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys1MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys1NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys2MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityManyToManyMixedKeys2NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey1PrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey2PrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityNoForeignKey3PrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteCascadeNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientCascadeNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientNoActionNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteClientSetNullNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteNoActionNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteRestrictNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNotNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOnDeleteSetNullNullPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany1PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToMany2PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyPrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToManyPrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne1PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOne2PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys1PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOneMixedKeys2PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOnePrincipalConventions", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityOneToOnePrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredFalsePrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityRequiredTruePrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityTableSplittingPrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent1")
                        .IsRequired();

                    b.Navigation("EntityDependent2")
                        .IsRequired();
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany1MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany1NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany2MFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroManyToMany2NFluentAPI", b =>
                {
                    b.Navigation("EntitiesMN");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany1PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToMany2PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyPrincipalConventions", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToManyPrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne1PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOne2PrincipalFluentAPI", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOnePrincipalConventions", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("RelationalProperties.CEntityZeroToOnePrincipalDataAnnotations", b =>
                {
                    b.Navigation("EntityDependent");
                });
#pragma warning restore 612, 618
        }
    }
}
