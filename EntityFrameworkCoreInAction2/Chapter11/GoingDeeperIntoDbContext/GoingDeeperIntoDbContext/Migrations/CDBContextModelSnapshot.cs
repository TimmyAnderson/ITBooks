// <auto-generated />
using System;
using GoingDeeperIntoDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoingDeeperIntoDbContext.Migrations
{
    [DbContext(typeof(CDBContext))]
    partial class CDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityDependentIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentStringValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyDependent", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyPrincipal", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangedNotificationsDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityDependentIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentStringValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesChangedNotificationsDependent", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangedNotificationsPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesChangedNotificationsPrincipal", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityDependentIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentStringValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesChangingAndChangedNotificationsDependent", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesChangingAndChangedNotificationsPrincipal", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityDependentIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentStringValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesDependent", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesPrincipal", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesSnapshotDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityDependentIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentStringValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesSnapshotDependent", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesSnapshotPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyTrackingChangesSnapshotPrincipal", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityToSqlQuery", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("EntityDoubleValue")
                        .HasColumnType("REAL");

                    b.Property<int>("EntityIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesToSqlQuery");

                    b.ToSqlQuery("SELECT EntityID, EntityIntValue, EntityStringValue, EntityDoubleValue FROM EntitiesToSqlQueryBackendData ORDER BY EntityIntValue DESC");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityToSqlQueryBackendData", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("EntityDoubleValue")
                        .HasColumnType("REAL");

                    b.Property<int>("EntityIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntitiesToSqlQueryBackendData", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityZeroToManyDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityDependentIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentStringValue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToManyDependent", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityZeroToManyPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityPrincipalIntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalStringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesZeroToManyPrincipal", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CTestEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("TestEntities", (string)null);
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyDependent", b =>
                {
                    b.HasOne("GoingDeeperIntoDbContext.CEntityOneToManyPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangedNotificationsDependent", b =>
                {
                    b.HasOne("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangedNotificationsPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsDependent", b =>
                {
                    b.HasOne("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesDependent", b =>
                {
                    b.HasOne("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesSnapshotDependent", b =>
                {
                    b.HasOne("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesSnapshotPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityZeroToManyDependent", b =>
                {
                    b.HasOne("GoingDeeperIntoDbContext.CEntityZeroToManyPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID");

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangedNotificationsPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesChangingAndChangedNotificationsWithOriginalValuesPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityOneToManyTrackingChangesSnapshotPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("GoingDeeperIntoDbContext.CEntityZeroToManyPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });
#pragma warning restore 612, 618
        }
    }
}
