//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje rozdelenie C++ programu do separatnych SOURCE FILES.
2. V C++ je KAZDY SOURCE FILE samostany COMPILATION UNIT, ktory je kompilovany NEZAVISLE na INYCH SOURCE FILES.
3. Proces kompilacie sa vzdy realizuje nad TRANSLATION UNIT. TRANSLATION UNIT je SOURCE CODE nad ktorym bol vykonany PREPROCESSING C++ PREPROCESSOROM, ktory vykonal nasledujuce cinnosti.
   A. Nahradil MAKRA ich definicami.
   B. Pridal obsah HEADER FILES na ktore sa SOURCE CODE odkazuje pomocou direktivy PREPROCESSORA '#include'.
4. LINKER je program, ktory ma za ulohu zlozit vsetky PREKOMPILOVANE COMPILATION UNITS do spustitelneho programu. Zaroven robi kontroly konzistencie, ci napriklad jednotlive COMPILATION UNIT nemaju navzajom nekonzistentne definovane KONSTRUKTY (VARIABLES, FUNCTIONS, CLASSES).
5. Pomocou KEYWORD 'extern' je mozne v COMPILATION UNIT DEKLAROVAT odkaz na KONSTRUKT definovany v INOM COMPILATION UNIT.
!!! 6. KAZDA INLINE funkcia MUSI BYT DEFINOVANA v COMPILATION UNIT, kde je DEKLAROVANA. EXTERNU INLINE FUNKCIU LINKER NEAKCEPTUJE.
7. TYPEDEFS maju platnost iba v ramci COMPILATION UNIT v ktorom su DEFINOVANE.
!!! 8. CONSTANTS ak NIE SU DEKLAROVANE ako 'extern' maju VZDY LOKALNU PLATNOST v ramci COMPILATION UNIT v ktorom su DEFINOVANE.
!!! 9. Ak deklarujem CONSTANT s 'extern' MUSIM ju ZAROVEN i INICIALIZOVAT (cim sa jej zaroven priradi pamat). Takato CONSTANT potom MOZE BYT REFEROVANA z INYCH COMPILATION UNITS.
10. HEADER FILES (.H) su subory obsahujuce DEKLARACIE KONSTRUKTOV (CLASSES, FUNCTIONS, VARIABLES) bez ich DEFINICII. Tie byvaju obsiahnute az v CPP FILES.
11. Pouzitie HEADER FILES umoznuje UDRZAT KONZISTENCIU vsetkych COMPILATIONS UNITS v programe.
12. Standardne kniznice sa vkladaju pomocou direktivy PREPROCESSORA '#include <HeaderName>'.
!!! 13. KAZDA standardna C kniznica 'StandardLibrary.h' ma C++ verziu, s nazvom 'CStandardLibrary', ktora obsahuje TIE ISTE FUNKCIE ako 'StandardLibrary.h', avsak deklarovane v NAMESPACE 'std'.
!!! 14. V C++ pri kompilacii viacerych COMPILATION UNITS plati dolezite pravidlo, ze KONSTRUKT moze byt DEKLAROVANY VIACKRAT, ale DEFINOVANY moze byt IBA RAZ. Z toho pravidla vsak EXISTUJU VYNIMKY pre nasledujuce KONSTRUKTY.
   A. CLASSES.
   B. TEMPLATES.
   C. INLINE FUNCTIONS.
!!!!! 15. To, ze C++ umoznuje pre CLASSES, TEMPLATES a INLINE FUNCTIONS VIACNASOBNU DEFINICIU moze viest k TAZKO DETEKOVATELNYM CHYBAM, ked v jednom COMPILATION UNIT je napriklad DEFINICIA CLASS ODLISNA ako v inom COMPILATION UNIT. Taketo chyby C++ spravidla NEDOKAZE DETEKOVAT.
16. KONVENCIA [extern "C"] umoznuje LINKOVAT kod, ktory bol kompilovany s LINK KONVENCIOU jazyka C. Plati pri tom nasledujuce zasady.
   A. Ak v [extern "C"] pouzivam POINTER na FUNCTION, tak tento POINTER MUSI reprezentovat FUNCTION TAKTIEZ s LINK KONVENCIOU jazyka C.
   B. V [extern "C"] je mozne deklarovat aj ine KONSTRUKTY ako napriklad VARIABLES.
   C. Je mozne pouzit zapis [extern "C" {DECLARATIONS}], kde 'DECLARATIONS' predstavuje deklaracie KONSTRUKTOV, ktore budu pouzivat LINK KONVENCIU jazyka C.
   D. Je mozne pouzit zapis [extern "C" {#include "Header.h"}], kde CELE TELO suboru 'Header.h' bude mat LINK KONVENCIU jazyka C.
   !!! E. KONVENCIA [extern "C"] sa pouziva NIELEN pre LINK kniznic kompilovanych v jazyku C, ale aj v inych jazykoch, ako napriklad ASSEMBLER, ktore maju ROVNAKU LINK KONVENCIU ako jazyk C.
!!! 17. Kedze DEFINICIA KONSTRUKTU moze byt v COMPILATION UNIT IBA RAZ je nutne pri pouzivani .H HEADERS zabezpecit, aby TA ISTA DEFINICIA nebola v COMPILATION UNIT VIAC KRAT. Da sa do urobit pomocou PODMIENENEHO PREKLADU PREPROCESSORA.
18. Vsetky GLOBALNE PREMENNE su INICIALIZOVANE na DEFAULT HODNOTU (pre cisla 0) PRED volanim funkcie main() a v poradi v akom su definovane v COMPILATION UNIT.
!!! 19. Poradie INICIALIZACIE GLOBALNYCH PREMENNYCH vo VIACERYCH COMPILATION UNITS NIE JE DEFINOVANE.
!!! 20. EXCEPTION, ktora sa generuje pri INICIALIZACII GLOBALNYCH PREMENNYCH (napriklad ak pri INICIALIZACII sa vola funkcia), NIE JE MOZNE ZACHYTIT.
21. Program je mozne ukoncit nasledujucimi sposobmi.
   A. Ukoncenim funkcie main(). Navratova hodnota funkcie je navratovou hodnotou programu.
   B. Hodenim UNHANDLED EXCEPTION.
   C. Volanim funkcie exit().  Navratova hodnota funkcie je navratovou hodnotou programu. Funkcia VOLA DESTRUTORY GLOBALNYCH a STATICKYCH premennych, avsak NEVOLA DESTRUTORY LOKALNYCH premennych na THREADE.
   D. Volanim funkcie abort().  Funkcia NEVOLA DESTRUTORY GLOBALNYCH a STATICKYCH premennych.
//-------------------------------------------------------------------------------------------------------