//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje DEBUGGING TEMPLATES v C++.
2. TEMPLATES DEBUGGING ma za ulohu odstranit nasledujuce problemy pre implementovane TEMPLATES.
   A. Ako je mozne overit, ze TEMPLATE bude fungovat pre vsetky TEMPLATE PARAMETERS, ktore splnaju CONDITIONS.
   B. Ako moze USER danej TEMPLATE zistit ako CONDITIONS musia dane TEMPLATE PARAMETERS splnat, aby mohli byt pouzite v danej TEMPLATE.
3. C++ 20 prisiel s C++ CONCEPTS, ktore umoznuju jednoducho definovat CONDITIONS pre TEMPLATE PARAMETERS.
4. C++ 20 definuje nasledujuce pojmy.
   A. REQUIREMENTS. REQUIREMENTS definuju sadu podmienok, ktore musia TEMPLATE ARGUMENTS splnat, aby mohli byt substituovane za dane TEMPLATE PARAMETERS.
   B. CONCEPTS. CONCEPT je pomenovana sada REQUIREMENTS, ktore sa aplikuju na jeden, alebo viacero TEMPLATE PARAMETERS.
!!! 5. REQUIREMENTS a CONCEPTS sluzia na definovanie podmienok ci TEMPLATE ARGUMENTS mozu byt substituovane za TEMPLATE PARAMETERS. V pripade ich nedodrzania umoznuju C++ COMPILER generovat zrozumitelnejsie ERROR MESSAGES.
6. SHALLOW INSTANTINATION je DEBUGGING technika pre ktoru platia nasledujuce fakty.
   A. SHALLOW INSTANTINATION sluzi na skore odhalenie TEMPLATE ERRORS pri hlbokom vnoreni viacerych TEMPLATES, kedy ERROR generuje komplikovanu a dlhu ERROR MESSAGE.
   B. SHALLOW INSTANTINATION sa realizuje tak, ze pri mnohonasobom vnoreni TEMPLATES sa este na zaciatku vnarania vykona umela INSTANTIATION hlboko vnorenej TEMPLATE, aby ERROR MESSAGE nebola zbytocne dlha.
7. KEYWORD [static_assert(CONDITION,ERROR_MESSAGE)] vykonava v COMPILE TIME kontrolu CONDITION [CONDITION]. Ak ta vrati VALUE [false], tak COMPILER vypise ERROR MESSAGE [ERROR_MESSAGE]. KEYWORD [static_assert(CONDITION,ERROR_MESSAGE)] vyrazne zjednodusuje TEMPLATE DEBUGGING.
8. TEMPLATE DEBUGGING je mozne vykonavat pomocou ACHERTYPES. Pre ACHERTYPES platia nasledujuce fakty.
   A. ACHERTYPES su USER DEFINED CLASSES, ktore sluzia na kontrolu CONSTRAINTS, ktore su aplikovane na TEMPLATE PARAMETERS.
   B. ACHERTYPES su minimalisticke CLASSES, ktore obshuju iba tu funkcionalitu, ktoru TEMPLATE pre dany TEMPLATE PARAMETER vyzaduje. Okrem tejto funkcionality neobsahuje ziadnu inu.
   C. ACHERTYPES su spravidla vyuzivane iba v COMPILE TIME a preto METHODS ACHERTYPES NEMUSIA mat BODY.
   D. ACHERTYPES sa vyuzivaju na definovanie COMPILE TIME TESTS.
9. TEMPLATE DEBUGGING je mozne vykonavat pomocou TRACERS. Pre TRACERS platia nasledujuce fakty.
   A. TRACERS su USER DEFINED CLASSES, pouzivane ako TEMPLATE PARAMETERS testovanej TEMPLATE, ktore sluzia na zaznamenavanie cinnosti danej TEMPLATE.
   B. TRACERS zaznamenavaju vsetky OPERATIONS, ktore TEMPLATE nad dany TEMPLATE PARAMETER vykonava. Tym umoznuje podrobny vypis o cinnosti TEMPLATE.
   C. TRACERS su minimalisticke CLASSES, ktore obshuju iba tu funkcionalitu, ktoru TEMPLATE pre dany TEMPLATE PARAMETER vyzaduje. Okrem tejto funkcionality neobsahuje ziadnu inu. TRACERS su teda zaroven aj ACHERTYPES.
   D. TRACERS informuju o svojom priebehu bud zaznamenavanim priebehu do LOCAL FIELDS, alebo zapisom do LOG.
10. ORACLES su TRACERS, ktore su napojene na INTERFACE ENGINE, ktory umoznuje podrobnejsi TEMPLATE DEBUGGING.
//----------------------------------------------------------------------------------------------------------------------