using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
//-----------------------------------------------------------------------------------------------------------
namespace Trees
{
//-----------------------------------------------------------------------------------------------------------
	public class CGenericList<TItemType> : IEnumerable<TItemType>
	{
//-----------------------------------------------------------------------------------------------------------
		protected List<TItemType>								MItems;
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public CGenericList()
		{
			MItems=new List<TItemType>();
		}
//-----------------------------------------------------------------------------------------------------------
		public CGenericList(List<TItemType> Items)
		{
			MItems=new List<TItemType>();

			for (int i=0;i<Items.Count;i++)
				MItems.Add(Items[i]);
		}
//-----------------------------------------------------------------------------------------------------------
		public CGenericList(TItemType[] Items)
		{
			MItems=new List<TItemType>();

			for (int i=0;i<Items.Length;i++)
				MItems.Add(Items[i]);
		}
//-----------------------------------------------------------------------------------------------------------
		public CGenericList(IEnumerable<TItemType> Items)
		{
			MItems=new List<TItemType>();

			foreach (TItemType Item in Items)
				MItems.Add(Item);
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public int												Count
		{
			get
			{
				return(MItems.Count);
			}
		}
//-----------------------------------------------------------------------------------------------------------
		public bool												IsEmpty
		{
			get
			{
				return(MItems.Count==0);
			}
		}
//-----------------------------------------------------------------------------------------------------------
		public IEnumerable<TItemType>							Collection
		{
			get
			{
				return(MItems);
			}
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public TItemType										this[int Index]
		{
			get
			{
				return(MItems[Index]);
			}
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public virtual void Add(TItemType Item)
		{
			MItems.Add(Item);
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual void AddRange(IEnumerable<TItemType> Range)
		{
			MItems.AddRange(Range);
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual void AddList(List<TItemType> Range)
		{
			MItems.AddRange(Range);
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual void Insert(int Index, TItemType Item)
		{
			MItems.Insert(Index, Item);
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual bool Remove(TItemType Item)
		{
			return(MItems.Remove(Item));
		}
//-----------------------------------------------------------------------------------------------------------
		public TItemType RemoveAt(int Index)
		{
			TItemType				ItemToRemove=MItems[Index];

			MItems.RemoveAt(Index);

			return(ItemToRemove);
		}
//-----------------------------------------------------------------------------------------------------------
		public TItemType[] RemoveAll(Predicate<TItemType> Predicate)
		{
			List<TItemType>			ItemsToRemove=MItems.FindAll(Predicate);

			MItems.RemoveAll(Predicate);

			return(ItemsToRemove.ToArray());
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual void Push(TItemType Item)
		{
			MItems.Add(Item);
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual TItemType Pop()
		{
			if (MItems.Count>0)
			{
				TItemType		Ret=MItems[0];

				MItems.RemoveAt(0);
				return(Ret);
			}
			else
				return(default(TItemType));
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual void Clear()
		{
			MItems.Clear();
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual List<TItemType> GetClone()
		{
			List<TItemType>		Ret=new List<TItemType>(MItems);

			return(Ret);
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public TItemType Find(Predicate<TItemType> Predicate)
		{
			return(MItems.Find(Predicate));
		}
//-----------------------------------------------------------------------------------------------------------
		public TItemType[] FindAll(Predicate<TItemType> Predicate)
		{
			return(MItems.FindAll(Predicate).ToArray());
		}
//-----------------------------------------------------------------------------------------------------------
		public void ExecuteAction(Action<TItemType> Action)
		{
			for (int i=0;i<MItems.Count;i++)
				Action(MItems[i]);
		}
//-----------------------------------------------------------------------------------------------------------
		public IEnumerator<TItemType> GetEnumerator()
		{
			return(new CGenericListEnumerator<TItemType>(this));
		}
//-----------------------------------------------------------------------------------------------------------
		IEnumerator IEnumerable.GetEnumerator()
		{
			return(new CGenericListEnumerator<TItemType>(this));
		}
//-----------------------------------------------------------------------------------------------------------
		public TItemType[] ToArray()
		{
			return(MItems.ToArray());
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public override string ToString()
		{
			StringBuilder		SB=new StringBuilder();

			SB.Append(this.GetType().Name);
			SB.AppendFormat(", Items.Count: [{0}]",MItems.Count);

			return(SB.ToString());
		}
//-----------------------------------------------------------------------------------------------------------
	}
//-----------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------