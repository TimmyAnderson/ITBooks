//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie LIBRARY DAPR.
2. DISTRUBUTED APPLICATION RUNTIME (DAPR) je RUNTIME ENVIRONMENT, ktory zjednodusuje vyvoj DISTRIBUTED PROGRAMS. Pre DAPR platia nasledujuce fakty.
   A. DAPR je RUNTIME, ktory ma implementaciu pre rozne PROGRAMMING PLATROFMS, vratane .NET.
   B. DAPR zjednodusuje implementaciu DISTRIBUTED PROGRAMS tym, ze implementuje najpouzivanejsie DISTRIBUTED PATTERNS, ktore sa v DISTRIBUTED PROGRAMS vo forme pouzitelnej LIBRARY, ktoru mozu DISTRIBUTED PROGRAMS pouzivat.
   C. DAPR je EVENT DRIVEN.
   D. DAPR je PORTABLE a je implementovany pre rozne CLOUD ENVIRONMENTS.
3. DAPR implementuje DISTRIBUTED PATTERNS pomocou BUILDING BLOCKS. Pre BUILDING BLOCKS platia nasledujuce fakty.
   A. BUILDING BLOCK je DAPR implementacia konkretneho DISTRIBUTED PATTERN, ktory sa vyuziva v DISTRIBUTED PROGRAMS.
   B. PROGRAMS, ktore vyuzivaju DAPR mozu prostrednictvom pouzitia BUILDING BLOCKS polahky implementovat dane DISTRIBUTED PATTERNS bez nutnosti ich manualnej implementacia, ktora je casto dost narocna.
   C. DAPR podporuje nasledujuce BUILDING BLOCKS.
      A. BUILDING BLOCK [SERVICE-TO-SERVICE INVOCATION].
      B. BUILDING BLOCK [PUBLISH AND SUBSCRIBE].
      C. BUILDING BLOCK [WORKFLOWS].
      D. BUILDING BLOCK [STATE MANAGEMENT].
      E. BUILDING BLOCK [BINDINGS].
      F. BUILDING BLOCK [ACTORS].
      G. BUILDING BLOCK [SECRETS].
      H. BUILDING BLOCK [CONFIGURATION].
      I. BUILDING BLOCK [DISTRIBUTED LOCK].
      J. BUILDING BLOCK [CRYPTOGRAPHY].
      K. BUILDING BLOCK [JOBS].
      L. BUILDING BLOCK [CONVERSATION].
      M. BUILDING BLOCK [RESILIENCY].
      N. BUILDING BLOCK [OBSERVABILITY].
      O. BUILDING BLOCK [SECURITY].
4. DAPR ma INSTALLATION PACKAGES pre rozne OPERATING SYSTEMS. Po instalacii sa spristupni DAPR COMMAND LANGUAGE INTERFACE (CLI).
5. DARP ma nasledujucu ARCHITECTURE.
   A. DAPR vyuziva PATTERN SIDECAR, kde funkcionalita DAPR RUNTIME je oddelena od PROGRAMS, ktore DAPR RUNTIME vyuzivaju.
   B. DAPR RUNTIME bezi v nezavislych PROCESSES, ktore su oddelene od PROGRAMS, ktore DAPR RUNTIME pouzivaju.
   C. DAPR RUNTIME PROCESSES mozu byt HOSTED v nasledujucich HOSTING PLATFORMS.
      A. PLATFORM [SELF HOSTED]. DAPR RUNTIME PROCESSES bezia na LOCAL MACHINE.
      B. PLATFORM [KUBERNETES]. DAPR RUNTIME PROCESSES bezia v KUBERNETES CONTAINERS.
      C. PLATFORM [CLUSTERS OF PHYSICAL OR VIRTUAL MACHINES]. DAPR RUNTIME PROCESSES bezia na PHYSICAL, alebo VIRTUAL MACHINES.
   !!! D. Komunikacia medzi PROGRAM PROCESS a DAPR RUNTIME PROCESSES je realizovana nasledujucimi PROTOCOLS.
      A. PROTOCOL [HTTP].
      B. PROTOCOL [gRPC].
   !!!!! E. DAPR implementuje CLIENT LIBRARIES, ktore zjednodusuju komunikaciu medzi PROGRAM PROCESS a DAPR RUNTIME PROCESSES. Platia nasledujuce fakty.
      A. CLIENT LIBRARIES umoznuju volanie DAPR RUNTIME PROCESSES pomocou CLASSES, a nevyzaduju priamu komunikaciu cez PROTOCOL [HTTP], alebo PROTOCOL [gRPC].
	  B. CLIENT LIBRARIES su implementovane pre rozlicne PROGRAMMING PLATROFMS ako je .NET ci JAVA.
6. Ak DARP vyuziva ako HOSTING PLATFORM PLATFORM [SELF HOSTED], platia nasledujuce fakty.
   !!!!! A. DAPR RUNTIME PROCESSES bezia ako DOCKER CONTAINERS. To znamena, ze na LOCAL MACHINE okrem DAPR DESKTOP MUSI byt nainsalovany aj DOCKER DESKTOP.
   !!! B. HOSTING PLATFORM sa inicializuje pomocou COMMAND [dapr init]. Ak sa pouziva HOSTING PLATFORM PLATFORM [SELF HOSTED] platia nasledujuce fakty.
      A. DOCKER DESKTOP MUSI byt SPUSTENY.
	  B. COMMAND stiahne DOCKER IMAGES, ktore obsahuju DOCKER RUNTIME PROCESSES.
   !!! C. Pri HOSTING PLATFORM [SELF HOSTED] COMMAND [dapr init] stiahne nasledujuce DOCKER IMAGES.
      A. DOCKER IMAGE [daprio/dapr]. DOCKER IMAGE sa pouziva ako PLACEMENT SERVICE CONTAINER pre LOCAL ACTOR SUPPORT.
      B. DOCKER IMAGE [openzipkin/zipkin]. DOCKER IMAGE sa pouziva pre OBSERVABILITY PURPOSES.
      C. DOCKER IMAGE [redis]. DOCKER IMAGE sa pouziva ako LOCAL STATE STORAGE a MESSAGE BROOKER.
   !!!!! D. Pri spustani PROGRAMS pouzivajucich DAPR, MUSI byt DOCKER DESKTOP SPUSTENY.
   !!!!! E. REQUESTS na DAPR SIDECAR PROCESS MUSIA obsahovat HEADER [dapr-app-id], ktoreho VALUE je APPLICATION ID s ktorou bol PROGRAM vyuzivajuci DAPR spusteny pomocou COMMAND [dapr run].
!!!!! 7. Pre SIDECAR PROCESSES platia nasledujuce fakty.
   A. Kazdy PROGRAM, ktory komunikuje cez DAPR ma vlastny SIDECAR PROCESS.
   B. To znamena, ze ak cez DAPR komunikuju 2 SERVICES, kazda SERVICE ma vlastny SIDECAR PROCESS.
   C. PROGRAMS so SIDECAR PROCESSES komunikuju bud pomocou PROTOCOL [HTTP], alebo PROTOCOL [gRPC].
8. .NET CLIENT LIBRARY pre DAPR je implementovana v PACKAGE [Dapr.AspNetCore].
9. Pre BUILDING BLOCK [SERVICE-TO-SERVICE INVOCATION] platia nasledujuce fakty.
   A. BUILDING BLOCK [SERVICE-TO-SERVICE INVOCATION] umoznuje vykonat bezpecne volanie medzi CLIENT a SERVICE, alebo medzi SERVICE a SERVICE.
   B. BUILDING BLOCK [SERVICE-TO-SERVICE INVOCATION] podporuje nasledujuce funkcionality.
      A. SERVICE DISCOVERY.
	  B. SECURE SERVICE COMMUNICATION.
	  C. CALL RETRIES a riesenie TRANSIENT ERRORS.
	  D. Implementaciu OBSERVABILITY a TRACING.
	  E. Standardizuje API volania medzi SERVICES.
10. BUILDING BLOCK [SERVICE-TO-SERVICE INVOCATION] sa implementuje nasledujucim sposobom.
   A. Na CLIENT SIDE sa na vytvorenie instancie CLASS [HttpClient] sa pouziva METHOD [HttpClient DaprClient.CreateInvokeHttpClient(string AppId, string DaprEndpoint, string DaprApiToken)]. PARAMETER [AppId] obsahuje APPLICATION ID toho PROGRAMU (SERVICE), ktory sa ma zavolat.
   B. Na CLIENT SIDE sa na volanie SERVER SIDE METHOD pouzije vytvorena instancia CLASS [HttpClient].
   !!! C. Vytvorena instancia CLASS [HttpClient] komunikuje zo SIDECAR PROCESS na CLIENT SIDE, ktory nasledne komunikuje so SIDECAR PROCESS na SERVER SIDE a SERVER SIDE PROGRAMOM na realizaciu bezpecnej komunikacie.
11. BUILDING BLOCK [SERVICE-TO-SERVICE INVOCATION] podporuje OBSERVABILITY. Platia nasledujuce fakty.
   A. OBSERVABILITY implementuje DOCKER CONTAINER [dapr_zipkin].
   B. OBSERVABILITY LOGS obsahuju LOGS z DAPR SYSTEM a SIDECAR PROCESSES.
   C. DOCKER CONTAINER [dapr_zipkin] vystavuje HTTP SERVICE z ktorej je pomocou WEB BROWSER mozne vykonat OBSERVABILITY.
   D. BY-DEFAULT DOCKER CONTAINER [dapr_zipkin] je OBSERVABILITY URL nastavene na URL [http://127.0.0.1:9411/].
12. Pre BUILDING BLOCK [STATE MANAGEMENT] platia nasledujuce fakty.
   A. BUILDING BLOCK [STATE MANAGEMENT] umoznuje PROGRAMU ukladat STATE, ktory je permanentne ulozene v DATABASE.
   B. BUILDING BLOCK [STATE MANAGEMENT] umoznuje uklada STATE v podobe KEY-VALUE, kde VALUE moze byt lubovolny SERIALIZABLE OBJECT.
   C. BUILDING BLOCK [STATE MANAGEMENT] uklada STATE do DATABASE [Redis], ale CONFIGURATION je mozne zmenit na lubovolnu DATABASE.
13. BUILDING BLOCK [STATE MANAGEMENT] sa implementuje nasledujucim sposobom.
   A. Do ASP.NET DEPENDENCY CONTAINER sa prida instancia CLASS [DaprClient] volanim METHOD [void AddDaprClient(this IServiceCollection Services, Action<DaprClientBuilder> Configure, ServiceLifetime Lifetime)].
   B. STATE sa nacitava volanim METHOD [Task<TValue> DaprClient.GetStateAsync<TValue>(string StoreName, string Key, ConsistencyMode ConsistencyMode, IReadOnlyDictionary<string,string> Metadata, CancellationToken CancellationToken)].
   C. STATE sa zapisuje volanim METHOD [Task DaprClient.SaveStateAsync<TValue>(string StoreName, string Key, TValue Value, StateOptions StateOptions, IReadOnlyDictionary<string,string> Metadata, CancellationToken CancellationToken)].
14. Pre BUILDING BLOCK [PUBLISH AND SUBSCRIBE] platia nasledujuce fakty.
   A. BUILDING BLOCK [PUBLISH AND SUBSCRIBE] implementuje PUBLISHER SUBSCRIBER PATTERN, kde PUBLISHER generuje MESSAGE, ktora je spracovana v <1,N> SUBSCRIBERS.
   B. BUILDING BLOCK [PUBLISH AND SUBSCRIBE] implementuje EVENT DRIVEN ARCHITECTUTRE.
   C. BUILDING BLOCK [PUBLISH AND SUBSCRIBE] definuje nasledujuce COMPONENTS.
      A. PUBLISHER, ktory ma vlastny CHANNEL do ktoreho su ukladane MESSAGES, ktore maju byt odoslane do <1,N> SUBSCRIBERS.
      B. SUBSRIBER, ktory ma vlastny CHANNEL do ktoreho su ukladane MESSAGES, ktore maju byt nacitane danym SUBSCRIBER.
	  C. MESSAGE BROOKER, ktory zabezpecuje transfer MESSAGES z PUBLISHER CHANNEL do SUBSCRIBER CHANNELS.
   D. BY-DEFAULT, MESSAGE BROOKER je postaveny nad REDIS DATABASE. Ale moze byt nakonfigurvany aj pre pouzitie APACHE KAFKA, RABBIT MQ, AZURE EVENT HUBS, alebo AZURE SERVICE BUS.
15. BUILDING BLOCK [PUBLISH AND SUBSCRIBE] sa implementuje na PUBLISHER SIDE nasledujucim sposobom.
   A. Do ASP.NET DEPENDENCY CONTAINER sa prida instancia CLASS [DaprClient] volanim METHOD [void AddDaprClient(this IServiceCollection Services, Action<DaprClientBuilder> Configure, ServiceLifetime Lifetime)].
   B. Zavola sa METHOD [Task DaprClient.PublishEventAsync<TData>(string PubSubName, string TopicName, TData Data, CancellationToken CancellationToken)], ktora odosle MESSAGE do PUBLISHED CHANNEL.
16. BUILDING BLOCK [PUBLISH AND SUBSCRIBE] sa implementuje na SUBSCRIBER SIDE nasledujucim sposobom.
   A. Do PROGRAMU sa volanim METHOD [IApplicationBuilder UseCloudEvents(this IApplicationBuilder Builder)] prida CLOUD EVENTS MIDDLEWARE PIPELINE. Tento MIDDLEWARE umoznuje prijimat a spracovat MESSAGES v CLOUD EVENTS FORMAT.
   B. Do PROGRAMU sa volanim METHOD [IEndpointConventionBuilder MapSubscribeHandler(this IEndpointRouteBuilder Endpoints)] prida ENDPOINT [/dapr/subscribe], ktory umoznuje vyhlasanie SUBSCRIBER CHANNEL.
   C. V CONTROLLER sa METHOD, ktora ma spracovavat MESSAGES zaslane od PUBLISHER oznaci pomocou ATTRIBUTE [Topic].
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
DAPR COMMANDS.

1. COMMAND [dapr version] zobrazuje DAPR VERSION.
2. COMMAND [dapr init].
   A. COMMAND instaluje DAPR RUNTIME pre HOSTING PLATFORM.
   !!! B. COMMAND BY-DEFAULT instaluje HOSTING PLATFORM [SELF HOSTED], kedy MUSIT bezat na LOCAL MACHINE DOCKER DESKTOP.
   !!! C. Pri HOSTING PLATFORM [SELF HOSTED] COMMAND stiahne nasledujuce DOCKER IMAGES.
      A. DOCKER IMAGE [daprio/dapr]. DOCKER IMAGE sa pouziva ako PLACEMENT SERVICE CONTAINER pre LOCAL ACTOR SUPPORT.
      B. DOCKER IMAGE [openzipkin/zipkin]. DOCKER IMAGE sa pouziva pre OBSERVABILITY PURPOSES.
      C. DOCKER IMAGE [redis]. DOCKER IMAGE sa pouziva ako LOCAL STATE STORAGE a MESSAGE BROOKER.
   D. OPTIONAL OPTION [--kubernetes] nainstaluje DAPR RUNTIME pre HOSTING PLATFORM [KUBERNETES].
3. COMMAND [dapr run --app-id APPLICATION_ID --app-port PROGRAM_PORT --dapr-http-port SIDECAR_PORT -- dotnet run].
   A. COMMAND spusta DAPR RUNTIME PROCESSES v SELF HOSTED DOCKER CONTAINERS.
   B. COMMAND sa da pouzit IBA pre HOSTING PLATFORM [SELF HOSTED].
   !!! C. COMMAND sa automaticky NESKONCI. Po spusteni zobrazuje LOGS a zastavit ho je mozne iba pomocou KEYS [CONTROL-C].
   D. OPTION [--app-id APPLICATION_ID] vo VALUE [APPLICATION_ID] obsahuje APPLICATION ID PROGRAMU na zaklade ktoreho je PROGRAM identifikovatelny.
   E. OPTION [--app-port PROGRAM_PORT] vo VALUE [PROGRAM_PORT] obsahuje HTTP PORT, PROGRAMU.
   F. OPTION [--dapr-http-port SIDECAR_PORT] vo VALUE [SIDECAR_PORT] obsahuje HTTP PORT SIDECAR PROCESS.
4. COMMAND [dapr stop].
   A. COMMAND zastavuje DAPR RUNTIME PROCESSES v SELF HOSTED DOCKER CONTAINERS.
   B. COMMAND sa da pouzit IBA pre HOSTING PLATFORM [SELF HOSTED].
5. COMMAND [dapr dashboard].
   A. COMMAND spusta WEB DASHBOARD z ktoreho je mozne vykonavat MANAGEMENT DAPR.
   B. BY-DEFAULT DASHBOARD bezi na URL [http://localhost:8080].
//----------------------------------------------------------------------------------------------------------------------