//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje EXCEPTION SAFETY pri pouzivani STL.
2. Mnohe metody a funkcie mozu v STL hodit EXCEPTION. To v AKOM STAVE zanechaju objekt po hodeni EXCEPTION je rozne.
   A. Funkcia sort() ak dojde k EXCEPTION v OPERATOR<, ktory sa pri vykonavani SORTINGU vola, sposobi, ze COLLECTION bude v NEDEFINOVANOM PORADI.
   B. Metoda vector<T>.push_back(), ak v COPY CONSTRUCTOR dojde k EXCEPTION NEPRIDA novy ITEM do COLLECTION a pocet ITEMS v COLLECTION sa NEZMENI.
   C. Operator vector<T>.operator=(), ak v COPY CONSTRUCTOR dojde k EXCEPTION, tak DESTINATION VECTOR je v NEKONZISTENTNOM STAVE.
   D. Metoda vector<T>.insert(), ak v COPY CONSTRUCTOR dojde k EXCEPTION, tak VECTOR je v NEKONZISTENTNOM STAVE.
   E. Funkcia swap(), ak v OPERATOR= dojde k EXCEPTION, hodnoty, ktore mali byt vymenene mozu byt NEKONZISTENTNE.
!!! 3. C++ je tak SOFISTIKOVANE, ze ak mam v CONSTRUCTOR VIACERO FIELDS pre ktore sa volaju INITIALIZERS a NIEKTORY INITIALIZER hodi EXCEPTION, tak C++ zavola DESTRUCTORS IBA pre FIELDS, ktorych INITIALIZERS boli USPESNE VYKONANE. DESTRUCTOR samotnej CLASS, ktora obsahuje tieto INITIALIZERS NIE JE pri vzniku EXCEPTION NIKDY VOLANY.
!!!!! 4. STL poskytuje EXCEPTION SAFETY v tom, ze ZIADNA STL METODA ci FUNKCIA NESPOSOBI MEMORY LEAK. STL vsak zaroven ocakava, ze ani USER FUNCTIONS, ktore STL METODY a FUNKCIE VOLAJU NESPOSOBIA MEMORY LEAK. To sa tyka napriklad CONSTRUCTORS, DESTRUCTORS ci OPERATORS CUSTOM TYPES. Tieto NESMU spravit MEMORY LEAK. Zaroven STL predpoklada, ze CUSTOM CLASS NIKDY NEHODI EXCEPTION v DESTRUCTORS.
!!!!! 5. STL, tak ako samotne C++ NIE JE CHRANENA pred hodenim EXCEPTION v DESTRUCTORS. Hodenie EXCEPTION pri STACK UNWIND sposobuje KOLAPS C++ RUNTIME a teda ani STL voci tomu NIE JE CHRANENA.
//-------------------------------------------------------------------------------------------------------