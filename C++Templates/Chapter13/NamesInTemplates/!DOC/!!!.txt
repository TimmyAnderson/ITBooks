//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje pouzitie NAMES v C++ TEMPLATES.
2. NAMES v C++ identifikuju definovane C++ ENTITIES.
3. C++ je CONTEXT SENSITIVE LANGUAGE co znamena, ze niektore CONSTRUCTS mozu byt spravne interpretovane iba ak je znamy CONTEXT v ktorom su pouzite. Napriklad CODE [X*Y] moze znamenat operaciu nasobenia no takisto deklaracie POINTER na TYPE 'X' a VARIABLE 'Y'.
!!! 4. QUALIFIED NAME v C++ je NAME ak jeho SCOPE je EXPLICITNE urceny pomocou SCOPE RESOLUTION OPERATOR [::], alebo ak je na NAME aplikovany MEMBER ACCESS OPERATOR [OPERATOR.], alebo MEMBER ACCESS OPERATOR [OPERATOR->]. Takze CODE [::CLASS], alebo CODE [OBJECT.MEMBER] su QUALIFIED NAMES, kym CODE [VARIABLE] NIE JE QUALIFIED NAME.
5. C++ v suvislosti s NAMES definuje nasledujuce TERMS.
   A. IDENTIFIER.
   B. OPERATOR FUNCTION ID.
   C. CONVERSION FUNCTION ID.
   D. LITERAL OPERATOR ID.
   E. TEMPLATE ID.
   F. UNQUALIFIED ID.
   G. QUALIFIED ID.
   H. QUALIFIED NAME.
   I. UNQUALIFIED NAME.
   J. NAME.
   K. DEPENDENT NAME.
   L. NON-DEPENDENT NAME.
6. Pre IDENTIFIER platia nasledujuce fakty.
   A. IDENTIFIER je unikatny identifikator C++ ENTITY.
   B. IDENTIFIER je neprerusovana sekvencia LETTERS (UNICODE), DIGITS a UNDERSCORES [_], ktora nesmie zacinat DIGIT.
   C. IDENTIFIER nesmie byt zhodny so ziadnym s C++ KEYWORDS.
   D. Ako LETTERS mozu byt pouzite UNICODE CHARACTERS, ktore nemusia reprezentovat klasicke LETTERS.
7. Pre OPERATOR FUNCTION ID platia nasledujuce fakty.
   A. OPERATOR FUNCTION ID sa pouziva na definovanie OPERATOR FUNCTION, alebo OPERATOR METHOD.
   B. OPERATOR FUNCTION ID obsahuje KEYWORD [operator] za ktorym nasleduje SYMBOL daneho OPERATOR.
   C. Prikladom OPERATOR FUNCTION ID je CODE [operator new], alebo CODE [operator []].
8. Pre CONVERSION FUNCTION ID platia nasledujuce fakty.
   A. CONVERSION FUNCTION ID sa pouziva na definovanie CONVERSION OPERATOR FUNCTION, alebo CONVERSION OPERATOR METHOD.
   B. CONVERSION FUNCTION ID obsahuje KEYWORD [operator] za ktorym nasleduje TYPE na ktory ma OPERATOR vykonat konverziu.
   C. Prikladom CONVERSION FUNCTION ID je CODE [operator int&].
9. Pre LITERAL OPERATOR ID platia nasledujuce fakty.
   A. LITERAL OPERATOR ID sa pouziva na definovanie LITERAL OPERATOR FUNCTION, alebo LITERAL OPERATOR METHOD.
   B. LITERAL OPERATOR ID obsahuje KEYWORD [operator] za ktorym nasleduju CHARACTERS [""] a za nimi nazov LITERAL OPERATOR.
   C. Prikladom LITERAL OPERATOR ID je CODE [operator ""_km] pomocou ktoreho je mozne pouzit CODE [100_km].
10. Pre TEMPLATE ID platia nasledujuce fakty.
   A. TEMPLATE ID sa pouziva na jednoznacnu identifikaciu TEMPLATE vratane jej TEMPLATE PARAMETERS.
   B. TEMPLATE ID obsahuje TEMPLATE NAME za ktorym v ZATVORKACH [<>] nasleduju TEMPLATE ARGUMENTS.
   !!! C. TEMPLATE ID moze byt aj OPERATOR FUNCTION ID, alebo LITERAL OPERATOR ID za ktorym v ZATVORKACH [<>] nasleduju TEMPLATE ARGUMENTS.
   D. Prikladom TEMPLATE ID je CODE [TEMPLATE<TEMPLATE_ARGUMENT_1,TEMPLATE_ARGUMENT_2>], alebo CODE [operator+<X<int>>].
11. Pre UNQUALIFIED ID platia nasledujuce fakty.
   A. UNQUALIFIED ID predstavuje generalizaciu IDENTIFIER.
   B. Ako UNQUALIFIED ID moze byt IDENTIFIER, OPERATOR FUNCTION ID, CONVERSION FUNCTION ID, LITERAL OPERATOR ID a TEMPLATE ID. Medzi UNQUALIFIED ID patri aj DESTRUCTOR NAME ako CODE [~CLASS_NAME], alebo CODE [~TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENT_1,TEMPLATE_ARGUMENT_2>].
12. Pre QUALIFIED ID platia nasledujuce fakty.
   A. QUALIFIED ID je UNQUALIFIED ID na ktory je aplikovany SCOPE RESOLUTION OPERATOR [::] definujuci SCOPE.
   B. SCOPE moze predstavovat CLASS NAME, ENUM NAME, NAMESPACE NAME, alebo iba GLOBAL NAMESPACE OPERATOR [::].
   C. Prikladom QUALIFIED ID je CODE [::ENTITY], CODE [CLASS_NAME::MEMBER], CODE [TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENT_1,TEMPLATE_ARGUMENT_2>::MEMBER], alebo [::NAMESPACE::TEMPLATE_CLASS_NAME<TEMPLATE_ARGUMENT_1,TEMPLATE_ARGUMENT_2>].
13. Pre QUALIFIED NAME platia nasledujuce fakty.
   A. QUALIFIED NAME je BUD QUALIFIED ID, alebo UNQUALIFIED ID, ktory EXPLICITNE pouziva MEMBER ACCESS OPERATOR [OPERATOR.], alebo MEMBER ACCESS OPERATOR [OPERATOR->].
   B. Prikladom QUALIFIED NAME je CODE [CLASS_NAME::MEMBER], CODE [this->MEMBER], CODE [OBJECT.MEMBER], alebo CODE [OBJECT->CLASS_NAME::MEMBER].
   !!! C. CODE [MEMBER] v CLASS METHODS, ktory je C++ interpretovany ako CODE [this->MEMBER] vsak NEPREDSTAVUJE QUALIFIED NAME, pretoze MEMBER ACCESS OPERATOR [OPERATOR->] NIE JE pouzity EXPLICITNE.
14. Pre UNQUALIFIED NAME platia nasledujuce fakty.
   A. UNQUALIFIED NAME je UNQUALIFIED ID, ktory zaroven NIE JE QUALIFIED NAME.
   B. Prikladom UNQUALIFIED NAME je CODE [VARIABLE].
15. NAME je bud QUALIFIED NAME, alebo UNQUALIFIED NAME.
16. Pre DEPENDENT NAME platia nasledujuce fakty.
   A. DEPENDENT NAME je NAME, ktory v TEMPLATE CODE nejako zavisi na TEMPLATE PARAMETERS.
   B. DEPENDENT NAME je QUALIFIED NAME, alebo UNQUALIFIED NAME, ktory obsahuje TEMPLATE PARAMETERS.
   C. QUALIFIED NAME, ktory sa stal QUALIFIED NAME kvoli pouzitiu MEMBER ACCESS OPERATOR [OPERATOR.], alebo MEMBER ACCESS OPERATOR [OPERATOR->] je DEPENDENT NAME ak EXPRESSION nalavo od MEMBER ACCESS OPERATORS je TYPE DEPENDENT.
   D. NAME pre ktory sa robi ARGUMENT DEPENDENT LOOKUP je DEPENDENT NAME ak a iba ak su TEMPLATE ARGUMENTS TYPE DEPENDENT.
   E. Prikladom DEPENDENT NAME je ak TEMPLATE CODE obsahuje CODE [vector<TYPE>::ITERATOR], alebo CODE [OBJECT->MEMBER].
17. Pre NON-DEPENDENT NAME platia nasledujuce fakty.
   A. NON-DEPENDENT NAME je NAME, ktory NIE JE DEPENDENT NAME. To znamena, ze v TEMPLATE CODE NIE JE zavisly na TEMPLATE PARAMETERS.
   B. Prikladom UNQUALIFIED NAME je CODE [int].
18. Pre LOOKUP QUALIFIED NAMES platia nasledujuce fakty.
   A. LOOKUP QUALIFIED NAMES sa robi na zaklade QUALIFIER.
   B. V CODE [QUALIFIER::ENTITY] je VALUE 'QUALIFIER' QUALIFIER.
   C. V CODE [QUALIFIER.ENTITY] je VALUE 'QUALIFIER' QUALIFIER.
   D. V CODE [QUALIFIER->ENTITY] je VALUE 'QUALIFIER' QUALIFIER.
   E. V pripade, ze SCOPE pre LOOKUP je CLASS, tak sa LOOKUP robi aj pre vsetky BASE CLASSES.
   !!! F. Pri LOOKUP QUALIFIED NAMES sa NEROBI LOOKUP v ENCLOSING SCOPES, ako NAMESPACE SCOPE, alebo GLOBAL NAMESPACE SCOPE.
19. Pre LOOKUP UNQUALIFIED NAMES platia nasledujuce fakty.
   A. LOOKUP UNQUALIFIED NAMES v CODE, ktory nie je sucastou CLASS METHOD robi v nasledujucich krokoch.
      A. Ako prvy sa robi LOOKUP v CURRENT SCOPE.
      B. Ak sa NAME nenajde, rekurzivne sa robi LOOKUP vo vsetkych PARENT SCOPES, vratane GLOBAL NAMESPACE SCOPE.
   B. LOOKUP UNQUALIFIED NAMES v CODE, ktory JE sucastou CLASS METHOD robi v nasledujucich krokoch.
      A. Ako prvy sa robi LOOKUP v CURRENT SCOPE.
      B. Ak sa NAME nenajde, rekurzivne sa robi LOOKUP vo vsetkych PARENT SCOPES CLASS METHOD, ale nie v GLOBAL NAMESPACE SCOPE.
	  C. Ak sa NAME nenajde, robi sa LOOKUP v CURRENT CLASS.
	  D. Ak sa NAME nenajde, robi sa LOOKUP vo vsetkych BASE CLASSES.
	  E. Ak sa NAME nenajde, robi sa LOOKUP v GLOBAL NAMESPACE.
20. C++ v niektorych pripadoch okrem bezneho NAME LOOKUP robi aj ARGUMENT DEPENDENT LOOKUP. Pre ARGUMENT DEPENDENT LOOKUP platia nasledujuce fakty.
   A. ARGUMENT DEPENDENT LOOKUP sa primarne robi pre UNQUALIFIED NAMES, ktore vyzeraju ako NAME NON-MEMBER FUNCTION pri FUNCTION CALL, alebo OPERATOR CALL.
   !!!!! B. ARGUMENT DEPENDENT LOOKUP sa robi ak za NAME nasleduje zoznam ARGUMENTS v ZATVORKACH [()]. V takom pripade ARGUMENT DEPENDENT LOOKUP daneho NAME sa robi v NAMESPACES a CLASSES, ktore su ASSOCIATED s TYPES jednotlivych ARGUMENTS.
   !!! C. ASSOCIATED NAMESPACES a ASSOCIATED CLASSES su vsetky NAMESPACES a CLASSES v ktorych sa TYPE daneho ARGUMENT nachadza.
21. ARGUMENT DEPENDENT LOOKUP sa NEAPLIKUJE ak bezny C++ LOOKUP nasiel niektoru z nasledujucich	ENTITIES.
   A. NAME MEMBER METHOD.
   B. NAME VARIABLE.
   C. NAME TYPE.
   D. NAME BLOCK SCOPE FUNCTION DECLARATION.
   E. Ak je NAME FUNCTION, ktora ma byt volana je uzatvorena v ZATVORKACH [()].
22. ASSOCIATED NAMESPACES a ASSOCIATED CLASSES su definovane nasledovne.
   A. Pre BUILT-IN TYPES je mnozina ASSOCIATED NAMESPACES a ASSOCIATED CLASSES PRAZDNA.
   B. Pre POINTER na TYPE, alebo C-ARRAY daneho TYPE su ASSOCIATED NAMESPACES a ASSOCIATED CLASSES tie NAMESPACES a CLASSES v ktorych sa UNDERLYING TYPE daneho POINTER ci C-ARRAY nachadza.
   C. Pre ENUM TYPES su ASSOCIATED NAMESPACES a ASSOCIATED CLASSES tie NAMESPACES a CLASSES v ktorych sa ENUM TYPE nachadza.
   D. Pre CLASS MEMBERS je ASSOCIATED CLASS ta CLASS v ktorej sa CLASS MEMBER nachadza.
   !!! E. Pre CLASS TYPES su ASSOCIATED CLASSES CLASS v ktorej sa dany CLASS TYPE nachadza, vsetky ENCLOSING CLASSES a vsetky priame ci nepriame BASE CLASSES. Pre CLASS TYPES su ASSOCIATED NAMESPACES tie NAMESPACES v ktorych so ASSOCIATED CLASSES DECLARED. Ak je CLASS TYPE zaroven aj TEMPLATE CLASS, tak do mnoziny ASSOCIATED NAMESPACES a ASSOCIATED CLASSES su pridane aj CLASSES v TEMPLATE ARGUMENTS a takisto aj CLASSES a NAMESPACES v ktorych su TEMPLATE ARGUMENTS DECLARED.
   F. Pre FUNCTION TYPES zodpoveda mnozina ASSOCIATED NAMESPACES a ASSOCIATED CLASSES tym NAMESPACES a CLASSES v ktorych su DECLARED PARAMETER TYPES a RETURN VALUE TYPE.
   G. Pre POINTER TO MEMBER TYPES zodpoveda mnozina ASSOCIATED NAMESPACES a ASSOCIATED CLASSES tym NAMESPACES a CLASSES v ktorych je deklarovany CLASS TYPE daneho POINTER TO MEMBER TYPE a v ktorych je deklarovany TYPE MEMBER. Ak je MEMBER POINTER TO MEMBER FUNCTION tak je mnozina ASSOCIATED NAMESPACES a ASSOCIATED CLASSES rozsirena aj o NAMESPACES a CLASSES POINTER TO MEMBER FUNCTION PARAMETERS a o NAMESPACE a CLASS POINTER TO MEMBER FUNCTION RETURN TYPE.
23. ARGUMENT DEPENDENT LOOKUP sa pouziva aj pri FRIEND DECLARATIONS. Platia nasledujuce fakty.
   A. Ak FRIEND DECLARATION danej FUNCTION je PRVA DECLARATION danej FUNCTION tak C++ povazuje danu FUNCTION, ako keby bola DECLARED v NAJBLIZSOM NAMESPACE SCOPE CLASS v ktorej sa FRIEND DECLARATION nachadza.
   !!! B. To, ze C++ povazuje danu FUNCTION, ako keby bola DECLARED v NAJBLIZSOM NAMESPACE SCOPE CLASS v ktorej sa FRIEND DECLARATION nachadza vsak NEZNAMENA, ze FRIEND FUNCTION je viditelna v NAMESPACE SCOPE. FRIEND FUNCTION NIE JE VIDITELNA v NAMESPACE SCOPE.
   !!!!! C. Ak vsak FRIEND FUNCTION ma PARAMETERS, tak sa pre ne vykonava ARGUMENT DEPENDENT LOOKUP. A ak jednym z PARAMETER TYPES, alebo RETURN VALUE TYPE su TYPE CLASS v ktorom bola FRIEND DECLARATION vykonana, tak tato FUNCTION je viditelna v NAMESPACE SCOPE.
24. Ak sa definuje CLASS, tak C++ automaticky vykonava CLASS NAME INJECTION do CLASS SCOPE danej CLASS. CLASS NAME INJECTION sa vykonava pre nasledujuce typy CLASSES.
   A. NON-TEMPLATE CLASSES.
   B. TEMPLATE CLASSES.
   C. VARIADIC TEMPLATE CLASSES.
25. Pre CLASS NAME INJECTION pre NON-TEMPLATE CLASSES platia nasledujuce fakty.
   A. CLASS NAME automaticky INJECTED do CLASS SCOPE, takze v CLASS SCOPE moze byt CLASS NAME pouzita ako UNQUALIFIED NAME.
   B. Ak je napriklad definovana CLASS [CLASS], tak v CODE danej CLASS a v CODE jej METHODS sa je mozne referovat na CLASS pomocou UNQUALIFIED NAME [CLASS].
26. Pre CLASS NAME INJECTION pre TEMPLATE CLASSES platia nasledujuce fakty.
   A. CLASS NAME automaticky INJECTED do CLASS SCOPE, takze v CLASS SCOPE moze byt CLASS NAME pouzita ako UNQUALIFIED NAME.
   !!! B. Ak UNQUALIFIED CLASS NAME nenasleduju ZATVORKY [<>], tak za TEMPLATE PARAMETERS danej CLASS su dosadene TEMPLATE PARAMETERS. To znamena, ze pre TEMPLATE CLASS [CLASS<TYPE>] pouzitie CODE [CLASS] znamena to iste ako CODE [CLASS<TYPE>].
   !!! C. Ak UNQUALIFIED CLASS NAME nasleduju ZATVORKY [<>], tak za TEMPLATE PARAMETERS danej CLASS su dosadene pouzite TEMPLATE ARGUMENTS. To znamena, ze pre TEMPLATE CLASS [CLASS<TYPE>] pouzitie CODE [CLASS<int>] znamena to iste ako CODE [CLASS<int>].
27. Pre CLASS NAME INJECTION pre VARIADIC TEMPLATE CLASSES platia nasledujuce fakty.
   A. CLASS NAME automaticky INJECTED do CLASS SCOPE, takze v CLASS SCOPE moze byt CLASS NAME pouzita ako UNQUALIFIED NAME.
   !!! B. Ak UNQUALIFIED CLASS NAME nenasleduju ZATVORKY [<>], tak za TEMPLATE PARAMETERS danej CLASS su dosadene TEMPLATE PARAMETERS. Zaroven plati, ze TEMPLATE PARAMETER PACKS su VZDY EXPENDED. To znamena, ze pre TEMPLATE CLASS [CLASS<TYPE,...TYPES>] pouzitie CODE [CLASS] znamena to iste ako CODE [CLASS<TYPE,TYPES...>].
   !!! C. Ak UNQUALIFIED CLASS NAME nasleduju ZATVORKY [<>], tak za TEMPLATE PARAMETERS danej CLASS su dosadene pouzite TEMPLATE ARGUMENTS. To znamena, ze pre TEMPLATE CLASS [CLASS<TYPE,...TYPES>] pouzitie CODE [CLASS<int,double,bool>] znamena to iste ako CODE [CLASS<int,double,bool>].
28. CLASS NAME INJECTION v pripade, ze je pouzita v TEMPLATE CLASSES, alebo NESTED CLASSES TEMPLATE CLASSES sa moze referovat na nasledujuce CLASSES.
   A. CURRENT INSTANTIATION.
   B. UNKNOWN SPECIALIZATION.
29. CLASS NAME INJECTION v CLASS TEMPLATES sa referuje na CURRENT INSTANTIATION v nasledujucich pripadoch.
   A. V TEMPLATE CLASS kazde pouzitie INJECTED CLASS NAME sa referuje na CURRENT INSTANTIATION.
   B. V TEMPLATE CLASS kazde pouzitie INJECTED CLASS NAME, aj ked je vykonane cez ALIAS DECLARATION sa referuje na CURRENT INSTANTIATION.
   C. Pri NESTED CLASSES TEMPLATE CLASS pouzitie INJECTED CLASS NAME na CURRENT NESTED CLASS je povazovane za CURRENT INSTANTIATION.
30. CLASS NAME INJECTION v CLASS TEMPLATES sa referuje na UNKNOWN SPECIALIZATION v nasledujucich pripadoch.
   A. V TEMPLATE CLASS TYPES, ktore su zavisle na TEMPLATE PARAMETERS, ale nereferuju sa na CURRENT INSTANTIATION su UNKNOWN SPECIALIZATIONS.
   B. Pri NESTED CLASSES TEMPLATE CLASS pouzitie INJECTED CLASS NAME na NON-CURRENT NESTED CLASS je povazovane za UNKNOWN SPECIALIZATION.
31. C++ NIE JE CONTEXT FREE LANGUAGE, ale CONTEXT SENSITIVE LANGUAGE. C++ kvoli tomu musi SYMBOL TABLE pouzivat ako v TOKENIZER, tak aj v PARSER, aby dokazal vykonat spravny TOKENIZATION.
!!! 32. Dovodom preco je C++ CONTEXT SENSITIVE LANGUAGE su nasledujuce priklady.
   A. CODE [X * Y] moze byt interpretovany ako BINARY OPERATOR [OPERATOR*], alebo ako deklaracia VARIABLE [Y], ktora ma TYPE POINTER na TYPE [X].
   B. CODE [X<1>(0)] moze byt interpretovany ako vytvorenie instancie TEMPLATE CLASS [X<>], alebo ako EXPRESSION [(X<1)>0].
!!! 33. V pripade, ze sa v TEMPLATE CODE pouziva DEPENDENT NAME (NAME, ktory je zavisly na TEMPLATE PARAMETERS), tak DEPENDENT NAME je interpretovany ako TYPE IBA ak je pouzity KEYWORD [typename]. V pripade, ze CODE po substitucii TEMPLATE ARGUMENTS naozaj vedie k TYPE, tak COMPILER by mal generovat ERROR.
34. KEYWORD [typename] by sa mal pouzivat pred NAMES, ked dany NAME splna VSETKY nasledujuce podmienky.
   A. Ak je NAME QUALIFIED a NIE JE nasledovane OPERATOROM [OPERATOR::] na sformovanie MORE QUALIFIED NAME.
   B. Ak NAME NIE JE sucastou ELABORATED TYPE SPECIFIER. NAME obsahuje ELABORATED TYPE SPECIFIER, ak obsahuje PREFIX [class], PREFIX [struct], PREFIX [union], alebo PREFIX [enum].
   C. Ak NAME NIE je sucastou BASE CLASS SPECIFICATIONS a ani nie je sucastou zoznamu MEMBER INITIALIZERS v CONSTRUCTORS.
   D. Ak je NAME zaroven aj DEPENDENT NAME. To znamena, ze je zavisle na TEMPLATE PARAMETERS.
   E. Ak je NAME sucastou UNKNOWN SPECIALIZATION. To znamena, ze TYPE oznaceny pomocou QUALIFIER sa referuje na UNKNOWN SPECIALIZATION.
!!! 35. KEYWORD [typename] sa NESMIE pouzivat pred NAMES ak NAME splna aspon tieto podmienky.
   A. Ak je NAME QUALIFIED a NIE JE nasledovane OPERATOROM [OPERATOR::] na sformovanie MORE QUALIFIED NAME.
   B. Ak NAME NIE JE sucastou ELABORATED TYPE SPECIFIER. NAME obsahuje ELABORATED TYPE SPECIFIER, ak obsahuje PREFIX [class], PREFIX [struct], PREFIX [union], alebo PREFIX [enum].
!!! 36. V CODE [TEMPLATE_1<TYPE_NAMES_1>::TEMPLATE_2<TYPE_NAMES_2>] CODE [TEMPLATE_1<TYPE_NAMES_1>] reprezentuje DEPENDENT NAME a CODE [TEMPLATE_2<TYPE_NAMES_2>] je interpretovany ako TEMPLATE IBA IBA vtedy, ak je pred nou pouzity KEYWORD [template]. To znamena nasledujuce.
   !!! A. V CODE [TEMPLATE_1<TYPE_NAMES_1>::TEMPLATE_2<TYPE_NAMES_2>] je CODE [TEMPLATE_2<TYPE_NAMES_2>] interpretovany ako OPERATOR [OPERATOR<].
   !!! B. V CODE [TEMPLATE_1<TYPE_NAMES_1>::template TEMPLATE_2<TYPE_NAMES_2>] je CODE [TEMPLATE_2<TYPE_NAMES_2>] interpretovany ako TEMPLATE s TEMPLATE PARAMETERS.
37. Ak sa v TEMPLATE CLASS vklada pomocou KEYWORD [using] DECLRATION z BASE CLASS, pricom DECLARATION je DEPENDENT NAME (NAME zavisly na TEMPLATE PARAMETERS) je NUTNE pouzit KEYWORD [typename].
38. ARGUMENT DEPENDENT LOOKUP sa vykonava aj pre TEMPLATE IDs, ale C++ potrebuje vediet, ze TEMPLATE ID je skutocne TEMPLATE ID, a nie EXPRESSION.
39. Ak EXPRESSIONS su zavisle na DEPENDENT NAME, tak sa mozu chovat inak pri kazdej TEMPLATE INSTANTIATION. EXPRESSIONS zavisle na DEPENDENT NAME existuju v nasledujucich verziach.
   A. TYPE DEPENDENT EXPRESSIONS. Tieto EXPRESSIONS su zavisle na TYPE PARAMETER danej TEMPLATE.
   B. VALUE DEPENDENT EXPRESSIONS. Tieto EXPRESSIONS su zavisle na VALUE PARAMETER danej TEMPLATE.
40. COMPILER MOZE (ale NEMUSI) generovat COMPILATION ERRORS uz pri TEMPLATE PARSING, ak kazde pouzitie danej TEMPLATE by viedlo k vzniku ERROR. Toto vsak nie je povinnost a COMPILER moze odlozit generovanie ERROR az do doby TEMPLATE INSTANTIATION.
41. Ak DERIVED CLASS ma NON-DEPENDENT TEMPLATE BASE CLASS (BASE CLASS NIE JE zavisla na TEMPLATE PARAMETERS DERIVED CLASS), C++ pri	hladani UNQUALIFIED NAMES postupuje nasledovne.
   A. V DERIVED CLASS sa ako prve zoberu BASE CLASSES a UNQUALIFIED NAME je hladany v nich.
   !!! B. Ak UNQUALIFIED NAME NIE JE najdeny v BASE CLASSES, tak az teraz dochadza k hladaniu UNQUALIFIED NAME medzi TEMPLATE PARAMETERS DERIVED CLASS. To moze viest k nie velmi logickemu chovaniu C++ COMPILER.
!!!!!! 42. C++ pre NON-DEPENDENT NAMES NEVYKONAVA LOOKUP v DEPENDENT BASE CLASSES, teda v BASE CLASSES, ktore zavisia od TEMPLATE PARAMETERS DERIVED CLASS. To vedie k nasledujucim zaverom.
   A. Ak sa v DERIVED CLASS pouzije CODE [this->FIELD] odkazujuci na FIELD [FIELD], ktory je definovany v DEPENDENT BASE CLASS, tak ho C++ NAJDE.
   B. Ak sa v DERIVED CLASS pouzije CODE [BASE<TEMPLATE_PARAMETERS>::FIELD] odkazujuci na FIELD [FIELD], ktory je definovany v DEPENDENT BASE CLASS, tak ho C++ NAJDE.
   !!!!! C. Ak sa v DERIVED CLASS pouzije NON-DEPENDENT NAME v CODE [FIELD] odkazujuci na FIELD [FIELD], ktory je definovany v DEPENDENT BASE CLASS, tak ho C++ NENAJDE a hodi ERROR.
43. Ak C++ vyhladava QUALIFIED NAME v CURRENT INSTANTIATION pre NAME LOOKUP platia nasledujuce fakty.
   A. NAME LOOKUP je vykonany v CURRENT INSTANTIATION.
   B. Ak NAME nebol najdeny, je NAME LOOKUP vykonany vo VSETKYCH NON-DEPENDENT BASE CLASSES.
   !!! C. Ak NAME BOL najdeny, tak NAME sa referuje na CURRENT INSTANTIATION a NEBUDE DEPENDENT NAME.
   !!! D. Ak NAME NEBOL najdeny a CLASS ma DEPENDENT BASE CLASSES, tak NAME sa referuje na UNKNOWN SPECIALIZATION.
//----------------------------------------------------------------------------------------------------------------------