//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
constexpr bool FunctionConstExpr(unsigned int Number)
{
	for (unsigned int Divisor=2;Divisor<=(Number/2);++Divisor)
	{
		if ((Number % Divisor)==0)
		{
			return(false);
		}
	}

	return(Number>1);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE pouzivajuca CONSTEXPR FUNCTION na urcenie, ktora SPECIALIZATION sa ma pouzit.
template<unsigned int NUMBER,bool=FunctionConstExpr(NUMBER)>
class CCompileTimePartialSpecializations;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<unsigned int NUMBER>
class CCompileTimePartialSpecializations<NUMBER,true>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void)
		{
			std::wcout << "VALUE [" << NUMBER << L"] is a PRIME !!!" << std::endl;
		}
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<unsigned int NUMBER>
class CCompileTimePartialSpecializations<NUMBER,false>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		void Print(void)
		{
			std::wcout << "VALUE [" << NUMBER << L"] is NOT a PRIME !!!" << std::endl;
		}
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------