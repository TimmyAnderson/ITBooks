//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie AZURE FUNCTIONS a AZURE CONTAINER APPS.
2. Pre SERVERLESS COMPUTING platia nasledujuce fakty.
   A. SERVERLESS COMPUTING umoznuje nasadenie CODE bez nutnosti riesit spravu SERVEROV, ich DEPLOY ci UPDATE.
   B. SERVERLESS COMPUTING umoznuje jednoduchy SCALING na zaklade meniacej sa WORKLOAD.
   C. SERVERLESS COMPUTING pouziva PAY-PER-USE BILLING MODEL.
   D. SERVERLESS COMPUTING je prikladom FUNCTION AS A SERVICE ARCHITECTURE.
3. Medzi PLATFORM AS SERVICE a SERVERLESS COMPUTING existuju nasledujuce rozdiely.
   A. Pri PLATFORM AS SERVICE musi USER vykona CONFIGURATION CLOUD SERVERS. Pri SERVERLESS COMPUTING je CONFIGURATION vykonavana priamo CLOUD PROVIDER.
   B. Pri PLATFORM AS SERVICE musi USER vykona nastavenie SCALING CLOUD SERVERS. Pri SERVERLESS COMPUTING je SCALING vykonavana priamo CLOUD PROVIDER.
   C. Pri PLATFORM AS SERVICE musi USER platit za SERVERS, ktore si od CLOUD PROVIDER objedna, bez ohladu na to ci su realne vytazene, alebo nie. Pri SERVERLESS COMPUTING USER plati iba za realny cas, pocas ktoreho jeho CODE bezal.
!!! 4. SERVERLESS COMPUTING pouziva EVENT DRIVEN ARCHITECTURE. To znamena, ze CODE v SERVERLESS COMPUTING je spusteny az pri vzniku nejakeho EVENT. To je rozdiel oproti PLATFORM AS SERVICE, kde PROGRAM na SERVERS neustale bezi a tie ocakavaju prichod REQUESTS.
5. Pre AZURE FUNCTIONS platia nasledujuce fakty.
   A. AZURE FUNCTIONS je implementacia SERVERLESS COMPUTING v AZURE.
   B. AZURE FUNCTIONS implementuju EVENT DRIVEN ARCHITECTURE, kde CODE AZURE FUNCTION moze byt spusteny na zaklade EVENTS, ktore sa nazyvaju TRIGGERS. AZURE FUNCTIONS podporuju nasledujuce TRIGGERS.
      A. TRIGGER [HTTP TRIGGER]. AZURE FUNCTION sa spusta pri prichode HTTP REQUEST.
      B. TRIGGER [BLOB TRIGGER]. AZURE FUNCTION sa spusta pri zmene BLOBS v AZURE BLOB STORAGE.
      C. TRIGGER [QUEUE TRIGGER]. AZURE FUNCTION sa spusta pri prichode novej MESSAGE do AZURE STORAGE QUEUE.
      D. TRIGGER [EVENT HUBS TRIGGER]. AZURE FUNCTION sa spusta pri prichode novej MESSAGE do AZURE EVENT HUBS.
      E. TRIGGER [TIMER TRIGGER]. AZURE FUNCTION sa spusta pri exspiracii TIMER.
      F. TRIGGER [COSMOS DB TRIGGER]. AZURE FUNCTION sa spusta pri zmene v COSMOS DB COLLECTION.
      G. TRIGGER [SERVICE BUS TRIGGER]. AZURE FUNCTION sa spusta pri prichode novej MESSAGE do AZURE SERVICE BUS QUEUE, alebo pri prichode SUBSCRIPTION.
      H. TRIGGER [EVENT GRID TRIGGER]. AZURE FUNCTION sa spusta pri prichode CUSTOM alebo BUILD IN EVENTS do AZURE EVENT GRID.
   C. AZURE FUNCTIONS RUNTIME je DEVELOPER STACK obsahujuci vsetky COMPONENTS potrebne pre beh AZURE FUNCTION. AZURE FUNCTIONS podporuju rozne RUNTIMES ako NODE.JS, JAVA ci .NET 8.
6. AZURE FUNCTIONS definuju nasledujuce HOSTING MODELS.
   A. IN PROCESS FUNCTIONS.
   B. OUT OF PROCESS FUNCTIONS.
7. Pre IN PROCESS FUNCTIONS platia nasledujuce fakty.
   A. IN PROCESS FUNCTIONS bezia v rovnakom PROCESS v akom bezi AZURE FUNCTION HOST.
   B. IN PROCESS FUNCTIONS zdielaju RESOURCES s AZURE FUNCTION HOST PROCESS.
   C. IN PROCESS FUNCTIONS su SCALED spolu s AZURE FUNCTION HOST PROCESS.
   D. IN PROCESS FUNCTIONS podporuju iba obmedzene mnozstvo LANGUAGES a FRAMEWORKS.
   E. IN PROCESS FUNCTIONS bezia rychlejsie ako OUT OF PROCESS FUNCTIONS.
   F. IN PROCESS FUNCTIONS podporuju zjednoduseny sposob DEPLOYMENT ako sucast AZURE FUNCTION APP PACKAGE.
   G. IN PROCESS FUNCTIONS mozu byt jednoducho integrovane s inymi AZURE SERVICES ako AZURE STORAGE a AZURE EVENT HUBS.
   H. IN PROCESS FUNCTIONS maju obmedzene RESOURCES, kedze ich zdielaju s AZURE FUNCTION HOST PROCESS.
   I. IN PROCESS FUNCTIONS nie su vhodne pre dlho trvajuce AZURE FUNCTIONS, ktore vyzaduju pristup k EXTERNAL SYSTEMS.
8. Pre OUT OF PROCESS FUNCTIONS platia nasledujuce fakty.
   A. OUT OF PROCESS FUNCTIONS bezia v PROCESS, ktory je nezavisly na AZURE FUNCTION HOST PROCESS.
   B. OUT OF PROCESS FUNCTIONS PROCESSES komunikuju s AZURE FUNCTION HOST PROCESSES pomocou GRPC.
   C. OUT OF PROCESS FUNCTIONS ak dojde k vzniku UNAHNDLED EXCEPTION, jej vznik neovplyvni AZURE FUNCTION HOST PROCESS.
   D. OUT OF PROCESS FUNCTIONS nezdielaju RESOURCES s AZURE FUNCTION HOST PROCESS.
   E. OUT OF PROCESS FUNCTIONS su SCALED NEZAVISLE na SCALING AZURE FUNCTION HOST PROCESS.
   F. OUT OF PROCESS FUNCTIONS podporuju velke mnozstvo LANGUAGES a FRAMEWORKS.
   G. OUT OF PROCESS FUNCTIONS podporuju vysiu uroven ISOLATION a SECURITY CONTROL.
   H. OUT OF PROCESS FUNCTIONS bezia pomalsie ako IN PROCESS FUNCTIONS.
   I. OUT OF PROCESS FUNCTIONS mozu byt jednoducho integrovane s inym AZURE SERVICES, pretoze bezia v nezavislom PROCESS.
9. AZURE FUNCTIONS definuju nasledujuce PLANS, ktore urcuju ako su AZURE FUNCTION spoplatnene.
   A. AZURE FUNCTION CONSUMPTION PLAN.
   B. AZURE FUNCTION PREMIUM PLAN.
   C. AZURE FUNCTION DEDICATED PLAN.
10. Pre AZURE FUNCTION CONSUMPTION PLAN platia nasledujuce fakty.
   A. AZURE FUNCTION CONSUMPTION PLAN umoznuje beh AZURE FUNCTIONS bez nutnosti konfiguracie INFRASTRUCTURE.
   B. AZURE FUNCTION CONSUMPTION PLAN je COST EFFECTIRE, kedze sa plati iba za cas kedy AZURE FUNCTIONS realne vykonavaju svoj CODE.
   C. AZURE FUNCTION CONSUMPTION PLAN vykonava AUTO SCALING.
   D. AZURE FUNCTION CONSUMPTION PLAN poskytuje HIGH AVAILABILITY, pretoze AZURE FUNCTIONS mozu byt replikovane na viacero SERVERS a DATA CENTERS.
   E. AZURE FUNCTION CONSUMPTION PLAN umoznuje pouzit vsetkych FRAMEWORKS, ktore AZURE FUNCTIONS podporuje.
   F. AZURE FUNCTION CONSUMPTION PLAN ma NEVYHODU ze prve spustenie AZURE FUNCTION je pomalsie ako ostatne. Tomuto problemu sa hovori COLD START LATENCY.
   G. AZURE FUNCTION CONSUMPTION PLAN nie je vhodny pre beh dlhotrvajucich AZURE FUNCTIONS.
   H. AZURE FUNCTION CONSUMPTION PLAN neposkytuje velku kontrolu nad INFRASTRUCTURE.
11. Pre AZURE FUNCTION PREMIUM PLAN platia nasledujuce fakty.
   A. AZURE FUNCTION PREMIUM PLAN poskytuje vyssi vykon ako AZURE FUNCTION CONSUMPTION PLAN pouzitim vykonnejsieho HW.
   B. AZURE FUNCTION PREMIUM PLAN poskytuje vyssiu SCALABILITY ako AZURE FUNCTION CONSUMPTION PLAN.
   C. AZURE FUNCTION PREMIUM PLAN umoznuje beh PRE WARMED WORKERS, ktore umoznuju prakticky okamzite spustenie pri prichode EVENT, cim riesia problem COLD START LATENCY, ktory sa vyskytuje u AZURE FUNCTION CONSUMPTION PLAN.
   D. AZURE FUNCTION PREMIUM PLAN podporuje integraciu s VIRTUAL NETWORKS co umoznuje bezpecnu integraciu s inymi AZURE SERVICES ako napriklad VIRTUAL MACHINES, DATABASES ci STORAGE ACCOUNTS.
   E. AZURE FUNCTION PREMIUM PLAN umoznuje beh na DEDICATED INSTANCES, kde ma USER vyssiu kontrolu nad ENVIRONMENT.
   F. AZURE FUNCTION PREMIUM PLAN umoznuje HYBRID CONNECTIONS s ON PREMISE RESOURCES ako su DATABASES ci WEB SERVICES.
   G. AZURE FUNCTION PREMIUM PLAN je DRAHSI ako AZURE FUNCTION CONSUMPTION PLAN.
   H. AZURE FUNCTION PREMIUM PLAN vyzaduje platbu za pocet beziacich instancii AZURE FUNCTIONS bez ohladu na ich realne pouzitie.
12. Pre AZURE FUNCTION DEDICATED PLAN platia nasledujuce fakty.
   A. AZURE FUNCTION DEDICATED PLAN umoznuje beh AZURE FUNCTIONS nad DEDICATED INFRASTRUCTURE co umoznuje jej vysoku uroven kontroly.
   B. AZURE FUNCTION DEDICATED PLAN umoznuje vlastnych vyber ENVIRONMENT, vratane OPERATING SYSTEM, MIDDLEWARE COMPONENTS ci DEPENDENCIES. To umoznuje lahku integraciu s ON PREMISE SYSTEMS.
   C. AZURE FUNCTION DEDICATED PLAN umoznuje vyssiu SCALABILITY ako AZURE FUNCTION CONSUMPTION PLAN.
   D. AZURE FUNCTION DEDICATED PLAN podporuje integraciu s VIRTUAL NETWORKS co umoznuje bezpecnu integraciu s inymi AZURE SERVICES ako napriklad VIRTUAL MACHINES, DATABASES ci STORAGE ACCOUNTS.
   E. AZURE FUNCTION DEDICATED PLAN podporuje SERVICE LEVEL AGREEMENET, kedy AZURE PLATFORM garantuje urcitu uroven UPTIME a AVAILABILITY.
   F. AZURE FUNCTION DEDICATED PLAN je drahsi ako AZURE FUNCTION CONSUMPTION PLAN.
13. AZURE FUNCTIONS mozu byt HOSTED aj na AZURE APP SERVICE ENVIRONMENT. Pre AZURE APP SERVICE ENVIRONMENT platia nasledujuce fakty.
   A. AZURE APP SERVICE ENVIRONMENT umoznuje beh AZURE FUNCTIONS v DEDICATED ENVIRONEMNT, ktore je izolovane od verejneho INTERNETU a zvysuje bezpecnost systemu.
   B. AZURE APP SERVICE ENVIRONMENT umoznuje integraciu s VIRTUAL NETWORKS co umoznuje vyuzivanie ostatnych AZURE SERVICES s vyuzitim PRIVATE NETWORK ENVIRONMENT.
   C. AZURE APP SERVICE ENVIRONMENT podporuje viacero konfiguracii VIRUTAL MACHINES cim umoznuje jednoduchy HORIZONTAL SCALING.
   D. AZURE APP SERVICE ENVIRONMENT zvysuje bezpecnost priamym nasadenim AZURE FUNCTIONS do VIRTUAL NETWORK (VNet). To zvysuje SECURITY beziacich AZURE FUNCTIONS.
   E. AZURE APP SERVICE ENVIRONMENT je mozne jednoducho integrovat s ON PREMISE NETWORKS co umoznuje intergraciu s ON PREMISE SYSTEMS.
   F. AZURE APP SERVICE ENVIRONMENT umoznuje DEPLOYMENT AZURE FUNCTIONS do viacerych ZONES co zvysuje AVAILABILITY a RELIABILITY.
   G. AZURE APP SERVICE ENVIRONMENT splna regulacne poziadavky a standardy ako su napriklad financne ci zdravotnicke institucie.
   H. AZURE APP SERVICE ENVIRONMENT umoznuje vyuzitie CUSTOM DOMAINS a CUSTOM SSL CERTIFICATES.
   I. AZURE APP SERVICE ENVIRONMENT je DRAHSI ako ine PLANS pre DEPLOYMENT AZURE FUNCTIONS.
   J. AZURE APP SERVICE ENVIRONMENT ma vyssie naroky na administraciu ako ine PLANS pre DEPLOYMENT AZURE FUNCTIONS.
14. AZURE FUNCTIONS su spustane pri vzniku EVENTS. EVENT vyvola vznik TRIGGER, ktory spusti danu AZURE FUNCTION. Pre TRIGGERS platia nasledujuce fakty.
   A. AZURE FUNCTIONS definuju nasledujuce typy TRIGGERS.
      A. TRIGGER [HTTP TRIGGER]. AZURE FUNCTION sa spusta pri prichode HTTP REQUEST.
      B. TRIGGER [BLOB TRIGGER]. AZURE FUNCTION sa spusta pri zmene BLOBS v AZURE BLOB STORAGE.
      C. TRIGGER [QUEUE TRIGGER]. AZURE FUNCTION sa spusta pri prichode novej MESSAGE do AZURE STORAGE QUEUE.
      D. TRIGGER [EVENT HUBS TRIGGER]. AZURE FUNCTION sa spusta pri prichode novej MESSAGE do AZURE EVENT HUBS.
      E. TRIGGER [TIMER TRIGGER]. AZURE FUNCTION sa spusta pri exspiracii TIMER.
      F. TRIGGER [COSMOS DB TRIGGER]. AZURE FUNCTION sa spusta pri zmene v COSMOS DB COLLECTION.
      G. TRIGGER [SERVICE BUS TRIGGER]. AZURE FUNCTION sa spusta pri prichode novej MESSAGE do AZURE SERVICE BUS QUEUE, alebo pri prichode SUBSCRIPTION.
      H. TRIGGER [EVENT GRID TRIGGER]. AZURE FUNCTION sa spusta pri prichode CUSTOM alebo BUILD IN EVENTS do AZURE EVENT GRID.
   B. TRIGGERS su konfigurovane vo FILE [host.json].
15. AZURE FUNCTIONS sa vytvaraju vo VISUAL STUDIO pomocou PROJECT [AZURE FUNCTIONS].
16. AZURE FUNCTIONS pre HTTP TRIGGERS sa definuje nasledujucim sposobom.
   A. Definuje sa CUSTOM CLASS.
   B. CUSTOM CLASS obsahuje METHOD s PROTOTYPE [Task<IActionResult> Run(HttpRequest Request)], ktora je oznacena pomocou ATTRIBUTE [Function]. Tato METHOD reprezentuje AZURE FUNCTION.
   C. PARAMETER [HttpRequest Request] musi byt oznaceny pomocou ATTRIBUTE [HttpTrigger], ktory definuje AUTHORIZATION LEVEL a zoznam HTTP VERBS s ktorymi je mozne danu AZURE FUNCTION volat.
!!! 17. AUTHORIZATION AZURE FUNCTIONS pre HTTP TRIGGERS sa vykonava v nasledujucich krokoch.
   A. AZURE FUNCTION urcuje svoje poziadavky na AUTHORIZATION pomocou ATTRIBUTE [HttpTrigger].
   B. Ak je AUTHORIZATION LEVEL nastaveny na INU VALUE ako [AuthorizationLevel.Anonymous], HTTP CLIENT musi pri volani pouzit ACCESS KEY.
   C. ACCESS KEY danej AZURE FUNCTION je mozne zistit pomocou COMMAND [az functionapp keys list].
   D. ACCESS KEY sa do AZURE FUNCTION odosiela nasledujucimi sposobmi.
      A. Ako QUERY STRING PARAMETER [code=ACCESS_KEY].
	  B. Ako HTTP REQUEST HEADER [x-functions-key], ktoreho VALUE obsahuje ACCESS KEY.
18. AZURE FUNCTIONS vyzaduju zaregistrovany STORAGE ACCOUNT. So STORAGE ACCOUNTS sa pracuje pomocou nasledujucich COMMANDS.
   A. STORAGE ACCOUNT sa vytvara pomocou COMMAND [az storage account create]. Prikladom je COMMAND [az storage account create --name mystorageta --resource-group MyBook --location "West US 2" --sku "Standard_LRS" --allow-blob-public-access false].
   B. STORAGE ACCOUNT sa odstranuje pomocou COMMAND [az storage account delete]. Prikladom je COMMAND [az storage account delete --name mystorageta --resource-group MyBook].
   C. Zoznam STORAGE ACCOUNTS vracia COMMAND [az storage account list]. Prikladom je COMMAND [az storage account list --resource-group MyBook].
!!! 19. STORAGE ACCOUNTS na registraciu vyzaduje registraciu PROVIDER [Microsoft.Storage]. S PROVIDERS sa pracuje pomocou nasledujucich COMMANDS.
   A. PROVIDER sa registruje pomocou COMMAND [az provider register]. Prikladom je COMMAND [az provider register --namespace "Microsoft.Storage"].
   B. PROVIDER sa odregistruje pomocou COMMAND [az provider unregister]. Prikladom je COMMAND [az provider unregister --namespace "Microsoft.Storage"].
   C. Zoznam zaregistrovanych a nezaregistrovanych PROVIDERS vracia COMMAND [az provider list]. Prikladom je COMMAND [az provider list --output table].
20. S AZURE FUNCTIONS APPS sa pracuje pomocou nasledujucich COMMANDS.
   A. AZURE FUNCTIONS APP sa vytvara pomocou COMMAND [az functionapp create]. Prikladom je COMMAND [az functionapp create --name myfunctionta --resource-group MyBook --consumption-plan-location "westus2" --runtime dotnet-isolated --functions-version 4 --storage-account mystorageta].
   B. AZURE FUNCTIONS APP sa odstranuje pomocou COMMAND [az functionapp delete]. Prikladom je COMMAND [az functionapp delete --name myfunctionta --resource-group MyBook].
   C. Zoznam AZURE FUNCTIONS APP vracia COMMAND [az functionapp list]. Prikladom je COMMAND [az functionapp list --resource-group MyBook].
!!! 21. S AZURE FUNCTIONS je mozne pracovat pomocou AZURE FUNCTIONS CORE TOOLS. AZURE FUNCTIONS CORE TOOLS instaluje COMMAND LINE TOOL [func].
22. AZURE FUNCTIONS DEPLOYMENT je mozne spravit nasledujucimi sposobmi.
   A. Pomocou TOOL [func]. AZURE FUNCTIONS DEPLOYMENT sa pomocou TOOL [func] vykonava v nasledujucich krokoch.
      A. Pomocou COMMAND [az functionapp create] sa vytvori AZURE FUNCTION APP.
	  B. Pomocou COMMAND [func azure functionapp publish], ktory sa spusti v PROJECT DIRECTORY sa vykona AZURE FUNCTIONS DEPLOYMENT. Prikladom je COMMAND [func azure functionapp publish myfunctionta].
   B. Pomocou TOOL [az]. AZURE FUNCTIONS DEPLOYMENT sa pomocou TOOL [az] vykonava v nasledujucich krokoch.
      A. Pomocou COMMAND [az functionapp create] sa vytvori AZURE FUNCTION APP.
	  B. Pomocou COMMAND [dotnet publish], ktory sa spusti v PROJECT DIRECTORY sa vytvori DEPLOY do LOCAL DIRECTORY. Prikladom je COMMAND [dotnet publish MyAzureFunctions.csproj --output Deploy].
	  C. Z obsahu DIRECTORY (bez samotneho DIRECTORY) vytvoreneho pomocou COMMAND [dotnet publish] sa vytvori ZIP FILE.
	  D. Pomocou COMMAND [az functionapp deploy] sa vykona AZURE FUNCTIONS DEPLOYMENT. Prikladom je COMMAND [az functionapp deploy --name myfunctionta --resource-group MyBook --src-path "MyAzureFunctions.zip" --type zip --clean true].
23. AZURE FUNCTIONS podporuju BINDINGS. Pre BINDINGS platia nasledujuce fakty.
   A. AZURE FUNCTION BINDINGS umoznuju deklarativne pripajat AZURE FUNCTIONS k rozlicnym RESOURCES ako su DATABASES, MESSAGE QUEUES, EVENT GRIDS ci EVENT HUBS.
   B. AZURE FUNCTION BINDINGS sa deklaruju pomocou C# ATTRIBUTES, ktore sa aplikuju na METHODS, ktore reprezentuju AZURE FUNCTIONS.
   C. AZURE FUNCTION BINDINGS sa delia do nasledujucich kategorii.
      A. INPUT BINDINGS. Spracovaju data, ktore vstupuju do AZURE FUNCTIONS. INPUT BINDINGS su pouzivane na realizaciu TRIGGERS.
      B. OUTPUT BINDINGS. Spracovaju data, ktore vystupuju z AZURE FUNCTIONS. OUTPUT BINDINGS su pouzivane na zapis dat do DATABASE, ci odosielanie MESSAGES do MESSAGE QUEUES.
   !!! D. AZURE FUNCTION BINDINGS bezia ako sucast AZURE FUNCTION RUNTIME. RUNTIME pri spusteni AZURE FUNCTION zisti ako BINDINGS vyuziva a vytvori ich instancie, aby ich AZURE FUNCTION mohla pouzit.
   E. AZURE FUNCTION BINDINGS zjednodusuju pracu s rozlicnymi AZURE SERVICES tym, ze PROGRAM nemusi riesit detaily pripojenia sa a pouzivania danej SERVICE, pretoze to robi dany AZURE FUNCTION BINDING.
24. AZURE FUNCTION PROJECT sa konfiguruje nasledujucim sposobom.
   A. Konfiguracia pre AZURE FUNCTION HOST PROCESS je ulozena vo FILE [host.json]. FILE [host.json] je pri DEPLOYMENT DEPLOYED do AZURE.
   B. Lokalna konfiguracia pre LOCAL AZURE FUNCTION HOST PROCESS je ulozena vo FILE [local.host.json]. FILE [host.json] NIE je pri DEPLOYMENT DEPLOYED do AZURE.
   C. FILE [local.settings.json] obsahuje lokalne SETTINGS pre LOCAL DEPLOYMENT.
   D. FILE [host.json] obsahuje nasledujuce SECTIONS.
      A. SECTION [extensions] obsahuje konfiguraciu EXTENSTIONS, ako je napriklad SERVICE BUS EXTENSION.
	  B. SECTION [version] obsahuje pozadovanu VERSION AZURE FUNCTIONS RUNTIME.
	  C. SECTION [logging] obsahuje LOG LEVEL a miesto, kde sa LOGS maju zapisovat.
	  D. SECTION [HTTP] obsahuje nastavenia pre HTTP BINDING.
	  E. SECTION [functionTimeout] obsahuje maximalny cas po ktory moze AZURE FUNCTION bezat.
25. AZURE FUNCTIONS podporuju nasledujuce AUTHENTICATION PROVIDER, ktore umoznuju AUTHENTICATION AZURE FUNCTIONS.
   A. AZURE ACTIVE DIRECTORY. AZURE ACTIVE DIRECTORY je CLOUD BASED IDENTITY PROVIDER. AZURE ACTIVE DIRECTORY podporuje PROTOCOL [OAuth 2.0] a PROTOCOL [OpenID Connect].
   B. SOCIAL MEDIA ACCOUNTS. AZURE FUNCTIONS podporuju viacere SOCIAL MEDIA ACCOUNTS, ktore mozu byt pouzite na AUTHENTICATION.
   C. CUSTOM IDENTITY PROVIDERS. CUSTOM IDENTITY PROVIDERS, ktore implementuju PROTOCOL [OAuth 2.0] a PROTOCOL [OpenID Connect] mozu byt pouzite ako AUTHENTICATION PROVIDERS pre AZURE FUNCTIONS.
26. AZURE FUNCTIONS umoznuju vykonavat AUTHENTICATION a AUTHORIZATION pomocou MANAGED IDENTITIES. Pre MANAGED IDENTITIES platia nasledujuce fakty.
   A. MANAGED IDENTITIES je sucastou AZURE ACTIVE DIRECTORY.
   B. MANAGED IDENTITIES mozu mat nasledujuci typ.
      A. SYSTEM ASSIGNED MANAGED IDENTITY. Tato IDENTITY je automaticky vytvarana spolu s prilusnym RESOURCE a jeho zivotnost trva po dobu zivotnosti RESOURCE. Jednym z podporovanych RESOURCE je AZURE FUNCTIONS.
	  B. USER ASSIGNED MANAGED IDENTITY. Tato IDENTITY je vytvarana nezavisle na danom RESOURCE a existuje az kym nie je IDENTITY explicitne odstranena.
   C. Pouzitie MANAGED IDENTITIES umoznuje jednoduchu integraciu s inym AZURE SERVICES.
27. AZURE FUNCTIONS podporuju AUTHENTICATION na zaklade ACCESS KEYS. Pre ACCESS KEYS platia nasledujuce fakty.
   A. Pre AZURE FUNCTIONS PROGRAM su po DEPOLOYMENT vygenerovane DEFAULT ACCESS KEYS. USER moze pridat aj CUSTOM ACCESS KEYS.
   B. Zoznam AZURE FUNCTIONS ACCESS KEYS je mozne ziskat pomocou COMMAND [az functionapp keys list]. Prikladom je COMMAND [az functionapp keys list --name myfunctionta --resource-group MyBook].
   C. AZURE FUNCTIONS ACCESS KEYS su odisielane ako sucast HTTP REQUEST MESSAGE a to niektorym z nasledujucich sposobov.
      A. AZURE FUNCTIONS ACCESS KEYS je pridany do QUERY STRING ako PARAMETER [code=ACCESS_KEY], kde VALUE [ACCESS_KEY] je hodnota ACCESS KEY.
      B. AZURE FUNCTIONS ACCESS KEYS je pridany do HTTP HEADER PARAMETER [x-functions-key=ACCESS_KEY], kde VALUE [ACCESS_KEY] je hodnota ACCESS KEY.
28. AZURE FUNCTIONS podporuje AUTHORIZATION SCOPES. Pre AUTHORIZATION SCOPES platia nasledujuce fakty.
   A. AUTHORIZATION SCOPES umoznuju implementovat AUTHORIZATION pre AZURE FUNCTIONS.
   B. AUTHORIZATION SCOPES umoznuju pridelit kazdej AZURE FUNCTION konkretnu ROLE, ktoru CLIENT musi splnat, aby mohol volat danu AZURE FUNCTION.
   C. Definovanie AUTHORIZATION SCOPE je vykonavane v nasledujucich krokoch.
      A. Definuje sa ROLE.
	  B. ROLE sa prideli danej AZURE FUNCTION.
29. DURABLE AZURE FUNCTIONS su specialny type AZURE FUNCTIONS, pre ktore platia nasledujuce fakty.
   A. DURABLE AZURE FUNCTIONS su SERVERLESS ORCHESTRATION PLATFORM.
   B. DURABLE AZURE FUNCTIONS umoznuju jednoduchu ORCHESTRATION inych AZURE FUNCTIONS, aby bolo mozne vytvarat WORKFLOWS.
   C. DURABLE AZURE FUNCTIONS podporuju STATEFUL WORKFLOWS a STATELESS WORKFLOWS.
   D. DURABLE AZURE FUNCTIONS umoznuju implementaciu rozlicnych ORCHESTRATION PATTERNS.
   E. DURABLE AZURE FUNCTIONS umoznuju daleko jednoduchsiu implementaciu WORKFLOWS ako ine technologie, ako napriklad SERVICE BUS QUEUES, kedze zapuzdruju mnoho functionality do jednoducheho API.
30. DURABLE AZURE FUNCTIONS implementuju nasledujuce CONCEPTS.
   A. ORCHESTRATION. Pre ORCHESTRATION platia nasledujuce fakty.
      A. ORCHESTRATOR FUNCTIONS sluzia ako WORKFLOW COMMAND CENTERS, ktore definuju EXECUTION FLOWS v ramci WORKFLOWS, ktore implementuju.
	  B. ORCHESTRATOR FUNCTIONS v ramci vykonavania EXECUTION FLOWS WORKFLOWS volaju ACTIVITIES.
	  C. ORCHESTRATOR FUNCTIONS umoznuju jednoduchu implementaciu WORKFLOWS a spracovanie FAILURES.
   B. ACTIVITIES. Pre ACTIVITIES platia nasledujuce fakty.
      A. ACTIVITIES su DISCRETE WORK ELEMENTS, ktore tvoria jednotlive STEPS vo WORKFLOW.
	  B. Medzi ACTIVITIES patri volanie API, DATA PROCESSING ci CALCULATIONS.
	  C. ACTIVITIES su MODULAR a REUSABLE a ich cielom je rozdelit functionalitu WORKFLOWS do nezavislych SCALABLE celkov.
   C. CHECKPOINTS. Pre CHECKPOINTS platia nasledujuce fakty.
      A. CHECKPOINTS sluzia na ukladanie EXECUTION STATE pocas vykonavania WORKFLOWS.
	  B. CHECKPOINTS umoznuju ORCHESTRATIONS pokracovat vo vykonavani WORKFLOWS pri vzniku TEMPORARY FAILURES ci nutnosti presunu WORKFLOWS na ine NODES v ramci zvysenia SCALABILITY.
31. DURABLE AZURE FUNCTIONS podporuju nasledujuce typy WORKFLOWS.
   A. STATEFUL WORKFLOWS. Pre STATEFUL WORKFLOWS platia nasledujuce fakty.
      A. STATEFUL WORKFLOWS ukladaju svoj STATE pocas vykonavania rozlicnych faz a volania ACTIVITIES v ramci vykonavania WORKFLOWS.
	  B. STATEFUL WORKFLOWS pouzivaju na ukladanie STATE CHECKPOINTS.
	  C. STATEFUL WORKFLOWS sa typicky pouzivaju na realizaciu zlozitych a dlho beziacich WORKFLOWS, kde STATE musi byt ulozeny aby bolo mozne pokracovat vo vykonavani WORKFLOWS.
   B. STATELESS WORKFLOWS. Pre STATELESS WORKFLOWS platia nasledujuce fakty.
      A. STATELESS WORKFLOWS neukladaju svoj STATE pocas vykonavania rozlicnych faz a volania ACTIVITIES v ramci vykonavania WORKFLOWS.
	  B. STATELESS WORKFLOWS reaguju na individualne REQUESTS bez toho, aby bolo mozne vratit spat vykonavanie uz vykonanich ACTIVITIES.
	  C. STATELESS WORKFLOWS su vhodne pre implementaciu vysokovykonnych a silne paralelizovatelnych WORKFLOWS, ako je REAL TIME DATA ANALYSIS ci EVENT DRIVER MICROSERVICES.
!!! 32. DURABLE AZURE FUNCTIONS sa implementuju nasledujucim sposobom.
   A. Vytvori sa AZURE FUNCTIONS PROJECT.
   B. Do AZURE FUNCTIONS PROJECT sa vlozi AZURE FUNCTION TYPE DURABLE.
   C. Po vlozeni DURABLE AZURE FUNCTION do PROJECT sa vlozi CLASS, ktora obsahuje tieto METHODS.
      A. METHOD reprezentujuca ACTIVITY.
	  B. METHOD reprezentujuca ORCHESTRATOR.
	  C. METHOD reprezentujuca TRIGGER AZURE FUNCTION, ktora spusta ORCHESTRATOR.
   !!!!! D. Pred spustenim DURABLE AZURE FUNCTIONS je NUTNE spustit AZURITE, co je EMULATOR pre niektore AZURE funkcionality. AZURITEE sa spusta v nasledujucich krokoch.
      !!! A. Spusti sa COMMAND [cmd], ktory ale musi bezat a ADMIN pravami.
	  B. V COMMAND [cmd] sa prejde do DIRECTORY, kde sa nachadza AZURITE. Pre VISUAL STUDIO 2022 je to DIRECTORY [C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\Microsoft\Azure Storage Emulator].
	  C. V COMMAND [cmd] sa spusti PROGRAM [azurite.exe].
!!!!! 33. BY-DEFAULT sa DURABLE AZURE FUNCTIONS spustaju nasledujucim sposobom.
   A. CLIENT zavola TRIGGER AZURE FUNCTION pomocou jej URL.
   !!! B. TRIGGER AZURE FUNCTION ASYNCHRONNE spusti vykonavanie DURABLE AZURE FUNCTION, pricom vsak NECAKA na jej skoncenie.
   C. TRIGGER AZURE FUNCTION overi ci sa DURABLE AZURE FUNCTION spustila volanim METHOD [Task<HttpResponseData> CreateCheckStatusResponseAsync(this DurableTaskClient Client, HttpRequestData Request, string InstanceID, CancellationToken Cancellation)].
   !!! D. Stav vykonania DURABLE AZURE FUNCTION je mozne zistit volanim API, ktorej URL je vratena v instancii CLASS [HttpResponseData], ktoru vracia METHOD [Task<HttpResponseData> CreateCheckStatusResponseAsync(this DurableTaskClient Client, HttpRequestData Request, string InstanceID, CancellationToken Cancellation)], a ktoru by mala TRIGGER AZURE FUNCTION vracat ako RETURN VALUE.
   !!! E. Alternativne TRIGGER AZURE FUNCTION moze pockat na skoncenie DURABLE AZURE FUNCTION volanim METHOD [Task<OrchestrationMetadata> WaitForInstanceCompletionAsync(string InstanceID, CancellationToken Cancellation)].
34. DURABLE AZURE FUNCTIONS umoznuju implementaciu nasledujucich PATTERNS.
   A. PATTERN [FUNCTION CHAINING].
   B. PATTERN [FAN-OUT/FAN-IN].
   C. PATTERN [ASYNC HTTP APIs].
   D. PATTERN [MONITORING].
   E. PATTERN [HUMAN INTERACTION].
   F. PATTERN [AGGREGATOR].
35. Pre FUNCTION CHAINING PATTERN platia nasledujuce fakty.
   A. FUNCTION CHAINING PATTERN umoznuje vykonanie WORKFLOWS vyzadujucich volanie viacerych FUNCTIONS v stanovenom poradi.
   B. DURABLE AZURE FUNCTIONS umoznuju aby ORCHESTRATOR FUNCTION volala pozadovane FUNCTIONS v definovanom poradi.
36. Pre FAN-OUT/FAN-IN PATTERN platia nasledujuce fakty.
   A. FAN-OUT/FAN-IN PATTERN umoznuje paralelne volat viacero ACTIVITIES v ramci daneho WORKFLOW a nasledne spracovat vysledky tychto volani po ich skonceni.
   B. FAN-OUT faza spociva v paralelnom spusteni viacerych ACTIVITIES, ktore bezia nezavisle na sebe.
   C. FAN-IN spociva v zbere vysledkov volani jednotlivych ACTIVITIES a ich spracovani.
37. Pre ASYNC HTTP APIs PATTERN platia nasledujuce fakty.
   A. ASYNC HTTP APIs PATTERN umoznuje asychronny beh DURABLE AZURE FUNCTION, pricom CLIENT nemusi cakat kym DURABLE AZURE FUNCTION skonci.
   B. ASYNC HTTP APIs PATTERN umoznuje CLIENT po spusteni ASYCHRONOUS OPERATION pomocou URL, ktore vrati spustenie ASYCHRONOUS OPERATION overovat ci ASYNCHRONOUS OPERATION vykonavava v DURABLE AZURE FUNCTION uz skoncila.
38. Pre MONITORING PATTERN platia nasledujuce fakty.
   A. MONITORING PATTERN umoznuje vykonavat opakujuce sa TASKS pomocou DURABLE AZURE FUNCTIONS.
   B. DURABLE AZURE FUNCTIONS umoznuju jednoduchu implementaciu MONITORING PATTERN pretoze mozu bezat lubovolne dlho a dokazu ukladat svoj STATE.
39. Pre HUMAN INTERACTION PATTERN platia nasledujuce fakty.
   A. HUMAN INTERACTION PATTERN umoznuje kombinovat AUTOMATIC TASKS a TASKS, ktore vyzaduju interakciu zo strany USER.
   B. DURABLE AZURE FUNCTIONS umoznuju cakat na USER EVENTS, ktore mozu byt vyvolane z inej AZURE FUNCTION, alebo odoslanim HTTP REQUEST na prislusne URL.
40. AZURE CONTAINER APPS je SERVERLESS SERVICE, ktoru implementuje AZURE, pre ktoru platia nasledujuce fakty.
   A. AZURE CONTAINER APPS umoznuje DEPLOYMENT PROGRAMS beziacich DOCKER CONTAINERS v AZURE bez nutnosti zlozito konfigurovat infrastrukturu.
   !!! B. AZURE CONTAINER APPS interne pouziva AZURE KUBERNETS SERVICE, DAPR ci ENVOY bez nutnosti ich zlozito konfigurovat zo strany pouzivatela.
   C. AZURE CONTAINER APPS umoznuje HORIZONTAL SCALING na zaklade USER DEFINED SCALING RULES ako je pocet HTTP REQUESTS ci vyuzitie CPU a MEMORY. SCALING sa moze vykonat aj pri prichode roznych EVENT TRIGGERS ako napriklad prichod MESSAGE do AZURE SERVICE BUS, ci prichod EVENT do AZURE EVENT HUBS.
   D. AZURE CONTAINER APPS umoznuje paralelnych beh viacerych verzii PROGRAMU v rozlicnych DOCKER CONTAINERS. To umoznuje ZERO DOWNTIME pri UPGRADE daneho PROGRAMU.
   !!! E. AZURE CONTAINER APPS umoznuje vystavit PROGRAMY do INTERNETU pomocou technologie INGRESS. To vyrazne zjednodusuje sietovu konfiguraciu, kedze tu ma na starosti INGRESS, ktora sa da trivialne konfigurovat.
   F. AZURE CONTAINER APPS obsahuje nativnu podporu pre DAPR.
   G. AZURE CONTAINER APPS umoznuje DEPLOY z ktorehokolvek DOCKER IMAGE REGISTRY ako je DOCKER HUB, alebo AZURE CONTAINER REGISTRY.
   H. AZURE CONTAINER APPS umoznuje ulozenie APPLICATION SECRETS a CONFIGURATION VALUES do SECRET STORE.
   I. AZURE CONTAINER APPS umoznuje monitoring PROGRAMOV pomocou AZURE LOG ANALYTICS SERVICE.
41. AZURE CONTAINER APPS PROGRAM sa vytvara v nasledujucich krokoch.
   A. Vytvori sa WEB APPLICATION VISUAL STUDIO PROJECT do ktoreho sa prida SOURCE CODE daneho PROGRAMU.
   B. Do VISUAL STUDIO PROJECT sa prida DOCKERFILE [Dockerfile]. VISUAL STUDIO umoznuje pre PROJECT automaticky vygenerovat DEFAULT DOCKERFILE, ktory je pouzitelny pre DEPLOYMENT.
   !!! C. Z PROJECT DOCKERFILE sa vytvori DOCKER IMAGE pomocou COMMAND [docker build]. Prikladom je COMMAND [docker build -t timmyanderson/mycontainerapps:1.0.0 .]. DOCKER IMAGE TAG MUSI pouzivat NAMING CONVENTION, ktoru podporuje DOCKER CONTAINER REGISTRY, ktory sa pouzije na ulozenie DOCKER CONTAINER.
   !!! D. Vytvoreny DOCKER IMAGE je mozne spustit lokalne v DOCKER DESKTOP pomocou COMMAND [docker container run]. Prikladom je COMMAND [docker container run --publish 5000:8080 --name MyContainerApps timmyanderson/mycontainerapps:1.0.0].
   !!!!! E. DOCKER IMAGE je nutne ulozit do vybraneho DOCKER CONTAINER REGISTRY pomocou COMMAND [docker push]. Prikladom je COMMAND [docker push timmyanderson/mycontainerapps:1.0.0]. DOCKER HUB je na rozdiel od AZURE CONTAINER REGISTRY uplne FREE, a preto je vhodnejsie ho pouzivat namiesto AZURE CONTAINER REGISTRY.
42. AZURE CONTAINER APPS PROGRAM je DEPLOYED v nasledujucich krokoch.
   A. Pomocou COMMAND [az containerapp env create] sa vytvori AZURE CONTAINER APPS ENVIRONMENT, ktory obsahuje konfiguraciu ENVIRONMENT do ktoreho bude AZURE CONTAINER APPS nasadena. Prikladom je COMMAND [az containerapp env create --name "MyBookEnvironment" --resource-group MyBook --location "West US 2"].
   B. Pomocou COMMAND [az containerapp create] sa vytvara AZURE CONTAINER APPS. Prikladom je COMMAND [az containerapp create --name "my-container-apps" --resource-group MyBook --image "docker.io/timmyanderson/mycontainerapps:1.0.0" --environment "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/MyBook/providers/Microsoft.App/managedEnvironments/MyBookEnvironment" --ingress external --allow-insecure --target-port 8080]. COMMAND obsahuje URL na DOCKER CONTAINER REGISTER v ktorom je dany DOCKER CONTAINER ulozeny.
   !!! C. V pripade, ze pri vytvarani AZURE CONTAINER APPS sa povoli INGRESS, je AZURE CONTAINER APPS pristupna aj z INTERNETU. URL na AZURE CONTAINER APPS je ulozena vo FIELD [ingress.fqdn], ktory je mozne ziskat pomocou COMMAND [az containerapp list].
43. AZURE CONTAINER APPS PROGRAM sa odstranuje v nasledujucich krokoch.
   A. Pomocou COMMAND [az containerapp delete] sa odstrani AZURE CONTAINER APPS. Prikladom je COMMAND [az containerapp delete --ids "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/MyBook/providers/Microsoft.App/containerapps/my-container-apps"].
   B. Pomocou COMMAND [az containerapp env delete] sa odstrani AZURE CONTAINER APPS ENVIRONMENT. Prikladom je COMMAND [az containerapp env delete --ids "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/MyBook/providers/Microsoft.App/managedEnvironments/MyBookEnvironment"].
44. AZURE CONTAINER APPS PROGRAMS mozu byt DEPLOYED cez AZURE CI/CD PIPELINES.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
FUNC CLI COMMANDS.

1. COMMAND [func azure functionapp publish AZURE_FUNCTION_NAME].
   A. COMMAND vykona PUBLISH AZURE FUNCTION.
   B. VALUE [AZURE_FUNCTION_NAME] obsahuje nazov AZURE FUNCTION.
2. COMMAND [func azure functionapp logstream AZURE_FUNCTION_NAME].
   A. COMMAND zobrazuje LOGS AZURE FUNCTION.
   B. VALUE [AZURE_FUNCTION_NAME] obsahuje nazov AZURE FUNCTION.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - PROVIDERS.

1. COMMAND [az provider list]. COMMAND zobrazuje zoznam registrovanych a neregistrovanych PROVIDERS.
2. COMMAND [az provider register --namespace PROVIDER_NAMESPACE].
   A. COMMAND registruje PROVIDER.
   B. OPTION [--namespace PROVIDER_NAMESPACE] vo VALUE [PROVIDER_NAMESPACE] obsahuje nazov PROVIDER.
3. COMMAND [az provider unregister --namespace PROVIDER_NAMESPACE].
   A. COMMAND odregistruje PROVIDER.
   B. OPTION [--namespace PROVIDER_NAMESPACE] vo VALUE [PROVIDER_NAMESPACE] obsahuje nazov PROVIDER.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - STORAGE ACCOUNTS.

1. COMMAND [az storage account list --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vracia zoznam vsetkych STORAGE ACCOUNTS.
   B. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
2. COMMAND [az storage account create --name STORAGE_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --location LOCATION_NAME --sku SKU_TYPE --allow-blob-public-access PUBLIC_ACCESS].
   A. COMMAND vytvara novy STORAGE ACCOUNT.
   B. OPTION [--name STORAGE_ACCOUNT_NAME] vo VALUE [STORAGE_ACCOUNT_NAME] obsahuje nazov STORAGE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--name LOCATION_NAME] vo VALUE [LOCATION_NAME] urcuje LOCATION, kde ma byt RESOURCE GROUP vytvoreny. Prikladom moze byt [polandcentral].
   E. OPTION [--name SKU_TYPE] vo VALUE [SKU_TYPE] urcuje type STOCK KEEPING UNIT.
   F. OPTION [--allow-blob-public-access PUBLIC_ACCESS] vo VALUE [PUBLIC_ACCESS] urcuje ci STORAGE ACCOUNT ma umoznit PUBLIC ACCESS pre BLOB STORAGE.
3. COMMAND [az storage account delete --name STORAGE_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND odstranuje existujuci STORAGE ACCOUNT.
   B. OPTION [--name STORAGE_ACCOUNT_NAME] vo VALUE [STORAGE_ACCOUNT_NAME] obsahuje nazov STORAGE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - AZURE FUNCTIONS.

1. COMMAND [az functionapp list --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vracia zoznam FUNCTION APPS.
   B. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
2. COMMAND [az functionapp create --name FUNCTION_NAME --resource-group RESOURCE_GROUP_NAME --consumption-plan-location LOCATION_NAME --runtime RUNTIME_NAME --functions-version AZURE_FUNCTIONS_VERSION --storage-account STORAGE_ACCOUNT_NAME].
   A. COMMAND vytvara novu AZURE FUNCTION.
   B. OPTION [--name FUNCTION_NAME] vo VALUE [FUNCTION_NAME] obsahuje AZURE FUNCTION NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--consumption-plan-location LOCATION_NAME] vo VALUE [LOCATION_NAME] obsahuje nazov LOCATION.
   E. OPTION [--runtime RUNTIME_NAME] vo VALUE [RUNTIME_NAME] obsahuje nazov AZURE FUNCTIONS RUNTIME.
   F. OPTION [--functions-version AZURE_FUNCTIONS_VERSION] vo VALUE [AZURE_FUNCTIONS_VERSION] obsahuje verziu AZURE FUNCTIONS.
   G. OPTION [--name STORAGE_ACCOUNT_NAME] vo VALUE [STORAGE_ACCOUNT_NAME] obsahuje nazov STORAGE ACCOUNT.
3. COMMAND [az functionapp delete --name FUNCTION_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND odstranuje existujucu AZURE FUNCTION.
   B. OPTION [--name FUNCTION_NAME] vo VALUE [FUNCTION_NAME] obsahuje AZURE FUNCTION NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
4. COMMAND [az functionapp deploy --name FUNCTION_NAME --resource-group RESOURCE_GROUP_NAME --src-path DEPLOY_PATH --type DEPLOY_TYPE --clean CLEAN_DEPLOY].
   A. COMMAND vykonava DEPLOY AZURE FUNCTION BINARY FILES.
   B. OPTION [--name FUNCTION_NAME] vo VALUE [FUNCTION_NAME] obsahuje AZURE FUNCTION NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--src-path DEPLOY_PATH] vo VALUE [DEPLOY_PATH] obsahuje PATH k DEPLOYMENT PACKAGE.
   E. OPTION [--type DEPLOY_TYPE] vo VALUE [DEPLOY_TYPE] obsahuje TYPE k DEPLOYMENT PACKAGE. VALUE [zip] znamena, ze OPTION [--src-path DEPLOY_PATH] musi odkazovat na FILE [.ZIP].
   F. OPTION [--clean CLEAN_DEPLOY] vo VALUE [CLEAN_DEPLOY] urcuje ci sa ma spravit CLEAN DEPLOY.
5. COMMAND [az functionapp keys list --name FUNCTION_NAME --resource-group FUNCTION_NAME].
   A. COMMAND vracia ACCESS KEYS danej AZURE FUNCTION.
   B. OPTION [--name FUNCTION_NAME] vo VALUE [FUNCTION_NAME] obsahuje AZURE FUNCTION NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
6. COMMAND [az functionapp identity assign --name FUNCTION_NAME --resource-group FUNCTION_NAME --identities MANAGED_IDENTITY_ID].
   A. COMMAND prideluje pristup danej MANAGED IDENTITY k AZURE FUNCTION.
   B. OPTION [--name FUNCTION_NAME] vo VALUE [FUNCTION_NAME] obsahuje AZURE FUNCTION NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--identities MANAGED_IDENTITY_ID] vo VALUE [MANAGED_IDENTITY_ID] obsahuje MANAGED IDENTITY ID.
7. COMMAND [az functionapp identity remove --name FUNCTION_NAME --resource-group FUNCTION_NAME --identities MANAGED_IDENTITY_ID].
   A. COMMAND odstranuje pristup danej MANAGED IDENTITY k AZURE FUNCTION.
   B. OPTION [--name FUNCTION_NAME] vo VALUE [FUNCTION_NAME] obsahuje AZURE FUNCTION NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--identities MANAGED_IDENTITY_ID] vo VALUE [MANAGED_IDENTITY_ID] obsahuje MANAGED IDENTITY ID.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - IDENTITY.

1. COMMAND [az identity create --name IDENTITY_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vytvori MANAGED IDENTITY.
   B. OPTION [--name IDENTITY_NAME] vo VALUE [IDENTITY_NAME] obsahuje IDENTITY NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
2. COMMAND [az identity delete --name IDENTITY_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vymaze MANAGED IDENTITY.
   B. OPTION [--name IDENTITY_NAME] vo VALUE [IDENTITY_NAME] obsahuje IDENTITY NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
3. COMMAND [az identity list --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND zobrazuje vsetky MANAGED IDENTITIES.
   B. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
4. COMMAND [az identity show --name IDENTITY_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND zobrazuje informacie o IDENTITY.
   B. OPTION [--name IDENTITY_NAME] vo VALUE [IDENTITY_NAME] obsahuje IDENTITY NAME.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
//----------------------------------------------------------------------------------------------------------------------