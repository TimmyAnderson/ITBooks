//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pracu s textom.
2. CHARACTERS su v CLR VZDY reprezentovane VALUE TYPE [Char] ako 16 BITS VALUES. VALUE TYPE [Char] implementuje INTERFACES [IComparable], [IConvertible], [IComparable<char>] a [IEquatable<char>].
3. VALUE TYPE [Char] ma nasledujuce MEMBERS.
   A. CONSTANT Char.Min obsahuje minimalnu moznu hodnotu CHARACTER (0).
   B. CONSTANT Char.Max obsahuje minimalnu moznu hodnotu CHARACTER (65535).
   C. METHOD Char.Parse() konvertuje STRING na CHARACTER. V pripade ERROR hodi EXCEPTION.
   D. METHOD Char.TryParse() konvertuje STRING na CHARACTER. V pripade ERROR hodi FALSE.
   E. METHODS Char.ToXXX() umoznuju konvertovat CHARACTER na PRIMITIVE TYPE 'XXX'.
   F. METHOD Char.CompareTo() vykona porovnanie THIS CHARACTER a CHARACTER zaslaneho ako PARAMETER. Vracia 1,-1, alebo 0 podla toho, ktory CHARACTER je vacsi.
   G. METHOD Char.Equals() vykona test 2 CHARACTERS na zhodu.
   H. STATIC METHOD Char.ToString() konvertuje CHARACTER na STRING.
   I. STATIC METHOD Char.ToLower() konvertuje CHARACTER na LOWER CASE hodnotu. Pretazena verzia umoznuje definovat aj CUSTOM CULTURE. METHOD Char.ToLowerInvariant() pouzije na konverziu INVARIANT CULTURE.
   J. STATIC METHOD Char.ToUpper() konvertuje CHARACTER na LOWER CASE hodnotu. Pretazena verzia umoznuje definovat aj CUSTOM CULTURE. METHOD Char.ToUpperInvariant() pouzije na konverziu INVARIANT CULTURE.
   K. STATIC METHOD Char.ConvertFromUtf32() konvertuje CHARACTER zadany ako INTEGER v UTF32 na STRING.
   L. STATIC METHOD Char.ConvertToUtf32() konvertuje STRING, alebo dvojicu CHARACTERS na UTF32 hodnotu vyjadrenu ako INTEGER.
   M. STATIC METHOD Char.GetUnicodeCategory() vracia informaciu (TYPE UnicodeCategory) o tom ci dany CHARACTER je cislo, pismeno, specialny znak ci iny typ.
   N. STATIC METHOD Char.IsSurrogatePair() vracia informaciu ci 2 po sebe iduce CHARACTERS tvoria SURROGATE PAIR.
   O. STATIC METHOD Char.IsSurrogate() vracia informaciu ci CHARACTER v zadanej postupnosti (STRING), alebo CHARACTER SAMOTNY reprezentuje SURROGATE CODE UNIT.
   P. METHOD Char.GetCodeType() vracia CODE TYPE (TYPE TypeCode) pre CHARACTER.
   Q. STATIC METHOD Char.GetNumericValue() vracia ciselnu hodnotu (TYPE Double), ktorou je reprezentovany dany CHARACTER.
4. CLR umoznuje vykonat CASTING z hodnoty [Int32] na VALUE TYPE [Char] nasledujucimi sposobmi.
   A. Pri pouziti C# CASTING OPERATOR (na [Int32] aj [Char]) C# generuje MSIL INSTRUCTION realizujucu konverziu, cim sa konverzia stava velmi rychlou.
   B. STATIC METHODS CLASS Convert() umoznuju konverziu medzi [Int32] a [Char]. Kedze sa volaju METHODS, tak konverzia je pomalsia.
   C. METHODS INTERFACE [IConvertible], ktoru TYPE [Char] implementuje umoznuju konverziu medzi [Int32] a [Char]. Kedze dochadza ku vynutenemu BOXING je tato konverzia NAJPOMALSIA.
5. Pre CLASS String platia v CLR nasledujuce fakty.
   A. CLASS String je REFERENCE TYPE vytavarany na HEAP a jeho obsah je IMMUTABLE vdaka comu je CLASS THREAD SAFE.
   B. LITERALS su UKLADANE DO METADATA a CLR podporuje POOLING rovnakych LITERALS.
   C. CLASS String obsahuje OVERRIDEN OPERATOR+, ktory vytvara NOVU INSTANCIU STRING obsahujucu zlucene STRINGS. V pripade skladania 2 LITERALS sa toto zlozenie robi uz v COMPILE TIME.
   !!! D. CLR pouziva pri pristupe k MEMBERS CLASS String SPECIALNU OPTIMALIZACIU, kde pozna PRESNY LAYOUT CLASS String a pristupuje k jednotlivym MEMBER RYCHLEJSIE. To vedie k rychlejsej praci nad instanciami CLASS String, ale zaroven CLASS String musi byt oznacena ako SEALED, aby pripadne DERIVED CLASSES nenarusili niektore predpoklady kladene na CLASS String ako napriklad to, ze je IMMUTABLE.
   E. Pomocou znaku '\XXX' je moze v LITERALS definovat ESCAPE SEQUENCES.
   F. Pri definicii LITERALS je mozne pouzit znak '@', ktory aplikovany pred hodnotu LITERAL zabrani aby C# interpretoval znaky '\XXX' ako ESCAPE SEQUENCES.
   G. LITERAL STRINGS sa nevytvaraju pomcou KEYWORD [new], ale priamym priradenim daneho STRING LITERAL do STRING VARIABLE.
   H. CLASS STRING ma specialne UNSAFE CONSTRUCTORS, ktore umoznuju vytvorit STRING aj z POINTER na CLASS [Char] ci CLASS [SByte].
   I. CLR definuje CONSTANT Environment.NewLine, ktora definuje NEW LINE CHARACTER, ktory je plaformovo nezavisly.
6. CLASS String podporuje rozlicne sposoby porovnania.
   A. ORDINAL je porovnavanie s IGNOROVANIM CULTURE. Porovnavaju sa jednotlive BYTES, aby bol co sa vykonal NAJRYCHLEJSI SPOSOB POROVNANIA.
   B. CULTURE AWARE je porovnanie, ktore berie do uvahy instanciu CLASS Culture, ktora pri porovnani zohladni specifika daneho jazyka.
!!! 7. OPERATORS== a OPERATORS!= porovnavaju STRINGS ORDINAL sposobom.
!!!!! 8. Pri porovnavani CASE INSENSITIVE STRINGS je VYHODNEJSIE vykonat porovnanie v UPPER CASE, pretoze CLR interne pouziva optimalizovany COMPARISIONS v UPPER CASE.
9. Pri CULTURE AWARE porovnani sa aplikuju 2 instancie CultureInfo CLASSES.
   A. CURRENT UI CULTURE (definovana v PROPERTY Thread.CurrentUICulture) je pouzivana GUI PROGRAMS na zobrazovanie textovych informacii v prislusnom jazyku.
   B. CURRENT CULTURE (definovana v PROPERTY Thread.CurrentCulture) je pouzivana pri realizacii operacii nad STRINGS. Urcuje sposob porovnavania, ale aj formatovanie NUMBERS, DATE a TIME.
10. CLASS CultureInfo ma PROPERTY CultureInfo.CompareInfo obsahujucu PROPERTIES a METHODS vykonat CUSTOMIZED porovnavanie pre danu CULTURE.
!!! 11. CLR implementuje mechanizmus STRING INTERNING, ktory umoznuje HASHOVAT TIE ISTE STRINGS (obsahujuce ten isty text) do HASH TABLE, aby ich nebolo potrebne ukladat v MEMORY viac krat, ked je to ten isty STRING.
12. Pre STRING INTERNING platia nasledujuce zasady.
   A. METHOD String.Intern() uklada OBJECT String do HASH TABLE a vracia referenciu na OBJECT String ulozeny do HASH TABLE.
   B. METHOD String.IsInterned() zistuje ci v HASH TABLE je dany OBJECT String a ak ano, tak vrati nan referenciu. Inak vracia NULL, pricom OBJECT String NIE JE ulozeny do HASH TABLE.
   !!! C. CLR INTERNE pouziva STRING INTERNING na ukladanie vsetkych LITERALS pri nacitani ASSEMBLY. Tato vlastnost vsak vedie k SPOMALENIU nacitania ASSEMBLY a preto je tutu moznost mozne vypnut (nie je to VYPNUTIE iba ODPORUCANIE aby sa nepouzivala a je na CLR ci to i respektuje) pomocou ATTRIBUTE [CompilationStringRelaxations].
13. C# COMPILER pri generovani ASSEMBLY METADATA uklada STRING LITERALS tak, ze ZHODNE STRINGS su ulozene IBA RAZ a CODE v ASSEMBLY sa referuje na tieto STRINGS.
!!! 14. Aj ked CLASS String umoznuje pristup k znakom pomocou INDEXERA vracajuceho OBJECT Char, CLASS Char NEDOKAZE REPREZENTOVAT CHARACTERS, ktore su DLHSIE ako 2 BYTES. Sem patria napriklad znaky jazykov z EAST ASIA. Tieto jazyky potrebuju SPECIALNE OSETRENIE pre pracu so STRINGS pomocou CLASS ako StringInfo a CLASS TextElementEnumerator. CLASS TextElementEnumerator enumeruje CHARACTERS, ktore mozu byt DLHSIE ako 2 BYTES. To znaci, ze CHARACTER, ktory ma viac ako 2 BYTES su povazovane za 1 CHARACTER.
15. CLASS StringBuilder reprezentuje MUTABLE STRING, ktory si intene drzi BUFFER CHARACTERS nad ktorymi je mozne robit rozlicne textove operacie. Pre CLASS StringBuilder platia nasledujuce vlastnosti.
   A. CLASS StringBuilder NIE JE na rozdiel od CLASS String PRIMITIVE TYPE a NEMA specialnu optimalizaciu zo strany CLR.
   B. PROPERTY StringBuilder.Capacity definuje POCIATOCNU VELKOST BUFFERA, ktory sa pri zvacseni obsahu textu v StringBuilder dynamicky zvacsi na dvojnasobok povodnej velkosti PROPERTY StringBuilder.Capacity.
   !!! C. Vacsina METHODS CLASS StringBuilder vracia ako RETURN VALUE THIS REFERENCE co umoznuje realizovat CHAINING volani rozlicnych METHODS nad tym istym OBJECT StringBuilder.
   D. Pomocou METHOD StringBuilder.ToString() sa vytvara instancia CLASS String z BUFFER CHARACTERS v CLASS StringBuilder. Aj po prvom zavolani METHOD StringBuilder.ToString() je mozne pracovat s OBJECT StringBuilder a vytvorit dalsie instancie CLASS String.
16. METHOD Object.ToString() je VIRTUAL METHOD, ktora moze byt v DERIVED CLASSES OVERRIDEN vdaka comu mozu OBJECTS vracat CUSTOM reprezentaciu svojej hodnoty.
17. INTERFACE IFormatable umoznuje CULTURE-AWARE formatovanie hodnoty, ktoru reprezentuje dany OBJECT. Pre INTERFACE IFormatable platia nasledujuce zasady.
   A. INTERFACE IFormatable ma jedinu METHOD IFormatable.ToString(), ktora prijima ako parameter okrem FORMAT STRING aj instanciu CLASS IFormatProvider.
   B. FORMAT STRING zaslany do METHOD IFormatable.ToString() obsahuje STRING definujuci sposob formatovania. MS definoval niekolko standardnych STRINGS, no je iba vecou danej CLASS, ktore FORMAT STRINGS definuje. Ak dany STRING METHOD NEPOZNA, tak musi hodit EXCEPTION [FormatException].
   C. INTERFACE IFormatProvider umoznuje, aby formatovanie nebolo zavisle na CULTURE asociovanej s CURRENT THREAD, ale aby sa CULTURE definovala pri volani METHOD IFormatable.ToString().
   D. Vsetky C# PRIMITIVE TYPES implementuju INTERFACE IFormatProvider.
18. INTERFACE IFormatProvider umoznuje, aby definovat formatovanie, ktore NIE JE zavisle na CULTURE asociovanej s CURRENT THREAD, ale na CULTURE informaciach, ktore vrati METHOD IFormatProvider.GetFormat(). Pre INTERFACE IFormatProvider platia nasledujuce fakty.
    A. INTERFACE IFormatProvider ma jedinu METHOD IFormatProvider.GetFormat().
	B. METHOD IFormatProvider.GetFormat() by mala vracat instanciu TYPE, ktoreho Type OBJECT je zaslany ako PARAMETER METHOD.
	C. Sucasna verzia CLR vola METHOD METHOD IFormatProvider.GetFormat() iba s PARAMETERS TYPU NumberFormatInfo a DateTimeFormatInfo.
	D. INTERFACE IFormatProvider implementuju iba TYPES CultureInfo, NumberFormatInfo a DateTimeFormatInfo.
!!! 19. METHOD String.Format() umoznuje formatovanie viacerych OBJECTS do jedneho STRING. Pomocou SYNTAXE [{X:Y}] umoznuje pre PARAMETER s poradovym cislom 'X' definovat FORMAT 'Y'. Pretazena verzia METHOD umoznuje prijimat aj implementaciu INTERFACE IFormatProvider.
!!! 20. METHODS String.Format() a StringBuilder.AppendFormat() podporuju CUSTOM FORMATTING realizovany implementaciou INTERFACE ICustomFormatter. Pre INTERFACE ICustomFormatter platia nasledujuce fakty.
   A. INTERFACE ICustomFormatter umoznuje CUSTOMIZOVAT formatovanie TOKENOV (PARAMTERS {X}) pri volani METHODS String.Format() a StringBuilder.AppendFormat().
   B. INTERFACE ICustomFormatter definuje METHOD ICustomFormatter.Format(), ktora je volana pri formatovani KAZDEHO TOKEN v METHODS String.Format() a StringBuilder.AppendFormat().
   C. MEHTOD ICustomFormatter.Format() teda umoznuje OSOBITNE formatovat KAZDY TOKEN vo FORMAT STRING, ktory je zaslany do METHODS String.Format() a StringBuilder.AppendFormat().
   D. METHOD ICustomFormatter.Format() okrem 2. PARAMETER obsahujuceho hodnotu, ktora ma byt substituovana za TOKEN obsahuje ako 1. PARAMETER FORMAT TOKEN a ako 3. PARAMETER INTERFACE IFormatProvider.
21. Vacsina PRIMITIVE TYPES, ako aj niektore zakladne TYPES ako [Guid], alebo [DateTime] podporuju PARSING STRING na dany TYPE. Zvycajne su podporovane danym typom 2 STATIC METHODS.
   A. METHOD XXX.Parse() sa pokusi vykonat PARSING a ak nezbehne tak hodi EXCEPTION.
   B. METHOD XXX.TryParse() sa pokusi vykonat PARSING a ak nezbehne tak hodi FALSE.
22. METHODS XXX.Parse() a XXX.TryParse() maju pre NUMBER TYPES PARAMETER TYPE [NumberStyles], ktory umoznuje urcit styl podla ktoreho sa bude PARSING vykonavat. Podobne aj METHODS XXX.Parse() a XXX.TryParse() pre TYPE DateTime maju PARAMETER TYPE [DateTimeStyles] urcujucim sposob formatovania VALUE TYPE [DateTime]. VALUE TYPE [DateTime] ma aj METHOD DateTime.ExactParse(), ktora realizuje rigidnejsiu kontrolu pri PARSINGU.
23. ENCODING a DECODING STRINGS je zavisly od toho ktory ENCODER (CLASS DERIVES z CLASS Encoding) sa pouzije. CLR definuje nasledujuce moznosti ENCODERS.
   A. ENCODER UTF-8 (CLASS UTF8Encoding) je STANDARDNY FORMAT, ktory pre znaky s hodnotou <0,127> pouziva 1 BYTE, pre znaky s hodnotou <128,65535> pouziva 2 BYTES, pre znaky s hodnotou <65536,16777215> pouziva 3 BYTES a pre ostatne znaky 4 BYTES. Teda jedna sa o format s PREMENLIVOU DLZKOU CHARACTER.
   B. ENCODER UTF-16 (CLASS UTF16Encoding) pouziva KONSTANTNU DLZKU 16 BITS pre kazdy CHARACTER.
   C. ENCODER UTF-32 (CLASS UTF32Encoding) pouziva KONSTANTNU DLZKU 32 BITS pre kazdy CHARACTER.
   D. ENCODER UTF-7 (CLASS UTF7Encoding) pouziva KONSTANTNU DLZKU 7 BITS pre kazdy CHARACTER. NEODPORUCA sa POUZIVAT.
   E. ENCODER ASCII (CLASS ASCIIEncoding) pouziva KONSTANTNU DLZKU 8 BITS pre kazdy CHARACTER.
!!! 24. Pre CLASS Encoding realizujucu ENCODING a DECODING STRINGS platia nasledujuce zasady.
   A. CLASS Encoding je BASE CLASS z ktorej dedia CLASSES ako UnicodeEncoding (pre UTF-16), UTF32Encoding, UTF8Encoding, UTF7Encoding a ASCIIEncoding.
   B. CLASS Encoding obsahuje STATIC PROPERTIES, ako Encoding.ASCII, alebo Encoding.UTF16 s ktorych je mozne ziskat instanciu prislusnej Encoding CLASS bez nutnosti ju vytvarat.
   !!! C. Ak je nutne realizovat ENCODING a DECODING STRINGS pre specificku CODE PAGE je mozne vytvorit instanciu Encoding CLASS bud pomocou CONSTRUCTOR, ktory prijima ako PARAMETER INTEGER hodnodu CODE PAGE, alebo pouzit STATIC METHOD Encoding.GetEncoding().
   !!! D. Pouzitie STATIC PROPERTIES a STATIC METHOD Encoding.GetEncoding() na vytvorenie instancie CLASS Encoding je EFEKTIVNEJSIE ako pouzitie CONSTRUCTORS, pretoze ak uz pre danu CODE PAGE (ENCODING) bola instancia CLASS Encoding vytvorena, tak sa vracia tak ista instancia a nevytvara sa zbytocne dalsia.
   E. METHODS Encoding.GetBytes(), Encoding.GetChars() a Encoding.GetString() sluzia na konverovanie medzi polom BYTES, polom CHARS a STRING hodnotami.
   F. METHOD Encoding.GetCharCount() vracia pocet CHARS v poli BYTES. METHOD je pomala, lebo musi prechadzat celym STRING.
   G. METHOD Encoding.GetByteCount() vracia pocet BYTES v poli CHARS, alebo STRING. METHOD je pomala, lebo musi prechadzat celym STRING.
   H. METHOD Encoding.GetMaxByteCount() vracia MAXIMALNY POCET BYTES potrebnych pre ulozenie daneho poctu CHARS. METHOD je velmi rychla, lebo nemusi prechadzat celym STRING.
   I. METHOD Encoding.GetMaxCharCount() vracia MAXIMALNY POCET CHARS ktore je mozne ulozit do pola BYTES o zadanej dlzke. METHOD je velmi rychla, lebo nemusi prechadzat celym STRING.
   J. METHOD Encoding.GetPreamble() vracia PREAMBULU na zaklade ktorej je pri citani STRING mozne detekovat aky ENCODING bol pouzity.
   K. STATIC METHOD Encoding.Convert() konvertuje BYTE ARRAY zo SOURCE ENCODING na BYTE ARRAY do DESTINATION ENCODING.
   !!! L. METHOD Encoding.GetEncoder() vracia instanciu CLASS Encoder, ktora pri kodovani pouziva INTERNY BUFFER a do METHOD Encoder.GetBytes() vlozi tolko CHARACTERS, ze ak sa do BYTE ARRAY, kde ma byt vysledok ENCODING NEZMESTI CELY POSLEDNY CHARACTER, tak zbytok je ulozeny do INTERNEHO BUFFERA CLASS Encoder a NASLEDNE VOLANIE METHOD Encode.GetBytes() priradi tento zbytok k CHARACTERS druheho volania METHOD Encoder.GetBytes().
   !!! M. METHOD Encoding.GetDecoder() vracia instanciu CLASS Decoder, ktora pri kodovani pouziva INTERNY BUFFER a do METHOD Decoder.GetChars() vlozi tolko BYTES, ze ak posledny CHARACTER NIE JE KOMPLETNY, tak sa tieto BYTES ulozia do INTERNEHO BUFFERA a pri NASLEDUJUCOM VOLANI METHOD Decoder.GetBytes() sa pridaju na zaciatok. CLASS sa vyuziva pri praci so STREAMS, kde nejaky DATA CHUNK NEMUSI obsahovat na konci CELY CHARACTER, ale iba fragment.
25. CLASS Encoder ma nasledujuce MEMBERS.
   A. METHOD Encoder.GetBytes() vykonava ENCODING STRING. Pouziva pri tom INTERNY BUFFER, ktory ak neobsahuje kompletny CHARACTER na svojom konci nevykona ENCODING posledneho CHARACTER, ale necha ho v INTERNOM BUFFER az kym sa do INTERNEHO BUFFER neulozia dalsie BYTES a opatovne sa nezavola METHOD Encoder.GetBytes().
   B. METHOD Encoder.GetByteCount() vracia pocet BYTES, do ktorych sa po vykonani ENCODING zadaneho CHAR ARRAY (je zadany ako PARAMETER) ma ulozit ENCODED STRING.
   C. METHOD Encoder.Convert() vykonava ENCODING STRING. Pouziva pri tom INTERNY BUFFER.
   D. METHOD Encoder.Reset() vymaze INTERNY BUFFER.
26. CLASS Decoder ma nasledujuce MEMBERS.
   A. METHOD Decoder.GetChars() vykonava DECODING STRING. Pouziva pri tom INTERNY BUFFER, ktory ak neobsahuje kompletny CHARACTER na svojom konci nevykona DECODING posledneho CHARACTER, ale necha ho v INTERNOM BUFFER az kym sa do INTERNEHO BUFFER neulozia dalsie CHARACTERS a opatovne sa nezavola METHOD Decoder.GetChars().
   B. METHOD Decoder.GetCharCount() vracia pocet CHARACTERS, do ktorych sa po vykonani DECODING zadaneho BYTE ARRAY (je zadany ako PARAMETER) ma ulozit DECODED STRING.
   C. METHOD Decoder.Convert() vykonava DECODING STRING. Pouziva pri tom INTERNY BUFFER.
   D. METHOD Decoder.Reset() vymaze INTERNY BUFFER.
27. BASE-64 ENCODING je mozne pouzivat pomocou nasledujucich STATIC METHOD CLASS Convert.
   A. STATIC METHOD Convert.ToBase64String() vykonava ENCODING BYTE ARRAY do STRING ENCODED v BASE-64.
   B. STATIC METHOD Convert.ToBase64CharArray() vykonava ENCODING BYTE ARRAY do CHAR ARRAY ENCODED v BASE-64.
   C. STATIC METHOD Convert.FromBase64String() vykonava DECODING STRING ENCODED v BASE-64 do BYTE ARRAY.
   D. STATIC METHOD Convert.FromBase64CharArray() vykonava DECODING CHAR ARRAY ENCODED v BASE-64 do BYTE ARRAY.
!!! 28. CLASS SecureString umoznuje pracovat so SECURITY SENSITIVE datami a to tym sposobom, ze obsah STRING je ulozene v ENCRYPTED FORM v UNMANAGED MEMORY. Pri praci s TEXT moze vykonat jeho DECRYPTION, avsak iba pocas trvania volania METHOD tejto CLASS. CLASS ma nasledujuce vlastnosti.
   A. CLASS SecureString pouziva interne UNMANAGED BUFFER do ktoreho uklada text v ENCRYPTED FORM.
   !!! B. Kedze CLASS SecureString pouziva UNMANAGED BUFFER, implementuje IDisposable, ktorej METHOD IDispose.Dispose() nielen, ze uvolni UNMANAGED BUFFER, ale ho aj NASTAVI na hodnoty 0.
   !!! C. Vsetky METHODS CLASS SecureString, ktore menia jeho obsah POCAS SVOJHO BEHU vykonaju DECRYPTION daneho TEXT, nasledne ho modifikuju a znova vykonaju jeho ENCRYPTION. Text v DECRYPTED podobe je teda v MEMORY iba VELMI KRATKY CAS.
   D. CLASS Marshal obsahuje mnozstvo METHODS, ktore umoznuju konverziu z CLASS SecureString do CLASSES String ci BSTR. Takisto obsahuje METHODS na NULOVANIE UNMANAGED BUFFERA, ktore by sa mali pouzivat pri odstraneni UNMANAGED BUFFER do ktoreho pri praci s CLASS SecureString je zvycajne ukladany DECRYPTED TEXT ak s nim je nutne pracovat (napriklad vypisat ho na konzolu).
29. CLASS SecureString ma nasledujude MEMBERS.
   A. PROPERTY SecureString.Length vracia pocet CHARACTERS v CLASS SecureString.
   B. METHOD SecureString.Dispose() uvolnuje UNMANAGED BUFFER, ktory CLASS SecureString a zaroven vycisti MEMORY.
   C. METHOD SecureString.AppendChar() pridava CHARACTER do STRING.
   D. METHOD SecureString.InsertAt() vklada CHARACTER do STRING na urcenu poziciu.
   E. METHOD SecureString.RemoveAt() odstranuje CHARACTER zo STRING z urcenej pozicie.
   F. METHOD SecureString.SetAt() nastavuje CHARACTER v STRING na urcenej pozicii.
   G. METHOD SecureString.Clear() vymazava STRING.
   H. METHOD SecureString.Copy() kopiruje STRING.
   I. METHOD SecureString.MakeReadOnly() spravi zo STRING READ ONLY STRING.
   J. METHOD SecureString.IsReadOnly() indikuje ci STRING je READ ONLY STRING.
//-------------------------------------------------------------------------------------------------------