using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Helpers;
//----------------------------------------------------------------------------------------------------------------------
namespace LINQQueries
{
//----------------------------------------------------------------------------------------------------------------------
	public sealed class CLogIterator<TType> : IEnumerator<TType>, IEnumerable<TType>
	{
//----------------------------------------------------------------------------------------------------------------------
		private readonly IEnumerable<TType>						MEnumerable;
		private readonly string									MText;
//----------------------------------------------------------------------------------------------------------------------
		private IEnumerator<TType>								MEnumerator;
		private TType											MCurrent;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public CLogIterator(IEnumerable<TType> Enumerable, string Text)
		{
			MEnumerable=Enumerable;
			MText=Text;
		}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public TType											Current
		{
			get
			{
				return(MCurrent);
			}
		}
//----------------------------------------------------------------------------------------------------------------------
		object													IEnumerator.Current
		{
			get
			{
				return(MCurrent);
			}
		}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public bool MoveNext()
		{
			if (MEnumerator==null)
			{
				CConsoleHelpers.WriteLine($"ITERATOR [{MText}] - ITERATION STARTED !",ConsoleColor.Green);

				MEnumerator=MEnumerable.GetEnumerator();
			}

			if (MEnumerator.MoveNext()==true)
			{
				MCurrent=MEnumerator.Current;

				CConsoleHelpers.WriteLine($"ITERATOR [{MText}] - VALUE [{MCurrent}] !",ConsoleColor.Green);

				return(true);
			}
			else
			{
				Dispose();

				CConsoleHelpers.WriteLine($"ITERATOR [{MText}] - ITERATION FINISHED !",ConsoleColor.Green);

				return(false);
			}
		}
//----------------------------------------------------------------------------------------------------------------------
		public void Reset()
		{
			MEnumerator.Reset();
		}
//----------------------------------------------------------------------------------------------------------------------
		public void Dispose()
		{
			IDisposable											Disposable=(MEnumerator as IDisposable);

			if (Disposable!=null)
			{
				Disposable.Dispose();
			}

			MEnumerator=null;
		}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public IEnumerator<TType> GetEnumerator()
		{
			return(this);
		}
//----------------------------------------------------------------------------------------------------------------------
		IEnumerator IEnumerable.GetEnumerator()
		{
			return(this);
		}
//----------------------------------------------------------------------------------------------------------------------
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------