//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje CLASS HIERARCHIES v C++.
2. CLASS HIERARCHIES mozu byt v C++ dizajnovane viacerymi sposobmni.
   A. IMPLEMENTATION INHERITANCE.
   B. INTERFACE INHERITANCE.
3. Pre IMPLEMENTATION INHERITANCE platia nasledujuce fakty.
   A. Pri IMPLEMENTATION INHERITANCE BASE CLASS definuje FIELDS a VIRTUAL METHODS ku ktorym mozu DERIVED CLASSES pristupovat.
   B. FIELDS, ktore su definovane ako PROTECTED mozu DERIVED CLASSES PRIAMO MODIFIKOVAT.
   C. NEVYHODOU IMPLEMENTATION INHERITANCE je, ze ak BASE CLASS je zavisla na konkretnej LIBRARY, potom IMPLEMENTATION DETAILS dedi cela CLASS HIERARCHY, cim vznika vazba medzi CLASS HIERARCHY a IMPLEMENTATION DETAILS pouzitej LIBRARY. Zmena v pouzitej LIBRARY moze vynutit kaskadovitu zmenu CLASSES v CLASS HIERARCHY.
   D. NEVYHODOU IMPLEMENTATION INHERITANCE je aj moznost (niekedy nutnost) menit FIELDS BASE CLASSES. Vysledkom je CODE, ktory je nachylny na chyby, pretoze DERIVED CLASSES menia FIELDS v BASE CLASSES, ktore mozu byt kontextovo zavisle.
   E. NEVYHODOU IMPLEMENTATION INHERITANCE je ze definovanim FIELDS v BASE CLASS su tieto FIELDS definovane v kazdej DERIVED CLASS. To vytvara vysoku mieru implementacnej zavislosti na BASE CLASS. Ak napriklad DERIVED CLASS vie hodnoty FIELDS vypocitat v RUNTIME a nemusi ich ukladat do FIELDS, je definovanie FIELDS v BASE CLASS zbytocne.
   F. NEVYHODOU IMPLEMENTATION INHERITANCE je nutnost vykonat kompilaciu vzdy ked sa zmeni BASE CLASS.
4. Pre INTERFACE INHERITANCE platia nasledujuce fakty.
   A. DERIVED CLASSES maju VIACERO BASES CLASSES.
   B. BASE CLASSES, ktore reprezentuju abstrakciu su implementovane ako PURE VIRTUAL CLASSES, ktore maju iba PURE VIRTUAL METHODS. Tieto BASE CLASSES su DERIVED ako PUBLIC INHERITANCE.
   C. BASE CLASSES, ktore reprezentuju IMPLEMENTATION DETAILS su DERIVED ako PROTECTED, alebo PRIVATE INHERITANCE.
   D. VYHODOU INTERFACE INHERITANCE je, ze IMPLEMENTATION DETAILS su zakryte v CLASSES, ktore NIE SU PRISTUPNE z CLIENT CODE, cim sa ZNIZUJE zavislost CLIENT CODE na IMPLEMENTATION DETIALS ako je napriklad typ LIBRARY, ktoru CLASS HIERARCHY na implementaciu IMPLEMENTATION DETIALS pouziva. CLIENT CODE pracuje IBA s METHODS, ktore reprezentuju ABSTRAKCIU a NIE IMPLEMENTATION DETAILS.
   E. NEVYHODOU INTERFACE INHERITANCE je, ze IMPLEMENTATION DETAILS su na niektorej vrstve CLASS HIERARCHY predsa len ukryte a modifikacia LIBRARY implementujucej IMPLEMENTATION DETAILS vyzaduje zmenu ABSTRAKTNEJ CLASS HIERARCHY.
5. Vytvaranie instancii CLASSES, ktore obsahuju IMPLEMENTATION DETAILS by malo byt v CODE co najviac lokalizovane, aby zavislost na IMPLEMENTATION DETAILS bola co najviac limitovana. Riesenim je definovanie FACTORY CLASSES, ktore vytvaraju instancie konkretnych CLASSES a jedine CODE tychto FACTORY CLASSES obsahuje vytvarnie intancii CLASSES obsahujucich IMPLEMENTATION DETAILS.
6. MULTIPLE INHERITANCE je INHERITANCE, ked CLASS je PRIAMO DERIVED z VIACERYCH BASE CLASSES. MULTIPLE INHERITANCE existuje v 2 verziach.
   A. MULTIPLE INTERFACE INHERITANCE. Pri tejto verzii MULTIPLE INHERITANCE je CLASS DERIVED z viacerych INTERFACES. INTERFACE reprezentuje CLASS, ktora ma IBA PURE VIRTUAL METHODS.
   B. MULTIPLE IMPLEMENTATION INHERITANCE. Pri tejto verzii MULTIPLE INHERITANCE je CLASS DERIVED z viacerych CLASSES. CLASSES obsahuju FIELDS a NON-VIRTUAL METHODS.
!!! 7. Ak DERIVED CLASS ma viacero BASE CLASSES, pricom BASE CLASSES maju METHODS s ROVNAKYM PROTOTYPE, potom tieto METHODS BASE CLASSES je mozne volat pomocou SYNTAXE [BASE_CLASS_NAME::METHOD_NAME()]. Tuto SYNTAX je mozne pouzit ako v DERIVED CLASSES, tak aj v CALLER CLASSES, ktore DERIVED CLASSES vyuzivaju. Ak sa pouzije [BASE_CLASS_NAME::METHOD_NAME()] pricom BASE CLASS 'BASE_CLASS_NAME' NEOBSAHUJE METHOD 'METHOD_NAME()' potom C++ skusi hladat tuto METHOD v BASE CLASSES CLASS 'BASE_CLASS_NAME'. Ak niektora z nich obsahuje METHOD 'METHOD_NAME()', tak sa zavola tato METHOD. Inak COMPILER hodi ERROR.
!!! 8. Ak DERIVED CLASS ma viacero BASE CLASSES, pricom tieto BASE CLASSES su INHERITED z ROVNAKEJ CLASS 'XXX', potom C++ umoznuje definovat CLASS HIERARCHY ked sa CLASS 'XXX' bude nachadzat v CLASS HIERARCHY VIACKRAT, alebo iba RAZ.
   A. NON-VIRTUAL INHERITANCE je INHERITANCE, kedy v CLASS HIERARCHY sa vytvara pre KAZDU VETVU VLASTNA INSTANCIA CLASS 'XXX'. To znamena, ze KAZDA VETVA CLASS HIERARCHY bude mat VLASTNU INSTANCIU CLASS 'XXX', ktore su navzajom NEZAVISLE.
   B. VIRTUAL INHERITANCE je INHERITANCE, kedy v CLASS HIERARCHY sa IBA 1 INSTANCIA CLASS 'XXX'. To znamena, ze v CLASS HIERARCHY existuje iba 1 INSTANCIA CLASS 'XXX', ktora je SPOLOCNA pre VSETKY VETVY CLASS HIERARCHY.
9. VIRTUAL INHERITANCE sa definuje aplikovanim KEYWORD [virtual] pri specifikovani INHERITANCE v deklaracii CLASS.
10. VIRTUAL INHERITANCE umoznuje, aby vsetky instancie BASE CLASS ak su v CLASS HIERARCHY dedene viacerymi vetvami CLASS HIERARCHY boli zlucene do SPOLOCNEJ INSTANCIE. Ak napriklad CLASS 'CDerived' dedi z CLASS 'CBase1' a CLASS 'CBase2', pricom CLASS 'CBase1' aj CLASS 'CBase2' dedia z CLASS 'CSharedBase', tak pri aplikovani VIRTUAL INHERITANCE v CLASS CLASS 'CBase1' a CLASS 'CBase2' sa OBE INSTANCIE CLASS 'CSharedBase' ZLUCENE do 1 INSTANCIE, ktora je SPOLOCNA pre CELU CLASS HIERARCHY.
!!!!! 11. Pri pouziti VIRTUAL INHERITANCE je NEVYHUTNE, aby ak v DEDICSKEJ HIERARCHII niektora VETVA PRETAZUJE VIRTUAL METHOD XXX() a v INEJ VETVE NEPRETAZUJE VIRTUAL METHOD XXX(), tak MOST DERIVED CLASS MUSI PRETAZIT XXX(), inak COMPILER hodi ERROR, pretoze nevie jednoznacne urcit, ktoru METHOD ma volat.
!!! 12. Ak BASE CLASS, ktora je DERIVED pomocou VIRTUAL INHERITANCE VIACERYMI VETVAMI CLASS HIERARCHY na NON-DEFAULT CONSTRUCTOR, tak tento je z MOST DERIVED CLASS NEVYHNUTNE EXPLICITNE VOLAT. CONSTRUCTOR BASE CLASS sa vola IBA RAZ. Podobne aj BASE CLASS DESTRUCTOR sa vola IBA RAZ.
!!!!! 13. Pri pouziti VIRTUAL INHERITANCE kazda DERIVED CLASS, ktora je DERIVED z BASE CLASS pomocou VIRTUAL INHERITANCE obsahuje INDEX odkazujuci na tuto BASE CLASS, ktora je SHARED medzi VIACERYMI vetvami CLASS HIERARCHY.
14. Ak sa pouziva VIRTUAL INHERITANCE pri METHOD OVERRIDING platia nasledujuce pravidla.
   A. CLASSES, ktore su DERIVED cez VIRTUAL INHERITANCE mozu vykonat METHOD OVERRIDING rozlicnych METHODS. To znaci, ze napriklad ak CLASS 'CBase1' aj CLASS 'CBase2' su DERIVED z CLASS 'CSuperBase', ktora definuje METHOD AAA() a METHOD BBB(), tak CLASS 'CBase1' moze vykonat OVERRIDING METHOD AAA() a CLASS 'CBase2' moze vykonat OVERRIDING METHOD BBB().
   B. CLASSES, ktore su DERIVED cez VIRTUAL INHERITANCE mozu vykonat METHOD OVERRIDING rovnakych METHODS, no MOST DERIVED CLASS MUSI taktiez vykonat METHOD OVERRIDING tychto METHODS, inak COMPILER hodi ERROR, kedze nedokaze JEDNOZNACNE urcit, ktoru METHOD ma volat. To znaci, ze napriklad ak CLASS 'CBase1' aj CLASS 'CBase2' su DERIVED z CLASS 'CSuperBase', ktora definuje METHOD CCC(), pricom ako CLASS 'CBase1', tak aj CLASS 'CBase2' vykonavaju OVERRIDING METHOD CCC(), potom CLASS 'CDerived', ktora je DERIVED z CLASS 'CBase1' a CLASS 'CBase2' MUSI vykonat OVERRIDING METHOD CCC(), inak COMPILER hodi ERROR.
15. CLASSES, ktore pri pouziti VIRTUAL INHERITANCE vykonavaju METHOD OVERRIDING iba NIEKTORYCH METHODS sa nazyvaju MIXINS.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
Priklad pouzitia NON-VIRTUAL INHERITANCE.

1. CLASS 'CBase' predstavuje BASE CLASS.
2. CLASS 'CBase1' dedi z CLASS 'CBase'.
3. CLASS 'CBase2' dedi z CLASS 'CBase'.
4. CLASS 'CDerived' dedi z CLASS 'CBase1' a CLASS 'CBase2'.
!!! 5. Kedze sa NEPOUZILA VIRTUAL INHERITANCE, tak CLASS 'CDerived' bude obsahovat 2 INSTANCIE 'CBase', jednu DERIVED z CLASS 'CBase1' a druhu z DERIVED z CLASS 'CBase2'.
//-------------------------------------------------------------------------------------------------------
Priklad pouzitia VIRTUAL INHERITANCE.

1. CLASS 'CBase' predstavuje BASE CLASS.
2. CLASS 'CBase1' VIRTUALNE dedi z CLASS 'CBase'.
3. CLASS 'CBase2' VIRTUALNE dedi z CLASS 'CBase'.
4. CLASS 'CDerived' dedi z CLASS 'CBase1' a CLASS 'CBase2'.
!!! 5. Kedze sa POUZILA VIRTUAL INHERITANCE, tak CLASS 'CDerived' bude obsahovat iba JEDNU INSTANCIU CLASS 'CBase'.
//-------------------------------------------------------------------------------------------------------
Vplyv VIRTUAL INHERITANCE na velkost CLASSES.

1. CLASS 'CClassSizeSuperBase' ma FIELDS o dlzke 8 BYTES a ma VIRTUAL DESTRUCTOR.
2. CLASS 'CClassSizeBase1' ma FIELDS o dlzke 16 BYTES a je VIRTUALLY DERIVED z CLASS 'CClassSizeSuperBase'.
3. CLASS 'CClassSizeBase2' ma FIELDS o dlzke 24 BYTES a je VIRTUALLY DERIVED z CLASS 'CClassSizeSuperBase'.
4. CLASS 'CClassSizeDerived' ma FIELDS o dlzke 32 BYTES a je DERIVED z CLASS 'CClassSizeBase1' a CLASS 'CClassSizeBase2'.
5. CLASS 'CClassSizeSuperBase' ma celkovu dlzku 16 BYTES, ktoru tvoria nasledujuce ITEMS.
   A. Velkost FIELDS CLASS 'CClassSizeSuperBase' je 8 BYTES.
   B. Velkost POINTER na VIRTUAL METHODS TABLE je 8 BYTES. POINTER na VIRTUAL METHODS TABLE je nevyhnutny, pretoze CLASS 'CClassSizeSuperBase' ma VIRTUAL DESTRUCTOR a tym padom MUSI mat POINTER na VIRTUAL METHODS TABLE.
6. CLASS 'CClassSizeBase1' celkovu dlzku 40 BYTES, ktoru tvoria nasledujuce ITEMS.
   A. Velkost FIELDS CLASS 'CClassSizeSuperBase' je 8 BYTES.
   !!! B. Velkost INDEX na SHARED INSTANCE CLASS 'CClassSizeSuperBase', ktora je VIRTUALLY DERIVEDz CLASS 'CClassSizeBase1' je 8 BYTES.
   C. Velkost FIELDS CLASS 'CClassSizeBase1' je 16 BYTES.
   D. Velkost POINTER na VIRTUAL METHODS TABLE je 8 BYTES.
7. CLASS 'CClassSizeBase2' celkovu dlzku 48 BYTES, ktoru tvoria nasledujuce ITEMS.
   A. Velkost FIELDS CLASS 'CClassSizeSuperBase' je 8 BYTES.
   !!! B. Velkost INDEX na SHARED INSTANCE CLASS 'CClassSizeSuperBase', ktora je VIRTUALLY DERIVED z CLASS 'CClassSizeBase2' je 8 BYTES.
   C. Velkost FIELDS CLASS 'CClassSizeBase2' je 24 BYTES.
   D. Velkost POINTER na VIRTUAL METHODS TABLE je 8 BYTES.
8. CLASS 'CClassSizeDerived' celkovu dlzku 104 BYTES, ktoru tvoria nasledujuce ITEMS.
   !!! A. Velkost FIELDS CLASS 'CClassSizeSuperBase' je 8 BYTES. Instancia CLASS 'CClassSizeSuperBase' je SHARED a nachadza sa v CLASS HIERARCHY IBA RAZ.
   B. Velkost FIELDS CLASS 'CClassSizeBase1' je 16 BYTES.
   !!! C. Velkost INDEX na SHARED INSTANCE CLASS 'CClassSizeSuperBase', ktora je VIRTUALLY DERIVED z CLASS 'CClassSizeBase1' je 8 BYTES.
   D. Velkost FIELDS CLASS 'CClassSizeBase2' je 24 BYTES.
   !!! E. Velkost INDEX na SHARED INSTANCE CLASS 'CClassSizeSuperBase', ktora je VIRTUALLY DERIVED z CLASS 'CClassSizeBase2' je 8 BYTES.
   F. Velkost FIELDS CLASS 'CClassSizeSuperBase' je 32 BYTES.
   G. Velkost POINTER na VIRTUAL METHODS TABLE je 8 BYTES.
//-------------------------------------------------------------------------------------------------------