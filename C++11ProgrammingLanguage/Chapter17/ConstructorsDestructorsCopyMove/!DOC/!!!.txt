//-----------------------------------------------------------------------------
1. Solution demonstruje CONSTRUCTORS, DESTRUCTORS, COPY OPERATORS a MOVE OPERATORS.
2. CONSTRUCTORS sluzia na inicializaciu FIELDS, ktore dana CLASS obsahuje.
3. DESTRUCTORS sluzia na uvolnenie obsahu FIELDS, ktore dana CLASS obsahuje.
4. Pre CONSTRUCTORS platia nasledujuce fakty.
   A. CONSTRUCTOR je METHOD, ktora sluzi na inicializaciu OBJECT.
   B. CONSTRUCTOR ma nazov zhodny s nazvom CLASS, v ktorej je definovany.
   C. CONSTRUCTOR moze mat <0,N> PARAMETERS.
   D. CONSTRUCTOR NEMA specifikovanu RETURN VALUE.
   !!!!! E. Ak CONSTRUCTOR hodi EXCEPTION, C++ NEZAVOLA DESTRUCTOR daneho OBJECT iba uvolni MEMORY, ktory alokoval pre dany OBJECT.
5. Pre DESTRUCTORS platia nasledujuce fakty.
   A. DESTRUCTOR je METHOD, ktora sluzi na uvolnenie FIELDS daneho OBJECT.
   B. DESTRUCTOR ma NAME, ktory sa sklada z PREFIXU '~' a nazvu CLASS ktorej je definovany.
   C. DESTRUCTOR MUSI mat 0 PARAMETERS.
   D. DESTRUCTOR NEMA specifikovanu RETURN VALUE.
   E. CLASS moze definovat MAXIMALNE 1 DESTRUCTOR.
   F. DESTRUCTOR je volany IMPLICITNE, ked platnost VARIABLE reprezentujucej OBJECT skonci.
   !!! G. DESTRUCTOR MOZE byt volany EXPLICTNE pomocou FUNCTION CALL SYNTAX.
   !!!!! H. Ak sa DESTRUCTOR zavola EXPLICITNE pomocou FUNCTION CALL SYNTAX, tak DESTRUCTOR vola aj VSETKY PARENT CLASSES DESTRUCTORS a DESTRUCTORS VSETKYCH FIELDS.
   !!! I. DESTRUCTORS mozu byt oznacene ako VIRTUAL. VIRTUAL DESTRUCTORS sa volaju VIRTUALNE, rovnako ako VIRTUAL METHODS.
6. V CLASS HIERARCHY su CONSTRUCTORS jednotlivych CLASSES volane v nasledujucom poradi.
   A. CONSTRUCTOR vola CONSTRUCTORS VSETKYCH BASE CLASSES, pricom CONSTRUCTORS VIRTUAL BASE CLASSES su volane VZDY pred ich PRVYM POUZITIM v CLASS HIERARCHY.
   B. CONSTRUCTOR vola CONSTRUCTORS VSETKYCH FIELDS v poradi v akom su FIELDS DEKLAROVANE v CLASS.
   C. CONSTRUCTOR vykona svoje BODY.
7. V CLASS HIERARCHY su DESTRUCTORS jednotlivych CLASSES volane v nasledujucom poradi.
   A. DESTRUCTOR vykona svoje BODY.
   B. DESTRUCTOR vola DESTRUCTORS VSETKYCH FIELDS v OPACNOM poradi v akom su FIELDS DEKLAROVANE v CLASS.
   C. DESTRUCTOR vola DESTRUCTORS VSETKYCH BASE CLASSES, pricom DESTRUCTORS VIRTUAL BASE CLASSES su volane VZDY po ich PO POSLEDNOM POUZITI v CLASS HIERARCHY.
!!! 8. C++ umoznuje volat CONSTRUCTORS pomocou PLACEMENT NEW SYNTAX. Pre PLACEMENT NEW SYNTAX platia nasledujuce fakty.
   A. PLACEMENT NEW SYNTAX ma SYNTAX [new(BUFFER) XXX(PARAMETERS)], kde 'BUFFER' reprezentuje RAW MEMORY, kde bude vytvoreny OBJECT ulozeny, 'XXX' je nazov CLASS a 'PARAMETERS' su PARAMETERS volaneho CONSTRUCTOR.
   !!! B. Pri PLACEMENT NEW SYNTAX sa NEALOKUJE ZIADNA MEMORY. MEMORY musi byt alokovana EXPLICITNE v CODE, ktory vola PLACEMENT NEW SYNTAX.
   !!! C. Pri PLACEMENT NEW SYNTAX sa NEVOLA IMPLICITNE DESTRUCTOR vytvoreneho OBJECT. DESTRUCTOR je nutne volat EXPLICITNE pomocou FUNCTION CALL SYNTAX.
9. CLASSES, ktore NEMAJU CONSTRUCTOR mozu byt inicializovane nasledujucimi sposobmi.
   A. DEFAULT INITIALIZATION BEZ pouzitia SYNTAX [{}].
   B. DEFAULT INITIALIZATION s pouzitim SYNTAX [{}]. Pri tejto inicializacii su volane DEFAULT CONSTRUCTORS VSETKYCH FIELDS.
   C. MEMBERWISE INITIALIZATION.
   D. COPY INITIALIZATION.
10. Pre DEFAULT INITIALIZATION BEZ pouzitia SYNTAX [{}] platia nasledujuce fakty.
   A. Pre STATIC VARAIBLES je inicializacia ROVNAKA ako pri DEFAULT INITIALIZATION s pouzitim SYNTAX [{}]. To znaci, ze su volane DEFAULT CONSTRUCTORS VSETKYCH FIELDS.
   B. Pre LOCAL VARAIBLES sa DEFAULT DESTRUCTORS volaju IBA pre FIELDS, ktore su instanciami CLASSES. Pre FIELDS, ktore su instanciami PRIMITIVE TYPES sa NEVOLAJU DEFAULT CONSTRUCTORS a tieto FIELDS su NEINICIALIZOVANE.
11. Pre CLASSES, ktore nemaju ZIADEN CONSTRUCTOR, C++ generuje DEFAULT CONSTRUCTOR.
!!! 12. DEFAULT CONSTRUCTORS pre PRIMITIVE TYPES inicializuju VARIABLES na DEFAULT VALUES. Pri INTEGER TYPES je to VALUE 0. Pre BOOLEAN TYPE je to VALUE FALSE.
13. CONST VARIABLES MUSIA byt VZDY INITIALIZED.
14. REFERENCE VARIABLES MUSIA byt VZDY INITIALIZED.
15. INITIALIZER LIST CONSTRUCTOR je CONSTRUCTOR, ktory ma jediny PARAMETER TYPE [initializer_list<TItem>]. Pre INITIALIZER LIST CONSTRUCTORS platia nasledujuce fakty.
   A. ITEMS v OBJECT [initializer_list<TItem>] MUSIA byt HOMOGENNE. To znaci, ze musia byt ROVNAKEHO, alebo KONVERTOVATELNEHO TYPE.
   B. C++ pri hladani vhodneho CONSTRUCTOR uprodnostnuje INITIALIZER LIST CONSTRUCTOR pred inymi CONSTRUCTORS s PARAMETERS. To znaci, ze ak C++ vyhodnoti, ze moze na zaklade pouzitej SYNTAX [{}] volat ako INITIALIZER LIST CONSTRUCTOR, tak aj iny PARAMETRIZED CONSTRUCTOR, uprednostni volanie INITIALIZER LIST CONSTRUCTOR. Jedinou vynimkou je DEFAULT CONSTRUTOR, ktory ma vyssiu prioritu ako INITIALIZER LIST CONSTRUCTOR.
16. Pre INITIALIZER LISTS platia nasledujuce pravidla.
   A. INITIALIZER LIST su definovany v LIBRARY <initializer_list>.
   B. INITIALIZER LISTS su prenasane BY-VALUE.
   C. INITIALIZER LISTS su IMMUTABLE.
   D. INITIALIZER LISTS je mozne pouzit aj v OPERATOR=, kde su ITEMS skopirovane z INITIALIZER LIST do daneho OBJECT.
17. CLASS [initializer_list<TItem>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara prazdnu instanciu INITIALIZER LIST.
   B. TYPE [value_type] urcuje TYPE pre ITEMS ulozene v INITIALIZER LIST.
   C. TYPE [reference] urcuje REFERENCE TYPE pre ITEMS ulozene v INITIALIZER LIST.
   D. TYPE [const_reference] urcuje CONST REFERENCE TYPE pre ITEMS ulozene v INITIALIZER LIST.
   E. TYPE [iterator] urcuje TYPE pre ITERATOR daneho INITIALIZER LIST.
   F. TYPE [const_iterator] urcuje TYPE pre CONST ITERATOR daneho INITIALIZER LIST.
   G. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet.
   H. METHOD size() vracia pocet ITEMS v INITIALIZER LIST.
   I. METHOD begin() vracia ITERATOR ukazujuci na PRVY ITEM INITIALIZER LIST.
   J. METHOD end() vracia ITERATOR ukazujuci hned za POSLEDNY ITEM INITIALIZER LIST.
18. CONSTRUCTORS mozu inicializovat FIELDS nasledujucimi sposobmi.
   A. Pomocou MEMBER INITIALIZER LIST.
   B. Pouzitim OPERATOR= v CONSTRUCTOR BODY.
19. Pre MEMBER INITIALIZER LIST platia nasledujuce fakty.
   !!! A. Pomocou MEMBER INITIALIZER LIST je mozne volat CONSTRUCTORS BASE CLASSES. Poradie volania CONSTRUCTORS BASE CLASSES NEURCUJE PORADIE v MEMBER INITIALIZER LIST, ale PORADIE DEKLARACII BASE CLASSES v definicii DERIVED CLASS.
   !!! B. Pomocou MEMBER INITIALIZER LIST je mozne inicializovat ako jednotlive FIELDS. Poradie inicializacie FIELDS NEURCUJE PORADIE v MEMBER INITIALIZER LIST, ale PORADIE DEKLARACII FIELDS v CLASS.
   C. Pomocou MEMBER INITIALIZER LIST nie je mozne inicializovat FIELDS BASE CLASSES.
   !!! D. MEMBER INITIALIZER LIST je JEDINY SPOSOB ako inicializovat CONST FIELDS. CONST FIELDS NIE JE mozne inicializovat pomocou volanim OPERATOR= v CONSTRUCTOR BODY.
   E. MEMBER INITIALIZER LIST moze pouzivat SYNTAX [{}].
20. DELEGATING CONSTRUCTOR je CONSTRUCTOR, ktory v MEMBER INITIALIZER LIST vola iny CONSTRUCTOR aktualnej CLASS. Pre DELEGATING CONSTRUCTOR platia nasledujuce fakty.
   A. DELEGATING CONSTRUCTOR vola INY CONSTRUCTOR danej CLASS v MEMBER INITIALIZER LIST.
   B. DELEGATING CONSTRUCTOR v MEMBER INITIALIZER LIST NEMOZE mat ZIADNE INE INITIALIZERS okrem volania INEHO CONSTRUCTOR aktualnej CLASS.
21. C++ poskytuje moznost inicializovat NON-STATIC FIELDS priamo v definicii CLASS pri definovani jednotlivych FIELDS. Pre IN-CLASS INITIALIZERS platia nasledujuce fakty.
   A. IN-CLASS INITIALIZERS sa zapisuju vedla DEFINICIE FIELDS, pricom sa pouziva bud SYNTAX [{}], alebo OPERATOR=.
   !!! B. IN-CLASS INITIALIZERS NEUMOZNUJU inicializaciu FIELDS pomocou OPERATOR().
   !!! C. Ak CLASS pouziva IN-CLASS INITIALIZERS a MEMBER INITIALIZER LIST, tak MEMBER INITIALIZER LIST sa IN-CLASS INITIALIZERS IGNORUJU.
   !!!!! D. EXPRESSIONS v IN-CLASS INITIALIZERS su CONTEXT DEPENDENT. To znaci, ze ak napriklad IN-CLASS INITIALIZERS mozu pouzivat GLOBAL VARIABLES a GLOBAL FUNCTIONS ak su pristupne pri definicii CLASS.
   E. Pokial CONSTURCTOR inicializuje FIELDS pomocou OPERATOR= a NIE pomocou MEMBER INITIALIZER LIST, tak sa IN-CLASS INITIALIZERS VOLAJU.
!!! 22. STATIC MEMBERS mozu byt inicializovane pri definicii FIELDS. Pri definicii FIELDS mozu byt inicializiovane iba nasledujuce typy FIELDS.
   A. STATIC CONST INTEGER FIELDS.
   B. STATIC CONST ENUMERATION FIELDS.
!!! 23. Ak su STATIC MEMBERS inicializovane pri definicii FIELDS, NESMU byt DEFINOVANE MIMO CLASS. Inak COMPILER hodi ERROR.
24. Transfer VALUES medzi 2 VARIABLES je v C++ mozne vykonat nasledujucimi sposobmi.
   A. COPY OPERATION je OPERATION kde je VALUE z 1. VARIABLE skopirovana do 2. VARIABLE, pricom hodnoty oboch VARIABLES su NEZAVISLE.
   B. MOVE OPERATION je OPERATION kde je VALUE z 1. VARIABLE presunuta do 2. VARIABLE tak, ze 1. VARIABLE STRATI svoj VNUTORNY STATE a tento sa stava VNUTORNYM STATE 2. VARIABLE. 1. VARIABLE by vsak mala ostat v NEDEFINOVANOM, no PLATNOM STAVE, aby pre nu mohol byt volany DESTRUCTOR.
25. COPY OPERATION v CLASS pozostava z implementacie nasledujucich operacii.
   A. COPY CONSTRUCTOR. COPY CONSTRUCTOR vytvara novu instanciu OBJECT, ktora repzentuje kopiu ineho OBJECT toho isteho TYPE zaslaneho ako PARAMETER.
   B. COPY OPERATOR=. COPY OPERATOR= priradzuje do aktualnej instancie OBJECT instanciu ineho OBJECT toho isteho TYPE. COPY OPERATOR=, na rozdiel od COPY OPERATOR musi uvolnit existujuce VALUES svojich FIELDS a az potom do nich priradit kopiu FIELDS ineho OBJECT.
26. MOVE OPERATION v CLASS pozostava z implementacie nasledujucich operacii.
   A. MOVE CONSTRUCTOR. MOVE CONSTRUCTOR vytvara novu instanciu OBJECT, ktora obsahuje VNUTORNE FIELDS ineho OBJECT toho isteho TYPE zaslaneho ako PARAMETER. VNUTORNE FIELDS OBJECT zaslaneho ako PARAMETER su nastavene na PRAZDNE VALUES.
   B. MOVE OPERATOR=. MOVE OPERATOR= priradzuje do aktualnej instancie OBJECT VNUTORNE FIELDS ineho OBJECT toho isteho TYPE. VNUTORNE FIELDS OBJECT zaslaneho ako PARAMETER su nastavene na PRAZDNE VALUES. MOVE OPERATOR=, na rozdiel od MOVE OPERATOR musi uvolnit existujuce VALUES svojich FIELDS a az potom do nich priradit FIELDS ineho OBJECT.
27. Implementacia MOVE OPERATIONS spociva vo vykonani nasledujucich krokoch.
   A. Presune hodnot VNUTORYCH FIELDS zo SOURCE do DESTINATION OBJECT.
   B. Resetnuti hodnot VNUTORNYCH FIELDS v SOURCE OBJECT, aby neobsahovali podovne hodnoty.
!!! 28. Pri MOVE OPERATIONS MUSIA byt PARAMETERS, ktore maju byt MOVED VZDY prenasane ako NON-CONST RVALUE REFERENCES, pretoze pri MOVE OPERATION je NUTNE zmenit hodnoty FIELDS OBJECT, ktory bol MOVED.
!!! 29. Pri MOVE OPERATIONS MUSIA byt FIELDS MOVED OBJECT nastavene na PLATNU VALUE, ktoru by DESTRUCTOR bol schopny spracovat. MOVED OBJECTS by NEMALI obsahovat hodnoty FIELDS pred vykonanim MOVE OPERATION.
!!! 30. Pre PRIMITIVE TYPES MOVE OPERATIONS su logicky IDENTICKE s COPY OPERATIONS, pretoze PRIMITIVE TYPES je mozne presuvat vykonanim jednej CPU INSTRUCTION a tym padom MOVE OPERATIONS pre PRIMITIVE TYPES NEMA ZMYSEL.
31. C++ standardne definuje nasledujuce DEFAULT OPERATIONS pre CLASSES.
   A. DEFAULT DESTRUCTOR.
   B. COPY CONSTRUCTOR.
   C. MOVE CONSTRUCTOR.
   D. COPY OPERATOR=.
   E. MOVE OPERATOR=.
   F. DESTRUCTOR.
!!! 32. C++ NEDEFINUJE DEFAULT OPERATIONS v nasledujucich pripadoch.
   A. Ak CLASS definuje CONSTRUCTOR pre CLASS, potom C++ nedefinuje DEFAULT CONSTRUCTOR.
   B. Ak CLASS definuje COPY CONSTRUCTOR, COPY OPERATOR=, MOVE CONSTRUCTOR, MOVE OPERATOR=, alebo DESTRUCTOR, tak C++ NEGENERUJE ZIADNU DEFAULT OPERATION. Mnoho COMPILERS vsak toto pravidlo porusuje a to tak, ze ked CLASS definuje DESTRUCTOR, tak ostatne OPERATIONS C++ definuje.
!!!!! 33. Ak CLASS ma definovane CUSTOM CONSTRUCTORS, ale NEMA definovany COPY CONSTRUCTOR, MOVE CONSTRUCTOR, COPY OPERATOR=, MOVE OPERATOR= a DESTRUCTOR, tak C++ generuje tieto OPERATIONS AUTOMATICKY.
!!! 34. DEFAULT COPY CONSTRUCTOR, DEFAULT MOVE CONSTRUCTOR, DEFAULT COPY OPERATOR= a DEFAULT MOVE OPERATOR= vykonavaju COPY OPERATIONS a MOVE OPERATIONS pre VSETKY NON-STATIC FIELDS aktualnej CLASS a VSETKY VSETKY NON-STATIC FIELDS VSETKYCH BASE CLASSES.
!!! 35. Ak CLASS definuje hociktory z COPY CONSTRUCTOR, MOVE CONSTRUCTOR, COPY OPERATOR=, MOVE OPERATOR= a DESTRUCTOR, potom C++ standardne NEGENERUJE ZIADNU z tychto OPERATIONS. Pomocou SYNTAXE [OPERATION=default] v definicii CLASS je mozne prinutit COMPILER, aby generoval DEFAULT OPERATIONS aj pre CLASSES, ktore niektore z DEFAULT OPERATION ma definovane.
36. Pomocou SYNTAXE [OPERATION=default] je mozne definovat aj DEFAULT CONSTRUCTOR. Problem je v tom, ze FIELDS PRIMITIVE TYPES ponechava tento vygenerovany DEFAULT CONSTRUCTOR NEINICIALIZOVANE.
37. Pomocou SYNTAXE [OPERATION=delete] je mozne oznacit METHODS za DELETED. SYNTAX [OPERATION=delete] je mozne vyuzit na nasledujuce ucely.
   !!! A. DELETED DEFAULT OPERATIONS prikazuju COMPILER, aby NEGENEROVAL DEFAULT OPERATIONS. Pouzitie co i len 1 DELETED DEFAULT OPERATION vedie k tomu, ze COMPILER NEVYGENERUJE ZIADNU DEFAULT OPERATION, pokial sa nepouzije SYNTAX [OPERATION=default].
   B. METHODS a OPERATORS oznacene ako DELETED NIE JE mozne volat a COMPILER sa zaroven ani NEPOKUSA HLADAT ALTERNATIVY napriklad medzi OVERLOADED METHODS a OPERATORS.
//-----------------------------------------------------------------------------