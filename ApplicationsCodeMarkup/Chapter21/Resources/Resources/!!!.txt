//-----------------------------------------------------------------------------------------------------------------
1. Program demonstruje pouzitie Resources v XAML.
2. Resources v XAML sluzia na definovanie OBJEKTOV, ktore sa mozu pouzivat kdekolvek v XAML kode. Zvycajne sa pouzivaju ako hodnoty properties ELEMETNS, ale aj ako CELE ELEMENTS. Velmi casto sa pouzivaju na definovanie Styles.
3. Resources su definovane v kolekcii ResourceDictionary, ktoru ako property Resources definujuju BAZICKE TRIEDY WPF ako FrameworkElement a FrameworkContentElement.
!!! 4. Pouzitie Resources je mozne realizovat 2 sposobmi.
   A. Pouzitim syntaxe PROPERTY ELEMENT: <Button>...<Button.FontSize> <StaticResource ResourceKey="SomeFontSize"/> </Button.FontSize>...</Button>.
   B. Pouzitim syntaxe ATTRIBUTE ELEMENT s vyuzitim MARKUP syntaxe: <Button FontSize={StaticResource SomeFontSize}>...</Button>.
!!! 5. Pouzitie {} v XAML znamena, ze XAML parser pouzije specialny parsing, ktorym dokaze parsovat MARKUP EXTENSIONS. Preto znaky {} nie je mozne bezne pouzit kdekolvek v XAML. Ak musim pouzit znaky {}, tak musim pouzit ESCAPE SEKVENCIU, ktora ma tvar {}. Priklad: <TextBlock Text="{}{This text will be in curly brackets !}"/>. 
!!! 6. Pre Resources plati, ze FYZICKY v XAML SUBORE MUSIA BYT UMIESTNENE PRED ich POUZITIM, inak XAML parser vyhlasi chybu.
7. KAZDY RESOURCE ma definovane KLUC pomocou syntaxe x:Key="KeyName". Kluce musia byt pre dany ResourceDictionary UNIKATNE, ale dve rozlicne ResourceDictionary mozu mat KEYS ROVANKE. Toto sa vyuziva pri DEDENI RESOURCES.
!!! 8. WPF pri hladani RESOURCE k danemu KEY postupuje v TREE SMEROM NAHOR a teda ak nenajde Resource s danym KEY v ELEMENTE, tak ho hlada v PARENT ELEMENT. Preto je S VYHODOU MOZNE POUZIT ROVNAKE MENA KEYS v ROZLICNYCH ResourceDictionary.
9. Objekty definovane v Resources su vytvorene IBA RAZ. Teda vytvorena je iba jedna instancia z kazdeho objektu definovaneho v Resources.
!!! 10. Triedy FrameworkElement, FrameworkContentElement a Application okrem property Resources obsahuju i metodu FindResource(), ktora REKURZIVNE hlada RESOURCE podla KEY v danom ELEMENT TREE a AK HO NENAJDE, SKUSI este HLADAT RESOURCE v Application.Resources.
!!! 11. XAML poskytuje specialnu syntax: {x:Static SomeClass:SomeStaticProperty} pomocou, ktore je mozne sa v XAML odkazat na STATICKU PROPERTY alebo STATICKU MEMEBER VARIABLE definovanu v C# classes.
12. Resources je prirodzene mozne PRIDAVAT i z C# kodu pomocou pridania noveho objektu s KEY do property Resources, ktora je typu ResourceDictionary.
!!! 13. Mapovane MEMBER PROPERTIES a MEMBER FIELDS v XAML sa robi cez DATA BINDING.
!!! 14. Static Resources su mapovane IBA RAZ pri LOAD daneho ELEMENT. Ak sa NESKOR ZMENI HODNOTA na ktoru sa mapuje (daneho RESOURCE), tak NEDOJDE k UPDATE GUI. To sa tyka aj napriklad SYSTEMOVYCH FARIEB. Ak pouzijem SYSTEMOVU FARBU ako STATIC RESOURCE, a POTOM ZMENIM hodnotu tejto systemovej farby, tak SA GUI NEPREKRESLI, HOCI HODNOTA SYSTEMOVEJ FARBY JE SKUTOCNE INA.
!!!!! 15. Triedy aako napriklad SystemColors maju PRE KAZDU COLOR az 3 ROZLICNE STATICKE PROPERTIES.
   A. Property typu typu Brush (napriklad ActiveBorderBrush), ktora obsahuje konkretny objekt SolidColorBrush.
   B. Property typu typu Color (napriklad ActiveBorderColor), ktora obsahuje objekt typu Color.
   !!! C. Property typu typu Brush (napriklad ActiveBorderBrushKey), ktora obsahuje objekt typu ResourceKey. ResourceKey je specialna trieda, ktora okrem KEY do RESOURCE obsahuje i ASSEMBLY v ktorej je RESOURCE definovany.
!!!!! 16. Objekt ResourceKey je PRESNE TYM OBJEKTOM, ktory potrebuje StaticResource a preto je ho mozne pouzit v XAML iba NASLEDUJUCOU SYNTAXOU: {StaticResource {x:Static SystemColors.ActiveBorderBrushKey}}. ResourceKey sa vsak S VYHODOU POUZIVA pre DYNAMIC RESOURCES.
!!! 17. Pomocou DynamicResource mozem definovat RESOURCE, ktore pri ZMENE SVOJEJ HONDOTY (ak property podporuje NOTIFICATION), sposobi prekreslenie GUI. Ak vsak PROPERTY NEPODPORUJE NOTIFICATION, tak pri zmene hodnoty property NEDOJDE k RENDEROVANIU GUI.
!!!!! 18. DYNAMIC RESOURCES maju niektore ZASADNE OBMEDZENIA, ako napriklad, ze musia referovat na DP a NIE VZDY zmena hodnoty REFEROVANEHO RESOURCE sa MUSI PREMIETNUT do GUI.
19. WPF umoznuje organizovat RESOURCES do CUSTOM RESOURCE DICTIONARIES - co su XAML subor s ROOT ELEMENTOM ResourceDictionary. Tieto RESOURCES je mozne spajat pomocou property ResourceDictionary.MergedDictionary. Najcastejsie sa MERGING robi v Application.XAML, aby RESOURCES boli pristupne v CELOM PROGRAME.
//-----------------------------------------------------------------------------------------------------------------