//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "KernelHeaders.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
namespace KTL
{
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct SLookasideList final
	{
//----------------------------------------------------------------------------------------------------------------------
		private:
			LOOKASIDE_LIST_EX									MLookaside;

		public:
			NTSTATUS Init(POOL_TYPE Pool, ULONG Tag);
			void Delete(void);
			TType* Alloc(void);
			void Free(TType* Pointer);
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	NTSTATUS SLookasideList<TType>::Init(POOL_TYPE Pool, ULONG Tag)
	{
		NTSTATUS												Status=ExInitializeSLookasideListEx(&MLookaside,nullptr,nullptr,Pool,0,sizeof(TType),Tag,0);

		return(Status);
	}
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	void SLookasideList<TType>::Delete(void)
	{
		ExDeleteSLookasideListEx(&MLookaside);
	}
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	TType* SLookasideList<TType>::Alloc(void)
	{
		TType*													Pointer=(TType*)ExAllocateFromSLookasideListEx(&MLookaside);

		return(Pointer);
	}
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	void SLookasideList<TType>::Free(TType* Pointer)
	{
		ExFreeToSLookasideListEx(&MLookaside,Pointer);
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------