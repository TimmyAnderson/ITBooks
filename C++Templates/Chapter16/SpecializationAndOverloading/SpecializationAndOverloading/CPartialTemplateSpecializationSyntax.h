//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include "MyDebug.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! PRIMARY TEMPLATE CLASS.
template<typename TType>
class CPartialTemplateSpecializationSyntax final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		TType													MField;

	public:
		void Print(void) const;

	public:
		CPartialTemplateSpecializationSyntax(TType Field);
		virtual ~CPartialTemplateSpecializationSyntax(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CPartialTemplateSpecializationSyntax<TType>::CPartialTemplateSpecializationSyntax(TType Field)
	: MField(Field)
{
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CPartialTemplateSpecializationSyntax<TType>::~CPartialTemplateSpecializationSyntax(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CPartialTemplateSpecializationSyntax<TType>::Print(void) const
{
	std::wcout << L"PRIMARY TEMPLATE CLASS - TYPE [" << GetTypeInfoName<decltype(MField)>() << L"] FIELD [" << MField << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS PARTIAL SPECIALIZATION.
template<typename TType>
class CPartialTemplateSpecializationSyntax<TType*> final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		TType*													MField;

	public:
		void PrintPartialSpecialization(void) const;

	public:
		CPartialTemplateSpecializationSyntax(TType* Field);
		virtual ~CPartialTemplateSpecializationSyntax(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CPartialTemplateSpecializationSyntax<TType*>::CPartialTemplateSpecializationSyntax(TType* Field)
	: MField(Field)
{
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CPartialTemplateSpecializationSyntax<TType*>::~CPartialTemplateSpecializationSyntax(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CPartialTemplateSpecializationSyntax<TType*>::PrintPartialSpecialization(void) const
{
	std::wcout << L"TEMPLATE CLASS PARTIAL SPECIALIZATION <TType*> - TYPE [" << GetTypeInfoName<decltype(MField)>() << L"] FIELD [" << MField << L"] DEREFERENCE FIELD [" << *MField << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS FULL SPECIALIZATION.
template<>
class CPartialTemplateSpecializationSyntax<double*> final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		double*													MField;

	public:
		void PrintFullSpecialization(void) const;

	public:
		CPartialTemplateSpecializationSyntax(double* Field);
		virtual ~CPartialTemplateSpecializationSyntax(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------