//-----------------------------------------------------------------------------
1. Solution demonstruje pouzitie TYPES a DECLARATIONS.
2. C++ SPECIFICATION je definovana v ISO STANDARD.
3. C++ SPECIFICATION definuje do akej miery musia jednotlive C++ FEATURES a LIBRARIES zodpovedat C++ STANDARD.
   A. DEFINED. C++ IMPLEMENTATION musi definovat funkcionalitu na zaklade C++ STANDARD.
   B. IMPLEMENTATION DEFINED. C++ IMPLEMENTATION ma na vyber niekolko moznosti, alebo RULES z ktorych si moze vybrat aku pouzije. Pouzitu moznost, alebo RULE vsak MUSI byt DOCUMENTATED. Typickym prikladom je SIZEOF jednotlivych PRIMITIVE TYPES.
   C. UNSPECIFIED. C++ IMPLEMENTATION ma na vyber niekolko moznosti, alebo RULES z ktorych si moze vybrat aku pouzije. Pouzitu moznost, alebo RULE vsak NEMUSI byt DOCUMENTATED. Typickym prikladom je VALUE, ktora je vratena OPERATOR NEW, alebo ako sa ma C++ zachovat pri zapise 2 THREADS do tej istej VARIABLE.
   D. UNDEFINED. C++ IMPLEMENTATION nemusi garantovat vobec nic. Typickym prikladom je zapis do UNALLOCATED MEMORY.
4. C++ IMPLEMENTATION sa rozdeluje do 2 kategorii.
   A. FREESTANDING IMPLEMENTATION je C++ IMPLEMENTATION, ktora obsahuje IMPLEMENTATION limitovanej mnozinu C++ STANDARD LIBRARIES. Zoznam LIBRARIES je presne definovany.
   B. HOSTER IMPLEMENTATION je C++ IMPLEMENTATION, ktora obsahuje IMPLEMENTATION vsetkych C++ STANDARD LIBRARIES.
5. C++ STANDARD je napisany v BASIC SOURCE CHARACTER SET, ktory obsahuje 7-BIT ASCII CHARACTERS.
6. Kazdy IDENTIFIER v C++ ma priradeny TYPE. TYPE urcuje ake OPERATIONS nad danym IDENTIFIER je mozne vykonat.
7. C++ definuje nasledujuci zoznam FUNDAMENTAL TYPES.
   A. BOOLEAN TYPE.
   B. CHARACTER TYPES.
   C. INTEGER TYPES.
   D. FLOATING POINT TYPES.
   E. VOID TYPES.
8. Z FUNDAMENTAL TYPES je mozne definovat DERIVED TYPES.
   A. POINTERS.
   B. REFERENCES.
   C. ARRAYS.
9. C++ umoznuje definovat USER DEFINED TYPES.
   A. STRUCTURES.
   B. CLASSES.
   C. ENUMS.
10. BOOLEAN TYPE je v C++ reprezentovany TYPE [bool]. Pre TYPE [bool] platia nasledujuce fakty.
   A. TYPE [bool] reprezentuje vysledok LOGICAL OPERATION.
   B. TYPE [bool] moze nadobudat VALUE [true], alebo VALUE [false].
   C. TYPE [bool] je IMPLICITLY CONVERTED na TYPE [int] pricom VALUE [true] je CONVERTED na VALUE [1] a VALUE [false] je CONVERTED na VALUE [0].
   D. TYPE [int] je IMPLICITLY CONVERTED na TYPE [int] pricom VALUE ROZNA od VALUE [0] je CONVERTED na VALUE [true] a VALUE [0] je CONVERTED na VALUE [false]. IMPLICIT CONVERSION hodi WARNING, pretoze dochadza k vzniku NARROWING, kedy dochadza k strate presnosti, ked je TYPE [int] CONVERTED na TYPE [bool].
   E. Pri ARITHMETIC a LOGICAL EXPRESSIONS su VALUES TYPE [bool] IMPLICITLY CONVERTED na TYPE [int]. Ak RESULT takejto EXPRESSION musi byt CONVERTED spat na TYPE [bool], tak VALUE ROZNA od VALUE [0] je CONVERTED na VALUE [true] a VALUE [0] je CONVERTED na VALUE [false].
   F. POINTER je IMPLICITLY CONVERTED na TYPE [bool]. Ak POINTER obsahuje VALUE [nullptr] je CONVERTED na VALUE [false]. Ak je POINTER neobsahuje VALUE [nullptr] je CONVERTED na VALUE [true].
11. C++ DEFINUJE nasledujuce CHARACTER TYPES.
   A. TYPE [char] je DEFAULT CHARACTER TYPE. V kazdej IMPLEMENTATION je MAPPED bud na TYPE [signed char], alabo na TYPE [unsigned char].
   B. TYPE [signed char] je SIGNED TYPE, ktory moze obsahovat POSITIVE aj NEGATIVE VALUES.
   C. TYPE [unsigned char] je UNSIGNED TYPE, ktory moze obsahovat iba POSITIVE VALUES.
   D. TYPE [wchar_t] je IMPLEMENTATION DEFINED TYPE, ktory umoznuje ulozit najvacsi mozny CHARACTER, ktory dana IMPLEMENTATION podporuje.
   E. TYPE [char16_t] sluzi na ulozenie 16 BITS CHARACTERS.
   F. TYPE [char32_t] sluzi na ulozenie 32 BITS CHARACTERS.
12. Pre CHARACTER TYPES v C++ platia nasledujuce fakty.
   A. CHARACTER TYPES umoznuju ulozenie jedneho CHARACTER.
   B. CHARACTER LITERAL VALUE pre TYPE [char] je definovana pomocou SYNTAX ['VALUE'].
   C. CHARACTER LITERAL VALUE pre TYPE [wchar_t]  je definovana pomocou SYNTAX [L'VALUE'].
   D. CHARACTER LITERAL VALUE pre TYPE [char16_t]  je definovana pomocou SYNTAX [u'XXXX']. VALUE [XXXX] je HEXADECIMAL REPRESENTATION daneho CHARACTER.
   E. CHARACTER LITERAL VALUE pre TYPE [char32_t]  je definovana pomocou SYNTAX [U'XXXXXXXX']. VALUE [XXXXXXXX] je HEXADECIMAL REPRESENTATION daneho CHARACTER.
   E. CHARACTER TYPE ma vzdy INTEGER reprezentaciu.
   F. Nad CHARACTER TYPES je mozne vykonavat ARITHMETIC a LOGICAL EXPRESSIONS.
13. Rozlicne CHARACTER TYPES predstavuju samostatne TYPES a tym padom ich bez CONVERSION nie je mozne vzajomne priradzovat. Ani TYPE [signed char] a TYPE [unsigned char].
14. C++ definuje niekolko STANDARD NAMES definovanych pomocou ESCAPE SEQUENCE [\VALUE].
   A. VALUE [\n] reprezentuje NEW LINE.
   B. VALUE [\t] reprezentuje HORIZONTAL TAB.
   C. VALUE [\v] reprezentuje VERTICAL TAB.
   D. VALUE [\b] reprezentuje BACKSPACE.
   E. VALUE [\r] reprezentuje CARRIGE RETURN.
   F. VALUE [\f] reprezentuje FORM FEED.
   G. VALUE [\a] reprezentuje ALERT.
   H. VALUE [\\] reprezentuje BACKSLASH.
   I. VALUE [\?] reprezentuje QUESTION MARK.
   J. VALUE [\'] reprezentuje SINGLE QUOTE.
   K. VALUE [\"] reprezentuje DOUBLE QUOTE.
   L. VALUE [\OOO] reprezentuje CHARACTER definovany na zaklade OCTAL VALUE [OOO].
   M. VALUE [\xHHH] reprezentuje CHARACTER definovany na zaklade HEXADECIMAL VALUE [HHH].
15. C++ DEFINUJE nasledujuce CHARACTER TYPES.
   A. TYPE [short int] sluzi na ulozenie SHORT SIGNED INTEGER VALUES.
   B. TYPE [signed short int] sluzi na ulozenie SHORT SIGNED INTEGER VALUES.
   C. TYPE [unsigned short int] sluzi na ulozenie SHORT UNSIGNED INTEGER VALUES.
   D. TYPE [int] sluzi na ulozenie SIGNED INTEGER VALUES. TYPE [int] je DEFAULT INTEGER TYPE.
   E. TYPE [signed int] sluzi na ulozenie SIGNED INTEGER VALUES.
   F. TYPE [unsigned int] sluzi na ulozenie UNSIGNED INTEGER VALUES.
   G. TYPE [long int] sluzi na ulozenie LONG SIGNED INTEGER VALUES. LITERALS maju SYNTAX [NUMBERL].
   H. TYPE [signed long int] sluzi na ulozenie LONG SIGNED INTEGER VALUES. LITERALS maju SYNTAX [NUMBERL].
   I. TYPE [unsigned long int] sluzi na ulozenie LONG UNSIGNED INTEGER VALUES. LITERALS maju SYNTAX [NUMBERUL].
   J. TYPE [long long int] sluzi na ulozenie LONG LONG SIGNED INTEGER VALUES. LITERALS maju SYNTAX [NUMBERLL].
   K. TYPE [signed long long int] sluzi na ulozenie LONG LONG SIGNED INTEGER VALUES. LITERALS maju SYNTAX [NUMBERLL].
   L. TYPE [unsigned long long int] sluzi na ulozenie LONG LONG UNSIGNED INTEGER VALUES. LITERALS maju SYNTAX [NUMBERULL].
16. Pre INTEGER TYPES v C++ platia nasledujuce fakty.
   A. INTEGER TYPES umoznuju ulozenie jedneho INTEGER VALUE.
   B. Nad INTEGER VALUES je mozne vykonavat ARITHMETIC OPERATIONS.
   C. INTEGER LITERALS je mozne definovat s pouzitim PREFIXES, ktore urcuju ciselnu sustavu v ktorom je dany INTEGER LITERAL definovany.
   D. INTEGER LITERALS je mozne definovat s pouzitim SUFFIXES, ktore urcuju TYPE daneho INTEGER LITERAL.
   E. DEFAULT INTEGER TYPE pre INTEGER LITERALS je TYPE [int].
17. INTEGER LITERALS mozu byt definovane v nasledujucich cislenych sustavach.
   A. VALUE [VALUE] reprezentuje INTEGER LITERAL v DECIMAL SYSTEM.
   B. VALUE [0VALUE] reprezentuje INTEGER LITERAL v OCTAL SYSTEM.
   C. VALUE [0xVALUE] reprezentuje INTEGER LITERAL v HEXADECIMAL SYSTEM.
18. C++ Pre INTEGER LITERALS definuje nasledujuce SUFFIXES, ktore urcuju TYPE daneho INTEGER LITERAL. TYPE je VZDY urceny tak, ze sa vyberie PRVY TYPE, do ktoreho je mozne danu INTEGER LITERAL VALUE ulozit.
   A. Ak INTEGER LITERAL VALUE NEMA SUFFIX, jeho VALUE sa ulozi bud do TYPE [int], alebo TYPE [long int], alebo TYPE [long long int].
   B. Ak INTEGER LITERAL VALUE MA SUFFIX [u], alebo SUFFIX [U], jeho VALUE sa ulozi bud do TYPE [unsigned int], alebo do TYPE [unsigned long int], alebo do TYPE [unsigned long long int].
   C. Ak INTEGER LITERAL VALUE MA SUFFIX [l], alebo SUFFIX [L], jeho VALUE sa ulozi bud do TYPE [long int], alebo do TYPE [unsigned long int], alebo do TYPE [long long int].
   D. Ak INTEGER LITERAL VALUE MA SUFFIX [ul], SUFFIX [uL], SUFFIX [Ul], alebo SUFFIX [UL], jeho VALUE sa ulozi bud do TYPE [unsigned long int], alebo do TYPE [unsigned long long int].
   E. Ak INTEGER LITERAL VALUE MA SUFFIX [ll], alebo SUFFIX [LL], jeho VALUE sa ulozi do TYPE [long long int].
   F. Ak INTEGER LITERAL VALUE MA SUFFIX [ull], SUFFIX [uLL], SUFFIX [Ull], alebo SUFFIX [ULL], jeho VALUE sa ulozi do TYPE [unsigned long long int].
19. C++ definuje v LIBRARY [<cstdint>] nasledujuce TYPES.
   A. TYPE [int8_t] reprezentuje SINGED 8 BITS INTEGER.
   B. TYPE [uint8_t] reprezentuje UNSINGED 8 BITS INTEGER.
   C. TYPE [int16_t] reprezentuje SINGED 16 BITS INTEGER.
   D. TYPE [uint16_t] reprezentuje UNSINGED 16 BITS INTEGER.
   E. TYPE [int32_t] reprezentuje SINGED 32 BITS INTEGER.
   F. TYPE [uint32_t] reprezentuje UNSINGED 32 BITS INTEGER.
   G. TYPE [int64_t] reprezentuje SINGED 64 BITS INTEGER.
   H. TYPE [uint64_t] reprezentuje UNSINGED 64 BITS INTEGER.
20. Pre FLOATING POINT TYPES v C++ platia nasledujuce fakty.
   A. TYPE [float] sluzi na ulozenie FLOAT FLOATING POINT VALUES.
   B. TYPE [double] sluzi na ulozenie DOUBLE FLOATING POINT VALUES.
   C. TYPE [long float] sluzi na ulozenie LONG DOUBLE FLOATING POINT VALUES.
21. Pre FLOATING POINT TYPES v C++ platia nasledujuce fakty.
   A. FLOATING POINT TYPES umoznuju ulozenie jedneho FLOATING POINT VALUE.
   B. FLOATING POINT VALUE ma vzdy obmedzenu presnost, ktora je urcena poctom BITS do ktorych je FLOATING POINT VALUE ulozena.
   C. Nad FLOATING POINT VALUES je mozne vykonavat ARITHMETIC OPERATIONS.
   D. FLOATING POINT LITERALS je mozne definovat s pouzitim SUFFIXES, ktore urcuju TYPE daneho FLOATING POINT LITERAL.
   E. DEFAULT FLOATING POINT TYPE pre FLOATING POINT LITERALS je TYPE [double].
   F. FLOATING POINT LITERALS mozu byt definovane pomocou SYNTAX [NUMBER.NUMBER].
   G. FLOATING POINT LITERALS mozu byt definovane pomocou SCIENTIFIC SYNTAX [NUMBEReEXPONENT], alebo SYNTAX [NUMBEREEXPONENT].
22. C++ Pre FLOATING POINT LITERALS definuje nasledujuce SUFFIXES, ktore urcuju TYPE daneho FLOATING POINT LITERAL.
   A. Ak FLOATING POINT LITERAL VALUE NEMA SUFFIX, jeho VALUE sa ulozi bud do TYPE [double].
   B. Ak FLOATING POINT LITERAL VALUE MA SUFFIX [f], alebo SUFFIX [F], jeho VALUE sa ulozi do TYPE [float].
   C. Ak FLOATING POINT LITERAL VALUE MA SUFFIX [l], alebo SUFFIX [L], jeho VALUE sa ulozi do TYPE [long double].
23. C++ pre STRING LITERALS definuje nasledujuce PREFIXES.
   A. VALUE ["VALUE"] reprezentuje STRING LITERAL, ktory ma TYPE [const char[SIZE]].
   B. VALUE [L"VALUE"] reprezentuje STRING LITERAL, ktory ma TYPE [const wchar_t[SIZE]].
   C. VALUE [u8"VALUE"] reprezentuje UTF-8 STRING LITERAL, ktory ma TYPE [const char8_t[SIZE]].
   D. VALUE [u"VALUE"] reprezentuje UTF-16 STRING LITERAL, ktory ma TYPE [const char16_t[SIZE]].
   E. VALUE [U"VALUE"] reprezentuje UTF-32 STRING LITERAL, ktory ma TYPE [const char32_t[SIZE]].
   F. VALUE [PREFIXR"VALUE"] reprezentuje STRING v SOURCE CHARACTER SET. VALUE [PREFIX] je OPTIONAL a reprezentuje jeden z vyssie uvedenych STRING PREFIXES.
24. C++ umoznuje definovat USER DEFINED LITERALS pomocou LITERAL OPERATORS. LITERAL OPERATORS mozu mat nasledujuce tvary.
   A. OPERATOR FUNCTION [RETURN_VALUE OPERATOR"" IDENTIFIER(PARAMETER_1 Value1,...PARAMETER_N ValueN)] umoznuje ako 'IDENTIFIER' pouzit STRING, ktory MUSI zacinat znakom '_' a za ktorym NESMIE BYT VELKE PISMENO.
   B. OPERATOR FUNCTION [RETURN_VALUE OPERATOR""IDENTIFIER(PARAMETER_1 Value1,...PARAMETER_N ValueN)] umoznuje ako 'IDENTIFIER' pouzit STRING, ktory MUSI zacinat znakom '_', no za ktorym MOZE BYT VELKE PISMENO.
   C. OPERATOR TEMPLATE FUNCTION [template<char...> RETURN_VALUE OPERATOR"" IDENTIFIER(void)] umoznuje ako 'IDENTIFIER' pouzit STRING, ktory MUSI zacinat znakom '_' a za ktorym NESMIE BYT VELKE PISMENO. OPERATOR NESMIE mat ZIADNE PARAMETERS. OPERATOR TEMPLATE FUNCTION NESMIE mat ZIADNE PARAMETERS a moze mat iba 1 TYPE PARAMETER [char...].
   D. OPERATOR TEMPLATE FUNCTION [template<char...> RETURN_VALUE OPERATOR""IDENTIFIER(void)] umoznuje ako 'IDENTIFIER' pouzit STRING, ktory MUSI zacinat znakom '_', no za ktorym MOZE BYT VELKE PISMENO. OPERATOR NESMIE mat ZIADNE PARAMETERS. OPERATOR TEMPLATE FUNCTION NESMIE mat ZIADNE PARAMETERS a moze mat iba 1 TYPE PARAMETER [char...].
25. USER DEFINED LITERALS mozu reprezentovat LITERALS nasledujucich typov.
   A. INTEGER LITERALS.
   B. FLOATING POINT LITERALS.
   C. CHARACTER LITERALS.
   D. STRING LITERALS.
   E. RAW LITERALS.
26. NON-TEMPLATE LITERAL OPERATORS maju povolene nasledujuce PARAMETERS.
   A. PARAMETER [unsigned long long int] reprezentuje INTEGER LITERAL. Tento LITERAL OPERATOR je volany pre VSETKY typy INTEGER LITERALS.
   B. PARAMETER [long double] reprezentuje FLOATING POINT LITERAL. Tento LITERAL OPERATOR je volany pre VSETKY typy FLOATING POINT LITERALS.
   C. PARAMETER [char] reprezentuje CHARACTER LITERAL.
   D. PARAMETER [wchar_t] reprezentuje CHARACTER LITERAL.
   E. PARAMETER [char16_t] reprezentuje CHARACTER LITERAL.
   F. PARAMETER [char32_t] reprezentuje CHARACTER LITERAL.
   G. PARAMETERS [const char*, size_t] reprezentuju STRING LITERAL. 2. PARAMETER obsahuje dlzku STRING v 1. PARAMETER.
   H. PARAMETERS [const wchar_t*, size_t] reprezentuju STRING LITERAL. 2. PARAMETER obsahuje dlzku STRING v 1. PARAMETER.
   I. PARAMETERS [const char16_t*, size_t] reprezentuju STRING LITERAL. 2. PARAMETER obsahuje dlzku STRING v 1. PARAMETER.
   J. PARAMETERS [const char32_t*, size_t] reprezentuju STRING LITERAL. 2. PARAMETER obsahuje dlzku STRING v 1. PARAMETER.
   K. PARAMETER [const char*] reprezentuje RAW LITERAL. RAW LITERAL OPERATOR sa aplikuje, ak C++ nenasiel ziaden vhodnejsi LITERAL OPERATOR.
27. C++ pri hladani spravneho LITERAL OPERATOR pre INTEGER LITERALS postupuje nasledujucim sposobom.
   A. Ako prvy hlada LITERAL OPERATOR so zadanym IDENTIFIER a PARAMETER [unsigned long long int].
   B. Ak sa hladany LITERAL OPERATOR nenasiel, hlada sa RAW LITERAL OPERATOR so zadanym IDENTIFIER a PARAMETER [const char*], alebo LITERAL OPERATOR TEMPLATE FUNCTION. C++ ZAKAZUJE, aby CODE obsahoval definiciu RAW LITERAL OPERATOR a LITERAL OPERATOR TEMPLATE FUNCTION pre ten isty IDENTIFIER.
   C. Ak LITERAL OPERATOR sa nenasiel, COMPILER generuje chybu.
28. C++ pri hladani spravneho LITERAL OPERATOR pre FLOATING POINT LITERALS postupuje nasledujucim sposobom.
   A. Ako prvy hlada LITERAL OPERATOR so zadanym IDENTIFIER a PARAMETER [long double].
   B. Ak sa hladany LITERAL OPERATOR nenasiel, hlada sa RAW LITERAL OPERATOR so zadanym IDENTIFIER a PARAMETER [const char*], alebo LITERAL OPERATOR TEMPLATE FUNCTION. C++ ZAKAZUJE, aby CODE obsahoval definiciu RAW LITERAL OPERATOR a LITERAL OPERATOR TEMPLATE FUNCTION pre ten isty IDENTIFIER.
   C. Ak LITERAL OPERATOR sa nenasiel, COMPILER generuje chybu.
29. LITERAL OPERATORS NEMOZU pouzivat DEFUALT VALUES pre svoje PARAMETERS.
!!! 30. C++ PRIKAZUJE, ze USER DEFINED LITERAL IDENTIFIERS sa MUSIA zacinat znakom '_'. Vsetky ostatne IDENTIFIERS su RESERVED pre STANDARD TEMPLATE LIBRARY a NEMALI by sa POUZIVAT.
31. Pre TYPE [void] platia nasledujuce fakty.
   A. Ak je TYPE [void] pouzity ako RETURN VALUE FUNCTION ci METHOD urcuje, ze dana FUNCTION ci METHOD nevracia ziadnu RETURN VALUE.
   B. Ak je TYPE [void] pouzity ako POINTER [void*], tak do takehoto POINTER je mozne priradit POINTER lubovolneho TYPE.
!!! 32. SIZES FUNDAMENTAL TYPES je vzdy IMPLEMENTATION DEFINED.
33. OPERATOR [sizeof(TYPE)] vracia pocet BYTES, do ktoreho sa uklada dany TYPE.
34. OPERATOR [sizeof(EXPRESSION)] vracia pocet BYTES, do ktoreho sa uklada TYPE daneho EXPRESSION.
!!!!! 35. BYTE NEMUSI mat nutne 8 BITS. Je to IMPLEMENTATION DEFINED. Pocet BITS, ktore obsahuje 1 BYTE je obsiahnuty v CONSTANT [CHAR_BIT].
36. C++ definuje TYPE [numeric_limits<TType>] pomocou, ktoreho je mozne zistit informacie o jednotlivych TYPES, ako to ci su SIGNED, alebo UNSIGNED, ci MINIMUM a MAXIMUM VALUES.
37. TYPE [size_t] UNSIGNED INTEGER TYPE, ktory sa pouziva na ulozene vysledku OPERATOR [sizeof] ako aj na ulozenie poctu ITEMS v COLLECTION.
38. TYPE [ptrdiff_t] je SIGNED INTEGER TYPE, ktory sa pouziva na ukladanie vysledku rozdielu 2 POINTERS v jednotkach SIZEOF daneho TYPE.
39. OPERATOR [alignof(TYPE)] vracia VALUE TYPE [size_t], ktora obsahuje ALIGNMENT daneho TYPE v BYTES.
!!! 40. SPECIFIER [alignas(TYPE)] a SPECIFIER [alignas(EXPRESSION)] umoznuje definovat poziadavky na ALIGNMENT STRUCTURE, CLASS, alebo VARIABLE. EXPRESSION MUSI byt INTEGER VALUE, ktora je exponencialnou hodnotou pri zaklade 2 (1, 2, 4, 8, 16, 32...).
41. V C++ kazdy NAME predtym ako moze byt pouzity musi byt DECLARED a DEFINED.
42. Pre NAME DECLARATIONS platia nasledujuce fakty.
   A. DECLARATION priraduje TYPE danemu NAME.
   !!! B. DECLARATION NEPRIRADUJE ZIADNU MEMORY.
   !!! C. DECLARATION sa moze v PROGRAME OPAKOVAT.
   D. Ak sa DECLARATIONS v PROGRAME OPAKUJU, MUSIA vsetky DECLARATIONS byt TOHO ISTEHO TYPE.
   E. Z DECLARATION nie je mozne ziskat SIZEOF.
   F. Typickym prikladom DECLARATIONS su FUNCTION ci METHODS PROTOTYPES v HEADER FILES, ci STRUCTURESS a CLASSES DECLARATIONS, ktore priradia NAME danej DECLARATION, no NEOBSAHUJU BODY danej FUNCTION, METHOD, STRUCTURE ci CLASS.
43. Pre NAME DEFINITIONS platia nasledujuce fakty.
   A. DEFINITION priraduje MEMORY danemu NAME.
   B. DEFINITION FUNCTION, METHOD, STRUCTURE ci CLASS obsahuje VZDY BODY danej FUNCTION, METHOD, STRUCTURE a CLASS.
   !!! C. DEFINITION moze byt v PROGRAME IBA RAZ.
   D. Z DEFINITION je mozne vykonat SIZEOF.
44. DECLARATION obsahuje nasledujuce casti.
   A. OPTIONAL PREFIX SPECIFIERS. Ako SPECIFIERS mozu byt pouzite napriklad SPECIFIER [static] ci SPECIFIER [virtual].
   B. BASE TYPE. Ako BASE TYPES mozu byt pouzite napriklad BASE TYPE [vector<double>] ci BASE TYPE [const int].
   C. DECLARATOR s OPTIONAL OPERATORS. Ako DECLARATOR s OPTIONAL OPERATORS mozu byt pouzite napriklad DECLARATOR s OPTIONAL OPERATOR [p[7]], DECLARATOR s OPTIONAL OPERATOR [n] ci DECLARATOR s OPTIONAL OPERATOR [*(*)[]].
   D. OPTIONAL SUFFIX FUNCTION SPECIFIERS. Ako FUNCTION SPECIFIERS mozu byt pouzite napriklad FUNCTION SPECIFIER [const] ci FUNCTION SPECIFIER [noexcept].
   E. OPTIONAL VARIABLE INITIALIZER, alebo FUNCTION BODY ci METHOD BODY.
45. DECLARATOR moze obsahovat nasledujuce OPTIONAL OPERATORS, ktore su bud vo forme PREFIX, alebo POSTFIX okolo NAME.
   A. PREFIX [*] urcuje ze NAME reprezentuje POINTER TYPE.
   B. PREFIX [*const] urcuje ze NAME reprezentuje CONSTANT POINTER TYPE.
   C. PREFIX [*volatile] urcuje ze NAME reprezentuje VOLATILE POINTER TYPE.
   D. PREFIX [&] urcuje ze NAME reprezentuje LVALUE REFERENCE TYPE.
   E. PREFIX [&&] urcuje ze NAME reprezentuje RVALUE REFERENCE TYPE.
   F. PREFIX [auto] urcuje ze NAME reprezentuje FUNCTION, ktora pouziva SUFFIX RETURN TYPE.
   G. POSTFIX [[]] urcuje ze NAME reprezentuje ARRAY.
   H. POSTFIX [()] urcuje ze NAME reprezentuje FUNCTION, alebo METHOD.
   I. POSTFIX [->] urcuje ze NAME reprezentuje FUNCTION, alebo METHOD, ktorej RETURN TYPE je urceny pomocou COMPILE TIME EXPRESSION.
46. C++ umoznuje v ramci jednej DECLARATION deklarovat viacero NAMES. Pre tieto DECLARATIONS platia nasledujuce fakty.
   A. NAMES su oddelene pomocou CHARACTER [,].
   B. OPERATORS su aplikovane OSOBITNE na KAZDY NAME. To znamena, ze CODE [int *X, Y] deklaruje VARIABLE [int* X] a VARIABLE [int Y].
47. Pre IDENTIFIERS (NAMES) platia nasledujuce pravidla.
   A. IDENTIFIER obsahuje LETTERS, DIGITS, alebo CHARACTER '_', pricom zacinat musi bud LETTER, alebo CHARACTER '_'.
   B. IDENTIFIER nesmie byt identicky s RESERVED KEYWORDS.
   C. NON-LOCAL IDENTIFIERS nesmu zacinat CHARACTER '_', pretoze ten je RESERVED pre C++.
48. DECLARATIONS deklaruju NAMES v SCOPE. SCOPE urcuje cast CODE v ktorom je dana DECLARATION platna. C++ definuje nasledujuce SCOPES.
   A. LOCAL SCOPE.
   B. CLASS SCOPE.
   C. NAMESPACE SCOPE.
   D. GLOBAL SCOPE.
   E. STATEMENT SCOPE.
   F. FUNCTION SCOPE.
49. Pre LOCAL SCOPE platia nasledujuce fakty.
   A. LOCAL SCOPE DECLARATION je DECLARATION vo FUNCTION, METHOD, alebo LAMBDA FUNCTION.
   B. SCOPE trva od miesta DECLARATION po koniec BLOCK, v ktorom sa DECLARATION nachadza.
   C. BLOCK je idetifikovany pomocou CHARACTERS [{}].
   D. Cely CODE FUNCTION, METHOD a LAMBDA FUNCTION predstavuje samostatny BLOCK.
50. Pre CLASS SCOPE platia nasledujuce fakty.
   A. CLASS SCOPE DECLARATION je DECLARATION v CLASS mimo METHODS, INNER CLASSES, INNER ENUMS ci inych NAMESPACES.
   B. SCOPE trva od miesta DECLARATION po koniec CLASS. SCOPE trva takisto vo vsetkych METHODS danej CLASS.
51. Pre NAMESPACE SCOPE platia nasledujuce fakty.
   A. NAMESPACE SCOPE DECLARATION je DECLARATION v NAMESPACE mimo FUNCTIONS, METHODS, LABMDA FUNCTIONS, CLASSES, ENUMS ci inych NAMESPACES.
   B. SCOPE trva od miesta DECLARATION po koniec NAMESPACE.
   C. SCOPE sa aplikuje aj na ine COMPILATION UNITS, ak su v tom istom NAMESPACE.
52. Pre GLOBAL SCOPE platia nasledujuce fakty.
   A. GLOBAL SCOPE DECLARATION je DECLARATION mimo FUNCTIONS, METHODS, LABMDA FUNCTIONS, CLASSES, ENUMS ci NAMESPACES.
   B. SCOPE trva od miesta DECLARATION po koniec FILE v ktorom sa DECLARATION nachadza.
   C. SCOPE sa aplikuje aj na ine COMPILATION UNITS.
53. Pre STATEMENT SCOPE platia nasledujuce fakty.
   A. STATEMENT SCOPE DECLARATION je DECLARATION medzi CHARACTERS [()] v ramci KEYWORD [for], KEYWORD [while], KEYWORD [if] a KEYWORD [switch].
   B. SCOPE trva od miesta DECLARATION po koniec STATEMENT.
54. Pre FUNCTION SCOPE platia nasledujuce fakty.
   A. STATEMENT SCOPE DECLARATION LABEL (pouzivanych v KEYWORD [goto]) vo FUNCTIONS a METHODS.
   B. SCOPE trva od miesta DECLARATION po koniec FUNCTION ci METHOD.
55. FUNCTION a METHOD PARAMETERS maju SCOPE na urovni cele FUNCTION ci METHOD.
!!! 56. Ak su DECLARATIONS s TYM ISTYM NAME deklarovane v rozlicnych SCOPES, tak DECLARATION v INNER SCOPE skryje DECLARATION v OUTER SCOPE.
!!! 57. Platnost IDENTIFIER danej DECLARATION zacina OKAMZITE po skonceni DECLARATION. Od konca DECLARATION je mozne dany IDENTIFIER pouzit.
58. Ak su GLOBAL DECLARATIONS skryte INNER DECLARATIONS, ku GLOBAL DECLARATIONS je mozne pristupit pomocou OPERATOR [::].
59. C++ podporuje nasledujuce typy INITIALIZATIONS.
   A. SYNTAX [TYPE VARIABLE=VALUE].
   B. SYNTAX [TYPE VARIABLE={VALUE}].
   C. SYNTAX [TYPE VARIABLE(VALUE)].
   D. SYNTAX [TYPE VARIABLE{VALUE}].
!!! 60. INITIALIZATION SYNTAX [TYPE VARIABLE{VALUE}] NEPOVOLUJE NARROWING. V pripade, ze dojde k NARROWING (napriklad VALUE TYPE [double] sa ulozi do TYPE [int]), COMPILER hodi ERROR. Ostatne SYNTAXE NARROWING umoznuju.
61. Ak sa pouzije SYNTAX [TYPE VARIABLE{}], bez definovania VALUE, tak je VARIABLE nastavena na DEFAULT VALUE pre dany TYPE. Pre INTEGRAL a FLOATING POINT TYPES je to VALUE [0]. Pre POINTER TYPES je to VALUE [nullptr].
!!! 62. Ak sa pouzije SYNTAX [TYPE VARIABLE[]{}], bez definovania VALUE na ARRAY, tak su VSETKY ITEMS daneho ARRAY INITIALIZED na DEFAULT VALUES daneho TYPE.
63. Ak VARIABLES NIE SU INITIALIZED ich VALUES zavisia od ich SCOPE.
   A. UNINITIALIZED LOCAL VARIABLES obsahuju UNDEFINED VALUES.
   B. STATIC LOCAL VARIABLES obsahuju DEFAULT VALUES.
   C. STATIC MEMBER VARIABLES obsahuju DEFAULT VALUES.
   D. GLOBAL VARIABLES obsahuju DEFAULT VALUES.
64. INITIALIZATION SYNTAX [TYPE VARIABLE{VALUE_1,...,VALUE_N}] je mozne pouzit na INITIALIZATION ARRAYS, STRUCTURES i CLASSES.
65. C++ umoznuje TYPE DEDUCING nasledujucimi sposobmi.
   A. Pomocou KEYWORD [auto]. Tento KEYWORD vykonava TYPE DEDUCING na zaklade TYPE VALUES zadanych v INITIALIZER.
   B. Pomocou KEYWORD [decltype(EXPRESSION)]. Tento KEYWORD vykonava TYPE DEDUCING na zaklade vyhodnotenia komplexneho EXPRESSION, ktorym napriklad moze byt RETURN VALUE FUNCTION ci METHOD, alebo CLASS FIELD TYPE.
66. Pre TYPE DEDUCING pomocou KEYWORD [auto] platia nasledujuce fakty.
   A. KEYWORD [auto] umoznuje COMPILER vykonat TYPE DEDUCING na zaklade TYPE INITIALIZATION VALUE.
   B. KEYWORD [auto] umoznuje aplikovat PREFIXES ako PREFIX [const] ci PREFIX [constexpr] a takisto OPERATORS ako OPERATOR [*] ci OPERATOR [&].
   C. KEYWORD [auto] sa pouziva aj ako RETURN VALUE TYPE ak FUNCTION ci METHOD pouzivaju na urcenie RETURN VALUE TYPE KEYWORD [decltype(EXPRESSION)].
   D. Ak je VARIABLE oznacena KEYWORD [auto] pricom sa pouzije INITIALIZATION SYNTAX [TYPE VARIABLE={VALUE_1,...,VALUE_N}], tak TYPE DEDUCING vygeneruje TYPE [initializer_list<TYPE>].
67. Pre TYPE DEDUCING pomocou KEYWORD [decltype(EXPRESSION)] platia nasledujuce fakty.
   A. KEYWORD [decltype(EXPRESSION)] umoznuje COMPILER vykonat TYPE DEDUCING na zaklade EVAULATION 'EXPRESSION'.
   B. KEYWORD [decltype(EXPRESSION)] je mozne pouzit na TYPE DEDUCING VARIABLE, alebo na TYPE DEDUCING RETURN VALUE TYPE FUNCTION, alebo RETURN VALUE TYPE METHOD.
   C. Ak je KEYWORD [decltype(EXPRESSION)] pouzity na urcenie RETURN VALUE TYPE FUNCTION, alebo RETURN VALUE TYPE METHOD pouziva sa SYNTAX [auto METHOD_NAME(PARAMETERS) -> decltype(EXPRESSION)].
   D. KEYWORD [decltype(EXPRESSION)] v EXPRESSION moze obsahovat volanie FUNCTION, METHOD ci OPERATOR.
68. C++ Definuje nasledujuce TERMS tykajuce sa VALUES a ich mozneho pouzitia.
   A. OBJECT je kontinualny MEMORY BLOCK, ktory je alokovany v MEMORY. Na OBJECTS sa je v C++ mozne referovat pomocou LVALUES.
   B. LVALUE je VALUE, ktora MA svoj IDENTIFIER (NAME) a zaroven NIE je MOVABLE. Typickym prikladom je VARIABLE odkazujuca sa na OBJECT ako alokovany MEMORY BLOCK.
   C. RVALUE je VALUE, ktora moze aj nemusi mat svoj IDENTIFIER (NAME), ale JE MOVABLE.
   D. GLVALUE je VALUE, ktora MA svoj IDENTIFIER (NAME).
   E. PRVALUE je VALUE, ktora NEMA svoj IDENTIFIER (NAME), ale je MOVABLE.
   F. XVALUE je VALUE, ktora MA svoj IDENTIFIER (NAME) a zaroven je MOVABLE.
69. OBJECT LIFETIME zacina ukoncenim volania CONSTRUCTOR a konci zaciatkom volania DESTRUCTOR.
70. LIFETIMES jednotlivych OBJECTS je mozne rozdelit do nasledujucich kategorii.
   A. AUTOMATIC OBJECTS. Tieto OBJECTS su DEFINED vo FUNCTION, alebo METHOD. Ich LIFETIME zacina v mieste ich DEFINITION a konci na konci BLOCK v ktorom su definovane.
   B. STATIC OBJECTS. Tieto OBJECTS su DEFINED v GLOBAL NAMESPACE, alebo CUSTOM NAMESPACE, alebo v CLASSES, FUNCTIONS ci METHODS, ak je na nich aplikovany KEYWORD [static]. Ich LIFETIME zacina pri spusteni PROGRAMU a konci pri ukonceni PROGRAMU.
   C. FREE STORE OBJECTS. LIFETIME tychto OBJECTS zacina volanim OPERATOR [new] a konci volanim OPERATOR [delete], alebo OPERATOR [delete[]].
   D. TEMPORARY OBJECTS. Ich LIFETIME zacinaju v mieste ich prveho pouzitia a koncia na konci EXPRESSION v ktorej su pouzite.
   E. THREAD LOCAL OBJECTS. Tieto OBJECTS su oznacene pomocou KEYWORD [thread_local]. Ich LIFETIME zacina s vytvorenim THREAD a LIFETIME konci s ukoncenim THREAD.
71. C++ umoznuje definovat TYPE ALIASES. Pre TYPE ALIASES platia nasledujuce fakty.
   A. TYPE ALIAS vytvori novy NAME pre EXISTUJUCI TYPE. To znamena, ze NEDEFINUJE NOVY TYPE, iba vytvara ALIAS pre EXISTUJUCI TYPE.
   B. TYPE ALIAS sa vytvara pomocou SYNTAX [using ALIAS=TYPE].
   C. TYPE ALIAS je mozne vytvorit aj starsou SYNTAX pomocou KEYWORD [typedef].
   D. TYPE ALIASES je mozne vytvorit aj pre GENERIC TYPES ako GENERIC ALIASES.
//-----------------------------------------------------------------------------