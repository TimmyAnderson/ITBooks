//----------------------------------------------------------------------------------------------------------------------
#include "CDumpType.h"
#include <utility>
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
using namespace std;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
CDumpType::CDumpType(void)
	: MValue()
{
	wcout << L"DEFAULT CONSTRUCTOR CALLED !" << endl;
}
//----------------------------------------------------------------------------------------------------------------------
CDumpType::CDumpType(const CString& Value)
	: MValue(Value)
{
	wcout << L"CONSTRUCTOR (STRING COPY) CALLED ! VALUE [" << MValue << L"]." << endl;
}
//----------------------------------------------------------------------------------------------------------------------
CDumpType::CDumpType(CString&& Value)
	: MValue(move(Value))
{
	wcout << L"CONSTRUCTOR (STRING MOVE) CALLED ! VALUE [" << MValue << L"]." << endl;
}
//----------------------------------------------------------------------------------------------------------------------
CDumpType::CDumpType(const CDumpType& Other)
	: MValue(Other.MValue)
{
	wcout << L"COPY CONSTRUCTOR CALLED ! VALUE [" << MValue << L"]." << endl;
}
//----------------------------------------------------------------------------------------------------------------------
CDumpType::CDumpType(CDumpType&& Other) noexcept
	: MValue(move(Other.MValue))
{
	wcout << L"MOVE CONSTRUCTOR CALLED ! VALUE [" << MValue << L"]." << endl;
}
//----------------------------------------------------------------------------------------------------------------------
CDumpType::~CDumpType(void)
{
	wcout << L"DESTRUCTOR CALLED !" << endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
CDumpType& CDumpType::operator=(const CDumpType& Other)
{
	MValue=Other.MValue;

	wcout << L"COPY OPERATOR= CALLED ! VALUE [" << MValue << L"]." << endl;

	return(*this);
}
//----------------------------------------------------------------------------------------------------------------------
CDumpType& CDumpType::operator=(CDumpType&& Other) noexcept
{
	MValue=move(Other.MValue);

	wcout << L"MOVE OPERATOR= CALLED ! VALUE [" << MValue << L"]." << endl;

	return(*this);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
const CString& CDumpType::GetValue(void) const noexcept
{
	return(MValue);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
wostream& operator<<(wostream& Stream, const CDumpType& Value)
{
	Stream << Value.MValue;

	return(Stream);
}
//----------------------------------------------------------------------------------------------------------------------