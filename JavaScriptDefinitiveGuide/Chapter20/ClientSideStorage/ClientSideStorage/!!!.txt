//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie CLIENT SIDE STORAGE.
2. CLIENT SIDE STORAGE su diferencovane podla WEB SITE z ktorej pochadzaju. WEB PAGES z jednej WEB SITE NEMOZU pristupovat ku CLIENT SIDE STORAGE WEB PAGE inej WEB SITE.
3. Data v CLIENT SIDE STORAGE mozu byt ulozene ako TEMPORARY, alebo ako PERMANENT. Ak su TEMPORARY, tak sa mazu po uzatvoreni BROWSER. PERMANENT DATA su ulozene na disku.
4. CLIENT SIDE STORAGE je implementovany viacerymi technologiami.
   A. WEB STORAGE je sucast HTML 5. Pozostava z 2 ZAKLADNYCH CLASSES: 'localStorage' a 'sessionStorage', ktore ukladaju DATA (mozu i vacsie objemu) PERSISTENT sposobom na DISK.
   B. COOKIES primarne sluzia pre SERVER na prenos dat medzi CLIENT a SERVER. COOKIES su v KAZDOM HTTP REQUEST prenasane na SERVER, no daju sa pouziit aj ako CLIENT SIDE STORAGE na ukladanie MALYCH OBJEMOV DAT na DISK.
   C. IE USER DATA je mechanizmus SPECIFICKY pre IE sluziaci na ukladanie STREDNE VELKYCH OBJEMOV DAT na DISK.
   D. OFFLINE WEB APPLICATIONS je HTML 5 mechanizmus umoznujuci ukladat cele WEB PAGES a prislusne FILES do CLIENT SIDE STORAGE, kde je potom s nimi mozne pracovat ako keby sa jednalo o nainstalovane programy, aj bez pristupu na INTERNET.
   E. WEB DATABASES su DATABASES pristupne z WEB BROWSERS. Standardizacia tychto DATABASES vsak zatial NEEXISTUJE a napriklad IE ju NEMA IMPLEMENTOVANU.
   F. FILESTREAM API je API umoznujuce pristup k FILESYSTEM z BROWSERS.
!!! 5. WEB STORAGE je implementovany vo Window OBJECT v PROPERTIES 'localStorage' a 'sessionStorage'. Pre WEB STORAGE platia nasledujuce zasady.
   A. Data (KEY-VALUE) su ukladane ako PROPERTIES 'localStorage' a 'sessionStorage'. To znamena, ze pri ZAPISE PROPERTIES do tychto OBJECTS su data ukladane do WEB STORAGE (SESSION, alebo DISK) a pri citani dat su citane z WEB STORAGE (SESSION, alebo DISK).
   !!! B. Aj ked specifikacia WEB STORAGE hovori o moznosti ukladat STRUKTUROVANE DATA, v sucastnosti vacsina BROWSERS umoznuje ukladat iba KEY-VALUE typu STRING. Ak je potrebne ukladat ine typy dat je potrebne vykonat manualnu SERIALIZACIU/DESERIALIZACIU.
   !!! C. WEB STORAGE je implementovany pomocou Storage OBJECT.
   D. METHOD Storage.getItem() vracia pre dany KEY hodnotu VALUE z WEB STORAGE.
   E. METHOD Storage.setItem() uklada pre dany KEY hodnotu VALUE do WEB STORAGE.
   F. METHOD Storage.removeItem() odstranuje pre dany KEY KEY-VALUE z WEB STORAGE.
   G. PROPERTY Storage.length pocet KEY-VALUES vo WEB STORAGE.
   H. METHOD Storage.key() vracia KEY pre dany INDEX.
   I. METHOD Storage.clear() odstranuje vsetky KEY-VALUE z WEB STORAGE.
6. Pre 'sessionStorage' platia nasledujuce vlastnosti.
   A. Data ulozene do 'sessionStorage' su platne iba do SKONCENIA SESSION - teda do uzavretia BROWSER WINDOW/TAB.
   B. BROWSER moze pristupovat IBA k DATAM, ktore maju IDENTICKY DOCUMENT ORIGIN. DOCUMENT ORIGIN je IDENTICKY ak je zhodny PROTOCOL, HOSTNAME a PORT. Pristupovat k datam 'sessionStorage' INYCH DOCUMENT ORIGINS NIE JE MOZNE.
   C. BROWSER moze pristupovat IBA k DATAM vytvorenym vo VLASTNOM BROWSER TAB. Ak napriklad otvorim tu istu WEB PAGE z 2 TABS, tak data medzi jednotlivymi TABS NIE JE MOZNE PRENASAT.
   D. Ak ma WEB PAGE VIACERO FRAMES (<iframe>), kde kazdy FRAME ma VLASTNY Window OBJECT, tak tieto FRAMES ZDIELAJU 'sessionStorage' OBJECTS a teda i DATA ULOZENE v 'sessionStorage'.
7. Pre 'localStorage' platia nasledujuce vlastnosti.
   A. Data ulozene do 'localStorage' su ulozene na DISKU a teda su platne az kym ich bud WEB APPLICATION, alebo pouzivatel EXPLICITNE NEODSTRANI.
   B. BROWSER moze pristupovat IBA k DATAM, ktore maju IDENTICKY DOCUMENT ORIGIN. DOCUMENT ORIGIN je IDENTICKY ak je zhodny PROTOCOL, HOSTNAME a PORT. Pristupovat k datam 'localStorage' INYCH DOCUMENT ORIGINS NIE JE MOZNE.
   C. Data ulozene do 'localStorage' su ZDIELANE medzi VIACERYMI TABS.
!!! 8. WEB STORAGE dokaze generovat EVENTS pri zmenach hodnot VALUES vo WEB STORAGE. Pre generovanie EVENTS platia nasledujuce zasady.
   A. EVENT Window.onstorage je generovany IBA pri ZMENE HODNOTY VALUE. Ak sa zapise ROVNAKA HODNOTA, tak ku generovaniu EVENT NEDOJDE. EVENT sa takisto nevyvola pri VYMAZANI VALUE.
   B. EVENT OBJECT obsahuje PROPERTIES 'key' (obsahuje meneny KEY, alebo NULL pri volani Storage.clear()), 'newValue' (NOVA VALUE), 'oldValue' (POVODNA VALUE), 'storageArea' (urcuje ci data pochadzaju z 'localStorage', alebo 'sessionStorage') a 'url' (obsahuje URL daneho DOCUMENT, ktory vykona zmenu VALUE).
   C. V pripade 'localStorage' su EVENT generovane na VSETKYCH TABS, ktore su odkazane na WEB PAGE z TOHO ISTEHO DOCUMENT ORIGIN.
   D. V pripade 'sessionStorage', kedze ten je obmedzeny iba na JEDEN TAB su EVENTS distribuovane iba medzi FRAMES ako WEB PAGE nejaky obsahuje.
   !!! E. V pripade 'localStorage' EVENTS NIE SU DISTRIBUOVANE do FRAMES.
   !!! F. V pripade 'sessionStorage' su EVENTS DISTRIBUOVANE aj do Window OBJECT, ktory zmenu vo WEB STORAGE VYKONAL.
10. COOKIES primarne sluzia pre SERVER na prenos dat medzi CLIENT a SERVER. COOKIES su v KAZDOM HTTP REQUEST prenasane na SERVER, no daju sa pouziit aj ako CLIENT SIDE STORAGE na ukladanie MALYCH OBJEMOV DAT na DISK. Pre COOKIES platia nasledujuce zasady.
   A. COOKIES su pristupne pomocou PROPERTY Document.cookie.
   !!! B. COOKIES API je VELMI BIZARNE a spociva v zapise TEXTOVYCH COMMANDS do PROPERTY Document.cookie.
   C. To ci BROWSER podporuje COOKIES (resp. ma ich povolene) je mozne zistit bud priamo otestovanim (zapis, citanie, vymazanie), alebo pomocou PROPERTY Navigator.cookieEnabled.
   D. COOKIES maju standardne platnost do ukoncenia procesu WEB BROWSER, ale v pripade, za sa ako ATTRIBUTE 'max-age' definuje cas platnosti COOKIE, tato ostane na DISKU do doby kym stanoveny cas nevyexpiruje.
   E. STANDARDNE su COOKIES pristupne z WEB PAGES, ktore su v TOM ISTOM WEB DIRECTORY, alebo v niektorom zo SUBDIRECTORIES. Toto chovanie je mozne zmenit nastavenim ATTRIBUTES 'path' a 'domain'.
   F. COOKIE ATTRIBUTE 'secure' urcuje ci sa dany COOKIE bude prenasat aj cez HTTP PROTOCOL, alebo sa bude prenasat IBA cez HTTPS PROTOCOL.
   G. VALUE COOKIE sa zapisuje zaslanim prikazu [Name=Value] do PROPERTY Document.cookie. Kedze vsak COOKIES NEPODPORUJU vo VALUES znaky ' ', ';' a WHITESPACES je mozne pouzit GLOBAL FUNCTIONS encodeURIComponent() a decodeURIComponent() na serializaciu a deserializaciu COOKIE VALUES.
   H. Ak chcem vytvorit PERSISTENT COOKIE musim pouzit prikaz [Name=Value;max-age=TimeoutInSeconds], kde 'TimeoutInSeconds' urcuje cas expiracie daneho COOKIE VALUE.
   !!! I. Podobnym sposobom ako 'max-age' [Name=Value;max-age=TimeoutInSeconds] sa pridavaju aj ine ATTRIBUTES. ATTIBUTE 'path' sa pridava pomocou [Name=Value;path=Path]. ATTIBUTE 'domain' sa pridava pomocou [Name=Value;domain=Domain]. ATTIBUTE 'secure' sa pridava pomocou [Name=Value;secure]. Samozrejme naraz je mozne nastavit aj VIAC ATTRIBUTES, pricom vzajomne su oddelene znakom ';'.
   J. PERSISENT COOKIES sa mazu nastavenim 'max-age' na 0 ([Name=Value;max-age=0]).
   !!! K. Citanie COOKIES sa robi tak, ze sa nacita hodnota PROPERTY Document.cookie, ktora obsahuje zoznam VSETKYCH COOKIES BEZ ATTRIBUTES [Name1=Value1;Name2=Value2;...;NameN=ValueN]. Hodnoty jednotlivych COOKIES je nutne MANUALNE PARSOVAT.
   L. COOKIES, kedze su pri kazdom HTTP REQUEST prenasane na SERVER a SPAT, su urcene na ukladanie MALEHO MNOZSTVA DAT. Typicky dlkza COOKIES je casto obmedzena velkostou 4 KB.
11. IE USER DATA je mechanizmus SPECIFICKY pre IE sluziaci na ukladanie STREDNE VELKYCH OBJEMOV DAT na DISK. Ma nasledujuce vlastnosti.
   A. Umoznuje ukladat na DISK obsah LUBOVOLNEHO HTML ELEMENT nastavenim PROPERTY Element.style.behavior na STRING [url('#default#userData')].
   B. PO NASTAVENI PROPERTY Element.style.behavior na STRING [url('#default#userData')] PRIBUDNU do HTML ELEMENT METHODS load() a save() pomocou ktorych je mozne zapisovat a citat HTML ELEMENT na DISK.
   C. Do HTML ELEMENT zapisaneho na disk je mozne PRIDAVAT a ODSTRANOVAT ATTRIBUTES pomocou METHODS Element.getAttribute(), Element.setAttribute() a Element.removeAttribute().
   D. EXPIRACNY CAS je mozne nastavit tak, ze sa do HTML ELEMENT PRIDA PROPERTY 'expires' v ktorom sa urci cas expiracie.
   E. HTML ELEMENTS ulozene na distku su pristupne z WEB PAGES, ktore su v TOM ISTOM WEB DIRECTORY ako WEB PAGE, ktora ich ulozila na DISK.
12. OFFLINE WEB APPLICATIONS je HTML 5 mechanizmus umoznujuci ukladat cele WEB PAGES a prislusne FILES do CLIENT SIDE STORAGE, kde je potom s nimi mozne pracovat ako keby sa jednalo o nainstalovane programy, aj bez pristupu na INTERNET. OFFLINE WEB APPLICATIONS sa vytvaraju nasledujucim sposobom.
   A. Vytvori sa MANIFEST FILE (.APPCACHE) obsahujuci zoznam vsetkych FILES, ktore sa maju ulozit do CLIENT SIDE STORAGE. Tento FILE musi WEB SERVER vracat s MIME TYPE 'text/cache-manifest'.
   B. Kazda HTML WEB PAGE, ktora je sucastou WEB APPLICATION sa musi v <html> ELEMENT v ATTRIBUTE 'manifest' odkazovat na TEN ISTY MANIFEST FILE (.APPCACHE).
   !!! C. MANIFEST FILE moze obsahovat viacero SECTIONS. SECTION 'NETWORK' obsahuje FILE PREFIXES oznacujuce WEB PAGES, ktore su VZDY NACITANE z INTERNETU a teda v OFFLINE REZIME s nimi NIE JE MOZNE PRACOVAT. SECTION 'FALLBACK' obsahuje dvoje FILE PREFIXES a FILES. FILE PREFIX odkazuje na WEB PAGE, ktora sa ma stiahnut z INTERNETU. FILE zas ukazuje na ALTERNATIVNU WEB PAGE, ktora sa zobrazi NAMIESTO FILE PREFIX, ak je INTERNET NEDOSTUPNY.
   D. Ak chcem zachytavat EVENTS z OFFLINE WEB APPLICATIONS je mozne vyuzit OBJECT ApplicationCache, ktory je pristupny cez PROPERTY Window.applicationCache. OBJECT ApplicationCache obsahuje viacero EVENTS, ktore je mozne zachytavat a zistit tak priebeh cinnosti OFFLINE WEB APPLICATIONS.
!!! 13. OFFLINE WEB APPLICATIONS IE9 NEPODPORUJE.
//-------------------------------------------------------------------------------------------------------