//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje ako pouzit ABSTRACTION pri vytvarani SPRING BEANS.
2. SPRING FRAMEWORK podporuje ABSTRACTION, tj. referovanie na SPRING BEANS pomocou INTERFACES, ktore SPRING BEANS implementuju.
3. Nie vsetky JAVA OBJECTS musia byt spravovane SPRING CONTEXT. Do SPRING CONTEXT je treba pridavat iba tie JAVA OBJECTS, ktore potrebuju vyuzivat vlastnosti SPRING FRAMEWORK ako napriklad DEPENDENCY INJECTION.
!!! 4. JAVA OBJECTS, ktore NEVYUZIVAJU funkcionality SPRING FRAMEWORK by sa NEMALI pridavat do SPRING CONTEXT, pretoze to znizuje PERFORMANCE.
!!!!! 5. ANNOTATION [@Component], ktorou sa oznacuje TYPE za TYPE, ktory moze byt zaradeny do SPRING CONTEXT sa VZDY aplikuje IBA na TYPES, z ktoreho moze SPRING FRAMEWORK vytvarat instancie. To znamena, ze ANNOTATION [@Component] sa NIKDY neaplikuje na INTERFACES ani ABSTRACT CLASSES, ale VZDY sa musi aplikovat na CLASSES, ktore dane INTERFACES a ABSTRACT CLASSES implementuju.
6. ANNOTATION [@ComponentScan] moze namiesto definovania PACKAGES, ktore sa maju byt SCANNED definovat konkretne CLASSES, ktore maju byt SCANNED. CLASSES sa definuju pomocou PARAMETER [basePackageClasses], ktory ma nasledujucu SYNTAX. ANNOTATION [@ComponentScan(basePackageClasses={CLASS_1.class,...,CLASS_N.class})], kde VALUE 'CLASS_1' a VALUE 'CLASS_N' su nazvy CLASSES, ktore su SCANNED. Vyhodou tohto pristupu je, ze je TYPE SAFE.
7. Ak INTERFACE, alebo BASE CLASS implementuje viacero CLASSES, ktore su definovane ako SPRING BEANS, SPRING FRAMEWORK musi vediet, ktoru instanciu SPRING BEAN ma vytvorit. To je mozne definovat nasledujucimi sposobmi.
   A. Pouzit ANNOTATION [@Primary].
   B. Pouzit ANNOTATION [@Qualifier].
8. Pre pouzitie ANNOTATION [@Primary] na vykonanie RESOLUTION, ktora CLASS implementujuca INTERFACE, alebo BASE CLASS sa ma pouzit platia nasledujuce fakty.
   A. ANNOTATION [@Primary] sa aplikuje na jednu z METHODS CONFIGURATION CLASS vytvarajucich CLASS implementujucu INTERFACE, alebo BASE CLASS.
   !!! B. ANNOTATION [@Primary] je mozne aplikovat aj priamo na CLASS, ktora implementuje INTERFACE, alebo BASE CLASS.
   C. ANNOTATION [@Primary] zabezpeci, ze sa dana METHOD pouzije na vytvorenie CLASS, ktora je substituovana za INTERFACE, alebo BASE CLASS.
9. Pre pouzitie ANNOTATION [@Qualifier] na vykonanie RESOLUTION, ktora CLASS implementujuca INTERFACE, alebo BASE CLASS sa ma pouzit platia nasledujuce fakty.
   A. ANNOTATION [@Qualifier] sa aplikuje na CONSTRUCTOR PARAMETER (FIELD, alebo SETTER) PARENT BEAN, ktorym sa nastavuje FIELD PARENT BEAN na instanciu CHILD BEAN. Aplikovanim ANNOTATION [@Qualifier] sa priradi CONSTRUCTOR PARAMETER (FIELD, alebo SETTER) SPRING BEAN NAME.
   B. ANNOTATION [@Qualifier] sa aplikuje na jednu z METHODS CONFIGURATION CLASS vytvarajucich CLASS implementujucu INTERFACE, alebo BASE CLASS. Aplikovanim ANNOTATION [@Qualifier] sa priradi METHOD SPRING BEAN NAME.
   C. SPRING FRAMEWORK vyhlada ten SPRING BEAN, ktoreho nazov sa v oboch ANNOTATION [@Qualifier] zhoduje.
!!! 10. Ak SPRING FRAMEWORK nevie jednoznacne najst CLASS, ktora implementuje INTERFACE, alebo BASE CLASS, dojde k vzniku EXCEPTION.
11. SPRING FRAMEWORK okrem ANNOTATION [@Component] definuje alternativne ANNOTATIONS, ktore su funkcne identicke s ANNOTATION [@Component] (oznacuju CLASS za SPRING BEAN OBJECT), ale zaroven presnejsie popisuju rolu v akej dany SPRING BEAN vystupuje.
   A. ANNOTATION [@Service] sa aplikuje na SPRING BEAN, ktory reprezentuje SERVICE.
   B. ANNOTATION [@Repository] sa aplikuje na SPRING BEAN, ktory reprezentuje REPOSITORY.
//----------------------------------------------------------------------------------------------------------------------