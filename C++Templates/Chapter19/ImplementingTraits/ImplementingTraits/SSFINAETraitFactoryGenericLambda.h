//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "STypeFunctionBoolConstant.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! FUNCTION DECLARATION pre TRUE CASE.
// !!!!! FUNCTION DECLARATION kontroluje ci existuje FUNCTION [TFunction(TArguments&&...)]. Ak nie, tak je FUNCTION odstranena pomocou SFINAE principu.
template<typename TFunction, typename... TArguments, typename=decltype(std::declval<TFunction>()(std::declval<TArguments&&>()...))>
TypeFunctionTrueType SFINAETraitFactoryGenericLambdaIsValidFunction(void*);
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! FUNCTION DECLARATION pre FALSE CASE.
// !!!!! FUNCTION DECLARATION je FALLBACK CASE v pripade, ze 1. verzia FUNCTION je odstranena pomocou SFINAE principu.
template<typename TFunction, typename... TArguments>
TypeFunctionFalseType SFINAETraitFactoryGenericLambdaIsValidFunction(...);
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
inline constexpr auto											SFINAETraitFactoryGenericLambdaIsValid=[](auto Function)
{
	return([](auto&&... Arguments)
	{
		return(decltype(SFINAETraitFactoryGenericLambdaIsValidFunction<decltype(Function),decltype(Arguments)&&...>(nullptr)){});
	});
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
struct SSFINAETraitFactoryGenericLambda final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													TYPE=TType;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
constexpr auto													SFINAETraitFactoryGenericLambdaType=SSFINAETraitFactoryGenericLambda<TType>{};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! FUNCTION ma iba DECLARATION, ale NIE DEFINITION, a preto sa moze pouzivat iba v UNEVALUATED CONTEXTS.
template<typename TType>
TType SFINAETraitFactoryGenericLambdaGetValueType(SSFINAETraitFactoryGenericLambda<TType>);
//----------------------------------------------------------------------------------------------------------------------