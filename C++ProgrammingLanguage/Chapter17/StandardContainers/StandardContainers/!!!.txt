//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje COLLECTIONS v STL.
2. STL rozdeluje COLLECTIONS na 2 TYPY.
   A. SEQUENCES. Su to COLLECTIONS, ktore maju podobne metody ako vector<T>. Reprezentuju klasicke COLLECTIONS.
   B. ASSOCIATIVE CONTAINERS. Su to COLLECTIONS typu DICTIONARY.
3. COLLECTIONS maju nasledujuce deklaracie internych TYPES.
  A. TYPE 'value_type' reprezentuje TYPE ITEMU.
  B. TYPE 'allocator_type' reprezentuje TYP ALLOCATOR. ALLOCATOR sa pouziva na alokaciu a dealokaciu pamate COLLECTION.
  C. TYPE 'allocator_type::size_type' reprezentuje TYP pouzivany pri INDEXOVANI COLLECTION.
  D. TYPE 'allocator_type::difference_type' reprezentuje TYP vracany pri ODCITAVANI 2 ITERATORS.
  E. TYPE 'iterator' reprezentuje zakladny TYP NON-CONST ITERATOR.
  F. TYPE 'const_iterator' reprezentuje zakladny TYP CONST ITERATOR.
  G. TYPE 'reverse_iterator' reprezentuje REVERSE TYP NON-CONST ITERATOR. Je implementovany pomocou TEMPLATE reverse_iterator<T>.
  H. TYPE 'const_reverse_iterator' reprezentuje REVERSE TYP CONST ITERATOR. Je implementovany pomocou TEMPLATE reverse_iterator<T>.
  I. TYPE 'allocator_type::pointer' reprezentuje TYP pouzivany ako POINTER pre ALLOCATOR.
  J. TYPE 'allocator_type::const_pointer' reprezentuje TYP pouzivany ako CONST POINTER pre ALLOCATOR.
  K. TYPE 'allocator_type::reference' reprezentuje TYP pouzivany ako REFERENCE pre ALLOCATOR.
  L. TYPE 'allocator_type::const_reference' reprezentuje TYP pouzivany ako CONST REFERENCE pre ALLOCATOR.
  M. TYPE 'key_type' reprezentuje TYP pouzivany ako KEY v ASSOCIATIVE CONTAINERS.
  N. TYPE 'mapped_type' reprezentuje TYP pouzivany ako VALUE v ASSOCIATIVE CONTAINERS.
  O. TYPE 'key_compare' reprezentuje TYP pouzivany na porovnavanie KEYS v ASSOCIATIVE CONTAINERS. Standardne je to FUNCTOR less<T>, ktory vyuziva OPERATOR<.
!!!!! 4. Zmyslom definicie ROVNAKO POMENOVANYCH TYPES v KAZDOM CONTAINER je umoznenie vytvorenie TEMPLATE BASED ALGORITMOV, ktore NAMIESTO REALNYCH TYPOV pouzivaju TYPES ako 'iterator', 'allocator_type::size_type' ci 'allocator_type::pointer'. Kedze KAZDA COLLECTION TAKTO POMENOVANE TYPY DEFINUJE, tak je mozne pisat GENERICKE TEMPLATAE ALGORITMY pomocou tychto typov, namiesto odkazovania sa na SKUTOCNY TYP.
!!!!! 5. V ASSOCIATIVE CONTAINERS pri ITEROVANI su ITEMS usporiadane podla KEY, ktora sa porovnava FUNCTOROM (CLASS s pretazenym OPERATOR()), ktoru specifikujem ako TEMPLATE PARAMETER ASSOCIATIVE CONTAINER. Standardne je to FUNCTOR less<T>, ktory vyuziva OPERATOR<.
67. STL obsajuje nasledujuce CONTAINERS.
   A. CLASS vector<T> reprezentuje dynamicky rozsirovatelny ARRAY.
   B. CLASS list<T> reprezentuje implementaciu LIST.
   C. CLASS stack<T> reprezentuje implementaciu STACK.
   D. CLASS queue<T> reprezentuje implementaciu QUEUE.
   E. CLASS dequeue<T> reprezentuje implementaciu objsmernej QUEUE.
   F. CLASS priority_queue<T> reprezentuje implementaciu zotriedenej QUEUE.
   G. CLASS map<K,T> reprezentuje implementaciu DICTIONARY.
   H. CLASS multimap<K,T> reprezentuje implementaciu DICTIONARY, kde kazdy KEY moze obsahovat VIACERO VALUES.
   I. CLASS set<T> reprezentuje implementaciu SET.
   J. CLASS multiset<T> reprezentuje implementaciu SET, kde moze viacero ROVNAKYCH VALUES.
!!! 7. ITEMS do COLLECTIONS su VZDY KOPIROVANE a to bud pomocou OPERATOR=, alebo COPY CONSTRUCTOR. Z toho vyplyva, ze KAZDY TYPE, ktory ma byt ukladany do COLLECTIONS MUSI mat definovany OPERATOR= a COPY CONSTRUCTOR.
!!! 8. ASSOCIATIVE CONTAINERS MUSIA byt ITEMS, ktore su schopne vykonavat ORDERING. Standardne sa na ORDERING pouziva FUNCTOR less<T>, ktory pouziva OPERATOR<. Je ho vsak mozne nahradit INYM FUNCTOR objektom. FUNCTOR musi mat pretazeny OPERATOR(), ktory ma 2 PARAMETRE toho isteho TYPU ako je TYPE ITEMS v COLLECTION.
9. CLASS vector<T> ma nasledujuce deklaracie METHODS a OPERATORS.
   A. Metoda begin() vracia bud CONST, alebo NON-CONST ITERATOR odkazujuci sa na ZACIATOK vector<T>.
   B. Metoda end() vracia bud CONST, alebo NON-CONST ITERATOR odkazujuci sa na (KONIEC+1) vector<T>.
   C. Metoda rbegin() vracia bud CONST, alebo NON-CONST REVERSE ITERATOR odkazujuci sa na poziciu KONIEC vector<T>.
   D. Metoda rend() vracia bud CONST, alebo NON-CONST REVERSE ITERATOR odkazujuci sa na poziciu (ZACIATOK-1) vector<T>.
   E. OPERATOR operator[]() vracia ITEM na N-tej pozicii, pricom sa NEKONTROLUJE PREKROCENIE ROZSAHU vector<T>.
   F. Metoda at() vracia ITEM na N-tej pozicii, pricom sa KONTROLUJE PREKROCENIE ROZSAHU vector<T>. V pripade PREKROCENIA ROZSAHU je hodena EXCEPTION 'out_of_range'.
   G. Metoda front() vracia REFERENCE na PRVY ITEM vector<T>.
   H. Metoda back() vracia REFERENCE na POSLEDNY ITEM vector<T>.
   I. OPERATOR operator=() vykonava kopirovanie CELEHO vector<T> do noveho vector<T>.
   J. Metoda assign() umoznuje skopirovat iba cast vector<T> do ineho vector<T>.
   K. Metoda push_back() pridava ITEM na KONIEC vector<T>.
   L. Metoda pop_back() odstranuje ITEM z KONCA vector<T>.
   M. Metoda size() vracia pocet ITEMS vo vector<T>.
   N. Metoda insert() umoznuje vkladat 1-N ITEMS PRED poziciu definovanu ITERATOROM.
   O. Metoda erase() umoznuje odstranovat 1-N ITEMS. Pri odstranovani N ITEMS su odstranovane ITEMS na poziciach <ITERATOR1,ITERATOR2-1>.
   P. Metoda clear() odstranuje vsetky ITEMS z vector<T>.
   Q. Metoda resize() sposobuje zmenu velkosti vector<T>.
   R. Metoda reserve() umoznuje menit velkost CAPACITY INTERNEHO BUFFERA.
   S. Metoda capacity() vracia velkost CAPACITY INTERNEHO BUFFERA.
   T. Metoda max_size() vracia MAXIMALNU moznu velkost vector<T>.
   U. Metoda empty() vracia informaciu ci vector<T> je PRAZDNY.
   V. Metoda swap() je SPECIALNE OPTIMALIZOVANA a to tak, ze SWAP robi NIE NA ITEMS, ale iba na PRIVATE FIELDS 2 vector<T>, cim sa dosahuje TA ISTA FUNKCIONALITA, ale OVELA RYCHLEJSIE.
   W. Metoda get_allocator() vracia ALLOCATOR asociovany s vector<T>.
10. CLASS list<T> reprezentuje implementaciu LIST. Obsahuje ROVNAKE METODY ako vector<T> s vynimkou OPERATOR[], capacity() a reserve(). Takisto NEMA RANDOM-ACCESS ITERATORS. CLASS list<T> obsahuje i nasledujuce MEMBERS.
   A. Metoda splice() umoznuje presunut ITEMS z jedneho list<T> do ineho list<T>, pricom z povodneho list<T> sa ITEMS ODSTRANIA. Operacia sa robi BEZ nutnosti KOPIROVANIA ITEMS cez COPY CONSTRUCTOR ci OPERATOR=. Menia sa iba WRAPER OBJEKT pre LIST ITEMS, ktorm sa zmenia LIST ITEMS POINTERS.
   B. Metoda merge() skopiruje list<T> VSETKY ITEMS z druheho list<T> pricom ich z druheho list<T> ZMAZE. OBE list<T> MUSIA BYT SORTED, inak je hodeny ASSERT.
   C. Metoda sort() zotriedi ITEMS.
   D. Metoda push_front() pridava ITEM na ZACIATOK list<T>.
   E. Metoda pop_front() odstranuje ITEM zo ZACIATOKU list<T>.
   F. Metoda remove() odstranuje ITEMS z list<T> ktore sa ZHODUJU (pouziva sa OPERATOR==) s ITEM zaslanom v PARAMETRI METODY.
   G. Metoda remove_if() odstranuje ITEMS z list<T> volanim PREDICATE na KAZDY ITEM. ITEMS pre ktore PREDICATE vrati TRUE su ODSTRANENE. PREDICATE je FUNCTOR s 1 PARAMETROM a RETURN VALUE typu BOOL.
   H. Metoda unique() odstranuje vsetky DUPLIKATNE ITEMS v SORTED list<T>.
   I. Metoda reverse() obrati poradie ITEMS naopak.
!!! 11. Ak sa z COLLECTION odstranuje ITEM, ktory je typu POINTER, tak sa NEVOLA pre tento POINTER OPERATOR delete. Ten ju nutne volat EXPLICITNE.
12. CLASS deque<T> je KOMBINACIA vector<T> a list<T>. Umoznuje RYCHLE pridavanie a odstranovanie ITEMS z OBOCH KONCOV deque<T>. Umoznuje pouzivat OPERATOR[]. Avsak pridavanie a uberanie ITEMS zo STREDU deque<T> je POMALE ako pri vector<T>.
!!! 13. CLASSES stack<T>, queue<T> a priority_queue<T> NIE SU SKUTOCNYMI COLLECTIONS, ale iba SEQUENCE ADAPTERS. Znamena to, ze OBALUJU SKUTOCNU COLLECTION typu SEQUENCE (vector<T>, list<T>, alebo deque<T>), pricom vystavuju iba OBMEDZENY POCET METOD na pracu s danym typom COLLECTION.
!!!!! 14. SEQUENCE ADAPTERS NEPODPORUJU ITERATORS. Znamena to, ze NIE JE MOZNE PRECHADZAT jeho ITEMS.
15. CLASS stack<T> reprezentuje SEQUENCE ADAPTER, ktory ma STANDARDNE ako INTERNU COLLECTION deque<T> co vsak je mozne zmenit pomocou TEMPLATE PARAMETRA. CLASS NEPODPORUJE ITERATORS. Ma nasledujuce MEMBERS.
   A. Metoda top() vracia ITEM z VRCHOLU stack<T>.
   B. Metoda push() pridava ITEM na VRCHOL stack<T>.
   C. Metoda pop() odstranuje ITEM z VRCHOLU stack<T>.
   D. Metoda size() vracia pocet ITEMS v stack<T>.
   E. Metoda empty() vracia informaciu ci stack<T> je PRAZDNY.
   F. Metoda swap() urobi SWAP 2 stack<T> objektov.
16. CLASS queue<T> reprezentuje SEQUENCE ADAPTER, ktory ma STANDARDNE ako INTERNU COLLECTION deque<T> co vsak je mozne zmenit pomocou TEMPLATE PARAMETRA. CLASS NEPODPORUJE ITERATORS. Ma nasledujuce MEMBERS.
   A. Metoda front() vracia ITEM z ZACIATKU queue<T>.
   B. Metoda back() vracia ITEM z KONCA queue<T>.
   C. Metoda push() pridava ITEM na KONIEC queue<T>.
   D. Metoda pop() odstranuje ITEM zo ZACIATKU queue<T>.
   E. Metoda size() vracia pocet ITEMS v queue<T>.
   F. Metoda empty() vracia informaciu ci queue<T> je PRAZDNY.
   G. Metoda swap() urobi SWAP 2 queue<T> objektov.
!!! 17. Pre queue<T> NEMOZE byt vector<T> ako INTERNA COLLECTION (definovana cez TEMPLATE PARAMETER), lebo nema metody front() a pop_front(). Pouzit je mozne list<T> a deque<T>.
18. CLASS priority_queue<T> reprezentuje SEQUENCE ADAPTER, ktory ma STANDARDNE ako INTERNU COLLECTION vector<T> co vsak je mozne zmenit pomocou TEMPLATE PARAMETRA. CLASS NEPODPORUJE ITERATORS. CLASS umoznuje vyberat ITEMS podla PRIORITY. Vybera sa VZDY ITEM, ktory pri aplikovani POROVNANIA NAJVACSI. CLASS ma nasledujuce MEMBERS.
   A. Metoda top() vracia ITEM s NAJVYSSOU PRIORITOU (hodnotou) z priority_queue<T>.
   B. Metoda push() pridava ITEM do priority_queue<T>.
   C. Metoda pop() odstranuje ITEM s NAJVYSSOU PRIORITOU (hodnotou) z priority_queue<T>.
   D. Metoda size() vracia pocet ITEMS v priority_queue<T>.
   E. Metoda empty() vracia informaciu ci priority_queue<T> je PRAZDNY.
   F. Metoda swap() urobi SWAP 2 priority_queue<T> objektov.
!!! 19. CLASS priority_queue<T> ma zlozitost pre PUSH a POP O(log(n)). Interne je spravidla implementovana ako TREE, alebo HEAP.
20. CLASS map<K,T> reprezentuje ASSOCIATIVE CONTAINER, ktory sluzi ako DICTIONARY. Ma nasledujuce vlastnosti.
   A. CLASS map<K,T> implementuje DICTIONARY.
   B. ITEM v map<K,T> je CLASS pair<K,T>.
   C. CLASS map<K,T> podporuje i ITERATORS. Teda je mozne iterovat ITEMS v COLLECTION map<K,T>.
   D. ITERATOR nad map<K,T> prechadza ITEMS v PORADI ako urci COMPARATOR (FUNCTOR, ktory moze byt preneseny ako TEMPLATE PARAMETER). Standardne sa pouziva FUNCTIOR less<K>, ktory pouziva OPERATOR<.
   !!! E. OPERATOR[] ma zlozitost O(log(N)) a to ako pri CITANI, tak i pri VKLADANI.
   !!!!! F. CLASS map<K,T> NIE JE HASH TABLE (ta by mala zlozitost O(1)) a NEUKLADA ITEMS do HASH TABLE. Je to BINARNY TREE, pricom pri vybere ITEMS sa prechadza tento BINARNY TREE. Preto je zlozitost vyberu ITEMS O(log(N)).
   !!! G. VALUE TYPE MUSI mat DEFAULT CONSTRUCTOR, aby bolo mozne pouzit OPERATOR[].
21. CLASS map<K,T> ma nasledujuce MEMBERS.
   A. Metoda insert() vlozi ITEM pair<K,T> pomocou ITERATORA. Vlozenie ITEM pomocou ITERATOR ma iba OPTIMALIZACNY VYZNAM pre VYSSIU RYCHLOST vlozenia ITEM, kedze v TREE (co je vnutorna implementacia map<K,T>) uz NETREBA HLADAT NODE, kde sa ITEM VLOZI, ale ten je dany poziciou ITERATORA.
   B. Metoda erase() odstranuje ITEM pre dany ITERATOR, alebo ITERATORS.
   C. Metoda clear() odstrani vsetky ITEMS.
   !!! D. Metoda find() najde ITEM pre dany KEY. KLUCOVYM ROZDIELOM oproti OPERATOR[] je, ze v pripade, ze ITEM s danym KEY NEEXISTUJE, tak NEPRIDA NOVY ITEM do map<K,T>.
   E. Metoda count() vracia pocet ITEMS pra dany KEY. Pre map<K,T> su mozne hodnoty 0 a 1. Pre multimap<K,T> to moze byt aj hodnota VYSSIA ako 1.
   F. Metoda lower_bound() vracia ITERATOR ukazujuci na ITEM, ktoreho KEY je <= hodnote KEY zadanej v PARAMETRI METODY.
   G. Metoda upper_bound() vracia ITERATOR ukazujuci na ITEM, ktoreho KEY je > hodnote KEY zadanej v PARAMETRI METODY. Teda ak v map<K,T> existuje hladany KEY, tak ITERATOR bude ukazovat AZ ZA TENTO KEY (musi byt VACSI a NIE VACSI, alebo ROVNY).
   H. Metoda equal_bound() vracia pair<ITERATOR,ITERATOR> ukazujuci na ITEMS, ktorych KEYS su == hodnote KEY zadanej v PARAMETRI METODY. ITERATORS ukazuju na <KEY,KEY+1>, pricom pri multimap<K,T> interval moze zahrnat VIAC ITEMS s ROVNAKYMI KEYS.
   I. Metoda size() vracia pocet ITEMS v map<K,T>.
   J. Metoda begin() vracia ITERATOR na FIRST ITEM.
   K. Metoda end() vracia ITERATOR na (LAST+1) ITEM.
   L. Metoda rbegin() vracia ITERATOR na (FIRST-1) ITEM.
   M. Metoda rend() vracia ITERATOR na LAST ITEM.
   !!! N. OPEATOR[] vracia pre dany KEY ITEM. AK vsak pre dany KEY v map<K,T> NEEXISTUJE ITEM, tak ho OPERATOR[] VYTVORI a ZARADI do map<K,T> pricom ako VALUE da DEFAULT VALUE.
   O. Metoda key_comp() vracia FUNCTOR pouzivany na porovnavanie KEYS. Tento je mozne definovat pomocou TEMPLATE PARAMETER, alebo CONSTRUCTOR.
   P. Metoda value_comp() vracia FUNCTOR pouzivany na porovnavanie VALUE.
   Q. Metoda swap() vymeni dve instancie map<K,T>.
22. CLASS multimap<K,T> reprezenuje VSEOBECNEJSIU implementaciu map<K,T>, kde JEDNEMU KEY moze byt priradenych VIACERO VALUES.
!!! 23. Pri multimap<K,T> NEEXISTUJE OPERATOR[]. Pre vyhladavanie ITEMS je treba pouzit metody lower_bound(), upper_bound() a equal_bound().
24. CLASS set<K> implementuje SET, kde kazdy ITEM sa moze nachadzat IBA RAZ.
25. CLASS multiset<K> implementuje SET, kde kazdy ITEM sa moze nachadzat VIACKRAT. Na vyhladavanie ITEMS sa pouzivaju metody lower_bound(), upper_bound() a equal_bound().
26. CLASS valarray<T> ma pretazeny OPERATOR[] a tiez funguje ako jednoducha COLLECTION. NEPODPORUJE vsak ITERATORS.
27. CLASSES string a wstring su PRIMITIVNE COLLECTIONS, ktore podporuju ITERATORS i OPERATOR[].
28. CLASS bitset<N> implementuje optimalizovanu COLLECTION binarnych FLAGS. Ma nasledujuce vlastnosti.
   A. TEMPLATE PARAMETER 'N' urcuje VELKOST BIT SET v BITOCH.
   B. CLASS NEMA ITERATORS.
   !!! C. CLASS ma OPERATOR[], pricom pri prekroceni hranic je generovana EXCEPTION 'out_of_range'. Avsak vyzera to, ze Visual C++ GENERUJE NAMIESTO TOHO ASSERT.
   D. Pretazeny CONSTRUCTOR umoznuje inicializovat bitset<N> aj pomcou STRING, ktory moze obsahovat iba znaky '0' a '1'.
   E. CLASS ma sadu pretazenych OPERATOR vratane BITOVYCH OPERATORS, ktore umoznuju pracu s bitset<N>.
//-------------------------------------------------------------------------------------------------------