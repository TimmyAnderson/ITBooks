//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje SPRING SCOPES.
2. SPRING SCOPE definuje LIFE CYCLE SPRING BEANS.
3. SPRING FRAMEWORK definuje nasledujuce SCOPES.
   A. SINGLETON.
   B. PROTOTYPE.
   C. REQUEST.
   D. SESSION.
   E. APPLICATION.
4. Pre SINGLETON SCOPE v SPRING FRAMEWORK platia nasledujuce fakty.
   A. SINGLETON SCOPE znamena, ze z daneho SPRING BEAN existuje v SPRING CONTEXT iba 1 INSTANCIA. To znamena, ze aj ked sa vycitava zo SPRING CONTEXT REFERENCE na dany SPRING BEAN, SPRING CONTEXT stale vrati TU ISTU INSTANCIU SPRING BEAN.
   !!!!! B. Na rozdiel od klasickeho SINGLETON PATTERN, kde pre dany TYPE existuje v PROGRAME iba 1 INSTANCIA daneho TYPE, v pripade SPRING FRAMEWORK moze v jednom SPRING CONTEXT pre dany TYPE existovat VIACERO SINGLETON SPRING BEANS. Podmienkou je iba to, aby kazdy SPRING BEAN mal iny NAME. To znamena, ze SINGLETONS su identifikovane podla NAME, a NIE podla TYPE.
   C. SPRING FRAMEWORK pouziva SINGLETON SCOPE ako DEFAULT SCOPE.
   D. SPRING BEAN v SINGLETON SCOPE mozu byt SHARED medzi viacerymi OBJECTS a THREADS a preto musia byt bud THREAD SAFE.
5. SPRING BEANS mozu byt SINGLETON SCOPE vytvarane nasledujucimi sposobmi.
   A. EAGER INSTANTIATION.
   B. LAZY INSTANTIATION.
6. Pre EAGER INSTANTIATION SPRING BEANS v SINGLETON SCOPE platia nasledujuce fakty.
   A. Vsetky SPRING BEANS pre EAGER INSTANTIATION su vytvorene pocas vytvarania SPRING CONTEXT.
   B. EAGER INSTANTIATION je DEFAULT v SPRING FRAMEWORK.
7. Pre LAZY INSTANTIATION SPRING BEANS v SINGLETON SCOPE platia nasledujuce fakty.
   A. SPRING BEANS pre LAZY INSTANTIATION su vytvorene vo chvili, ked je SPRING CONTEXT explicitne poziadany o ich vytvorenie.
   B. SPRING BEANS pre LAZY INSTANTIATION musia byt oznacene pomocou ANNOTATION [@Lazy]. ANNOTATION [@Lazy] je mozne aplikovat priamo na BEAN CLASS, alebo BEAN FACTORY METHOD v CONFIGURATION CLASS.
   !!! C. SPRING BEANS pre LAZY INSTANTIATION maju drobny PERFORMANCE HIT, pretoze pri poziadani o instanciu SPRING BEAN musi SPRING FRAMEWORK skontrolovat ci instancia SPRING BEAN uz bola vytvorena. To sposobuje mensi PERFORMANCE HIT.
8. Pre PROTOTYPE SCOPE v SPRING FRAMEWORK platia nasledujuce fakty.
   A. PROTOTYPE SCOPE znamena, ze SPRING FRAMEWORK vytovri vzdy NOVU INSTANCIU SPRING BEAN pri kazdom poziadani o ziskanie instancie SPRING BEAN.
   B. SPRING BEANS s PROTOTYPE SCOPE musia byt oznacene pomocou ANNOTATION [@Scope(BeanDefinition.SCOPE_PROTOTYPE)]. [@Scope(BeanDefinition.SCOPE_PROTOTYPE)] je mozne aplikovat priamo na BEAN CLASS, alebo BEAN FACTORY METHOD v CONFIGURATION CLASS.
   C. Kedze SPRING FRAMEWORK vytvara pre PROTOTYPE SCOPE vzdy novu instanciu SPRING BEAN, NEDOCHADZA k RACE CONDITION.
!!! 9. Ak PARENT SPRING BEAN v SINGLETON SCOPE potrebuje vytvorit instancie CHILD SPRING BEANS v PROTOTYPE SCOPE (napriklad pri kazdom volani METHOD), NIE JE mozne CHILD SPRING BEANS vytvorit v case vytvarania PARENT SPRING BEAN, pretoze PARENT SPRING BEAN je vytvoreny iba raz, a tym padom by aj CHILD SPRING BEANS v PROTOTYPE SCOPE boli vytvorene iba raz, cim by DE-FACTO mali SINGLETON SCOPE. Riesenie tohto problemu je nasledujuce.
   A. PARENT SPRING BEAN definuje FIELD CHILD SPRING BEAN TYPE [ApplicationContext], ktory reprezentuje SPRING CONTEXT.
   B. SPRING FRAMEWORK naplni FIELD CHILD SPRING BEAN TYPE [ApplicationContext] instanciu SPRING CONTEXT.
   !!! C. Ak PARENT SPRING BEAN potrebuje pouzit CHILD SPRING BEANS v PROTOTYPE SCOPE, ziska ich volanim METHODS SPRING BEAN TYPE [ApplicationContext]. Tym, ze CHILD SPRING BEANS su PROTOTYPE SCOPE, tak su vytvorene nove instancie CHILD SPRING BEANS.
//----------------------------------------------------------------------------------------------------------------------