//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pristup k Document Object Model (DOM) z JavaScript.
2. DOM je API, ktory je mozne pristupovat k HTML ELEMENTS, ktore reprezentuju vzhlad WEB PAGE.
!!! 3. Zakladnym OBJECT, ktorym je mozne pristupovat k strukture HTML ELEMENTS je OBJECT Element. Reprezentuje vstupny bod do DOM API.
4. HTML ELEMENTS su v DOM reprezentovane ako NODES TREE. Cely DOCUMENT je potom reprezentovany ako TREE.
!!! 5. ZAKLADNY CLASS z ktoreho dedia vsetky TREE NODES je CLASS Node. Z Node dedi napriklad OBJECT Document, Element, Attr, HTMLElement, HTMLDocument, alebo CharacterData (z neho dedia OBJECTS Text a Comment).
!!! 6. Kedze pomocou DOM je mozne reprezentovat ako HTML, tak i XML DOCUMENTS, tak DOM definuje GENERICKE CLASSES Document a Element, ako i pre HTML SPECIFICKE CLASSES HTMLDocument a HTMLElement.
!!! 7. CLASS HTMLElement je BASE CLASS pre mnozstvo CLASSES, ktore reprezentuju HTML ELEMENTS. CLASSES kopiruju PROPERTIES jednotlivych HTML ELEMENTS a pridavaju i specificke METHODS na jednoduchsiu pracu s nimi.
!!! 8. CLASS Attr reprezentuje HTML ATTRIBUTE. V praxi sa vsak pouziva VELMI ZRIEDKA, pretoze CLASS Element poskytuje METHODS na jednoduchu pracu s ATTRIBURES ako KEY-VALUE PAIRS, takze pouzitie Attr CLASS NIE JE vacsinou NUTNE.
!!! 9. CLASS DocumentFragment sa normalne na WEB PAGE NEVYSKYTUJE. Pouziva sa vsak ak mam iba FRAGMENT WEB PAGE, ktory nema ROOT OBJECT a nad tymto FRAGMENTOM potrebujem robit nejake operacie. Potom CLASS DocumentFragment sluzi ako ROOT OBJECT.
!!! 10. METHOD Document.getElementById() umoznuje vyhladavat HTML ELEMENTS podla hodnoty svojho 'id' ATTRIBUTE. Tento ATTRIBUTE je VZDY UNIKANTY v CELKOM DOCUMENT a preto tento sposob hladania HTML ELEMENTS je NAJPOUZIVANEJSI.
!!! 11. Niektore ELEMENTS (napriklad <iframe>) maju PROPERTY 'name'. Hodnota tejto PROPERTY NIE JE UNIKATNA, no pomocou METHOD HTMLDocument.getElementsByName() je mozne vyhladat VSETKY ELEMENTS, ktore maju dany NAME. METHOD HTMLDocument.getElementsByName() vracia OBJECT typu NodeList, ktory obsahuje najdene Node OBJECTS.
12. METHOD Document.getElementByTagName() vracia VSETKY ELEMENTS s definovanym TAG NAME. METHOD vracia NodeList s ELEMENTS, ktore su v ROVNAKOM PORADI v akom su uvedene v DOCUMENT.
13. I OBJECT Element obsahuje Document.getElementByTagName(), ktora vracia VSETKY aj VNORENE SUBELEMENTS s definovanym TAG NAME.
14. OBJECT HTMLDocument definuje PROPERTIES 'scripts', 'images', 'forms' a 'links' typu HTMLCollection, ktora obsahuje VSETKY ELEMENTS daneho TYPU.
15. OBJECT HTMLDocument obsahuje aj PROPERTIES 'body' odkazujuci na BODY ELEMENT a 'head' odkazujuci na HEAD ELEMENT.
!!!!! 16. CLASSES NodeList a HTMLCollection su LIVE CLASSES. To znaci, ze ked PO ICH VYTVORENI PRIDAM do WEB PAGE ELEMENT DANEHO TYPU, tak sa AUTOMATICKY OKAMZITE prida UZ DO VYTVORENYCH INSTANCII NodeList a HTMLCollection CLASSES.
!!! 17. Pomocou METHODS Document.getElementsByClassName() a Element.getElementsByClassName() je mozne ziskat NodeList s NODES, ktore obsahuju dany CLASS NAME (PROPERTY className). CLASS NAME je hodnota ATTRIBUTE 'class' a moze obsahovat VIACERO STRINGS odelenych MEDZERAMI. METHODS vracaju tie ELEMENTS, ktore obsahuju VSETKY zadane STRINGS.
!!!!! 18. CLASS NAMES sluzia na KATEGORIZACIU ELEMENTS do LUBOVOLNYCH SKUPIN. Zvycajne sa pouziva pri aplikovani CSS STYLES, ale CLASS NAMES maju aj VSEOBECNEJSIE POUZITIE.
!!! 19. CSS SELECTOR je SPECIALNA SYNTAX pomocou, ktorej je mozne vyhladavat ELEMENT na zaklade ROZLICNYCH KRITERII (hodnota ATTRIBUTE 'id', pozicia v NODE TREE, hodnota ATTRIBUTE 'class', hodnota daneho ATTRIBUTE a mnozstvo dalsich).
!!!!! 20. JavaScript poskytuje METHODS Document.querySelector(), Document.querySelectorAll(), Element.querySelector() a Element.querySelectorAll(), ktore umoznuju vyhladavat ELEMENTS podla CSS SELECTORS.
21. CLASS Document a Element obsahuje sady PROPERTIES, pomocou ktorych je mozne traverzovat TREE.
   A. PROPERTY 'parentNode' sa odkazuje na PARENT NODE daneho NODE.
   B. PROPERTY 'childNodes' obsahuje COLLECTION CHILD NODES daneho NODE.
   C. PROPERTY 'firstChild' sa odkazuje na FIRST CHILD NODE daneho NODE.
   D. PROPERTY 'lastChild' sa odkazuje na LAST CHILD NODE daneho NODE.
   E. PROPERTY 'nextSibling' sa odkazuje na NEXT SIBLING NODE daneho NODE.
   F. PROPERTY 'previousSibling' sa odkazuje na PREVIOUS SIBLING NODE daneho NODE.
   G. PROPERTY 'nodeType' vracia CISELNU HODNOTU TYPU daneho NODE.
   H. PROPERTY 'nodeValue' vracia TEXTOVU HODNOTU daneho NODE.
   I. PROPERTY 'nodeName' vracia TAG NAME daneho NODE.
!!!!! 22. Velkou nevyhodou traverzovania TREE podla vyssie spomenutych PROPERTIES je, ze traverzuju sa NIELEN ELEMENTS, ale aj TEXTY a COMMENTS. Niektore BROWSERS implementuju specialne treverzovacie PROPERTIES, ktore pracuju IBA s ELEMENTS.
   A. PROPERTY Element.children obsahuje COLLECTION CHILD ELEMENTS daneho ELEMENT.
   B. PROPERTY Element.firstElementChild sa odkazuje na FIRST CHILD ELEMENT daneho ELEMENT.
   C. PROPERTY Element.lastElementChild sa odkazuje na LAST CHILD ELEMENT daneho ELEMENT.
   D. PROPERTY Element.nextElementSibling sa odkazuje na NEXT SIBLING ELEMENT daneho ELEMENT.
   E. PROPERTY Element.previousElementSibling sa odkazuje na PREVIOUS SIBLING ELEMENT daneho ELEMENT.
   F. PROPERTY Element.childElementCount vracia pocet CHILD ELEMENTS daneho ELEMENT.
!!! 23. ATTRIBUTES HTML ELEMENTS sa mapuju na PROPERTIES HTMLElement a DERIVED CLASSES. V pripade, ze meno ATTRIBUTE je zaroven JavaScript KEYWORD, tak vacsina takychto PROPERTIIES ma meno [XXXFor]. ATTRIBUTE 'class' je mapovany na PROPERTY 'className'.
24. HTMLElement definuje sadu METHODS, ktorymi je mozne citat, zapisovat i odstranovat ATTRIBUTES. Na rozdiel od ATTRIBUTES mapovanych ako PROPERTIES, mena zadane do tychto METHODS MUSIA byt IDENTICKE ako mena ATTRIBUTES. Teda ATTRIBUTE 'class' sa zadava ako 'class' a NIE 'className'.
   A. METHOD HTMLElement.getAttibute() vracia hodnotu daneho ATTRIBUTE.
   B. METHOD HTMLElement.setAttibute() nastavuje hodnotu daneho ATTRIBUTE.
   C. METHOD HTMLElement.removeAttibute() ODSTRANUJE dany ATTRIBUTE.
   D. METHOD HTMLElement.hasAttribute() zistuje ci dany ATTRIBUTE existuje.
!!!!! 25. Pomocou METHODS HTMLElement.getAttibute(), HTMLElement.setAttibute() a HTMLElement.removeAttibute() je mozne na HTML ELEMENTS CITAT, NASTAVOVAT a ODSTRANOVAT i LUBOVOLNE CUSTOM ATTIBUTES.
!!! 26. HTML 5 definuje specialny sposob ako pridavat CUSTOM ATTRIBUTES do HTML ELEMENTS a pracovat s nimi, tak aby nebola narusenia VALIDACIA HTML WEB PAGE.
   A. CUSTOM ATTRIBUTES s menom [data-XXX], kde 'XXX' je meno CUSTOM ATTRIBUTE je v HTML 5 povazovany za VALIDNY ATTRIBUTE.
   B. HTML 5 pre Element CLASS definuje PROPERTY 'dataset', ktora ma ako PROPERTIES VSETKY CUSTOM ATTIBUTES BEZ PREFIXU [data-].
   C. PROPERTIES Element.dataset su WRITABLE a LIVE. Zmazanie PROPERTY v OBJECT 'dataset' sa OKAMZITE premietne do HTML ELEMENT a opacne.
!!! 27. PROPERTY Node.attributes pre OBJECTS typu Element obsahuje zoznam vsetkych ATTRIBUTES daneho HTML ELEMENT. Tieto su typu Attr.
28. METHOD Element.insertAdjacentHTML() umoznuje vkladat HTML STRING na 4 rozlicne miesta okolo OTVARACIEHO a ZATVARACIEHO TAGU HTML ELEMENT. Jej volanie sposobuje REFRESH celej WEB PAGE.
29. PROPERTY Element.innerHTML vracia obsah medzi BEGIN a END TAGS daneho ELEMENT v podobe HTML STRING.
30. PROPERTY Element.outerHTML vracia obsah od BEGIN az po END TAG (VRATANE TAGS) daneho ELEMENT v podobe HTML STRING.
31. PROPERTY Node.textContent vracia obsah medzi BEGIN a END TAGS daneho ELEMENT v podobe OBYCAJNY STRING bez HTML TAGS. Pri vnaranie ELEMENTS vracia STRING obsahujuci vsetky zlucene Text NODES.
!!! 31. METHOD Document.createElement() umoznuje vytvorit novy HTML ELEMENT. PARAMETER METHOD je meno HTML TAG, ktoreho ELEMENT sa ma vytvorit.
32. METHOD Document.createComment() vytvara Comment HTML ELEMENT a METHOD Document.createTextNode() vytvara Text HTML ELEMENT.
33. METHOD Document.createDocumentFragment() vytvara DocumentFragment HTML ELEMENT.
34. METHOD Node.cloneNode() vytvara bud SHALLOW, alebo DEEP COPY (aj so SUB-ELEMENTS) daneho ELEMENT.
35. METHOD Document.appendChild() pridava NODE ako POSLEDNY CHILD daneho NODE. Ak pridavany NODE uz EXISTUJE ako CHILD NODE, tak sa existujuci ODSTRANI a prida sa ako POSLEDNY CHILD.
36. METHOD Document.insertBefore() pridava NODE PRED NODE, ktory je zadany ako 2. PARAMETER. Ak pridavany NODE uz EXISTUJE ako CHILD NODE, tak sa existujuci ODSTRANI a prida na danu poziciu.
37. METHOD Document.removeChild() odstranuje CHILD NODE z daneho NODE.
38. METHOD Document.replaceChild() nahradzuje CHILD NODE danym NODE.
!!! 39. Implementacia METHODS Document.appendChild(), Document.insertBefore() a Document.replaceChild() je pre OBJECT DocumentFragment SPECIALNE UPRAVENA a to tak, ze VSETKY CHILD ELEMENTS DocumentFragment su NARAZ PRIDANE do ELEMENT, pricom z DocumentFragment su ODSTRANENE. DocumentFragment teda sluzi ako CONTAINER pre manipulaciu s ELEMENTS.
!!! 40. Vo WEB PAGE sa pozicia a velkost urcuje v PIXELOCH, pricom zaciatok COORDINATION SYSTEM je v LAVOM HORNOM ROHU bud CELEHO DOCUMENT, alebo pre ELEMENTS v <iframe> je to LAVY HORNY ROH <iframe>.
!!!!! 41. Vo WEB PAGE sa rozlisuju 2 typy COORDINATES.
   A. DOCUMENT COORDINATES urcuju poziciu ELEMENT v ramci CELEHO DOCUMENT. Pri SCROLLINGU sa hodnoty DOCUMENT COORDINATES NEMENIA (su NEZAVISLE od pozicie SCROLLBARS). Typicky sa DOCUMENT COORDINATES pouzivaju pri urcovanie pozicie ELEMENTS cez CSS.
   B. VIEWPORT COORDINATES urcuju poziciu ELEMENT v ramci VIEWPORT (beru sa do uvahy pozicie SCROLLBARS). VIEWPORT COORDINATES sa teda pri SCROLLINGU MENIA v ZAVISLOSTI od POZICIE SCROLLBARS. VIEWPORT COORDINATES sa pouzivaju pri dotazovani na aktualnu pozicu ELEMENT, alebo MOUSE POINTER pri MOUSE EVENTS.
42. Poziciu a velkost VIEWPORT (pre DOCUMENT i FRAME) je mozne zistit nasledujucimi PROPERTIES.
   A. PROPERTIES Window.pageXOffset a Document.scrollLeft urcuju poziciu X daneho VIEWPORT.
   B. PROPERTIES Window.pageYOffset a Document.scrollTop urcuju poziciu Y daneho VIEWPORT.
   C. PROPERTIES Window.innerWidth a Document.clientWidth urcuju X SIZE daneho VIEWPORT.
   D. PROPERTIES Window.innerHeight a Document.clientHeight urcuju Y SIZE daneho VIEWPORT.
43. METHOD Element.getBoundingClientRect() vracia OBJECT obsahujuci POZICIE ELEMENT (PROPERTIES 'left', 'top', 'right' a 'bottom') vo VIEWPORT COORDINATES.
44. METHOD Element.getClientRect() vracia VSETKY RECTANGLES v ktorom sa nachadza dany ELEMENT. Tato METHOD ma vyznam napriklad pri ELEMENTE, ktory zobrazuje VIACRIADKOVY TEXT, kde KAZDY RIADOK ma ROZDIELNU VELKOST. Potom Element.getClientRect() vracia RECTANGLES jednotlivych RIADKOV.
45. METHOD Document.elementFromPoint() vracia ELEMENT, ktory sa nachadza na zadanych VIEWPORT COORDINATES.
46. METHOD Window.scrollTo() vykona SCROLLING na stanovenu poziciu. Stanovene COORDINATES sa stanu hodnotami (0,0) daneho VIEWPORT.
47. METHOD Window.scrollBy() vykona SCROLLING o dany OFFSET.
48. METHOD Element.scrollIntoView() zabezpeci, aby ELEMENT na ktorom je volana bol VISIBLE.
49. CLASS ELEMENT ma mnozstvo PROPERTIES, ktorymi je mozne zistovat rozmery ELEMENTS.
   A. PROPERTY Element.offsetWidth vracia SIRKU daneho ELEMENT.
   B. PROPERTY Element.offsetHeight vracia VYSKU daneho ELEMENT.
   C. PROPERTY Element.offsetLeft vracia X poziciu ELEMENTU relaltivnu voci pozicii ELEMENTU v Element.offsetParent. Ak je Element.offsetParent rovny 'null', tak sa vracia pozicia v DOCUMENT COORDINATES (nazavisle na pozicii SCROLLBARS).
   D. PROPERTY Element.offsetTop vracia Y poziciu ELEMENTU relaltivnu voci pozicii ELEMENTU v Element.offsetParent. Ak je Element.offsetParent rovny 'null', tak sa vracia pozicia v DOCUMENT COORDINATES (nazavisle na pozicii SCROLLBARS).
   E. PROPERTY Element.clientWidth vracia SIRKU daneho ELEMENT bez SCROLLBARS (ak ELEMENT nejake ma) a BORDER. Avsak PADDING je do tejto velkosti zaratany.
   F. PROPERTY Element.clientHeight vracia VYSKU daneho ELEMENT bez SCROLLBARS (ak ELEMENT nejake ma) a BORDER. Avsak PADDING je do tejto velkosti zaratany.
   G. PROPERTY Element.clientLeft vracia X poziciu ELEMENTU so zaratanim BORDERS a SCROLLBARS (ak ELEMENT nejake ma).
   H. PROPERTY Element.clientTop vracia Y poziciu ELEMENTU so zaratanim BORDERS a SCROLLBARS (ak ELEMENT nejake ma).
   I. PROPERTY Element.scrollWidth vracia SIRKU daneho ELEMENT bez SCROLLBARS (ak ELEMENT nejake ma) a BORDER. Avsak PADDING a OVERFLOW je do tejto velkosti zaratany.
   J. PROPERTY Element.scrollHeight vracia VYSKU daneho ELEMENT bez SCROLLBARS (ak ELEMENT nejake ma) a BORDER. Avsak PADDING a OVERFLOW je do tejto velkosti zaratany.
   K. PROPERTY Element.scrollLeft vracia X poziciu SCROLLBAR daneho ELEMENTU ak ELEMENT nejaky ma. PROPERTY je WRITABLE.
   L. PROPERTY Element.scrollTop vracia Y poziciu SCROLLBAR daneho ELEMENTU ak ELEMENT nejaky ma. PROPERTY je WRITABLE.
!!! 50. WEB FORMS su WEB PAGES, ktore maju okrem ELEMENT na zobrazovanie obsahu i ELEMENTS na INTERAKCIU ako su BUTTONS, TEXTBOXES ci LISTS.
51. ELEMENT <input type="text"> reprezentuje SINGLE-LINE TEXTBOX.
   A. PROPERTY 'value' obsahuje TEXT daneho TEXTBOX.
   B. EVENT 'onchange' je volany pri ZMENE TEXTU a NASLEDNEJ ZMENE FOCUS na INY ELEMENT.
   C. EVENT 'onkeydown' je volany pri stlaceni KLAVESY.
   D. EVENT 'onkeyup' je volany pri uvolneni KLAVESY.
52. ELEMENT <textarea> reprezentuje MULTI-LINE TEXTBOX.
   A. PROPERTY 'value' obsahuje TEXT daneho MULTI-LINE TEXTBOX.
   B. PROPERTY 'cols' obsahuje pocet STLPCOV daneho MULTI-LINE TEXTBOX.
   C. PROPERTY 'rows' obsahuje pocet RIADKOV daneho MULTI-LINE TEXTBOX.
   D. EVENT 'onkeydown' je volany pri stlaceni KLAVESY.
   E. EVENT 'onkeyup' je volany pri uvolneni KLAVESY.
   !!! F. Do 'value' je mozne zapisovat znak '\n' na oddelenie riadkov.
53. ELEMENT <input type="button"> a <button type="button"> reprezentuje BUTTON.
54. ELEMENT <input type="checkbox"> reprezentuje CHECKBOX.
   A. PROPERTY 'name' urcuje, ktore CHECKBOXES su v jednej SKUPINE. Na rozdiel od RADIOBUTTONS vsak ostatne RADIOBUTTONS v skupine NIE SU AUTMATICKE UNCHECKED.
   B. PROPERTY 'checked' urcuje ci CHECKBOX je CHECKED.
   C. PROPERTY 'value' obsahuje LUBOVOLNU CUSTOM VALUE, ktora sa NEZOBRAZUJE, ale pri POSTBACK ja zaslana na SERVER.
   !!! D. CHECKBOXES NEZOBRAZUJU ZIADEN TEXT. Ak chcem pridat TEXT k CHECKBOXES je ho treba pridat pred, alebo za <input type="checkbox">.
55. ELEMENT <input type="radio"> reprezentuje RADIOBUTTON.
   A. PROPERTY 'name' urcuje, ktore RADIOBUTTONS su v jednej SKUPINE.
   B. PROPERTY 'checked' urcuje ci RADIOBUTTON je CHECKED.
   C. PROPERTY 'value' obsahuje LUBOVOLNU CUSTOM VALUE, ktora sa NEZOBRAZUJE, ale pri POSTBACK ja zaslana na SERVER.
   !!! D. RADIOBUTTONS NEZOBRAZUJU ZIADEN TEXT. Ak chcem pridat TEXT k RADIOBUTTONS je ho treba pridat pred, alebo za <input type="radio">.
56. ELEMENT <select> reprezentuje SINGLE-SELECT COMBOBOX, alebo LISTBOX.
   A. PROPERTY 'size' udava POCET RIADKOV, ktore bude COMBOBOX, alebo LISTBOX obsahovat.
   !!! B. Ak 'size' je rovny 0, zobrazi sa COMBOBOX. Ak je VACSI ako 0, zobrazi sa LISTBOX obsahujuci 'size' RIADKOV.
   C. PROPERTY 'selectedIndex' udava INDEX ITEM, ktory je SELECTED.
   D. PROPERTY 'options' obsahuje vsetky ITEMS v COMBOBOX, alebo LISTBOX.
57. ELEMENT <select multiple> reprezentuje MULTI-SELECT LISTBOX. Na rozdiel od <select> sa VZDY zobrazuje LISTBOX.
   A. PROPERTY 'size' udava POCET RIADKOV, ktore bude LISTBOX obsahovat.
   B. PROPERTY 'options' obsahuje vsetky ITEMS v LISTBOX. PROPERTY umoznuje PRIDAVAT i ODSTRANOVAT ITEMS z LISTBOX.
   !!! C. Pri zistovani, ktore ITEMS su SELECTED je nutne prejst VSETKY ITEMS z PROPERTY 'options' a zistovat hodnotu 'selected' daneho ITEM.
58. ELEMENT <option> reprezentuje LISTBOX ITEM.
   A. PROPERTY 'selected' urcuje ci dany ITEM je SELECTED.
   B. PROPERTY 'text' urcuje TEXT daneho ITEM.
   C. PROPERTY 'value' urcuje VALUE daneho ITEM, ktora sa zasiela pri POSTBACK na SERVER.
59. ELEMENT <input type="password"> reprezentuje PASSWORD TEXTBOX.
60. ELEMENT <input type="file"> reprezentuje FILE INPUT FIELD. PROPERTY 'value' je READ-ONLY a kvoli SECURITY sa FILE da vybrat IBA INTERAKTIVNE POUZIVATELOM.
61. ELEMENT <input type="hidden"> reprezentuje DATA, ktoru su HIDDEN, ale ktore su zasielane pri POSTBACK zasielane na SERVER.
62. ELEMENT <input type="sumbit">, alebo <button type="sumbit"> reprezentuje BUTTON, ktorym sa vykonava POSTBACK na SERVER.
63. ELEMENT <input type="reset">, alebo <button type="reset"> reprezentuje BUTTON, ktorym sa vymazava WEB FORM.
!!! 64. ELEMENT <form> umoznuje zdruzovat ELEMENTS pod spolocny NAME (ATTRIBUTE 'name'). Kazda FORM MUSI mat nastaveny ATTRIBUTE 'action' co je URL na SERVER kam sa FORM zasle po stlaceni tlacitka SUBMIT.
!!! 65. PROPERTY Document.forms obsahuje HTMLCollection so vsetkymi FORMS vo Web Page.
!!! 66. FORM je v JavaScript reprezentovany Form OBJECT. Ma nasledujuce MEMBERS.
   A. PROPERTY 'document' obsahuje Document OBJECT reprezentujuci dany FORM.
   B. PROPERTY 'elements' obsahuje COLLECTION vsetkych ELEMENTS na danej FORM.
   C. PROPERTY 'action' urcuje URL adresu kam sa bude FORM po SUBMIT zasielat.
   D. METHOD reset() vykonava RESET celeho FORM.
   E. METHOD sumbit() odosiela FORM na SERVER stanoveny URL v PROPERTY 'action'.
   F. EVENT 'onreset' je volany po stlaceni RESET BUTTON, tesne pred vymazanim FORM. NIE JE VOLANY ako reakcia na volanie METHOD reset(). V pripade, ze EVENT vrati 'false', tak k zmazaniu FORM NEDOJDE.
   G. EVENT 'onsumbit' je volany po stlaceni SUBMIT BUTTON, tesne pred odoslanim FORM na SERVER. NIE JE VOLANY ako reakcia na volanie METHOD sumbit(). V pripade, ze EVENT vrati 'false', tak k odoslaniu FORM na SERVER NEDOJDE.
67. FORM ELEMENTS maju niekolko spolocnych MEMBERS.
   A. PROPERTY 'type' urcuje TYPE ELEMENTU. Dolezita je napriklad pri <input> ELEMENT, kde urcuje ci dany <input> je BUTTON, CHECKBOX, TEXTBOX, alebo nieco ine.
   B. PROPERTY 'value' urcuje HODNOTU ELEMENTU, ktora sa odosiela na SERVER pri SUBMIT. Jej vyznam zavisi od TYPU ELEMENTU. Napriklad pre TEXTBOX je to hodnota TEXTU a pre BUTTON je to TEXT BUTTON.
   C. EVENT 'onclick' je volany pri kliknuti na ELEMENT. Najvacsie vyuzitie ma pri BUTTONS, kde je EVENT volany pri kliknuti na BUTTON.
   D. EVENT 'onchange' je volany pri zmene hodnoty ELEMENTU. Pre TEXTBOX je volany pri ZMENE TEXTU a naslednej ZMENE FOCUSU na INY ELEMENT. Pre LISTBOX je volana pri zmene vyberu ITEMS v LISTBOX.
   E. EVENT 'onfocus' je volany, ked ELEMENT ZISKA FOCUS.
   F. EVENT 'onblur' je volany, ked ELEMENT STRATI FOCUS.
68. PROPERTY Document.location obsahuje odkaz na Location OBJECT daneho DOCUMENT.
69. PROPERTY Document.cookie umoznuje pracovat s COOKIES daneho DOCUMENT.
70. PROPERTY Document.referrer obsahuje URL WEB PAGE z ktorej sa na aktualnu WEB PAGE BROWSER dostal.
!!!!! 77. METHOD Document.write() umoznuje POCAS vykonavania PARSINGU WEB PAGE vlozit do WEB PAGE HTML kod, ktory PARSER PARSUJE a IHNED na MIESTO, kde PARSER pred VYKONANIM SCRIPTU SKONCIL vlozi tento kod. Pre METHOD platia nasledujuce zasady.
   !!!!! A. METHOD Document.write() je mozne pouzit IBA pocas LOAD PHASE, kedze IBA VTEDY je PARSER AKTIVNY a je schopny vykonat PARSING vlozeneho HTML kodu. Pocas EVENT PHASE sposobi volanie Document.write() KOMPLETNE VYMAZANIE OBSAHU WEB PAGE.
   !!! B. METHOD Document.write() pri PRVOM VOLANI sposobi VYMAZANIE CELEHO DOCUMENT.
   C. METHOD Document.write() uklada vystup do BUFFER. Ten sa MOZE, ale takisto i NEMUSI RENDEROVAT az kym NIE JE PARSING SKONCENY. Ten sa da vyvolat volanim Document.close().
77. METHOD Document.writeln() je IDENTICKA s METHOD Document.write(), az na to, ze Document.writeln() na KONIEC vystupu pridava NOVY LINE.
!!! 78. METHOD Window.getSelection() vracia Selection OBJECT, ktory obsahuje COLLECTION Range OBJECTS, ktore obsahuju TEXT, ktory bol SELECTED.
!!!!! 79. PROPERTY Element.contenteditable aplikovany na LUBOVOLNY HTML ELEMENT spravi z HTML ELEMENT EDITOVATELNY ELEMENT. To znamena, ze je mozne don rucne editovat text po nacitani WEB PAGE a tym padom i WEB PAGE lubovolne MODIFIKOVAT.
!!! 80. ATTRIBUTE 'spellcheck' aplikovany na <input> a <textarea> umoznuje zapnut, alebo vypnut SPELLCHECKER.
81. PROPERTY Element.designMode umoznuje zapinat, alebo vypinat DESIGN MODE.
!!!!! 82. METHOD Document.exec() umoznuje na ELEMENTS vykonat LUBOVOLNY PRIKAZ. Typicky je tym napriklad mozne dosiahnut, aby na SELECTED TEXT bol aplikovany BOLD COMMAND.
!!! 83. METHOD Document.getCommandSupported() vracia COLLECTION COMMANDS pre Document.exec(), ktore su v case volania VYKONATELNE. Napriklad COMMANDS, ktore VYZADUJU SELECTION TEXTU, ak ZIADEN TEXT NIE JE SELECTED, volanie Document.getCommandSupported() NEVRATI, az kym nejaky TEXT sa nestane SELECTED.
!!! 84. METHOD Document.getCommandState() vracia informaciu ci dany COMMAND pre Document.exec() je mozne v case volania vykonat.
!!! 85. METHOD Document.queryCommandValue() vracia AKTUALNY STAV COMMAND. Napriklad ak je nejaky TEXT SELECTED, tak je pomocou tejto METHOD mozne zistit, ci SELECTED TEXT je BOLD.
!!! 86. METHOD Document.queryCommandIndeterm() vracia 'true', ako AKTUALNY STAV COMMAND NIE JE MOZNE ZISTIT. Typicky ak je SELECTED TEXT, ktory obsahuje BOLD aj NON-BOLD TEXT, tak tato METHOD vrati 'true'.
//-------------------------------------------------------------------------------------------------------