//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje vytvorenie jednoduchej WEB APPLICATION.
2. ASP.NET CORE APPLICATION, ktora podporuje MVC je mozne vytvorit pomocou COMMAND [dotnet new mvc --output PROJECT_NAME], kde VALUE 'PROJECT_NAME' obsahuje PROJECT NAME.
3. V ASP.NET CORE su VSETKY HTTP REQUESTS spracovavane v CONTROLLERS. Pre CONTROLLERS v ASP.NET CORE platia nasledujuce fakt.
   A. CONTROLLERS su implementovane ako C# CLASSES.
   B. CONTROLLERS su spravidla DERIVED z CLASS [Controller], ktora je definovana v NAMESPACE [Microsoft.AspNetCore.Mvc].
   !!! C. KAZDA PUBLIC METHOD v CONTROLLER sa nazvyva ACTION. ACTION je METHOD, ktora spracovava prijaty HTTP REQUEST.
   D. CONTROLLERS sa podla konvencie ukladaju do DIRECTORY [Controllers].
   E. CONTROLLERS su ulozene vo FILEDS, ktore maju mennu konvenciu [XXXController.cs], kde 'XXX' reprezentuje CONTROLLER NAME.
4. ROUTING SYSTEM v ASP.NET CORE je mechanizmus, ktory mapuje URL adresy na CONTROLLERS a ACTIONS. ROUTE urcuje, ktora ACTION, ktoreho CONTROLLER sa ma zavolat pri vyvolani danej URL.
5. Pre VIEWS v ASP.NET CORE platia nasledujuce fakty.
   A. VIEWS predstavuju HTML PAGES, ktore sa renderuju ako vysledok vykonanej ACTION.
   B. VIEWS sa renderuju tym, ze sa vratia ako RETURN VALUES ACTION METHODS. Standardne sa vracia instancia CLASS [ViewResult].
   !!! C. VIEWS sa vytvaraju volanim METHOD [ViewResult View(string ViewName, object Model)], ktorej sa zada meno VIEW. Ak METHOD Controller.View() NEOBSAHUJE MENO, potom sa vola VIEW, ktory ma ROVNAKE MENO ako MENO ACTION METHOD. Ak teda napriklad ACTION METHOD sa vola 'XXX', potom sa zavola VIEW [XXX.cshtml].
   !!! D. S jednym CONTROLLER moze byt asociovanych VIACERO VIEWS.
   !!! E. VIEWS sa podla konvencie ukladaju do SUBDIRECTORIES DIRECTORY [Views], pricom vsetky VIEWS asociovane s danym CONTROLLER su ulozene v specifickom SUBDIRECTORY. Napriklad VIEW 'Home' bude ulozene v SUBDIRECTORY [Views/Home].
   F. VIEWS, ktore su SHARED medzi VIACERYMI CONTROLLERS su ulozene v DIRECTORY [Views/Shared].
   G. VIEWS su FILES TYPE [.cshtml]. Tieto FILES obsahuju okrem HTML CODE aj RAZOR CODE, ktory interpretuje RAZOR VIEW ENGINE.
   !!!!! H. Podla konvencie by mena VIEWS mali byt rovnako ako mena ACTIONS. To znaci, ze VIEW pre ACTION 'MyView' by mala byt ulozena vo FILE [MyView.cshtml].
!!! 6. STRONGLY TYPED VIEWS su VIEWS, ktore su PRIAMO PREPOJENE s MODELS. STRONGLY TYPED VIEW sa vytvara nasledujucim sposobom.
   A. Vo FILE [XXX.cs] sa vytvori CLASS 'NamespaceAAA.BBB', ktora reprezentuje MODEL, ktory ma byt prepojeny s VIEW.
   B. Vytvori sa VIEW s nazvom FILE [CCC.cshtml].
   !!! C. Na zaciatok VIEW FILE [CCC.cshtml] sa prida CODE [@model NamespaceAAA.BBB]. Nazov 'NamespaceAAA.BBB' reprezentuje MODEL CLASS.
7. V ASP.NET CORE je ulohou CONTROLLERS, aby data ziskane z MODEL zaslali do VIEWS, ktore ich nasledne vo forme HTML PAGE zobrazia.
8. Do VIEWS je mozne vkladat TAG HELPERS. TAG HELPERS su INSTRUCTIONS pre RAZOR ENGINE, ktory prelozi TAG HELPER na HTML CODE.
!!!!! 9. Na to, aby boli do VIEW vlozene DEFAULT ASP.NET CORE TAG HELPERS, je nutne vlozit CODE [@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers].
!!! 10. URL LINKS v ASP.NET CORE by mali byt VZDY vytvarane pomocou nastrojov ako su TAG HELPERS, pretoze ASP.NET CORE pri generovani URL LINKS sa dotazuje na CONFIG FILES, kde je mozne nastavit vlastne RULES pre vytvaranie URL LINKS.
11. TAG HELPER [asp-action="XXX"] vygeneruje URL LINK, ktora referuje na ACTION 'XXX' v CURRENT CONTROLLER. Pouziva sa v LINK ELEMENT (<a/>), alebo aj FORM ELEMENT (<form/>).
12. TAG HELPER [asp-for="XXX"] priradzuje k HTML ELEMENT ID 'XXX'. V pripade LABELS vytvara ID (ATTRIBUTE [for]), ktorym zviaze LABEL s inym ELEMENT v HTML FORM.
13. MODEL v ASP.NET CORE reprezentuje C# CLASS, ktora obsahuje BUSINESS LOGIC WEB APPLICATION. Pre MODELS platia nasledujuce fakty.
   A. MODELS su C# CLASSES obsahujuce FIELDS, ktore reprezentuju data a METHODS na pracu s tymito data.
   B. MODELS sa podla konvencie ukladaju do DIRECTORY [Models].
14. CONTROLLERS umoznuju urcit, aka ACTION METHOD sa pre danu HTTP METHOD zavolaju. Platia nasledujuce fakty.
   A. To, aka ACTION METHOD na CONTROLLER sa pre HTTP METHOD zavola urcuje ATTRIBUTE, ktory sa aplikoval na ACTION METHOD.
   B. HTTP METHOD definuje aky PROTOTYPE musi mat ACTION METHOD, aby mohla byt volana ako reakcia na vyvolanie HTTP METHOD.
   C. ACTION METHODS mozu mat pre rozlicne HTTP METHODS ROVNAKY NAZOV, no musia mat rozdielny PROTOTYPE, aby ich C# akceptoval.
15. ACTION METHOD pre HTTP GET METHOD musi splnat nasledujuce podmienky.
   A. ACTION METHOD musi byt oznacena pomocou ATTRIBUTE [HttpGet].
   B. ACTION METHOD moze mat PARAMETERS, ktore su namapovane na QUERY STRING ci HEADERS, ale NESMIE mat PARAMETES namapovane na HTTP BODY.
   C. RETURN VALUE ACTION METHOD moze obsahovat LUBOVOLNY OBJECT.
16. ACTION METHOD pre HTTP POST METHOD musi splnat nasledujuce podmienky.
   A. ACTION METHOD musi byt oznacena pomocou ATTRIBUTE [HttpPost].
   B. ACTION METHOD moze mat PARAMETERS, ktore su namapovane na QUERY STRING, HEADERS, alebo 1 PARAMETER, ktory je namapovany na HTTP BODY.
   C. RETURN VALUE ACTION METHOD moze obsahovat LUBOVOLNY OBJECT.
!!! 17. V pripade, ze ACTION METHOD NEMA aplikovany ATTRIBUTE urcujuci to ktora HTTP METHOD sa ma volat, vola sa pre VSETKY HTTP METHODS.
18. V ASP.NET CORE sa DATA VALIDATION aplikuje na MODEL CLASSES. Vdaka tomu su DATA VALIDATED VZDY ked sa pouzije dana MODEL CLASS.
19. DATA VALIDATION sa v ASP.NET CORE realizuje DEKLARATIVNE aplikovani ATTRIBUTES na PROPERTIES MODEL CLASSES. ATTRIBUTES su ulozene v NAMESPACE [System.ComponentModel.DataAnnotations].
!!! 20. CLASS [ControllerBase] obsahuje PROPERTY [ModelState], ktora obsahuje informaciu o tom ci MODEL CLASS bola uspesne VALIDATED. Kontrolou VALUE [ModelState.IsValid] je mozne zistit ci VALIDATION bola uspesna. PROPERTY [ModelState] vsak obsahuje aj dalsie PROPERTIES z ktorych je mozne ziskat zoznam VALIDATION ERRORS.
21. TAG HELPER [asp-validation-summary="MODE"] umoznuje zobrazit vsetky ERROR, ktore vznikli pri VALIDATION. VALUE 'MODE' urcuje uroven vypisu ERRORS.
!!! 22. ASP.NET CORE drzi informacie o VALUES jednotlivych HTML ELEMENTS PRIAMO v HTML ELEMENTS a nepouziva mechanizmus skryteho HTML ELEMENT '__VIEWSTATE', ktory sa pouzival v ASP.NET WEB FORMS.
23. V ASP.NET CORE sa STATIC FILES BY-DEFAULT ukladaju do SUBDIRECTORIES DIRECTORY [wwwroot]. Napriklad .CSS FILES sa ukladaju do SUBDIRECTORY [wwwroot/css].
!!! 24. V pripade, ze STATIC FILES maju byt ulozene v NO-DEFAULT SUBDIRECTORIES, je nutne pouzit METHOD [void IWebHostEnvironment.UseStaticFiles(StaticFileOptions Options)].
25. TAG HELPER [asp-for="XXX"] okrem priradenia HTML ELEMENT ID priradzuje aj ATTRIBUTES suvisiace s VALIDATION danej PROPERTY MODEL CLASS.
!!! 26. V pripade VALIDATION ERROR TAG HELPER [asp-for="XXX"] do HTML ELEMENT, u ktoreho zlyhala VALIDATION prida ATTRIBUTE [class="input-validation-error"], vdaka comu je vyzor HTML INPUT ELEMENT mozne upravit pomocou CSS STYLE, aby vizualne ukazoval, ktory HTML INPUT ELEMENT nepresiel VALIDATION.
27. ASP.NET CORE APPLICATIONS umoznuju pouzivat rozlicne CLIENT LIBRARIES, ktore rozsiruju moznosti CSS ci JAVA SCRIPT.
28. LIBRARY [Bootstrap] obsahuje HTML a CSS TEMPLATES ako aj JAVA SCRIPTS, ktore umoznuju dizajnovat elegantny FRONTEND. LIBRARY [Bootstrap] sa v ASP.NET CORE pouziva nasledujucim sposobom.
   A. Do PROJECT sa vlozi LIBRARY [Bootstrap].
   B. Do VIEW FILE, ktory ma pouzivat LIBRARY [Bootstrap] sa vlozi LINK ELEMENT odkazujuci na zakladny .CSS FILE LIBRARY [Bootstrap].
   C. V jednotlivych HTML ELEMENTS sa aplikuju CSS STYLES z LIBRARY [Bootstrap].
//----------------------------------------------------------------------------------------------------------------------