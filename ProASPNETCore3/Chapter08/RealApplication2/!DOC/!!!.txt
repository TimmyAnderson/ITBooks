//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje rozsirenie realnej APPLICATION v ASP.NET CORE o NAVIGATION.
2. URL ADDRESSES sa v ASP.NET CORE vytvaraju pomocou CLASS implementujucej INTERFACE [IUrlHelper].
3. ASP.NET CORE aplikuje ROUTING na prichadzajuce HTTP REQUESTS ako aj na generovane HTTP RESPONSES, kde su LINKS generovane v sulade s ROUTING RULES.
!!! 4. ASP.NET CORE umoznuje zdielat logiku VIEWS do REUSABLE COMPONENTS, ktore sa nazyvaju VIEW COMPONENTS. Pre VIEW COMPONENTS platia nasledujuce fakty.
   A. VIEW COMPONENTS su specialne typy COMPONENTS, ktore umoznuju vytvarat REUSABLE CONTENT.
   B. VIEW COMPONENTS su integrovane do VIEWS a teda zobrazuju vzdy iba CAST HTML RESPONSE (WEB PAGE).
   !!! C. VIEW COMPONENTS su tvorene C# CLASS a VIEW FILE [.CSHTML].
   D. VIEW COMPONENTS su C# CLASSES, ktore su DERIVED z CLASS [ViewComponent], alebo maju aplikovany ATTRIBUTE [ViewComponentAttribute], alebo su DERIVED z CLASS na ktory je aplikovany ATTRIBUTE [ViewComponentAttribute], alebo ich nazov ma POSTFIX 'ViewComponent'.
   !!! E. VIEW COMPONENTS definuju logiku, ktora ma zobrazit CONTENT bud v METHOD [IViewComponentResult Invoke(PARAMETERS)], alebo v ASYNCHRONOUS METHOD [Task<IViewComponentResult> InvokeAsync(PARAMETERS)].
   F. VIEW COMPONENTS su vyvolavane volanim METHOD [IViewComponentHelper.Invoke()], ktorej 1. PARAMETER je nazov VIEW COMPONENT BEZ POSTFIX 'ViewComponent'. Ostatne PARAMETERS su ako PARAMETERS prenesene do [IViewComponentResult Invoke(PARAMETERS)], alebo METHOD [Task<IViewComponentResult> InvokeAsync(PARAMETERS)].
   !!! G. VIEWS, ktore su asociovane s VIEW COMPONENTS musia byt ulozene v DIRECTORY [/Views/{Controller Name}/Components/{View Component Name}/{View Name}], DIRECTORY [/Views/Shared/Components/{View Component Name}/{View Name}], alebo DIRECTORY [/Pages/Shared/Components/{View Component Name}/{View Name}].
   H. DEFAULT FILE NAME pre VIEWS, ktore su asociovane s VIEW COMPONENTS je FILE [Default.cshtml].
   I. CLASS [ViewComponent] obsahuje PROPERTY [RouteData], ktora obsahuje informacie o CURRENT ROUTING.
5. RAZOR PAGES umoznuju vracat HTML CONTENT BEZ pouzitia MVC PATTERN.
6. RAZOR PAGES mozu vracat iba HTML CONTENT, co znaci, ze ich NIE JE mozne pouzit na vytvarani WEB SERVICES.
7. ASP.NET CORE umoznuje kombinovat MVC FRAMEWORK s RAZOR PAGES v jednom PROJECT.
8. RAZOR PAGES sa konfiguruju v STARTUP FILE nasledujucim sposobom.
   A. METHOD [IMvcBuilder IServiceCollection.AddRazorPages()] nastavuje SERVICE, ktory je potrebny pre pouzitie RAZOR PAGES.
   B. METHOD [PageActionEndpointConventionBuilder IEndpointRouteBuilder.MapRazorPages()] pridava ROUTING pre RAZOR PAGES.
9. RAZOR PAGES pozostavaju z nasledujucich casti.
   A. FILE [XXX.cshtml], obsahuje RAZOR PAGE VIEW so vsetkym HTML CODE, ktory RAZOR PAGE zobrazuje.
   B. FILE [XXX.cshtml.cs] C# CLASS reprezentujuci RAZOR PAGE MODEL. RAZOR PAGE MODEL obsahuje data, ktore RAZOR PAGE VIEW zobrazuje.
!!! 10. RAZOR PAGE FILES BY-DEFAULT MUSIA byt ulozene v DIRECTORY [Pages].
11. RAZOR PAGE VIEW je [.cshtml] FILE obsahujuci HTML CODE a RAZOR ENGINE KEYWORDS. Pre RAZOR PAGE VIEWS platia nasledujuce fakty.
   A. RAZOR PAGE VIEW MUSI mat na zaciatku FILE KEYWORD [@page] ci sa FILE identifikuje ako RAZOR PAGE VIEW.
   !!! B. RAZOR PAGE VIEW referuje na RAZOR PAGE MODEL CLASS pomocou RAZOR ENGINE KEYWORD [@model XXX].
   !!! C. RAZOR PAGE VIEW FILE moze obsahovat cely CONTENT RAZOR PAGE MODEL pomocou RAZOR ENGINE KEYWORD [@functions{}]. V tomto pripade, v KEYWORD [@functions{}] je definovany RAZOR PAGE MODEL CLASS a tym padom RAZOR PAGE VIEW ulozeny v separatnom FILE [XXX.cshtml.cs] uz NIE JE POTREBNY.
12. RAZOR PAGE MODEL je C# CLASS, ktory obsahuje MODEL DATA pre RAZOR PAGE. Pre RAZOR PAGE MODELS platia nasledujuce fakty.
   A. RAZOR PAGE MODEL CLASS MUSI byt DERIVED z CLASS [PageModel].
   B. RAZOR PAGE MODEL CLASS moze mat CONSTRUCTOR, ktoreho PARAMETERS su substituovane pomocou DEPENDENCY INJECTION FRAMEWORK.
   !!! C. RAZOR PAGE MODEL CLASS musi definovat MODEL OBJECT DATA, ktore potrebuje RAZOR PAGE VIEW zobrazovat.
   !!!!! D. RAZOR PAGE MODEL CLASS pre KAZDY HTTP VERB, ktory podporuje musi definovat jednu z dvojice METHODS METHOD [RETURN_TYPE OnXXX(PARAMETERS)], alebo METHOD [Task<RETURN_TYPE> OnXXXAsync(PARAMETERS)], kde VALUE 'XXX' je nazov HTTP VERB.
   !!!!! E. RAZOR PAGE MODEL CLASS je VZDY asociovany iba s JEDNYM RAZOR PAGE VIEW. To znaci, ze RAZOR PAGE MODEL NEMOZE vracat rozlicne RAZOR PAGE VIEWS, kedze je VZDY asociovany s jedinym RAZOR PAGE VIEW.
!!! 13. ASP.NET CORE podporuje SESSIONS. Pre SESSIONS platia nasledujuce fakty.
   A. SESSIONS umoznuju ukladat CUSTOM DATA (SESSION DATA), ktore su asociovane s aktualne prihlasenym USER na SERVER.
   B. SESSION DATA mozu byt podla typu pouzitej SESSION ukladane bud v MEMORY, alebo v PERMANENT STORE ako je DB.
   C. SESSIONS sa zapinaju v STARTUP CLASS.
   D. SESSION je pristupny pomocou PROPERTY [HttpContext.Session].
   E. SESSION OBJECT implementuje INTERFACE [ISession], ktory umoznuje pristupovat k SESSION DATA.
//----------------------------------------------------------------------------------------------------------------------