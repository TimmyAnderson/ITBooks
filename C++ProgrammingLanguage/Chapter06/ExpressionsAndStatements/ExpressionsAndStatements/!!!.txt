//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje EXPRESSIONS a STATEMENTS v C++.
2. V C++ su OKREM OPERATOROV [++X], [--X] a operatorov PRIRADENIA su VSETKY OPERATORY RIGHT ASSOCIATIVE - teda napriklad [a+b+c] je to iste ako [(a+b)+c]. V pripade RIGHT ASSOCIATIVE operatora '=' plati, ze [a=b=c] je to iste ako [a=(b=c)].
3. Pri matematickych operaciach je vysledok VZDY NAJVACSIEHO TYPU ake obsahuju OPERANDY OPERACII.
4. Premenne MENSICH TYPOV ako 'int' ('short', 'bool') su VZDY KONVEROVANE na 'int'.
5. Navratova hodnota operatora 'sizeof()' je 'size_t'.
6. Navratova hodnota ODCITANIA 2 POINTERS je 'ptrdiff_t'.
!!!!! 7. Poradie volania SUBEXPRESSIONS v EXPRESSION je v C++ NEDEFINOVANE. To moze viest k CHYBNYM VYSLEDKOM aj v ZDANLIVO JASNYCH EXPRESSIONS.
   !!!!! A. V EXPRESSION [int Result=Function1(X)+Function2(Y);] NIE JE GARANTOVANE, ze Function1() BUDE VOLANA PRED Function2().
   !!!!! B. V EXPRESSION [Array[i]=i++;]] NIE JE GARANTOVANE, ktory z EXPRESSIONS 'Array[i]' a 'i++' sa vykona ako PRVY.
!!! 8. Jedine pre OPERATORS '||', '&&' a ',' je GARANTOVANE vykonavanie ZLAVA DOPRAVA.
9. OPERATOR 'delete' je MOZNE VOLAT pre hodnou 0. NESPOSOBI to CHYBU.
!!! 10. HEAP v C++ si okrem samotnych dat drzi pre KAZDY ITEM aj JEHO VELKOST.
11. Pre alokaciu pamati na HEAP definuje C++ nasledujuce 4 OPERATORS definovane v kniznici <new>.
   A. OPERATOR [void* operator new(size_t Size)] sluzi na alokaciu 1 OBJEKTU.
   B. OPERATOR [void operator delete(void* Pointer)] sluzi na odstranenie 1 OBJEKTU.
   C. OPERATOR [void* operator new[](size_t Size)] sluzi na alokaciu ARRAY OBJEKTU.
   D. OPERATOR [void operator delete[](void* Pointer)] sluzi na odstranenie ARRAY OBJEKTU. OPERATOR vola i DESTRUCTOR pre VSETKY ITEMS v ARRAY.
!!! 12. Pri NEDOSTATKU PAMATE OPERATORS 'new' a 'new[]' STANDARDNE vracaju EXCEPTION TYPU 'bad_alloc'.
!!!!! 13. STANDARDNE CHOVANIE C++ pri NEDOSTATKU PAMATE pre OPERATORS 'new' a 'new[]' je mozne ZMENIT volanit funkcie set_new_handler()', ktore umoznuje zaregistrovat CUSTOM FUNKCIU, ktore sa zavola VZDY pri NEDOSTATKU PAMATE.
!!! 14. C++ umoznuje inicializovat PREMENNE a to aj PRIMITIVNE PREMENNE pomocou SYNTAXT volania KONSTUKTORA.
   A. Zapis [int X(100);] INICIALIZUJE premennu 'X' na hodnotu 100.
   B. Zapis [int X();] INICIALIZUJE premennu 'X' na hodnotu 0.
!!!!! 15. Inicializacia KONSTRUKTOROM pre PRIMITIVNE TYPY je NESMIERNE DOLEZITA pri definovani TEMPLATES, ked NEVIEM ci TEMPLATE PARAMETER bude PRIMITIVNY TYPE, alebo CLASS. To, ze i pre PRIMITIVNE TYPES je mozne pouzit KONSTRUKTOR umoznuje pouzit KONSTRUKTOR BEZ OHLADU ci TEMPLATE PARAMETER je PRIMITIVNY TYPE, alebo CLASS.
16. V C++ existuju nasledujuce typy CASTS.
   A. CAST typu [(TYPE) Value] je KOMBINACIOU CAST OPERATORS 'static_cast<TYPE>()', 'const_cast<TYPE>()' a 'reinterpret_cast<TYPE>()'. V C++ je vhodne NAMIESTO TOHTO CAST OPERATOR pouzivat ine.
   B. CAST typu [reinterpret_cast<TYPE>(Value)] realizuje CASTING BEZ DODATOCNYCH KONTROL a umoznuje tak CASTING LUBOVOLNYCH NAVZAJOM UPLNE NEZAVISLYCH TYPOV.
   C. CAST typu [const_cast<TYPE>(Value)] umoznuje ODSTRANIT MODIFIKATORY 'const' a 'volatile'.
   D. CAST typu [static_cast<TYPE>(Value)] realizuje KAZDY VALIDNY CASTING v C++. Medzi VALIDNE CASTING patri CASTING z 'int' na 'double', ci DERIVED na BASE CLASS.
   !!! E. CAST typu [dynamic_cast<TYPE>(Value)] realizuje RUNTIME KONTROLU pre BASE CLASS ci je ju mozne konvertovat na DERIVED CLASS. Ak NIE, vracia NULL hodnotu. NIE JE HO MOZNE APLIKOVAT na CAST PRIMITIVNYCH TYPOV, IBA na CAST CLASSES, ktore su v DEDICSKEJ HIERARCHII.
!!!!! 17. Dovodom preco do C++ boli zavadene dalsie 4 CASTS je VYSSIA CITATELNOST a PRENOSITELNOST KODU. Tym, ze klasicky C CAST [(TYPE) Value)] umoznuje v podstate LUBOVOLNY TYP CAST, nie je pri pohlade nan zrejme co programator chcel pouzitim tohto CAST docielit. Pomocou C CAST je totizto moze spravit ako BEZPECNY typ CAST ('int' na 'double'), tak i POTENCIALNE NEBEZPECNY CAST ako je konverzia POINTER na 'int' ('wstring*' na 'int') ci ODSTRANENIE 'const' MODIFIER ('const int*' na 'int*'). Tym, ze C++ definovalo SPECIALIZOVANEJSIE CASTS, kde KAZDY TYP CAST umoznuje oproti C CAST iba MENSIU SKUPINU CASTS, moze programator vyberom prislusneho typu C++ CAST JASNEJSIE URCIT AKY BOL ZAMER daneho CAST. To nasledne VYRAZNE ZVYSUJE CITATELNOST KODU i jeho PRENOSITELNOST, lebo hned je jasne, ci dany CAST je BEZPECNY a PRENOSITELNY (static_cast<TYPE>(Value) a dynamic_cast<TYPE>(Value)), alebo POTENCIALNE NEBEZPECNY a TAZSIE PRENOSITELNY (const_cast<TYPE>(Value) a reinterpret_cast<TYPE>(Value)). BEZPECNOST a PRENOSITELNOST jednotlivych typov CASTS je priblizne nasledujuca.
   A. CAST [static_cast<TYPE>(Value)] je povazovany za BEZPECNY a relativne VYSOKO PRENOSITELNY CAST, kde pri prenose na inu C++ PLATFORMU zbycajne nenastavaju problemy.
   B. CAST [dynamic_cast<TYPE>(Value)] je mozne pouzit IBA na CAST medzi CLASSES v DEDICSKEJ HIRARCHII. Tento CAST je takisto BEZPECNY, kde vracia NULL, ked sa NEPODARI a takisto i PRENOSITELNY medzi PLATFORMAMI.
   C. CAST [const_cast<TYPE>(Value)] je VELMI SPECIALIZOVANY CAST, ktory je mozne pouzit IBA na ODSTRANENIE MODIFIERS 'const' a 'volatile'. Kedze umoznuje spravit z KONSTANTY NEKONSTANTNU HODNOTU je potencialne VELMI NEBEZPECNY a takisto moze sposobovat problemy pri prenose na inu PLATFORMU. Typickym prikladom problemov je moznost vykonat ZAPIS do KONSTANTY po jej pretypovany na NEKONSTANTU. To v zavislosti od PLATFORMY moze sposobit potencialne VAZNE PROBLEMY. 
   D. CAST [reinterpret_cast<TYPE>(Value)] je MIMORIADNE NEBEZPECNY a PLAFORMOVO ZAVISLY CAST. Napriklad pri konverzii z POINTER na 'int' co je TYPICKE POUZITIE tohto CAST moze dojst k NARUSENIU PAMATI ak prenasam kod z platoformy x86 kde sizeof(POINTER)=4 BYTES na platformu x64, kde sizeof(POINTER)=8 BYTES. Pri x64 sa do klasickeho 'int', ktory ma 4 BYTES POINTER dlhy 8 BYTE NEZMESTI. Preto tieto typy CASTS je treba pri konverzii na INU PLATFORMU VELMI DOSLEDNE SKONTROLOVAT a eventualne i prepisat ak sa zisti nemoznost jeho pouzitia na novej PLATFORME.
18. V C++ su DECLARATIONS STATEMENTS podobne ako 'if - else', 'while', 'do - while', 'for()', 'switch', 'case', 'default', 'break', 'continue', 'try', 'return', 'goto' a NAVESTIE pre 'goto' vo formate [ID: Statement].
!!! 19. V CONDITION pre 'if' ak pouzivam OPERATORS '||' a '&&' tak DALSIE CAST CONDITION sa NEVYKONA ak to NIE JE NUTNE. Ak teda napriklad pri '&&' LAVY EXPRESSION vracia 'false', tak PRAVY EXPRESSION sa NEVYKONA.
20. PREMENNA definovana v CONDITION pre 'if ma SCOPE az po KONIEC 'if', teda je ju mozne pouzit v IF aj ELSE vetve.
!!! 21. NAVESTIE v 'goto' ma za SCOPE TELO FUNKCIE. Pomocou 'goto' je teda mozne vykonat skok IBA V RAMCI FUNKCIE, aj ked je mozne vyskocit napriklad z CYKLU - co je aj najcastejsie pouzitie 'goto'. Pomocou 'goto' vsak NIE JE MOZNE SKOCIT do 'catch' BLOKU.
!!! 22. VC++ umoznuje vykonat SKOK i do VNUTRA CYKLU, alebo za INICIALIZER premennej. NEUMOZNUJE vsak skok do CATCH BLOKU.
//-------------------------------------------------------------------------------------------------------