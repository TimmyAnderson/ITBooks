TYPE: [KEYWORD], TOKEN: [void] !
TYPE: [IDENTIFIER], TOKEN: [Add] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [COMMA], TOKEN: [,] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [CURLY BRACKET LEFT], TOKEN: [{] !
TYPE: [KEYWORD], TOKEN: [return] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [PLUS], TOKEN: [+] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [CURLY BRACKET RIGHT], TOKEN: [}] !
TYPE: [KEYWORD], TOKEN: [void] !
TYPE: [IDENTIFIER], TOKEN: [Main] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [KEYWORD], TOKEN: [void] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [CURLY BRACKET LEFT], TOKEN: [{] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [STRING], TOKEN: ["Program \"Example2\" STARTED !\n"] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [ASSIGMENT], TOKEN: [=] !
TYPE: [NUMBER], TOKEN: [10] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ASSIGMENT], TOKEN: [=] !
TYPE: [NUMBER], TOKEN: [5] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ASSIGMENT], TOKEN: [=] !
TYPE: [IDENTIFIER], TOKEN: [Add] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [COMMA], TOKEN: [,] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [NOT EQUAL], TOKEN: [!=] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [LESSER OR EQUAL], TOKEN: [<=] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [GREATER OR EQUAL], TOKEN: [>=] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [EQUAL], TOKEN: [==] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [STRING], TOKEN: ["Program \"Example2\" FINISHED !\n"] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [CURLY BRACKET RIGHT], TOKEN: [}] !
TYPE: [EOF], TOKEN: [$] !
SCANER SUCCESSFULLY COMPLETED !
CALCULATION of DFA and PARSING TABLE for LR(1) !
Number of NFA STATES: [1487] !
Number of LR(1) DFA STATES: [383] !
Number of SHIFT-REDUCE conflicts: [1] !
Number of REDUCE-REDUCE conflicts: [0] !
CALCULATION of DFA and PARSING TABLE for LALR(1) !
Number of LALR(1) DFA STATES: [121] !
Number of SHIFT-REDUCE conflicts: [1] !
Number of REDUCE-REDUCE conflicts: [0] !



PROGRAM
 DECLARATION_LIST
  DECLARATION
   FUNCTION_DECLARATION
    TYPE_SPECIFIER
     void
    Add
    (
    PARAMS
     PARAM_LIST
      PARAM
       TYPE_SPECIFIER
        int
       X
       MOD_PARAM
        ?
      MOD_PARAM_LIST
       ,
       PARAM
        TYPE_SPECIFIER
         int
        Y
        MOD_PARAM
         ?
       MOD_PARAM_LIST
        ?
    )
    COMPOUND_STATEMENT
     {
     LOCAL_DECLARATIONS
      ?
     STATEMENT_LIST
      STATEMENT
       RETURN_STATEMENT
        return
        MOD_RETURN_STATEMENT
         (
         EXPRESSION
          SIMPLE_EXPRESSION
           ADDITIVE_EXPRESSION
            TERM
             FACTOR
              VARIABLE
               X
               MOD_VARIABLE
                ?
             MOD_TERM
              ?
            MOD_ADDITIVE_EXPRESSION
             ADD_OPERATION
              +
             TERM
              FACTOR
               VARIABLE
                Y
                MOD_VARIABLE
                 ?
              MOD_TERM
               ?
             MOD_ADDITIVE_EXPRESSION
              ?
           MOD_SIMPLE_EXPRESSION
            ?
         )
         ;
      STATEMENT_LIST
       ?
     }
  MOD_DECLARATION_LIST
   DECLARATION
    FUNCTION_DECLARATION
     TYPE_SPECIFIER
      void
     Main
     (
     PARAMS
      void
     )
     COMPOUND_STATEMENT
      {
      LOCAL_DECLARATIONS
       VARIABLE_DECLARATION
        TYPE_SPECIFIER
         int
        X
        MOD_VARIABLE_DECLARATION
         ;
       LOCAL_DECLARATIONS
        VARIABLE_DECLARATION
         TYPE_SPECIFIER
          int
         Y
         MOD_VARIABLE_DECLARATION
          ;
        LOCAL_DECLARATIONS
         VARIABLE_DECLARATION
          TYPE_SPECIFIER
           int
          Ret
          MOD_VARIABLE_DECLARATION
           ;
         LOCAL_DECLARATIONS
          ?
      STATEMENT_LIST
       STATEMENT
        EXPRESSION_STATEMENT
         EXPRESSION
          SIMPLE_EXPRESSION
           ADDITIVE_EXPRESSION
            TERM
             FACTOR
              CALL
               Print
               (
               ARGS
                ARG_LIST
                 EXPRESSION
                  SIMPLE_EXPRESSION
                   ADDITIVE_EXPRESSION
                    TERM
                     FACTOR
                      "Program \"Example2\" STARTED !\n"
                     MOD_TERM
                      ?
                    MOD_ADDITIVE_EXPRESSION
                     ?
                   MOD_SIMPLE_EXPRESSION
                    ?
                 MOD_ARG_LIST
                  ?
               )
             MOD_TERM
              ?
            MOD_ADDITIVE_EXPRESSION
             ?
           MOD_SIMPLE_EXPRESSION
            ?
         ;
       STATEMENT_LIST
        STATEMENT
         EXPRESSION_STATEMENT
          EXPRESSION
           VARIABLE
            X
            MOD_VARIABLE
             ?
           =
           EXPRESSION
            SIMPLE_EXPRESSION
             ADDITIVE_EXPRESSION
              TERM
               FACTOR
                10
               MOD_TERM
                ?
              MOD_ADDITIVE_EXPRESSION
               ?
             MOD_SIMPLE_EXPRESSION
              ?
          ;
        STATEMENT_LIST
         STATEMENT
          EXPRESSION_STATEMENT
           EXPRESSION
            VARIABLE
             Y
             MOD_VARIABLE
              ?
            =
            EXPRESSION
             SIMPLE_EXPRESSION
              ADDITIVE_EXPRESSION
               TERM
                FACTOR
                 5
                MOD_TERM
                 ?
               MOD_ADDITIVE_EXPRESSION
                ?
              MOD_SIMPLE_EXPRESSION
               ?
           ;
         STATEMENT_LIST
          STATEMENT
           EXPRESSION_STATEMENT
            EXPRESSION
             VARIABLE
              Ret
              MOD_VARIABLE
               ?
             =
             EXPRESSION
              SIMPLE_EXPRESSION
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  CALL
                   Add
                   (
                   ARGS
                    ARG_LIST
                     EXPRESSION
                      SIMPLE_EXPRESSION
                       ADDITIVE_EXPRESSION
                        TERM
                         FACTOR
                          VARIABLE
                           X
                           MOD_VARIABLE
                            ?
                         MOD_TERM
                          ?
                        MOD_ADDITIVE_EXPRESSION
                         ?
                       MOD_SIMPLE_EXPRESSION
                        ?
                     MOD_ARG_LIST
                      ,
                      EXPRESSION
                       SIMPLE_EXPRESSION
                        ADDITIVE_EXPRESSION
                         TERM
                          FACTOR
                           VARIABLE
                            Y
                            MOD_VARIABLE
                             ?
                          MOD_TERM
                           ?
                         MOD_ADDITIVE_EXPRESSION
                          ?
                        MOD_SIMPLE_EXPRESSION
                         ?
                      MOD_ARG_LIST
                       ?
                   )
                 MOD_TERM
                  ?
                MOD_ADDITIVE_EXPRESSION
                 ?
               MOD_SIMPLE_EXPRESSION
                ?
            ;
          STATEMENT_LIST
           STATEMENT
            SELECTION_STATEMENT
             if
             (
             EXPRESSION
              SIMPLE_EXPRESSION
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  VARIABLE
                   Ret
                   MOD_VARIABLE
                    ?
                 MOD_TERM
                  ?
                MOD_ADDITIVE_EXPRESSION
                 ?
               MOD_SIMPLE_EXPRESSION
                COMPARE_OPERATION
                 !=
                ADDITIVE_EXPRESSION
                 TERM
                  FACTOR
                   15
                  MOD_TERM
                   ?
                 MOD_ADDITIVE_EXPRESSION
                  ?
             )
             STATEMENT
              EXPRESSION_STATEMENT
               EXPRESSION
                SIMPLE_EXPRESSION
                 ADDITIVE_EXPRESSION
                  TERM
                   FACTOR
                    CALL
                     Print
                     (
                     ARGS
                      ARG_LIST
                       EXPRESSION
                        SIMPLE_EXPRESSION
                         ADDITIVE_EXPRESSION
                          TERM
                           FACTOR
                            VARIABLE
                             Ret
                             MOD_VARIABLE
                              ?
                           MOD_TERM
                            ?
                          MOD_ADDITIVE_EXPRESSION
                           ?
                         MOD_SIMPLE_EXPRESSION
                          ?
                       MOD_ARG_LIST
                        ?
                     )
                   MOD_TERM
                    ?
                  MOD_ADDITIVE_EXPRESSION
                   ?
                 MOD_SIMPLE_EXPRESSION
                  ?
               ;
             MOD_SELECTION_STATEMENT
              else
              STATEMENT
               SELECTION_STATEMENT
                if
                (
                EXPRESSION
                 SIMPLE_EXPRESSION
                  ADDITIVE_EXPRESSION
                   TERM
                    FACTOR
                     VARIABLE
                      Ret
                      MOD_VARIABLE
                       ?
                    MOD_TERM
                     ?
                   MOD_ADDITIVE_EXPRESSION
                    ?
                  MOD_SIMPLE_EXPRESSION
                   COMPARE_OPERATION
                    <=
                   ADDITIVE_EXPRESSION
                    TERM
                     FACTOR
                      15
                     MOD_TERM
                      ?
                    MOD_ADDITIVE_EXPRESSION
                     ?
                )
                STATEMENT
                 EXPRESSION_STATEMENT
                  EXPRESSION
                   SIMPLE_EXPRESSION
                    ADDITIVE_EXPRESSION
                     TERM
                      FACTOR
                       CALL
                        Print
                        (
                        ARGS
                         ARG_LIST
                          EXPRESSION
                           SIMPLE_EXPRESSION
                            ADDITIVE_EXPRESSION
                             TERM
                              FACTOR
                               VARIABLE
                                Ret
                                MOD_VARIABLE
                                 ?
                              MOD_TERM
                               ?
                             MOD_ADDITIVE_EXPRESSION
                              ?
                            MOD_SIMPLE_EXPRESSION
                             ?
                          MOD_ARG_LIST
                           ?
                        )
                      MOD_TERM
                       ?
                     MOD_ADDITIVE_EXPRESSION
                      ?
                    MOD_SIMPLE_EXPRESSION
                     ?
                  ;
                MOD_SELECTION_STATEMENT
                 else
                 STATEMENT
                  SELECTION_STATEMENT
                   if
                   (
                   EXPRESSION
                    SIMPLE_EXPRESSION
                     ADDITIVE_EXPRESSION
                      TERM
                       FACTOR
                        VARIABLE
                         Ret
                         MOD_VARIABLE
                          ?
                       MOD_TERM
                        ?
                      MOD_ADDITIVE_EXPRESSION
                       ?
                     MOD_SIMPLE_EXPRESSION
                      COMPARE_OPERATION
                       >=
                      ADDITIVE_EXPRESSION
                       TERM
                        FACTOR
                         15
                        MOD_TERM
                         ?
                       MOD_ADDITIVE_EXPRESSION
                        ?
                   )
                   STATEMENT
                    EXPRESSION_STATEMENT
                     EXPRESSION
                      SIMPLE_EXPRESSION
                       ADDITIVE_EXPRESSION
                        TERM
                         FACTOR
                          CALL
                           Print
                           (
                           ARGS
                            ARG_LIST
                             EXPRESSION
                              SIMPLE_EXPRESSION
                               ADDITIVE_EXPRESSION
                                TERM
                                 FACTOR
                                  VARIABLE
                                   Ret
                                   MOD_VARIABLE
                                    ?
                                 MOD_TERM
                                  ?
                                MOD_ADDITIVE_EXPRESSION
                                 ?
                               MOD_SIMPLE_EXPRESSION
                                ?
                             MOD_ARG_LIST
                              ?
                           )
                         MOD_TERM
                          ?
                        MOD_ADDITIVE_EXPRESSION
                         ?
                       MOD_SIMPLE_EXPRESSION
                        ?
                     ;
                   MOD_SELECTION_STATEMENT
                    else
                    STATEMENT
                     SELECTION_STATEMENT
                      if
                      (
                      EXPRESSION
                       SIMPLE_EXPRESSION
                        ADDITIVE_EXPRESSION
                         TERM
                          FACTOR
                           VARIABLE
                            Ret
                            MOD_VARIABLE
                             ?
                          MOD_TERM
                           ?
                         MOD_ADDITIVE_EXPRESSION
                          ?
                        MOD_SIMPLE_EXPRESSION
                         COMPARE_OPERATION
                          ==
                         ADDITIVE_EXPRESSION
                          TERM
                           FACTOR
                            15
                           MOD_TERM
                            ?
                          MOD_ADDITIVE_EXPRESSION
                           ?
                      )
                      STATEMENT
                       EXPRESSION_STATEMENT
                        EXPRESSION
                         SIMPLE_EXPRESSION
                          ADDITIVE_EXPRESSION
                           TERM
                            FACTOR
                             CALL
                              Print
                              (
                              ARGS
                               ARG_LIST
                                EXPRESSION
                                 SIMPLE_EXPRESSION
                                  ADDITIVE_EXPRESSION
                                   TERM
                                    FACTOR
                                     VARIABLE
                                      Ret
                                      MOD_VARIABLE
                                       ?
                                    MOD_TERM
                                     ?
                                   MOD_ADDITIVE_EXPRESSION
                                    ?
                                  MOD_SIMPLE_EXPRESSION
                                   ?
                                MOD_ARG_LIST
                                 ?
                              )
                            MOD_TERM
                             ?
                           MOD_ADDITIVE_EXPRESSION
                            ?
                          MOD_SIMPLE_EXPRESSION
                           ?
                        ;
                      MOD_SELECTION_STATEMENT
                       else
                       STATEMENT
                        EXPRESSION_STATEMENT
                         EXPRESSION
                          SIMPLE_EXPRESSION
                           ADDITIVE_EXPRESSION
                            TERM
                             FACTOR
                              CALL
                               Print
                               (
                               ARGS
                                ARG_LIST
                                 EXPRESSION
                                  SIMPLE_EXPRESSION
                                   ADDITIVE_EXPRESSION
                                    TERM
                                     FACTOR
                                      VARIABLE
                                       Ret
                                       MOD_VARIABLE
                                        ?
                                     MOD_TERM
                                      ?
                                    MOD_ADDITIVE_EXPRESSION
                                     ?
                                   MOD_SIMPLE_EXPRESSION
                                    ?
                                 MOD_ARG_LIST
                                  ?
                               )
                             MOD_TERM
                              ?
                            MOD_ADDITIVE_EXPRESSION
                             ?
                           MOD_SIMPLE_EXPRESSION
                            ?
                         ;
           STATEMENT_LIST
            STATEMENT
             EXPRESSION_STATEMENT
              EXPRESSION
               SIMPLE_EXPRESSION
                ADDITIVE_EXPRESSION
                 TERM
                  FACTOR
                   CALL
                    Print
                    (
                    ARGS
                     ARG_LIST
                      EXPRESSION
                       SIMPLE_EXPRESSION
                        ADDITIVE_EXPRESSION
                         TERM
                          FACTOR
                           "Program \"Example2\" FINISHED !\n"
                          MOD_TERM
                           ?
                         MOD_ADDITIVE_EXPRESSION
                          ?
                        MOD_SIMPLE_EXPRESSION
                         ?
                      MOD_ARG_LIST
                       ?
                    )
                  MOD_TERM
                   ?
                 MOD_ADDITIVE_EXPRESSION
                  ?
                MOD_SIMPLE_EXPRESSION
                 ?
              ;
            STATEMENT_LIST
             ?
      }
   MOD_DECLARATION_LIST
    ?




PARSING SUCCESSFULLY FINISHED !

Press any key to EXIT !
