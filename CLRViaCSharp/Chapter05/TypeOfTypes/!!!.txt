//-------------------------------------------------------------------------------------------------------
1. Program demonstruje rozlicne typy TYPES, ktore je mozne v .NET definovat.
2. V .NET je mozne definovant nasledovne TYPES.
   A. PRIMITIVE TYPES. Su to TYPES, ktore su PRIAMO PODPOROVANE COMPILER. Pre PRIMITIVE TYPES ma COMPILER SPECIFICKY ALIAS, ktorym sa odkazuje na SKUTOCNY TYPE. Patria sem napriklad TYPES ako 'int', 'long', 'string', 'object' ci 'dynamic'. To, ktore TYPES su PRIMITIVE TYPES zavisi od daneho COMPILER.
   B. VALUE TYPES. Su to TYPES vytvarane na STACK. Patria sem vsetky PRIMITIVE TYPES ako i CUSTOM STRUCTURES deklarovane pomocou KEYWORD [struct] a CUSTOM ENUMS deklarovane pomocou [enum].
   C. REFERENCE TYPES. Su to TYPES vytvarane na HEAP. Patria sem PRIMITIVE TYPES 'object' a 'string' ako i CUSTOM CLASSES deklarovane pomocou KEYWORD [class].
3. C# povazuje nasledujuce TYPES za PRIMITIVE TYPES.
   A. KEYWORD [sbyte] sa mapuje na TYPE SByte.
   B. KEYWORD [byte] sa mapuje na TYPE Byte.
   C. KEYWORD [short] sa mapuje na TYPE Int16.
   D. KEYWORD [ushort] sa mapuje na TYPE UInt16.
   E. KEYWORD [int] sa mapuje na TYPE Int32.
   F. KEYWORD [uint] sa mapuje na TYPE UInt32.
   G. KEYWORD [long] sa mapuje na TYPE Int64.
   H. KEYWORD [ulong] sa mapuje na TYPE UInt64.
   I. KEYWORD [float] sa mapuje na TYPE Single.
   J. KEYWORD [double] sa mapuje na TYPE Double.
   K. KEYWORD [char] sa mapuje na TYPE Char.
   L. KEYWORD [bool] sa mapuje na TYPE Boolean.
   M. KEYWORD [decimal] sa mapuje na TYPE Decimal.
   N. KEYWORD [string] sa mapuje na TYPE String.
   O. KEYWORD [object] sa mapuje na TYPE Object.
   P. KEYWORD [dynamic] sa mapuje na TYPE Object.
4. Nad NUMBERIC PRIMITIVE TYPES C# umoznuje vykonavat 2 typy CONVERSIONS.
   A. IMPLICIT CONVERSIONS. Vykonava ich C# IMPLICITNE ak pri konverzii nehrozi strata presnosti konvertovanej hodnoty. Typickym prikladom je konverzia Int32 na Int64.
   B. EXPLICIT CONVERSIONS. Vykonavaju sa EXPLICITNE pomocou CONVERSION OPERATOR [(TYPE)] pri konverziach kedy HROZI STRATA konvertovanej hodnoty. Typickym prikladom je konverzia Int64 na Int32.
!!! 5. Pri vykonavani operacii NUMBERIC PRIMITIVE TYPES su tieto operacie VZDY VYKONAVANE nad TYPES 'int', 'long', 'decimal', alebo 'double'. VSETKY OPERANDY su CONVERTED na jeden z tychto TYPES. Ak sa napriklad scitavaju 2 'byte' hodnoty, tak vysledkom je 'int' a NIE 'byte'. Platia pri tom nasledujuce pravidla.
   A. Ak OBE OPERANDS maju velkost <1,32> BITS, tak su OBE OPERANDES CONVERTED na INT32. Teda ak napriklad 1 OPERAND ma velkost 8 BYTES a druhy 32 BYTES, OBE su CONVERTED na INT32 a vysledok ARITHMETIC OPERATION je INT32.
   B. Ak aspon 1 OPERAND ma velkost <33,64> BITS, tak su OBE OPERANDES CONVERTED na INT64. Teda ak napriklad 1 OPERAND ma velkost 32 BYTES a druhy 64 BYTES, OBE su CONVERTED na INT32 a vysledok ARITHMETIC OPERATION je INT64.
!!! 6. CLR definuje 2 typy INSTRUCTIONS pre kazdu ARITHMETIC OPERATION. Napriklad pre scitanie existuje INSTRUCTION 'ADD', ktora vykona scitanie BEZ KONTROLY OVERFLOW a INSTRUCTION 'ADD.OVF', ktora pri scitani robi KONTORLU OVERFLOW. Kontrola OVERFLOW, ze pri detekcii OVERFLOW je hodena EXCEPTION typu [OverflowException].
7. C# COMPILER generuje MSIL INSTRUCTIONS, ktore kontroluju, alebo nekontroluju OVERFLOW na zaklade nasledujucich nastaveni.
   A. CODE moze pouzit OPERATORS [checked(EXPRESSION)] a [unchecked(EXPRESSION)] v ARITHMETIC EXPRESSIONS.
   B. CODE moze pouzit STATEMENTS [checked{CODE}] a [unchecked{CODE}]. Vo vnutri STATEMENTS sa bude CODE bud kontrolovat OVERFLOW (checked{CODE}), alebo ho kontrolovat nebude (unchecked{CODE}).
   C. PROJECT moze mat nastavene COMPILER SWITCHES [/checked+], alebo [/checked-].
!!! 8. STATEMENTS [checked] a [unchecked] maju vplyv IBA na CODE generovany v METHOD. Ak sa vsak v STATEMENTS [checked] a [unchecked] volaju ine METHODS, na CODE tychto METHODS sa tieto STATEMENTS samozrejme nemozu aplikovat, pretoze pri roznych volaniach tej istej METHOD s rozlicnymi STATEMENTS by sa museli generovat vzdy ine INSTRUCTIONS.
!!! 9. TYPE Decimal je SPECIALNY TYPE na ukladanie VELKYCH REALNYCH CISEL. Je to VALUE TYPE, pre ktory C# obsahuje aj ALIAS 'decimal', ktory z neho robi zaroven aj PRIMITIVE TYPE. ZASADNY ROZDIEL medzi 'decimal' a napriklad 'int' je v tom, ze pre 'decimal' NEEXISTUJU SPECIALIZOVANE MSIL INSTRUCTIONS ako 'add' ci 'add.ovf', ale pri ARITHEMTIC OPERATIONS sa volaju METHODS OBJECT Decimal.
10. TYPE BigInteger je SPECIALNY TYPE na ukladanie VELKYCH CELYCH CISEL. Je to VALUE TYPE, ktory obsahuje ARRAY uint[] do ktoreho je mozne ulozit LUBOVOLNE DLHE cislo.
11. Pre VALUE TYPES platia nasledujuce fakty.
   A. VALUE TYPES su DERIVED z TYPE ValueType.
   B. ENUMS su tiez VALUE TYPES, ktore su vsak DERIVED z Enum TYPE a Enum TYPE je DERIVED z ValueType TYPE.
   C. VALUE TYPES mozu implementovat INTERFACES, ale NEMOZU byt DERIVED z ineho TYPE, kedze su DERIVED z ValueType, resp. Enum TYPES.
   D. VALUE TYPES su SEALED a NEMOZU sluzit ako BASE TYPES z ktorych by ine TYPES mohli byt DERIVED.
   E. VALUE TYPES sa alokuju bud na STACK, alebo na HEAP, ak reprezentuju FIELDS v REFERENCE TYPES.
   F. VALUE TYPES su prenasane do METHODS BY-VALUE.
   G. VALUE TYPES NIE SU MANAGED GARBAGE COLLECTOR a su odstranovane z MEMORY, pri ukonceni METHOD v ktorej boli definovane.
   H. Pre instance VALUE TYPES sa NEVOLAJU FINALIZER METHODS.
   I. VALUE TYPES by NEMALI mat VIRTUAL METHODS, pretoze KAZDA METHOD, tak ako cely TYPE je SEALED, a preto tieto METHODS NEMOZU byt OVERRIDEN.
   J. Vsetky FIELDS VALUE TYPES su inicializovane na 0.
   K. V C# sa VALUE TYPES definuju pomocou KEYWORD [struct].
   !!! L. TYPE ValueType ma OVERRIDEN METHOD ValueType.Equals(), ktora vracia TRUE, ake su VSETKY FIELDS maju ROVNAKU VALUE, inak vracia FALSE.
   !!! M. TYPE ValueType ma OVERRIDEN METHOD ValueType.GetHashCode(), ktora vracia HASH CODE na zaklade VALUES VSETKYCH FIELDS. Jej implementacia je vsak POMALA, a preto sa odporuca vykonat jej OVERRIDING v CUSTOM VALUE TYPE.
   N. Ak VALUE TYPE obsahuje FIELD typu REFERENCE TYPE, tak NIE JE MOZNE ziskat nan POINTER. POINTER je mozne ziskat iba na VALUE TYPES, ktore maju ako FIELDS VALUE TYPES.
12. Pre REFERENCE TYPES platia nasledujuce fakty.
   A. REFERENCE TYPES mozu byt DERIVED z LUBOVOLNEHO TYPE.
   B. REFERENCE TYPES mozu implementovat 0-N INTERFACES a su DERIVED z 1 CLASS (ak sa nespecifikuje explicite, tak BASE CLASS je CLASS Object).
   C. REFERENCE TYPES MOZU sluzit ako BASE TYPES z ktorych ine TYPES mozu byt DERIVED.
   D. REFERENCE TYPES su VZDY alokovane na HEAP.
   E. REFERENCE TYPES su prenasane do METHODS BY-REFERENCE.
   F. REFERENCE TYPES SU MANAGED GARBAGE COLLECTOR.
   G. Pre REFERENCE TYPES su volane FINALIZERS, ak ich REFERENCE TYPES implementuju.
   H. REFERENCE TYPES mozu mat VIRTUAL i ABSTRACT METHODS a mozu byt ABSTRACT TYPES.
   I. REFERENCE na REFERENCE TYPE je inicializovany na NULL.
   J. V C# sa REFERENCE TYPE definuju pomocou KEYWORD [class].
!!! 13. Pomocou ATTRIBUTE [StructLayout] je mozne definovat v akom poradi budu FIELDS daneho TYPE (VALUE, alebo REFERENCE TYPES) ulozene v MEMORY. ATTRIBUTE [StructLayout] nastavenim PARAMETRA CONSTRUCTOR typu LayoutKind podporuje nasledujuce sposoby ulozenia FIELDS v MEMORY.
   A. VALUE LayoutKind.Auto nechava na COMPILER, aby usporiadal FIELDS tak aby boli co NAJOPTIMALNEJSIE ulozene v MEMORY. C# pre VALUE TYPES pouziva hodnotu [LayoutKind.Sequential] a pre REFERENCE TYPE vykonava REORDERING podla internych optimalizacnych algoritmov.
   B. VALUE LayoutKind.Sequential uklada FIELDS do MEMORY v ROVNAKOM poradi v akom su definovane v definicii TYPE.
   C. VALUE LayoutKind.Explicit umoznuje urcit PRESNE UMIESTNENIE kazdeho FIELD aplikaciou ATTRIBUTE [FieldOffset] na jednotlive FIELDS. Cislena hodnota zadana v CONSTRUCTOR udava OFFSET BYTU na ktorom bude FIELD ulozeny v MEMORY.
!!!!! 14. Pomcou VALUE LayoutKind.Explicit je mozne simulovat C++ UNIONS a to tak, ze VIACERE FIELDS sa budu odkazovat na TEN ISTY OFFSET. Platia vsak nasledujuce obmedzenia.
   A. REFERENCE a VALUE TYPES NESMU odkazovat na ten isty OFFSET, ani sa vzajomne prekryvat.
   B. Viacero REFERENCE TYPE FIELDS MOZU odkazovat na ten isty OFFSET, ale takyto TYPE je UNVERIFIABLE.
   C. Viacero VALUE TYPE FIELDS sa MOZU PREKRYVAT, ale vsetky tieto FIELDS MUSIA byt PUBLIC, inak bude takyto TYPE je UNVERIFIABLE.
15. VALUE a REFERENCE TYPES je mozne vzajomne konvertovat pomocou nasledujucich operacii.
   A. BOXING je operacia konverzie VALUE TYPE na REFERENCE TYPE. Je vykonavana MSIL INSTRUCTION [box]. Pri BOXING sa vytvara NOVA INSTANCIA REFERENCE TYPE na HEAP.
   B. UNBOXING je operacia konverzie REFERENCE TYPE na VALUE TYPE. Je vykonavana MSIL INSTRUCTION [box]. Pri UNBOXING sa NEVYTVARA NOVA INSTANCIA VALUE TYPE na STACK, avsak vacsinou v CODE je po vykonani UNBOXING je vykonana operacia priradenia hodnoty ziskanej po UNBOXING do VALUE TYPE VARIABLE, kedy uz DOCHADZA k VYTVORENIU NOVEJ INSTANCIE VALUE TYPE na STACK. To vsak NIE JE SUCASTOU UNBOXING, ale jedna sa o SEPARATNU OPERACIU.
!!! 16. BOXING sa realizuje v nasledujucich krokoch.
   A. Vykona sa alokacia MEMORY na HEAP. Velkost tejto MEMORY je dana suctom SUM(ALL_FIELDS)+sizof(SYNC_BLOCK_INDEX)+sizof(TYPE_OBJECT_POINTER).
   B. Hodnota FIELDS VALUE TYPE je skopirovana zo STACK do MEMORY alokovanej na HEAP.
   C. BOXING vrati ADDRESS na novy OBJECT v HEAP.
!!! 17. UNBOXING sa realizuje v nasledujucich krokoch.
   A. Skontroluje sa ci hodnota REFERENCE TYPE nie je NULL. Ak je, generuje sa EXCEPTION NullReferenceException.
   B. Skontroluje sa ci hodnota REFERENCE TYPE je IDENTICKEHO TYPU ako TYPE, ktory sa zadal do MSIL INSTRUCTION [unbox]. Ak nie, generuje sa EXCEPTION InvalidCastException.
   !!!!! C. UNBOXING vrati ADDRESS na HEAP, kde sa nachadza PRVY FIELD (BOXED) VALUE TYPE. K ZIADNEMU kopirovaniu FIELDS pri UNBOXING NEDOCHADZA.
!!!!! 18. Pri samotnej operacii UNBOXING NEDOCHADZA k VYTVORENIU OBJECT na STACK, ANI ku KOPIROVANIU FIELDS. Jedine co sa robi su kontroly a vratenie HEAP adresy na PRVY FIELD (BOXED) VALUE TYPE, ktora je dana vzdy ako hodnota REFERENCE_POINTER+sizeof(TYPE_OBJECT_POINTER), kedze REFERENCE_POINTER v skutocnosti sa odkazuje na TYPE_OBJECT_POINTER a az ZA NIM JE 1. FIELD. SYNC_BLOCK_INDEX je PRED REFERENCE_POINTER.
!!!!! 19. AJ KED UNBOXING PRIAMO NEZNAMENA ALOKOVANIE MEMORY na STACK, ANI KOPIROVANIE FIELDS, tak v C# TAKMER VZDY po UNBOXING nasleduje KOPIROVANIE FIELDS. Nasledujuce prikaldy kedy dochadza a kedy NEDOCHADZA ku kopirovaniu FIELDS.
   A. Velmi casto v C# CODE je po UNBOXING pouzity OPERATOR=, ktory priradi UNBOXED VALUE TYPE do VALUE TYPE na STACK a preto MUSI dojst ku KOPIROVANIU FIELDS.
   B. Ak hodnota po vykonani UNBOXING je posielana ako PARAMETER do METHOD, ktora ocakava REFERENCE TYPE, MUSI po operacii UNBOXING nasledovat operacia BOXING, kedy je na HEAP vytvorena NOVA INSTANCIA OBJECT pri ktorej dochadza ku KOPIROVANIU FIELDS.
   !!!!! C. Ak hodnota po vykonani UNBOXING je posielana ako PARAMETER do METHOD, ktora ocakava VALUE TYPE, po operacii UNBOXING NENASLEDUJE explicitna operacia KOPIROVANIA FIELDS pretoze MSIL dokaze akceptovat ako PARAMETERS namiesto VALUE TYPE aj hodnoty vratene UNBOXING. Avsak plati tiez, ze pri preklade CODE do NATIVE CODE v momente volania METHOD uz MUSI dojst ku KOPIROVANIU FIELDS z HEAP pretoze PARAMETERS sa prenasaju cez STACK a PARAMETERS prenesene BY-VALUE musia byt VZDY NEZAVISLE na povodnej hodnote. Alternativou je prenesenie PARAMETERS cez REGISTER, kedy vsak dochadza ku KOPIROVANIU FIELDS z MEMORY do REGISTERS, aj ked toto kopirovanie je vykonnostne daleko vyssie ako kopirovanie medzi MEMORY BLOCKS.
!!!!! 20. C++ na rozdiel od C#, ktory TAKMER VZDY po UNBOXING vykonava KOPIROVANIE FIELDS umoznuje pomocou UNBOXING ziskat POINTER na FIELDS VALUE TYPE na HEAP a pracovat s tymto POINTERS. V C++ sa teda moze pomerne bezne vyskytnut UNBOXING po ktorom NENASLEDUJE kopirovanie FIELDS.
!!! 21. BOXING generuje C# AUTOMATICKY pri zisteni jeho potreby. Platia pri tom nasledujuce pravidla.
   !!! A. KEYWORD [lock] je pre VALUE TYPES ZAKAZANY. Ak by ho C# povoloval musel by vykonat BOXING, pretoze KEYWORD [lock] vyzauje SYNC_BLOCK_INDEX, ktory VALUE TYPES NEMAJU. Tie maju iba REFERENCE TYPES. Kedze vsak BOXING by vytvoril LOCK nad TEMPORARY VARIABLE, ziaden LOCKING by NEVYKONAL. Preto C# zakazuje pouzitie KEYWORD [lock] pre VALUE TYPES.
   !!! B. Volanie VIRTUAL METHODS ValueType.Equals(), ValueType.GetHashCode() a ValueType.ToString() AK VALUE TYPE vykonava ich OVERRIDING NEVYZADUJE BOXING, pretoze VALUE TYPES maju VSETKY VIRTUAL METHODS SEALED a CLR vie, ze tieto METHODS NEMOZU byt OVERRIDEN (VALUE TYPES nemozu vystupovat ako BASE CLASSES), a preto mozu byt volane NEVIRTUALNE. C# vsak stale emituje INSTRUCTION [callvirt] a az JIT COMPILER vykonava optimalizaciu, ked INSTRUCTION [callvirt] preklada na NON-VIRTUAL CALL.
   !!!!! C. Ak niektora z OVERRIDEN VIRTUAL METHODS ValueType.Equals(), ValueType.GetHashCode() a ValueType.ToString() vola vo svojom CODE BASE implementaciu danej METHOD, tato je uz volana VIRTUALNE. VIRTUALNE volanie METHODS vyzaduje, aby THIS PARAMETER bol ulozeny na HEAP, a preto je nutny BOXING.
   D. Volanie METHODS ValueType.GetType() a ValueType.MemberwiseCopy() vsak VYZADUJE BOXING, pretoze tieto METHODS su definovane v TYPE Object, ktory vyzauje PARAMETER THIS ulozeny na HEAP.
   !!! E. Ak VALUE TYPE je pretypovany na INTERFACE, dochadza k BOXING, pretoze INTERFACE je REFERENCE TYPE.
   !!! F. Ak sa INTERFACE METHOD vola PRIAMO nad VALUE TYPE bez toho, aby sa vykonalo pretypovanie na INTERFACE, tak k BOXING NEDOCHADZA.
   G. Volanie NON-VIRTUAL METHOD ValueType.GetType() VYZADUJE BOXING, pretoze METHOD GetType() je definovana v BASE CLASS Object a pri jej volani je nutne, aby THIS PARAMETER bol ulozeny na HEAP.
   !!!!! H. Pri UNBOXING sa NEROBIA ZIADNE CONVERSION a tom dokonca ani CONVERSIONS INT na DOUBLE. Aj tieto CONVERSIONS sposobia generovanie EXCEPTIONS.
!!! 22. VALUE TYPES by MALI BYT IMMUTABLE. To znamena, ze ich hodnota by sa nemala po vytvoreni menit, inak moze dojst pri KOMPILATOROM GENEROVANYCH BOXING a UNBOXING OPERATIONS pre programatora k neocakavanemu chovaniu.
23. Pre METHOD Object.Equals() platia nasledujuce pravidla.
   A. Standardna implementacia v CLASS Object vykonava iba POROVNANIE REFERENCII a NIE POROVNANIE FIELDS dvoch OBJECTS.
   B. Implementacia v CLASS TypeValue pre VALUE TYPES porovnava aj vsetky FIELDS VALUE TYPES, no kedze pouziva interne REFLECTION, je vhodne vykonat jej OVERRIDING a porovnavat FIELDS PRIAMO BEZ REFLECTION.
   C. Pokial dany TYPE implementuje INTERFACE IEquatable<T>, tak METHOD Object.Equals(object) by interne mala volat METHOD IEquatable<T>.Equals(T), aby obe vracali konzistentne vysledky.
   D. Pri vykonani OVERRIDING METHOD Object.Equals() je vhodne implementovat i OPERATOR== a OPERATOR!=, ktore interne zavolaju METHOD OVERRIDEN METHOD Object.Equals().
!!! 24. Pre METHOD Object.GetHashCode() platia nasledujuce pravidla.
   A. Standardna implementacia v CLASS Object vracia UNIKATNY OBJECT IDENTIFIER, ktory je UNIKATNY pre DANU APP DOMAIN. NEVRACIA teda ADDRESS, ktora sa pri GC moze menit, ale UNIKATNY IDENTIFIER, ktory je mozne ziskat aj pomocou METHOD RuntimeHelpers.GetHashCode().
   B. Implementacia v CLASS TypeValue pre VALUE TYPES je POMALA, lebo vypocet HASH CODE robi pomocou REFLECTION, ktoru zisti hodnoty vsetkych FIELDS z ktorych vyrata HASH CODE.
   !!! C. HASH CODE NEMUSI byt UNIKATNA VALUE, ale ROVNOMERNE DISTRIBUOVANA. COLLECTIONS ako su DICTIONARIES ju pouzivaju na urcenie do ktoreho BUCKET budu dany OBJECT ukladat. V kazdom BUCKET je potom LIST vsetkych VALUES rovnakymi (alebo podobnymi) HASH CODES. DICTIONARY pri hladani daneho ITEM najprv ziska HASH CODE z KEY na zaklade ktoreho urci BUCKET v ktorom je dany ITEM ulozeny. Nasledne DICTIONARY prejde LIST a uz podla HODNOTY KEY (nie HASH CODE) najde pozadovany ITEM.
   D. HASH CODE by mal byt ROVNOMERNE DISTRIBUOVANY a ROVNAKY pre 2 OBJECTS obsahujuce rovnake FIELDS. Ak HASH CODE nie je ROVNOMERNE DISTRIBUOVANY potom distribucia VALUES do BUCKETS bude NEOPTIMALNA a vyhladavanie v DICTIONARIES bude POMALSIE.
25. CLR od verzie 4.0. definuje nove API nazyvane DYNAMIC LANGUAGE RUNTIME (DLR). DLR umoznuje v C# pomocou KEYWORD [dynamic] definovat DYNAMIC VARIABLES. DYNAMIC VARIABLES pri volani svojich MEMBERS vykonavaju DYNAMIC BIDNING, kedy sa az v RUNTIME urcuje, ci dana VARIABLE ma pozadovany MEMBER a ci sa moze vyvolat. Pre DYNAMIC VARIABLES platia nasledujuce pravidla.
   A. DYNAMIC VARIABLES sluzia na vytvorenie VARIABLES, ktore pri volani svojich MEMBERS vykonavaju DYNAMIC BINDING na tieto MEMBERS. Pri DYNAMIC BINDING je pre DYNAMIC VARIABLES az v RUNTIME urcene, ci ich TYPE ma pozadovany MEMBER a tento je mozne vyvolat. Ak TYPE DYNAMIC VARIABLE dany MEMBER nema, je generovana EXCEPTION [RuntimeBinderException].
   B. C# pri vyskyste KEYWORD [dynamic] konvertuje danu VARIABLE na TYPE Object a zaroven generuje CODE, ktory v RUNTIME vykona DYNAMIC BINDING.
   C. Ak DYNAMIC VARIABLE je je pouzita pri ENUMERATION, tak C# konvertuje danu VARIABLE na TYPE IEnumerable. Ak DYNAMIC TYPE neimplementuje IEnumerable, je generovana EXCEPTION.
   D. Ak DYNAMIC VARIABLE je je pouzita v KEYWORD [using], tak C# konvertuje danu VARIABLE na TYPE IDisposable. Ak DYNAMIC TYPE neimplementuje IDisposable, je generovana EXCEPTION.
   !!!!! E. DYNAMIC VARIABLES mozu vystupovat ako FIELDS, LOCAL VARIABLES, METHODS PARAMETERS a METHOD RETURN VALUES. C# ich vzdy nahraci TYPE Object a zaroven ich oznaci FIELD, METHOD PARAMETERS, METHOD RETURN VALUES ATTRIBUTE [DynamicAttribute]. LOCAL VARIABLES NIE SU oznacene tymto ATTRIBUTE, lebo ATTRIBUTE nie je mozne aplikovat na LOCAL VARIABLES a CLR v METHOD CODE definuje pre LOCAL VARIABLES CODE, ktory vykonava DYNAMIC BINDING.
   !!!!! F. Aj ked CLR umoznuje definovat DYNAMIC VARIABLES ako TYPE PARAMETERS pre GENERICS CLASSES a GENERIC METHODS, tak pre tieto TYPE PARAMETERS sa DYNAMIC BINDING NEROBI. Je to preto, lebo TYPE PARAMETERS musia mat definovane CONSTRAINS, ktore urcuju ake MEMBERS bude mozne pre dany TYPE PARAMETER volat. Preto aj C# pre GENERIC CLASSES a METHOD NEGENERUJE CODE, ktory by realizoval DYNAMIC BINDING.
   !!! G. Pri konvertovani DYNAMIC VARIABLES na STATIC TYPES explicitne pretypovatnie NIE JE POTREBNE, pretoze C# generuje DYNAMIC BINDING, ktory az v RUNTIME zisti ci dane pretypovanie je korektne.
   H. Ak objekt ulozeny v DYNAMIC premennej NEOBSAHUJE pozadovany MEMBER, tak sa generuje EXCEPTION [RuntimeBinderException].
   !!! I. Standardny CLR DYNAMIC RUNTIME BINDER je dostatocne sofistikovany, aby napriklad pre EXPRESSION (10.5+2) dokazal pouzit ako OPERATOR+ ten pre TYPE DOUBLE a nie pre TYPE INT32, co by viedlo ku generovaniu EXCEPTION.
   J. Pri pouzivani DYMAMIC VARIABLES je potrebne davat velky pozor na SYNTACTIC ERRORS, ako napriklad skomolenie METHOD NAME, pretoze COMPILER to NEODHALI. Odhali to az RUNTIME generovanim EXCEPTION.
   K. Kedze DYNAMIC VARIABLES sa vyhodnocuju az v RUNTIME, tak pre ne NEFUNGUJE IntelliSense.
   L. LAMBDA EXPRESSIONS a ANONYMOUS METHODS NIE JE mozne pouzit ako METHOD PARAMETERS namiesto PARAMETERS typu [dynamic].
!!! 26. Medzi VARIABLES typu [dynamic] a VARIABLES typu [var] je ZASADNY ROZDIEL v tom, ze pre VARIABLES typu [dynamic] je vykonany BINDING na ich MEMBERS v RUNTIME. Naopak VARIABLES typu [dynamic] su IBA SKRATKOU, ktora ma umoznit, aby programator nemusel pisat konkretny TYPE, ale aby COMPILER v DESIGN TYPE si skutocny TYPE odvodil.
!!! 27. CLR generuje pre COM-INTEROP take RCW WRAPPERS, ze COM VARIANT TYPES (pouzivane pri IDispatch) su nahradzane za DYNAMIC VARIABLES, co umoznuje omnoho citatelnejsi CODE pre pouzitie RCW WRAPPERS obalujucich IDispach COM OBJECTS.
!!!!! 28. DYNAMIC BIDNING sa v DLR vykonava pomocou 2 typov DYNAMIC BINDERS.
   A. LANGUAGE BINDERS. Tieto BINDERS su DERIVED z CLASS CallSiteBinder. KAZDY DLR LANGUAGE (vratane C#) ma implementovanu VLASTNU SADU LANGUAGE BINDERS, kedze LANGUAGE BINDERS su viazane na SYNTAX a SEMANTIKU daneho DLR LANGUAGE. Napriklad pre OBJECTS pouzivane v PYTHON plati, ze KAZDY PYTHON objekt MUSI MAT FIELD '__class__' vracajuci TYPE daneho OBJECT. Ak vsak bol OBJECT vytvoreny v C# (C# je jeho SOURCE LANGUAGE), tak samozrejme tento FIELD NEMA. Ak teda OBJECT, ktory ma ako SOURCE LANGUAGE C#, alebo RUBY ma byt pouzity v TARGET LANGUAGE PYTHON, kde FIELD '__class__' kazdy OBJECT ma, musi LANGUAGE BINDER zabezpecit jeho existenciu. Pokial teda C#, alebo RUBY OBJECT je pouzity v TARGET LANGUAGE PYTHON, tak sa pouziju PYTHON LANGUAGE BINDERS, ktore dokazu vykonat BINDING pre FIELD '__class__', takze aj OBJECT vytvoreny v C#, ci RUBY ma v PYTHON FIELD '__class__'.
   B. OBJECT BINDERS. Tieto BINDERS su DERIVED z CLASS DynamicMetaObject a su viazane na DYNAMIC OBJECT. Pri zaslani DYNAMIC OBJECT do ineho LANGUAGE v akom bol vytvoreny sa struktura OBJECT NEMENI ako je to v pripade LANGUAGE BINDERS. Vdaka tomu je mozne v TARGET LANGUAGE pristupovat k PROPERTIES a METHODS zo SOURCE LANGUAGE. Napriklad KAZDY OBJECT vytvoreny v PYTHON ma FIELD '__class__'. V C# je tento FIELD TAKISTO PRISTUPNY a to prave vdaka OBJECT BINDERS. Ak totizto TARGET LANGUAGE BINDER (v tomto pripade C# LANGUAGE BINDER) nie je schopny vykonat BINDING na FIELD '__class__', tak sa pouzije OBJECT BINDER. Kedze objekt bol vytvoreny v PYTHON, tak sa pouzije PYTHON OBJECT BINDER a tento uz POZNA FIELD '__class__', takze ho dokaze do C# uspesne vratit.
!!!!! 29. CUSTOM OBJECT BINDERS sa realizuju VZDY tak, ze CLASS, ktora chce implementovat CUSTOM OBJECT BINDER MUSI implementovat INTERFACE IDynamicMetaObjectProvider. INTERFACE IDynamicMetaObjectProvider moze CLASS implementovat 2 sposobmi.
   A. CLASS priamo implementuje INTERFACE IDynamicMetaObjectProvider. V tomto pripade v METHOD IDynamicMetaObjectProvider.GetMetaObject() musi vratit instanciu CUSTOM CLASS, ktora je DERIVED z CLASS DynamicMetaObject. CLASS DERIVED z CLASS DynamicMetaObject reprezentuje CUSTOM OBJECT BINDER.
   B. CLASS je DERIVED z CLASS DynamicObject. CLASS DynamicObject interne implementuje IDynamicMetaObjectProvider a to tak, ze jej METHOD IDynamicMetaObjectProvider.GetMetaObject() vracia INTERNU IMPLEMENTACIU CLASS DERIVED z DynamicMetaObject, ktoru definoval MICROSOFT. Tento INTERNY CLASS DERIVED z DynamicMetaObject nasledne SPATNE VOLA METHODS DynamicObject.TryXXX(), kde 'XXX' je meno BINDING OPERATION.
!!! 30. Ak DYNAMIC OBJECT implementuje CUSTOM OBJECT BINDER PRIAMYM implementovanim INTERFACE INTERFACE IDynamicMetaObjectProvider, je nutne vykonat nasledujuce kroky.
   A. Deklaruje sa CUSTOM OBJECT BINDER. CUSTOM OBJECT BINDER je CLASS, ktora dedi z CLASS DynamicMetaObject. CLASS DynamicMetaObject obsahuje sadu VIRTUAL METHODS, ktore mozu byt OVERRIDEN na poskytnutie CUSTOM OBJECT BINDING.
   B. DYNAMIC CLASS, ktory ma pouzivat CUSTOM OBJECT BINDER MUSI implementovat INTERFACE IDynamicMetaObjectProvider. INTERFACE IDynamicMetaObjectProvider ma jedinu METHOD IDynamicMetaObjectProvider.GetMetaObject(), ktora musi vratit CUSTOM OBJECT BINDER, teda instanciu CLASS zdedenej z CLASS DynamicMetaObject, ktora bola napisana v predchadzajucom bode.
!!!!! 31. CLASS DynamicMetaObject reprezentujuci OBJECT BINDER obsahuje 12 METHODS DynamicMetaObject.BindXXX(), kde XXX je meno BINDING OPERATION. Tieto METHODS su VIRTUAL METHODS a CUSTOM OBJECT BINDER moze vykonat ich OVERRIDING na implementaciu CUSTOM OBJECT BINDING. Tieto METHODS vracaju ZNOVA instanciu CLASS DynamicMetaObject, ktora obsahuje vysledok CUSTOM OBJECT BINDINGU.
!!!!! 32. CLASS DynamicMetaObject okrem toho, ze predstavuje OBJECT BINDER sluzi aj na odosielanie VYSLEDKU BINDINGU, ktory pre DYNAMIC OBJECT vykonava OBJECT BINDER. METHODS DynamicMetaObject.BindXXX() vracaju INSTANCIU DynamicMetaObject, ktory vsak nesluzi ako OBJECT BINDER, ale ako ulozisko VYSLEDKU vykonaneho BINDINGU. Vysledky su ulozene v nasledujucich PROPERTIES.
   A. PROPERTY DynamicMetaObject.Expression obsahuje EXPRESSION, ktora sa vykona pri LATE BINDINGU.
   B. PROPERTY DynamicMetaObject.Restrictions obsahuje CONDITION daneho BINDINGU. Je to teda CONDITION daneho BINDING RULE.
!!! 33. CLASS DynamicObject (interne implementuje INTERFACE IDynamicMetaObjectProvider) umoznuje JEDNODUCHSIU implementaciu OBJECT BINDER. Ma nasledujuce vlastnosti.
   !!! A. CUSTOM CLASS, ktora chce implementovat CUSTOM OBJECT BINDER (napriklad CName) dedi z DynamicObject a pretazenim prislusnych METHODS implementuje CUSTOM OBJECT BINDING.
   B. CLASS DynamicObject obsahuje 12 METHODS typu DynamicObject.TryXXX(), kde XXX je meno BINDING OPERATION. Zdedena CLASS moze implementovat CUSTOM BINDING pre danu BINDING OPERATION vykonanin METHOD OVERRING prislusnej METHOD DynamicObject.TryXXX().
   C. CLASS DynamicObject IMPLEMENTUJE IDynamicMetaObjectProvider. METHOD IDynamicMetaObjectProvider.GetMetaObject() vracia DynamicMetaObject, ktory reprezentuje DEFAULT OBJECT BINDER (implementovany MICROSOFT), ktory spatne zabezpeci volanie METHODS DynamicObject.TryXXX() na vykonanie CUSTOM OBJECT BINDING. Kedze METHOD DynamicObject.GetMetaObject() je VIRTUALNA, je ju mozne vykonat METHOD OVERRIDING a vratit CUSTOM OBJECT BINDER, ktory bude modifikovat implementaciu OBJECT BINDER, ktoru standardne pouziva CLASS DynamicObject.
   !!! D. VELKOU VYHODOU DynamicObject je, ze na rozdiel od klasickeho OBJECT BINDINGU (cez implementaciu CLASS DynamicMetaObject) METHODS DynamicObject.TryXXX() NEVRACAJU BINDING RULES vo forme Expression CLASSES, ale BINDING OPERATION ROVNO VYKONAJU. Napriklad v pripade PROPERTY GET vracaju hodnotu PROPERTY a v pripade INVOKE MEMBER spustaju METHOD daneho OBJECT. Tym je implementacia CUSTOM OBJECT BINDING VYRAZNE JEDNODUCHSIA.
   !!!!! E. ZASADNYM ROZDIELOM medzi pouzitim CLASS DynamicObject a CLASS DynamicMetaObject je ten, ze CLASS DynamicObject vola METHODS DynamicObject.TryXXX() IBA AK DEFAULT BINDER NEDOKAZE vykonat BINDING. Ak ho dokaze (TYPE ma dany MEMBER), tak METHODS DynamicObject.TryXXX() NIE SU VOLANE. Naopak, v pripade DynamicMetaObject su METHODS DynamicMetaObject.BindXXX() VOLANE VZDY.
!!!!! 34. CLASS DynamicObject implementuje IDynamicMetaObjectProvider.GetMetaObject() a to tym sposobom, ze vracia instanciu PRIVATE CLASS MetaDynamic, ktora je implementovana nasledovne.
   A. Zavola sa LANGUAGE BINDER pre TARGET LANGUAGE, ktory skusi vykonat BINDING.
   B. Ak DEFAULT LANGUAGE BINDER ZLYHA (vrati VOID) a ZAROVEN CLASS NEMA OVERRIDEN METHOD DynamicObject.TryXXX() pre BINDING OPERATION 'XXX', tak je generovana EXCEPTION.
   C. Ak DEFAULT LANGUAGE BINDER ZLYHA (vrati VOID) a ZAROVEN CLASS MA OVERRIDEN METHOD DynamicObject.TryXXX() pre BINDING OPERATION 'XXX', tak sa zavola tato, aby vykonala BINDING. Ak ani tato nedokaze vykonat BINDING, tak sa hodi EXCEPTION.
35. C# ma definovany svoj LANGUAGE BINDER v ASSEMBLY Microsoft.CSharp.dll. Tato ASSEMBLY je v DEFAULT RESPONSE FILE [CSC.RSP] a preto ju netreba explicitne vkladat do PROJECT.
!!!!! 36. DYNAMIC VARIABLES vykonavaju DYNAMIC BIDING v RUNTIME v nasledujucich krokoch.
   A. CLR si overi ci OBJECT ulozeny v DYNAMIC VARIABLE implementuje INTERFACE IDynamicMetaObjectProvider. Tento INTERFACE je mozne implementovat PRIAMO, alebo tak, ze CLASS je DERIVED z CLASS DynamicObject, ktora INTERFACE IDynamicMetaObjectProvider.
   B. Ak OBJECT ulozeny v DYNAMIC VARIABLE implementuje INTERFACE, tak CLR zavola METHOD IDynamicMetaObjectProvider.GetMetaObject(), ktory vracia CLASS DERIVED z CLASS DynamicMetaObject, ktora reprezentuje CUSTOM OBJECT BINDER.
   !!! C. CLASS DERIVED z DynamicMetaObject reprezentuje implementaciu CUSTOM OBJECT BINDER, ktory je zodpovedny za vykonanie BINDING OPERATIONS pre MEMBERS (FIELDS, METHODS, EVENTS, OPERATORS, PROPERTIES) daneho TYPE.
   !!! D. DYNAMIC LANGUAGES ako Python ci Ruby implementuju CUSTOM OBJECT BINDER (CLASS DERIVED z DynamicMetaObject), ktory realizuje DYNAMICKY BINDING vyhladavajuci MEMBERS daneho OBJECT. Podobna implementacia CUSTOM OBJECT BINDER existuje i pre RCW WRAPPERS obalujuce IDispach COM OBJECTS, ak sa k RCW WRAPPERS pristupuje cez DYNAMIC VARIABLES (KEYWORD [dynamic]).
   !!!!! E. Ak OBJECT v DYNAMIC VARIABLE NEIMPLEMENTUJE IDynamicMetaObjectProvider, tak CLR na vyhladanie MEMBER pouzije REFLECTION.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
Rozdiel medzi UNBOXING bez kopirovania a s kopirovanim.

1. Nasledujuci CODE sposobi BOXING AJ KOPIROVANIE FIELDS. Dovodom kopirovania je fakt, ze bol OPERATOR '=' pouzity na kopirovanie UNBOXED hodnoty na STACK PREMENNU 'Y'.

	object		X=100;
	int			Y=(int) X;

2. Nasledujuci CODE sposobi IBA UNBOXING, ale NESPOSOBI KOPIROVANIE FIELDS. Problem je, ze hned po UNBOXING nasleduje operacia BOXING (METHOD String.Format() ocakava ako PARAMETERS REFERENCE TYPES Object) a pri BOXING VZDY dochadza ku KOPIROVANIE FIELDS, kedze je vytvoreny NOVY OBJECT na HEAP.

	object		X=100;
	
	string.Format("INT [{0}] !",(int) X)

!!! 3. Nasledujuci CODE sposobi IBA UNBOXING, ale NESPOSOBI KOPIROVANIE FIELDS. 
!!! 4. Volanie METHOD vsak SPOSOBI KOPIROVANIE FIELDS, pretoze VALUE TYPES su prenasane BY-VALUE a tie su VZDY prenasane cez STACK (aby boli NEZAVISLE na POVODNEJ HODNOTE).

	PrintValueType((CNameStruct)ReferenceType);
//-------------------------------------------------------------------------------------------------------