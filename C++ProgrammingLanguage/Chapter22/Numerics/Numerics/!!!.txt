//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie NUMERIC kniznice STL.
2. V kniznicii <limits> je definovany TEMPLATE CLASS numeric_limits<T> pomocou, ktoreho je mozne zistovat parametre daneho PRIMITIVNEHO NUMERIC TYPU. Pre jednotlive PRIMITIVNE TYPY su definovane SPECIALIZACIE tejto TEMPLATE. V pripade, ze SPECIALIZACIA NEEXISTUJE FIELD 'is_specialized' vracia FALSE a numeric_limits<T> sa pre tento TYP NEDA POUZIT.
3. Kniznica <cmath> obsahuje C++ verzie funkcii z <math.h>. Tieto funkcie v pripade CHYBY nastavuju 'errno' hodnotu s popisom chyby.
4. CLASS valarray<T> definovany v kniznici <valarray> sluzi na vykonanie matematickych operacii nad COLLECTION cisel. Ma nasledujuce MEMBERS.
   A. Pomocou CONSTRUCTORS je mozne inicializovat VALARRAY KONSTANTOU, ARRAY, alebo SLICE.
   B. OPERATOR= priradzuje do VSETKYCH ITEMS bud INY VALARRAY (ktory, ale musi mat ROVNAKU VELKOST), alebo KONSTANTNU HONDOTU.
   C. OPERATOR[] sluzi na pristup k jednotlivym ITEMS.
   D. Metoda size() vracia POCET ITEMS vo VALARRAY.
   E. OPERATOR+=, OPERATOR-=, OPERATOR*=, OPERATOR/= a dalsie ARITMETICKE OPERATORS vykonavaju aritmeticke operacie nad 2 VALARRAYS. Tieto OPERATORS pracuju na PER-INDEX baze, teda vykonavaju OSOBITNE pre KAZDY INDEX danu operaciu NEZAVISLE na hodnota v INYCH INDEXOCH.
   F. Metody min() a max() majdu MINIMALNY a MAXIMALNY ITEM vo VALARRAY.
   G. Metoda apply() umoznuje pre KAZDY ITEM zavolat CALLBACK FUNKCIU, ktora vrati NOVU HODNOTU ITEM.
   H. OPERATOR- obracia znamienko VSETKYCH ITEMS.
   I. Metoda resize() umoznuje zmenit velkost VALARRAY.
   J. Metoda shift() vykonava POSUNUTIE INDEXOV ITEMS.
   K. Metoda cshift() vykonava CYKLICKE POSUNUTIE INDEXOV ITEMS.
   M. OPERATOR<< a OPERATOR>> vykonavaju BITOVY POSUN nad KAZDYM ITEM vo VALARRAY.
   N. GLOBALNE MATEMATICKE FUNKCIE nad VALARAYS su vykonavane nad KAZDYM ITEM vo VALARRAY.
!!! 5. Do ITEMS vo VALARRAY je mozne davat LUBOVOLNE, teda i VIACCIFERNE ci ZAPORNE CISLA. Kazdy ITEM je NEZAVISLE CISLO, kedze NEZAVISI na hodnote OSTATNYCH ITEMS.
!!! 6. VALARRAY je v pamati VZDY ako JEDEN BLOK PAMATE a preto je mozne pouzit POINTER aritmetiku.
7. CLASS 'slice' umoznuje reprezentovat 1 DIMENZIONALNE REZY (napriklad ROWS a COLUMNS) vo 'valarray<T>'. CLASS je mozne pouzit ako PARAMETER pre valarray<T>.operator[](), ktory vracia instanciu CLASS slice_array<T>.
8. CLASS 'slice_array<T>' vracia valarray<T>.operator[]() ak je jeho PARAMETER objekt typu 'slice'. CLASS 'slice_array<T>' obsahuje pretazene ARITEMTICKE OPERATORS pomocou, ktorych je mozne menit ITEM v 'slice_array<T>' a tym i ITEM vo 'valarray<T>', z ktoreho bol 'slice_array<T>' vytvoreny. Tym je mozne lahko implementovat matematicke operacie nad ROW a COLUMNS matice reprezentovanej 'valarray<T>'.
9. CLASS 'gslice' umoznuje reprezentovat VIAC DIMENZIONALNE REZY (napriklad SUBMATRICES) vo 'valarray<T>'. CLASS je mozne pouzit ako PARAMETER pre valarray<T>.operator[](), ktory vracia instanciu CLASS gslice_array<T>.
10. CLASS 'gslice_array<T>' vracia valarray<T>.operator[]() ak je jeho PARAMETER objekt typu 'gslice'. CLASS 'gslice_array<T>' obsahuje pretazene ARITEMTICKE OPERATORS pomocou, ktorych je mozne menit ITEM v 'gslice_array<T>' a tym i ITEM vo 'valarray<T>', z ktoreho bol 'gslice_array<T>' vytvoreny. Tym je mozne lahko implementovat matematicke operacie nad SUBMATICAMI z MATICE reprezentovanej 'valarray<T>'.
11. CLASS 'mask_array<T>' vracia valarray<T>.operator[]() ak je jeho PARAMETER objekt typu 'valaray<bool>'. Objekt 'valaray<bool>' obsahujuje FLAGS, ktore urcuju, ktore ITEMS z 'valarray<T>' sa vyberu do SLICE. CLASS 'mask_array<T>' obsahuje pretazene ARITEMTICKE OPERATORS pomocou, ktorych je mozne menit ITEM v 'mask_array<T>' a tym i ITEM vo 'valarray<T>', z ktoreho bol 'mask_array<T>' vytvoreny.
12. CLASS 'indirect_array<T>' vracia valarray<T>.operator[]() ak je jeho PARAMETER objekt typu 'valaray<size_t>'. Objekt 'valaray<size_t>' obsahujuje INDEXY, ktore urcuju, PORADIE ITEMS z 'valarray<T>' ako sa ulozia do SLICE. INDEXY sa NESMU OPAKOVAT. CLASS 'indirect_array<T>' obsahuje pretazene ARITEMTICKE OPERATORS pomocou, ktorych je mozne menit ITEM v 'indirect_array<T>' a tym i ITEM vo 'valarray<T>', z ktoreho bol 'indirect_array<T>' vytvoreny.
13. CLASS 'complex<TFloat>' definuje COMPLEX NUMBER. Ako TEMPLATE PARAMETER sa musi pouzit FLOAT TYPE. CLASS obsahuje pretazene OPERATORS a matematicke METHODS.
14. Kniznica <numeric> obsahuje niekolko matematickych operacii, ktore je mozne aplikovat na ciselne sekvencie.
   A. Operacia partial_sum() vykonava ARITMETICKU OPERACIU nad 'N' ITEMS. Vysledkom je 'N' ITEMS s hodnotami [X(0),X(0) OP X(1),X(0) OP X(1) OP X(2),...,X(0) OP ... OP X(N-1)]. OPERATOR 'OP' je mozne definovat v pretazenej verzii funkcie.
   B. Operacia adjacent_difference() vykonava ARITMETICKU OPERACIU nad 'N' ITEMS. Vysledkom je 'N' ITEMS s hodnotami [X(0),X(1) OP X(0),X(2) OP X(1),...,X(N-1) OP X(N-2)]. OPERATOR 'OP' je mozne definovat v pretazenej verzii funkcie.
   C. Operacia inner_product() vykonava ARITMETICKU OPERACIU nad 'N' ITEMS. Vysledkom je akumulovana hodnota [INIT OP2 (A(0) OP1 B(0)) OP2 (A(1) OP1 B(1)) OP2 (A(2) OP1 B(2)) OP2 ... OP2 (A(N-1) OP1 B(N-1))]. OPERATORY 'OP1' a 'OP2' je mozne definovat v pretazenej verzii funkcie.
   D. Operacia accumulate() vykonava ARITMETICKU OPERACIU nad 'N' ITEMS. Vysledkom je akumulovana hodnota [INIT OP X(0) OP X(1) OP ... OP X(N-1)]. OPERATOR 'OP' je mozne definovat v pretazenej verzii funkcie.
//-------------------------------------------------------------------------------------------------------