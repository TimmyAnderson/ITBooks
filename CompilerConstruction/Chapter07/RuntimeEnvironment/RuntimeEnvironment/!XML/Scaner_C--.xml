<Table>
  <InputChars>
    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="WhiteChars">
      <Character Value=" "/>
      <Character Value="TAB"/>
      <Character Value="CR"/>
      <Character Value="NEW_LINE"/>
    </InputChar>

    <InputChar Type="CInputChar_AnyLetter" Name="Letters" AcceptUpperCaseLetters="true" AcceptLowerCaseLetters="true"/>
    <InputChar Type="CInputChar_AnyNumber" Name="Numbers"/>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Plus">
      <Character Value="+"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Minus">
      <Character Value="-"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Asterisk">
      <Character Value="*"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Slash">
      <Character Value="/"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Lesser">
      <Character Value="&lt;"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Greater">
      <Character Value="&gt;"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Equal">
      <Character Value="="/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Exclamation">
      <Character Value="!"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Semicolon">
      <Character Value=";"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Comma">
      <Character Value=","/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="RoundBracketLeft">
      <Character Value="("/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="RoundBracketRight">
      <Character Value=")"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="SquareBracketLeft">
      <Character Value="["/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="SquareBracketRight">
      <Character Value="]"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="CurlyBracketLeft">
      <Character Value="{"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="CurlyBracketRight">
      <Character Value="}"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Quotation">
      <Character Value="&quot;"/>
    </InputChar>

    <InputChar Type="CInputChar_OneOrMoreCharacters" Name="Backslash">
      <Character Value="\"/>
    </InputChar>

    <InputChar Type="CInputChar_EOF" Name="EOF" />
    <InputChar Type="CInputChar_Other" Name="Other" />
  </InputChars>

  <States>
    <State Type="CState_NonAcceptingStart" Name="Start">
      <Transition InputChar="WhiteChars" NewState="AfterWhiteChar" IsConsumingCharTransition="true"/>
      <Transition InputChar="Letters" NewState="Identifier" IsConsumingCharTransition="true"/>
      <Transition InputChar="Numbers" NewState="Number" IsConsumingCharTransition="true"/>
      <Transition InputChar="Plus" NewState="AfterPlus" IsConsumingCharTransition="true"/>
      <Transition InputChar="Minus" NewState="AfterMinus" IsConsumingCharTransition="true"/>
      <Transition InputChar="Asterisk" NewState="AfterAsterisk" IsConsumingCharTransition="true"/>
      <Transition InputChar="Slash" NewState="AfterSlash" IsConsumingCharTransition="true"/>
      <Transition InputChar="Lesser" NewState="AfterLesser" IsConsumingCharTransition="true"/>
      <Transition InputChar="Greater" NewState="AfterGreater" IsConsumingCharTransition="true"/>
      <Transition InputChar="Equal" NewState="AfterEqual" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="AfterExclamation" IsConsumingCharTransition="true"/>
      <Transition InputChar="Semicolon" NewState="TokenSemicolon" IsConsumingCharTransition="true"/>
      <Transition InputChar="Comma" NewState="TokenComma" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenRoundBracketLeft" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenRoundBracketRight" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenSquareBracketLeft" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenSquareBracketRight" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenCurlyBracketLeft" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenCurlyBracketRight" IsConsumingCharTransition="true"/>
      <Transition InputChar="Quotation" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Backslash" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenEOF" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="Error" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterWhiteChar">
      <Transition InputChar="WhiteChars" NewState="AfterWhiteChar" IsConsumingCharTransition="true"/>
      <Transition InputChar="Letters" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenWhiteChars" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="Identifier">
      <Transition InputChar="WhiteChars" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="Identifier" IsConsumingCharTransition="true"/>
      <Transition InputChar="Numbers" NewState="Identifier" IsConsumingCharTransition="true"/>
      <Transition InputChar="Plus" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenIdentifier" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="Number">
      <Transition InputChar="WhiteChars" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="Number" IsConsumingCharTransition="true"/>
      <Transition InputChar="Plus" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenNumber" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenNumber" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterPlus">
      <Transition InputChar="WhiteChars" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenPlus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenPlus" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterMinus">
      <Transition InputChar="WhiteChars" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenMinus" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenMinus" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterAsterisk">
      <Transition InputChar="WhiteChars" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenAsterisk" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterSlash">
      <Transition InputChar="WhiteChars" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Slash" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenSlash" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenSlash" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterLesser">
      <Transition InputChar="WhiteChars" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenLesserOrEqual" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenLesser" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenLesser" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterGreater">
      <Transition InputChar="WhiteChars" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenGreaterOrEqual" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenGreater" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenGreater" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterEqual">
      <Transition InputChar="WhiteChars" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenEqual" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="TokenAssigment" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterExclamation">
      <Transition InputChar="WhiteChars" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="TokenNotEqual" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Semicolon" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Backslash" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="EOF" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="Error" IsConsumingCharTransition="false"/>
    </State>

    <State Type="CState_NonAccepting" Name="InString">
      <Transition InputChar="WhiteChars" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Letters" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Numbers" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Plus" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Minus" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Asterisk" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Slash" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Lesser" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Greater" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Equal" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Semicolon" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Comma" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketLeft" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketRight" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketLeft" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketRight" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketLeft" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketRight" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Quotation" NewState="TokenString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Backslash" NewState="AfterBackslash" IsConsumingCharTransition="true"/>
      <Transition InputChar="EOF" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="InString" IsConsumingCharTransition="true"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterBackslash">
      <Transition InputChar="WhiteChars" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Letters" NewState="InString" IsConsumingCharTransition="false"/>
      <Transition InputChar="Numbers" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Plus" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Minus" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Asterisk" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Slash" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Lesser" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Greater" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Equal" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Exclamation" NewState="Error" IsConsumingCharTransition="true"/>
      <Transition InputChar="Semicolon" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Comma" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketLeft" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="RoundBracketRight" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketLeft" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="SquareBracketRight" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketLeft" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="CurlyBracketRight" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Quotation" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="Backslash" NewState="InString" IsConsumingCharTransition="true"/>
      <Transition InputChar="EOF" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="Error" IsConsumingCharTransition="false"/>
    </State>




    <State Type="CState_NonAccepting" Name="InComment">
      <Transition InputChar="WhiteChars" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Letters" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Numbers" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Plus" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Minus" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Asterisk" NewState="AfterClosingAsterisk" IsConsumingCharTransition="true"/>
      <Transition InputChar="Slash" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Lesser" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Greater" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Equal" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Semicolon" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Comma" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketLeft" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketRight" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketLeft" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketRight" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketLeft" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketRight" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Quotation" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Backslash" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="EOF" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="InComment" IsConsumingCharTransition="true"/>
    </State>

    <State Type="CState_NonAccepting" Name="AfterClosingAsterisk">
      <Transition InputChar="WhiteChars" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Letters" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Numbers" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Plus" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Minus" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Asterisk" NewState="AfterClosingAsterisk" IsConsumingCharTransition="true"/>
      <Transition InputChar="Slash" NewState="TokenComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Lesser" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Greater" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Equal" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Exclamation" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Semicolon" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Comma" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketLeft" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="RoundBracketRight" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketLeft" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="SquareBracketRight" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketLeft" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="CurlyBracketRight" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Quotation" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="Backslash" NewState="InComment" IsConsumingCharTransition="true"/>
      <Transition InputChar="EOF" NewState="Error" IsConsumingCharTransition="false"/>
      <Transition InputChar="Other" NewState="InComment" IsConsumingCharTransition="true"/>
    </State>

    <State Type="CState_AcceptingToken" Name="TokenWhiteChars" TokenID="WHITE CHARS"/>
    <State Type="CState_AcceptingKeywordToken" Name="TokenIdentifier" KeywordTokenID="KEYWORD" NonKeywordTokenID="IDENTIFIER">
      <Keyword Value="if" />
      <Keyword Value="else" />
      <Keyword Value="while" />
      <Keyword Value="int" />
      <Keyword Value="string" />
      <Keyword Value="void" />
      <Keyword Value="return" />
    </State>
    <State Type="CState_AcceptingToken" Name="TokenNumber" TokenID="NUMBER"/>
    <State Type="CState_AcceptingToken" Name="TokenPlus" TokenID="PLUS"/>
    <State Type="CState_AcceptingToken" Name="TokenMinus" TokenID="MINUS"/>
    <State Type="CState_AcceptingToken" Name="TokenAsterisk" TokenID="ASTERISK"/>
    <State Type="CState_AcceptingToken" Name="TokenSlash" TokenID="SLASH"/>
    <State Type="CState_AcceptingToken" Name="TokenLesser" TokenID="LESSER"/>
    <State Type="CState_AcceptingToken" Name="TokenLesserOrEqual" TokenID="LESSER OR EQUAL"/>
    <State Type="CState_AcceptingToken" Name="TokenGreater" TokenID="GREATER"/>
    <State Type="CState_AcceptingToken" Name="TokenGreaterOrEqual" TokenID="GREATER OR EQUAL"/>
    <State Type="CState_AcceptingToken" Name="TokenAssigment" TokenID="ASSIGMENT"/>
    <State Type="CState_AcceptingToken" Name="TokenEqual" TokenID="EQUAL"/>
    <State Type="CState_AcceptingToken" Name="TokenNotEqual" TokenID="NOT EQUAL"/>
    <State Type="CState_AcceptingToken" Name="TokenComment" TokenID="COMMENT"/>
    <State Type="CState_AcceptingToken" Name="TokenSemicolon" TokenID="SEMICOLON"/>
    <State Type="CState_AcceptingToken" Name="TokenComma" TokenID="COMMA"/>
    <State Type="CState_AcceptingToken" Name="TokenRoundBracketLeft" TokenID="ROUND BRACKET LEFT"/>
    <State Type="CState_AcceptingToken" Name="TokenRoundBracketRight" TokenID="ROUND BRACKET RIGHT"/>
    <State Type="CState_AcceptingToken" Name="TokenSquareBracketLeft" TokenID="SQUARE BRACKET LEFT"/>
    <State Type="CState_AcceptingToken" Name="TokenSquareBracketRight" TokenID="ROUND BRACKET RIGHT"/>
    <State Type="CState_AcceptingToken" Name="TokenCurlyBracketLeft" TokenID="CURLY BRACKET LEFT"/>
    <State Type="CState_AcceptingToken" Name="TokenCurlyBracketRight" TokenID="CURLY BRACKET RIGHT"/>
    <State Type="CState_AcceptingToken" Name="TokenString" TokenID="STRING"/>

    <State Type="CState_AcceptingError" Name="Error"/>
    <State Type="CState_AcceptingTokenEOF" Name="TokenEOF" TokenID="EOF"/>
  </States>
</Table>