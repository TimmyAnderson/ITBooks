//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie CONCEPTS v C++.
2. C++ 20 definuje nasledujuce pojmy.
   A. REQUIREMENTS. REQUIREMENTS definuju sadu podmienok, ktore musia TEMPLATE ARGUMENTS splnat, aby mohli byt substituovane za dane TEMPLATE PARAMETERS.
   B. CONCEPTS. CONCEPT je pomenovana sada REQUIREMENTS, ktore sa aplikuju na jeden, alebo viacero TEMPLATE PARAMETERS.
!!! 3. REQUIREMENTS a CONCEPTS sluzia na definovanie podmienok ci TEMPLATE ARGUMENTS mozu byt substituovane za TEMPLATE PARAMETERS. V pripade ich nedodrzania umoznuju C++ COMPILER generovat zrozumitelnejsie ERROR MESSAGES.
4. Na TEMPLATE CLASSES a TEMPLATE FUNCTIONS je mozne aplikovat REQUIREMENTS.
   A. REQUIREMENTS definuju sadu podmienok, ktore musia TEMPLATE ARGUMENTS splnat, aby mohli byt substituovane za dane TEMPLATE PARAMETERS.
   B. Na TEMPLATE CLASSES a TEMPLATE FUNCTIONS moze byt aplikovanych viacero REQUIREMENTS.
   C. REQUIREMENTS sa aplikuju na TEMPLATE CLASSES a TEMPLATE FUNCTIONS pomocou C++ CLAUSE [requires].
   D. C++ CLAUSE [requires] moze byt aplikovana za TEMPLATE FUNCTION PARAMETERS, alebo hned za KEYWORD [template<>].
   !!! E. REQUIREMENTS su VZDY vyhodnocovane v COMPILE TIME.
5. Pri aplikovani REQUIREMENTS moze byt viacere REQUIREMENTS vzajomne spojene nasledujucimi OPERATORS.
   A. OPERATOR&&. Ak EXPRESSION obsahuje N REQUIREMENTS spojenych pomocou OPERATOR&&, tak EXPRESSION je TRUE, ak vsetky REQUIREMENTS vracaju TRUE. Inak cela EXPRESSION vracia FALSE.
   B. OPERATOR||. Ak EXPRESSION obsahuje N REQUIREMENTS spojenych pomocou OPERATOR||, tak EXPRESSION je TRUE, ak aspon 1 REQUIREMENT vracia TRUE. Inak cela EXPRESSION vracia FALSE.
6. REQUIREMENTS su aplikovane na TEMPLATE CLASSES a TEMPLATE FUNCTIONS pomocou C++ CLAUSE [requires]. Pre C++ CLAUSE [requires] platia nasledujuce fakty.
   A. C++ CLAUSE [requires] ma SYNTAX [requires EXPRESSION].
   !!! B. EXPRESSION 'EXPRESSION' je CONSTANT COMPILE TIME EXPRESSION, ktora je vyhodnocovana VZDY IBA v COMPILE TIME.
   !!! C. EXPRESSION 'EXPRESSION' musi VZDY vracat VAULE TYPE [bool].
   !!!!! D. EXPRESSION 'EXPRESSION' MUSI obsahovat PRIMARY EXPRESSION. PRIMARY EXPRESSION je CONCEPT, TYPE TRAIT, ci lubovolny CONSTANT COMPILE TIME EXPRESSION uzatvoreny v ZATVORKACH [()].
   !!!!! E. Ak EXPRESSION 'EXPRESSION' obsahuje volanie CONSTEXPR FUNCTION, tak toto volanie NIE JE PRIMARY EXPRESSION. Stava sa nim, az ked sa uzatvori do ZATVORIEK [()].
   !!! F. EXPRESSION 'EXPRESSION' moze pozostavat z viacerych SUBEXPRESSIONS, ktore su spojene pomocou OPERATOR&&, alebo OPERATOR||.
   !!! G. Ak pre dane TEMPLATE ARGUMENTS vracia EXPRESSION 'EXPRESSION' VALUE 'TRUE', tak TEMPLATE ARGUMENTS mozu byt subsituovane za TEMPLATE PARAMETERS. Ak EXPRESSION 'EXPRESSION' vracia VALUE 'FALSE', tak tieto TEMPLATE ARGUMENTS nemozu byt subsituovane za TEMPLATE PARAMETERS.
   H. C++ CLAUSE [requires] moze byt aplikovana za TEMPLATE FUNCTION PARAMETERS, alebo hned za KEYWORD [template<>].
7. CONCEPT je pomenovana sada REQUIREMENTS, ktore sa aplikuju na jeden, alebo viacero TEMPLATE PARAMETERS.
8. CONCEPTS musia byt definovane v NAMESPACE SCOPE.
9. CONCEPT ma SYNTAX [template<TEMPLATE_PARAMETERS> concept CONCEPT_NAME OPTIONAL_ATTRIBUTES = CONSTRAINT_EXPRESSION], kde VALUE 'TEMPLATE_PARAMETERS' su TEMPLATE PARAMETERS, VALUE 'CONCEPT_NAME' je nazov CONCEPT, VALUE 'OPTIONAL_ATTRIBUTES' su OPTIONAL C++ ATTRIBUTES a VALUE 'CONSTRAINT_EXPRESSION' je CONSTANT COMPILE TIME EXPRESSION, ktora musi vracat VALUE TYPE [bool].
10. CONCEPT obsahuje CONSTANT COMPILE TIME EXPRESSION pre ktoru platia nasledujuce fakty.
   A. CONSTANT COMPILE TIME EXPRESSION musi vracat VALUE TYPE [bool].
   B. CONSTANT COMPILE TIME EXPRESSION moze obsahovat viacero SUBEXPRESSIONS, ktore su spojene pomocou OPERATOR&&, alebo OPERATOR||.
   !!!!! C. SUBEXPRESSIONS CONSTANT COMPILE TIME EXPRESSION mozu by aj REQUIRES EXPRESSIONS definovane pomocou KEYWORD [requires], ktory je ODLISNY od C++ CLAUSE [requires].
11. REQUIRES EXPRESSIONS su definovane pomocou KEYWORD [requires]. Pre REQUIRES EXPRESSIONS platia nasledujuce fakty.
   A. REQUIRES EXPRESSIONS su sucastou CONCEPTS. Pouzivaju sa na definovanie CONSTANT COMPILE TIME EXPRESSION daneho CONCEPT.
   !!!!! B. REQUIRES EXPRESSIONS su definovane pomocou KEYWORD [requires], ktory vsak NIE JE TO ISTE co C++ CLAUSE [requires], ktora sa pouziva na definovanie REQUIREMENTS v TEMPLATE CLASSES a TEMPLATE FUNCTIONS.
   !!! C. REQUIRES EXPRESSIONS maju SYNTAX [requires(OPTIONAL_PARAMETERS){REQUIREMENTS}], kde VALUE 'OPTIONAL_PARAMETERS' su OPTIONAL PARAMETERS, ktore je mozne pouzit v REQUIREMENTS a VALUE 'REQUIREMENTS' je zoznam REQUIREMENTS.
12. REQUIRES EXPRESSIONS obsahuju REQUIREMENTS. C++ podporuje nasledujuce typy REQUIREMENTS.
   A. SIMPLE REQUIREMENTS.
   B. TYPE REQUIREMENTS.
   C. COMPOUND REQUIREMENTS.
   D. NESTED REQUIREMENTS.
13. Pre SIMPLE REQUIREMENTS v REQUIRES EXPRESSIONS platia nasledujuce fakty.
   A. SIMPLE REQUIREMENT ma SYNTAX [EXPRESSION;].
   B. C++ COMPILER kontroluje ci danu EXPRESSION je mozne pre definovane TEMPLATE ARGUMENTS skompilovat. Ak nie, tak SIMPLE REQUIREMENT vrati FALSE.
14. Pre TYPE REQUIREMENTS v REQUIRES EXPRESSIONS platia nasledujuce fakty.
   A. TYPE REQUIREMENT ma SYNTAX [typename TYPE;].
   B. C++ COMPILER kontroluje ci dany TYPE existuje. Ak nie, tak TYPE REQUIREMENT vrati FALSE.
15. Pre COMPOUND REQUIREMENTS v REQUIRES EXPRESSIONS platia nasledujuce fakty.
   A. COMPOUND REQUIREMENT ma SYNTAX [{EXPRESSION} noexept RETURN_TYPE_REQUIREMENT;], kde KEYWORD [noexcept] a VALUE 'RETURN_TYPE_REQUIREMENT' su OPTIONAL.
   B. VALUE 'RETURN_TYPE_REQUIREMENT' ma SYNTAX [-> TYPE_CONSTRAINT], kde VALUE 'TYPE_CONSTRAINT' je CONCEPT, ktory musi RETURN VALUE TYPE splnat.
   C. C++ COMPILER kontroluje ci EXPRESSION 'EXPRESSION' je mozne skompilovat, ci OPTIONAL EXPRESSION 'EXPRESSION' je NOEXCEPT EXPRESSION a ci RETURN VALUE TYPE splna CONCEPT definovany v VALUE 'TYPE_CONSTRAINT'. Ak nie, tak COMPOUND REQUIREMENT vrati FALSE.
16. Pre NESTED REQUIREMENTS v REQUIRES EXPRESSIONS platia nasledujuce fakty.
   A. NESTED REQUIREMENT ma SYNTAX [requires CONSTRAINT_EXPRESSION;].
   B. C++ COMPILER kontroluje ci EXPRESSION 'CONSTRAINT_EXPRESSION' je splnena. Ak nie, tak NESTED REQUIREMENT vrati FALSE.
17. C++ umoznuje aplikovat CONCEPTS pomocou SHORTHAND SYNTAX. Pre SHORTHAND SYNTAX plati nasledujuce.
   A. SHORTHAND SYNTAX je mozne aplikovat iba na CONCEPTS, ktore vyzaduju iba 1 TEMPLATE PARAMETER.
   B. SHORTHAND SYNTAX ma SYNTAX [template<CONCEPT_NAME TEMPLATE_PARAMETER_NAME>], kde VALUE 'CONCEPT_NAME' je nazov CONCEPT a VALUE 'TEMPLATE_PARAMETER_NAME' je nazov TEMPLATE PARAMETER.
   C. SHORTHAND SYNTAX je mozne kombinovat s inymi REQUIREMENTS pomocou SYNTAX [template<CONCEPT_NAME TEMPLATE_PARAMETER_NAME> requires(EXPRESSION)], kde VALUE 'CONCEPT_NAME' je nazov CONCEPT, VALUE 'TEMPLATE_PARAMETER_NAME' je nazov TEMPLATE PARAMETER a VALUE 'EXPRESSION' je EXPRESSION obsahujuca dalsie REQUIREMENTS.
!!! 18. Ak sa REQUIREMENTS aplikuju na TEMPLATE CLASS, tak sa musia aplikovat ROVNAKE REQUIREMENTS aj na vsetky TEMPLATE CLASS METHODS, ktore su DEFINED mimo tela TEMPLATE CLASS.
!!! 19. Ak sa REQUIREMENTS aplikuju iba na TEMPLATE CLASS METHODS, ale NIE na TEMPLATE CLASS, je nutne postupovat nasledovne.
   A. V METHOD DECLARATION sa za METHOD PARAMETERS definuju REQUIREMENTS.
   !!! B. V METHOD DEFINITION ak je MIMO TEMPLATE CLASS sa za METHOD PARAMETERS definuju REQUIREMENTS. REQUIREMENTS sa MUSIA aplikovat za METHOD PARAMETERS, a NIE za KEYWORD [template<>].
!!! 20. REQUIREMENTS su sucastou TEMPLATE CLASSES a TEMPLATE FUNCTIONS a su pouzite pri OVERLOAD RESOLUTION. Plati nasledovne.
   A. Ak existuje viacero ROVNAKO POMENOVANYCH TEMPLATE CLASSES, alebo TEMPLATE FUNCTIONS, ktore maju rozne REQUIREMENTS, tak vsetky su povazovane za ROZNE TEMPLATE CLASSES a TEMPLATE FUNCTIONS na ktore je aplikovana OVERLOAD RESOLUTION.
   B. Pri vytvarani instancii TEMPLATE CLASSES a TEMPLATE FUNCTIONS su posudzovane vsetky OVERLOADED TEMPLATES. Ak je najdena iba 1, ktora splna REQUIREMENTS, tak je vybrata tato. Ak nie je najdena ziadna, alebo viac ako 1, tak COMPILER generuje ERROR.
!!!!! 21. Pri TEMPLATE OVERLOADING RESOLUTION vychadza C++ z principu REQUIREMENT SUBSUMPTION. Plati nasledujuce.
   A. Ak COMPILER najde viacero TEMPLATE CLASSES a TEMPLATE FUNCTIONS, ktore vsetky splnaju definovane REQUIREMENTS, tak pri vybere ktoru TEMPLATE CLASS a TEMPLATE FUNCTION pouzit aplikuje REQUIREMENT SUBSUMPTION.
   !!! B. REQUIREMENT SUBSUMPTION znamena, ze ak TEMPLATE 2 ma REQUIREMENT 'R2' a TEMPLATE 1 ma REQUIREMENT 'R1', pricom REQUIREMENT 'R2' obsahuje REQUIREMENT 'R1' spojeny pomocou OPERATOR&&, alebo OPERATOR||, tak REQUIREMENT 'R2' SUBSUMES REQUIREMENT 'R1'.
   !!! C. Pri TEMPLATE INSTANTIATION ak dane TEMPLATE ARGUMENTS zodpovedaju TEMPLATE 1 i TEMPLATE 2, tak je vybrata TEMPLATE 2, pretoze REQUIREMENT 'R2' SUBSUMES REQUIREMENT 'R1'.
   !!!!! D. REQUIREMENT SUBSUMPTION sa NEAPLIKUJE ak REQUIREMENT 'R2' sa odkazuje na REQUIREMENT 'R1' inak ako pomocou OPERATOR&&, alebo OPERATOR||. Napriklad ak v REQUIREMENT 'R2' je pomocou NESTED REQUIREMENT definovany REQUIREMENT 'R1', tak REQUIREMENT 'R2' NIE je SUBSUMPTION REQUIREMENT 'R1'.
22. Kedze CONCEPTS su COMPILE TIME EXPRESSIONS, ktore vracaju VALUE TYPE [bool], CONCEPTS je mozne testovat pomocou KEYWORD [static_assert(CONCEPT,ERROR_MESSAGE)], kde VALUE 'CONCEPT' je volanie CONCEPT pre dane TEMPLATE ARGUMENTS a VALUE 'ERROR_MESSAGE' je ERROR MESSAGE.
!!! 23. Vzhladom na to, ze C++ umoznuje vykonavat TEMPLATE FUNCTION OVERLOADING iba na zaklade odlisnych REQUIREMENTS aplikovanych na jednotlive TEMPLATE FUNCTIONS, COMPILER pri generovani BINARY CODE musi do nazvu (MANGLED NAME) takychto TEMPLATE FUNCTION zakomponovat aj REQUIREMENTS, aby jednotlive OVERLOADED TEMPLATE FUNCTIONS mali UNIKATNY MANGLED NAME.
24. CONTEPTS mozu byt SPECIALIZED dosadenim konkretnych TEMPLATE ARGUMENTS.
//----------------------------------------------------------------------------------------------------------------------