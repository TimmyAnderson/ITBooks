//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie KUBERNETES AND CONTAINERS.
2. KUBERNETES je CONTAINER ORCHESTRATION PLATFORM, ktore umoznuje manazment CONTAINER PROGRAMS beziacich v KUBERNETES CLUSTERS.
3. KUBERNETES PLATFORM umoznuje nasledujuce cinnosti.
   A. SCALABILITY. KUBERNETES umoznuje pridavat a odoberat CONTAINERS, v ktorych bezia CONTAINER PROGRAMS na zaklade TRAFFIC a DEMAND.
   B. HIGH AVAILABILITY. KUBERNETES ma vlastnosti ako SELF-HEALING, AUTOMATIC FAILOVER a ROLLING UPDATES, ktore zabezpecuju vysoku dostupnost CONTAINER PROGRAMS beziacich v KUBERNETES CLUSTERS.
   C. PORTABILITY. KUBERNETES umoznuje DEPLOY CONTAINERS na rozne ENVIRONMENTS ako je ON-PREMISE, PUBLIC CLOUD ci HYBRID ENVIRONMENT.
   D. AUTOMATION. KUBERNETES automatizuje mnozstvo cinnosti tykajucich sa DEPLOYING a MANAGEMENT CONTAINER PROGRAMS ako su SCALING, SELF-HEALING a ROLLING UPDATES.
   E. FLEXIBILITY. KUBERNETES je PLATFORM, ktora moze byt rozsirovana inymi TOOLS.
4. KUBERNETES funguje nasledujucim sposobom.
   A. KUBERNETES definuje mnozinu ABSTRACTIONS na reprezentovanie stavu CONTAINER PROGRAMS.
   B. KUBERNETES monitoruje aktualny stav ABSTRACTIONS voci pozadovanemu stavu ABSTRACTIONS a vykonava nastavene cinnosti na to, aby aktualny stav ABSTRACTIONS zodpovedal pozadovanemu stavu ABSTRACTIONS.
   C. KUBERNETES definuje nasledujuce ABSTRACTIONS.
      A. PODS. POD je skupina CONTAINERS, ktore bezia na tom istom HOST. PODS mozu mat STORAGE RESOURCES a NETWORK RESOURCES, ktore su SHARED medzi jednotlivymi CONTAINERS.
	  B. SERVICES. SERVICE je logicka skupina PODS obsahujuca RULE ako sa je mozne k danej SERVICE (a tym padom aj PODS) dostat z externeho prostredia. SERVICE vystavuje STABLE ACCESS POINT pomocou ktoreho mozu CLIENTS pristupovat ku CONTAINERS beziacim v PODS. SERVICES umoznuju distribuovat zataz medzi jednotlive PODS.
   D. KUBERNETES ma mnozinu CONTROLLERS, ktore vykonavaju MONITORING ABSTRACTIONS a vykonavaju nad nimi zmeny, aby aktualny stav ABSTRACTIONS sa zhodoval s pozadovanym stavom ABSTRACTIONS. KUBERNETES definuje nasledujuce CONTROLLERS.
      A. REPLICATION CONTROLLER zabezpecuje, ze pozadovany pocet PODS vzdy bezi.
	  B. DEPLOYMENT CONTROLLER vykonava UPDATE PODS, ktore monitoruje REPLICATION CONTROLLER.
   E. KUBERNETES pouziva ETCS co je UNIVERZALNY DISTRIBUTED KEY VALUE STORAGE na ukladanie lubovolnych dat. KUBERNETES uklada do ETCS CONFIGURATION DATA a CURRENT STATE jednotlivych PODS.
5. KUBERNETES moze byt nasadeny a pouzivany nasledujucimi sposobmi.
   A. SELF HOSTED KUBERNETES.
   B. AZURE KUBERNETES SERVICE.
6. Pre SELF HOSTED KUBERNETES platia nasledujuce fakty.
   A. SELF HOSTED KUBERNETES je HOSTED na CUSTOM ON-PREMISE INFRASTRUCTURE.
   B. Pri SELF HOSTED KUBERNETES je USER zodpovedny za kompletnu instalaciu a manazment KUBERNETES SERVICES, vratane BACKUPS, STORAGES ci NETWORKING.
   C. Pri SELF HOSTED KUBERNETES musi USER nainstalovat a spravovat KUBERNETES CONTROL PLANE a KUBERNETES WORKER NODES. USER je zodpovedny za MANUAL UPDATES, SCALING a MAINTENANCE KUBERNETES CLUSTER.
   D. Pri SELF HOSTED KUBERNETES je USER zodpovedny za nastavenie NETWORKING, vratane konfiguracie LOAD BALANCERS a NETWORK SECURITY POLICIES. USER je takisto zodpovedny za implementaciu a manazment SECURITY FEATURES ako napriklad ROLE-BASED ACCESS CONTROL.
   E. Pri SELF HOSTED KUBERNETES je USER zodpovedny za DEPLOYING, MANAGING a SCALING CONTANER PROGRAMS. AUTOSCALING musi byt nastavny danym USER a vyzaduje mnozstvo konfiguracie.
   F. Pri SELF HOSTED KUBERNETES musi USER integrovat MONITORING TOOLS a nakonfigurovat LOGGING a METRICS COLLECTION.
   G. Pri SELF HOSTED KUBERNETES je USER zodpovedny za vytvorenie BACKUP a RECOVERY STRATEGIES pre KUBERNETES CLUSTER a CONTAINER PROGRAMS.
   H. Pri SELF HOSTED KUBERNETES je uvodne nastavenie KUBERNETES velmi zlozite a casovo narocne.
7. Pre AZURE KUBERNETES SERVICE platia nasledujuce fakty.
   A. AZURE KUBERNETES SERVICE je HOSTED na AZURE.
   B. Pri AZURE KUBERNETES SERVICE je AZURE PLATFORM zodpovedna za instalaciu a manazment KUBERNETES SERVICES, vratane BACKUPS, STORAGES ci NETWORKING.
   C. Pri AZURE KUBERNETES SERVICE je AZURE PLATFORM zodpovedna za instalaciu a manazment KUBERNETES CONTROL PLANE a KUBERNETES WORKING NODES. AZURE PLATFORM je zodpovedna za AUTOMATIC UPDATES, SCALING a MAINTENANCE KUBERNETES CLUSTER.
   !!! D. Pri AZURE KUBERNETES SERVICE je AZURE PLATFORM zodpovedna za spravu LOAD BALANCERS ci ROLE-BASED ACCESS CONTROL. AZURE PLATFORM je zodpovedna za vseobecnu spravu NETWORKING a USER vykonava manazment WORKER NODES a prislusnej infrastruktury. USERS su zodpovedni za konfiguraciu INTERNEJ SECURITY ako napriklad SECURITY pri POD TO POD COMMUNICATION ci spravu NETWORK SECURITY POLICIES.
   !!! E. Pri AZURE KUBERNETES SERVICE je USER zodpovedny za zodpovedny za DEPLOYING, MANAGING a SCALING CONTANER PROGRAMS. Ale AZURE PLATFORM je zodpovedna za manazment KUBERNETES CLUSTER, vratane AUTOSCALING.
   F. Pri AZURE KUBERNETES SERVICE je KUBERNETES integrovany s AZURE MONITOR pre HEALTH CHECKS, METRICS a INSIGHTS beziacich CONTAINERS a CONTAINER PROGRAMS.
   G. Pri AZURE KUBERNETES SERVICE je AZURE PLATFORM zodpovedna za BACKUP a RECOVERY STRATEGIES pre KUBERNETES CLUSTER a CONTAINER PROGRAMS.
   H. Pri AZURE KUBERNETES SERVICE AZURE PLATFORM implementuje vacsinu zlozitosti KUBERNETES a USER je zodpovedny za daleko menej cinnosti ako v pripade SELF HOSTED KUBERNETES.
8. Pre KUBERNETES PODS platia nasledujuce fakty.
   A. KUBERNETES POD bezi na jednom HOST.
   B. KUBERNETES POD je najmensia jednotka, ktora v KUBERNETES moze byt DEPLOYED.
   C. KUBERNETES POD obsahuje <1,N> CONTAINERS, STORAGE RESOURCES a unikantnu IP ADDRESS.
   D. KUBERNETES PODS su CREATED, DELETED a MANAGED ako ATOMICKA JEDNOTKA.
   E. CONTAINERS v ramci toho isteho KUBERNETES POD zdielaju ten isty NETWORK NAMESPACE a vzajomne medzi sebou mozu komunikovat cez LOCALHOST.
   F. CONTAINERS v ramci toho isteho KUBERNETES POD zdielaju ten isty STORAGE, ktory je pristupny vsetkym CONTAINERS.
   G. Komunikacia medzi KUBERNETES PODS je zabezpecena pomocou NETWORK POLICIES, ktore zabezpecuju bezpecny pristup k KUBERNETES PODS.
   H. ROLE-BASED ACCESS CONTROL obmedzuje kto moze komunikovat s danym KUBERNETES POD.
   I. POD SECURITY POLICIES zabezpecuju	dodrziavanie SECURE SETTINGS.
   J. CONTAINER SANDBOXING zvysuje izolaciu KUBERNETES PODS.
   K. Citlive data mozu byt ulozene v KUBERNETES SECRETS, kde su pristupne pre jednotlive KUBERNETES PODS.
   L. NAMESPACE ISOLATION oddeluje ENVIRONMENTS v ramci KUBERNETES POD a umoznuje bezpecnu komunikaciu medzi CONTAINERS v ramci toho isteho KUBERNETES POD.
   M. KUBERNETES CONTROL PLANE zabezpecuje SCALING, SELF-HEALING a ROLLING UPDATES pre KUBERNETES PODS.
   !!! N. KUBERNETES POD je zakladny stavebny blok KUBERNETES. Kazdy POD reprezentuje zoznam beziacich CONTAINERS, ktore su atomicky DEPLOYED. CONTAINERS v ramci KUBERNETES PODS mozu mat SHARED RESOURCES. KUBERNETES PODS obsahuju aktualny stav, ktory KUBERNETES CONTROLLERS monitoruju a pri odlisnosti od pozadovaneho stavu mozu vykonat definovane OPERATIONS.
10. Pre KUBERNETES CONTROL PLANE platia nasledujuce fakty.
   A. KUBERNETES CONTROL PLANE je skupina COMPONENTS, ktora umoznuje manazment WORKER NODES v KUBERNETES CLUSTER.
   B. KUBERNETES CONTROL PLANE nie je spravovany KUBERNETES PLATROFM. Iba sama sluzi na spravu KUBERNETES CLUSTER.
   C. KUBERNETES CONTROL PLANE je zodpovedna za to, ze aktualny stav KUBERNETES CLUSTER je zhodny s ocakavanym stavom KUBERNETES CLUSTER.
   D. KUBERNETES CONTROL PLANE zabezpecuje SCALING, SELF-HEALING a ROLLING UPDATES pre KUBERNETES PODS.
   E. KUBERNETES CONTROL PLANE vyuziva CONTROLLERS na SCALING, SELF-HEALING a ROLLING UPDATES pre KUBERNETES PODS.
11. KUBERNETES nasledujuce typy DESIRED STATES.
   A. POD LEVEL DESIRED STATE. Je to stav v akom sa ma nachadza dany KUBERNETES POD. KUBERNETES CONTROL PLANE zabezpecuje, aby dany KUBERNETES POD bol vzdy v DESIRED STATE pomocou CONTROLLERS.
   B. CLUSTER LEVEL DESIRED STATE. Je to DESIRED STATE samotneho KUBERNETES CLUSTER. THIRD PARTY TOOLS umoznuju zabezpecit, aby KUBERNETES CLUSTER sa vzdy nachadzal v DESIRED STATE.
12. KUBERNETES CONTROL PLANE v AZURE KUBERNETES SERVICE pozostava z nasledujucich COMPONENTS.
   A. KUBERNETES API SERVER [kube-apiserver]. KUBERNETES API SERVER umoznuje USERS interakciu s KUBERNETES CLUSTER pomocou API. Obsahuje CRUD OPERATIONS pre pracu s KUBERNETES OBJECTS ako KUBERNETES PODS, KUBERNETES SERVICES a KUBERNETES DEPLOYMENTS.
   B. ETCS [etcd]. ETCS je univerzany KEY-VALUE STORE, ktory KUBERNETES vyuziva na ukladanie CONFIGURATION DATA pre KUBERNETES CLUSTER. Zaroven obsahuje aj aktualny stav KUBERNETES CLUSTER a zabezpecuje replikaciu data na dalsie KUBERNETES WORKER NODES.
   C. KUBERNETES CONTROLLER MANAGER [kube-controller-manager]. KUBERNETES CONTROLLER MANAGER zabezpecuje bez CONTROLLERS, ktore monitoruju KUBERNETES CLUSTER a zaroven monitoruje zmeny v ETCS. Ak dojde k zmene stavu niektoreho z KUBERNETES PODS, CONTROLLERS vykonavaju nastavene ACTIONS, co moze byt spusenie noveho KUBERNETES POD, alebo odoslanie vystrahy ci zapis do LOGS.
   D. KUBERNETES SCHEDULER [kube-scheduler]. KUBERNETES SCHEDULER je zodpovedny za SCHEDULING KUBERNETES PODS na WORKER NODES. KUBERNETES SCHEDULER nasadzaduje KUBERNETES PODS podla pozadovanych parameterov na CPU ci MEMORY na tie WORKER NODES, ktore pozadovane parametre splnaju.
13. KUBERNETES CONTROL PLANE zabezpecuje aj nasledujuce cinnosti.
   A. AUTOSCALING. AZURE KUBERNETES SERVICE nema zapnuty AUTOSCALING BY-DEFAULT, ale musi byt explicitne povoleny. AZURE KUBERNETES SERVICE podporuje iba HORIZONTAL SCALING pridavanim novych a odstranovanim beziacich instancii KUBERNETES PODS. AZURE KUBERNETES SERVICE vsak NEPODPORUJE VERTICAL SCALING migraciou KUBERNETES PODS na WORKER NODES s vykonnejsim CPU ci vacsim objemom MEMORY.
   B. AZURE KUBERNETES SERVICE vykonava SCALING KUBERNETES PODS na WORKER NODES pricom pri vybere WORKER NODES berie do uvahy poziadavky na CPU, MEMORY a ostatne HW PARAMETERS. Ak ziaden volny WORKER NODE v KUBERNETES CLUSTER dane poziadavky nesplna, nedojde k spustenie dalsieho KUBERNETES POD.
   C. WORKER NODES mozu byt podla svojich HW PARAMETERS clenene do NODE POOLS, ktore umoznuju jednoduchsiu spravu WORKER NODES a spustanie KUBERNETES PODS na danych WORKER NODES.
   D. KUBERNETES CONTROL PLANE je v AZURE KUBERNETES SERVICE integrovany s AZURE MONITOR pre HEALTH MONITORING a DIAGNOSTICS.
14. Pre KUBERNETES SERVICE platia nasledujuce fakty.
   A. KUBERNETES SERVICE je CONTAINER obsahujuci <1,N> KUBERNETES PODS.
   B. KUBERNETES SERVICE stoji pred KUBERNETES PODS a vystavuje do externeho prostredia STATIC IP ADDRESSES cez ktore su PROGRAMS beziace v KUBERNETES PODS pristupne.
   C. KUBERNETES SERVICE zabezpecuje odosielanie REQUESTS, ktore dosli na KUBERNETES SERVICE na niektory z KUBERNETES POD, ktory dany REQUEST spracuje.
   D. KUBERNETES SERVICE distribuuje zasielanie REQUESTS na KUBERNETES PODS pomocou ROUND ROBIN ALGORITHM.
   !!! E. KUBERNETES SERVICE sluzi ako NETWORK GATEWAY do KUBERNETES PODS.
15. Pre KUBERNETES WORKER NODES platia nasledujuce fakty.
   A. KUBERNETES WORKER NODE je HOST na ktorom bezi KUBERNETES POD.
   B. KUBERNETES WORKER NODE moze bezat na PHYSICAL HOSTS, alebo VIRTUAL MACHINE HOSTS.
16. Pre KUBERNETES PERSISTENT VOLUMES platia nasledujuce fakty.
   A. KUBERNETES PERSISTENT VOLUMES poskytuje VOLUMES, ktore su perzistentne a nezavisle na to na ktorych KUBERNETES WORKER NODES bezia dane KUBERNETES PODS.
   B. KUBERNETES PERSISTENT VOLUMES predstavuje zdielany STORAGE na ukladanie DURABLE DATA ako napriklad su DATABASE FILES.
17. Pre KUBERNETES DEPLOYMENTS platia nasledujuce fakty.
   A. KUBERNETES DEPLOYMENTS umoznuje nastavit na kolkych KUBERNETES WORKER NODES ma dany CONTAINER PROGRAM bezat.
   B. KUBERNETES DEPLOYMENTS zabezpecuje distribuciu KUBERNETES PODS, tak aby v danom case vzdy bezal pozadovany pocet KUBERNETES PODS.
18. Pre KUBERNETES INGRESS platia nasledujuce fakty.
   A. KUBERNETES INGRESS vystavuje CONTAINER PROGRAMS beziace v KUBERNETES CLUSTER do externeho prostredia.
   B. KUBERNETES INGRESS vyuziva INGRESS CONTROLLER a LOAD BALANCER na zabezpecenie komunikacie medzi KUBERNETES CLUSTER a externym prostredim.
19. KUBERNETES CLUSTER je mozne ovladat pomocou COMMAND LINE TOOL [kubectl].
20. KUBERNETES CLUSTER [kubectl] sa konfiguruje pre dany KUBERNETES CLUSTER pomocou COMMAND [az aks get-credentials --name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND nacita pre dany KUBERNETES CLUSTER jeho CREDENTIALS.
   B. COMMAND zapise KUBERNETES CLUSTER CREDENTIALS do LOCAL FILE, aby mohli byt pouzite COMMAND TOOL [kubectl].
21. MANIFEST FILE obsahuje nastavenia KUBERNETES CLUSTER. Pre MANIFEST FILE platia nasledujuce fakty.
   A. MANIFEST FILE je FILE [.YAML].
   B. MANIFEST FILE obsahuje POZADOVANY STATE daneho KUBERNETES CLUSTER, vratane zoznamu PROGRAMS, ktore maju v KUBERNETES CLUSTER bezat.
   C. DEPLOYMENT MANIFEST FILE obsahuje nasledujuce SECTIONS.
      A. DEPLOYMENT METADATA. SECTION obsahuje nazov DEPLOYMENT.
      B. DEPLOYMENT SPECIFICATION. SECTION obsahuje pozadovany pocet beziacich REPLICAS a SELECTOR pouzity identifikaciu PROGRAMOV, ktore maju bezat v KUBERNETES CLUSTER.
      C. TEMPLATE SECTION. Obsahuje podrobnosti PROGRAMOV, ktore maju bezat v KUBERNETES CLUSTER ako je nazov CONTAINER, nazov IMAGE, ci PORT SETTINGS. TEMPLATE obsahuje aj pozadovane RESOURCES ako su MEMORY a CPUs.
22. KUBERNETES CLUSTER sa pouziva nasledujucim sposobom.
   A. Pomocou COMMAND [az aks create] sa vytvori KUBERNETES CLUSTER. Prikladom je COMMAND [az aks create --name MyBookCluster --resource-group MyBook --tier free --location polandcentral --os-sku Ubuntu --generate-ssh-keys --os-sku Ubuntu --nodepool-name mynodepool --node-vm-size "Standard_D2s_v3" --min-count 1 --max-count 20 --max-pods 30 --enable-cluster-autoscaler].
   B. Pomocou COMMAND [az aks get-credentials] sa nacitaju CLIENT CREDENTIALS pre KUBERNETES CLUSTER, ktore sa zapisu do LOCAL FILE, aby boli pristupne pre TOOL [kubectl]. Prikladom je COMMAND [az aks get-credentials --name MyBookCluster --resource-group MyBook].
   C. Pomocou COMMAND [kubectl get nodes] sa ziska zoznam NODES.
   D. Pomocou COMMAND [kubectl get pods] sa ziska zoznam PODS.
   E. Pomocou COMMAND [kubectl get deployments] sa ziska zoznam DEPLOYMENTS.
   !!! F. Pomocou COMMAND [az aks delete] sa odstranuje KUBERNETES CLUSTER. Prikladom je COMMAND [az aks delete --name MyBookCluster --resource-group MyBook]. Kedze KUBERNETES CLUSTER je plateny, mal by sa odstranit co najskor.
!!!!! 23. PROGRAMS do KUBERNETES CLUSTER sa nasadzuju nasledujucim sposobom.
   A. Vytvori sa WEB PROGRAM, ktory sa ma nasadit do KUBERNETES CLUSTER.
   B. Pre WEB PROGRAM sa vytvori FILE [Dockerfile], ktory obsahuje instrukcie pre vytvorenie DOCKER IMAGE.
   !!! C. Pri lokalne zapnutom DOCKER DESKTOP sa vytvori DOCKER IMAGE pomocou COMMAND [docker build]. DOCKER IMAGE musi obsahovat TAG kompatibilny s DOCKER REPOSITORY, kde ma byt DOCKER IMAGE ulozeny. Prikladom je COMMAND [docker build -t timmyanderson/kubernetesandcontainers:1.0.0 .], ktory vytvori DOCKER IMAGE pre DOCKER HUB.
   D. Vytvoreny IMAGE sa ulozi do DOCKER REPOSITORY pomocou COMMAND [docker push]. Prikladom je COMMAND [docker push timmyanderson/kubernetesandcontainers:1.0.0], ktory ulozi DOCKER IMAGE do DOCKER REPOSITORY [docker push timmyanderson/kubernetesandcontainers:1.0.0] v DOCKER HUB.
   E. Pomocou COMMAND [az aks create] sa vytvori KUBERNETES CLUSTER. Prikladom je COMMAND [az aks create --name MyBookCluster --resource-group MyBook --tier free --location polandcentral --os-sku Ubuntu --generate-ssh-keys --os-sku Ubuntu --nodepool-name mynodepool --node-vm-size "Standard_D2s_v3" --min-count 1 --max-count 20 --max-pods 30 --enable-cluster-autoscaler].
   F. Pomocou COMMAND [az aks get-credentials] sa nacitaju CLIENT CREDENTIALS pre KUBERNETES CLUSTER, ktore sa zapisu do LOCAL FILE, aby boli pristupne pre TOOL [kubectl]. Prikladom je COMMAND [az aks get-credentials --name MyBookCluster --resource-group MyBook].
   !!!!! G. Vytvori sa FILE [.YAML], ktory obsahuje instrukcie pre KUBERNETES SERVICE a KUBERNETES DEPLOYMENT. KUBERNETES DEPLOYMENT obsahuje nazov DOCKER IMAGE, ktory obsahuje WEB PROGRAM, ktory sa ma do KUBERNETES CLUSTER nasadit. Prikladom je FILE [ServiceDeploymentKubernetesAndContainers.yaml], ktory obsahuje IMAGE [image: docker.io/timmyanderson/kubernetesandcontainers:1.0.0] ulozeny v DOCKER HUB DOCKER REPOSITORY.
   !!! H. Pomocou COMMAND [kubectl apply] sa aplikuje vytvoreny FILE [.YAML], ktory nasadi a spusti WEB PROGRAM. Prikladom je COMMAND [kubectl apply -f ServiceDeploymentKubernetesAndContainers.yaml], ktory obsahuje KUBERNETES SERVICE a KUBERNETES DEPLOYMENT.
   !!!!! I. Pomocou COMMAND [kubectl get service] sa ziska STATIC IP ADDRESS WEB PROGRAM beziaceho v KUBERNETES CLUSTER. Prikladom je COMMAND [kubectl get service my-program], ktory vo FIELD [EXTERNAL IP] obsahuje IP ADDRESS pomocou ktorej je mozne pristupit k WEB PROGRAM, ktory bezi v KUBERNETES SERVICE.
   !!! J. Ziskanu IP ADDRESS je mozne pouzit na volanie API vo WEB PROGRAM. Prikladom IP ADDRESS je IP ADDRESS [http://74.248.73.193:80/].
   !!! K. Pomocou COMMAND [az aks delete] sa odstranuje KUBERNETES CLUSTER. Prikladom je COMMAND [az aks delete --name MyBookCluster --resource-group MyBook]. Kedze KUBERNETES CLUSTER je plateny, mal by sa odstranit co najskor.
24. Pre CONTAINERS platia nasledujuce fakty.
   A. CONTAINER je LIGHWEIGHT, PORTABLE a EXECUTABLE PACKAGE, ktory obsahuje vsetky COMPONENTS na bez WEB PROGRAM.
   B. CONTAINER poskytuje ISOLATED ENVIRONMENT, ktory je izolovany od HOST OPERATING SYSTEM aj inych CONTAINERS.
   C. CONTAINERS funguju na CONTAINERIZATION TECHNOLOGY ako je DOCKER.
   !!! D. CONTAINERS na rozdiel od VIRTUAL MACHINES, nemaju USER INTERFACE, zdielaju s HOST OPERATING SYSTEM jeho KERNEL a tym padom su daleko viac LIGHWEIGHT ako VIRTUAL MACHINES.
25. AZURE KUBERNETES SERVICE vyuziva CONTAINERS nasledujucim sposobom.
   A. AZURE KUBERNETES SERVICE sluzi na DEPLOYING, MANAGING a SCALING jednotlivych CONTAINERS, ktore su nasadene v KUBERNETES CLUSTER.
   B. AZURE KUBERNETES SERVICE organizuje jednotlive CONTAINERS do logickych jednotiek pre jednoduchsi MANAGEMENT a DISCOVERY.
   C. AZURE KUBERNETES SERVICE vykonava MONITORING beziacich CONTAINERS a vykonava SCALING UP, alebo SCALING DOWN poctu beziacich NODES, vykonava UPDATES ci ROLLBACKS jednotlivych CONTAINERS bez vzniku DOWNTIMES.
26. AZURE CONTAINER INSTANCES je alternativna technologia voci AZURE KUBERNETES SERVICE umoznujuca nasadenie CONTAINERS. Pre AZURE CONTAINER INSTANCES platia nasledujuce fakty.
   A. AZURE CONTAINER INSTANCES zdruzuje CONTAINERS do CONTAINER GROUPS, kde kazda CONTAINERS GROUP bezi na tom istom HOST OPERATING SYSTEM.
   B. Kazda CONTAINER GROUP v AZURE CONTAINER INSTANCES ma 1 IP ADDRESS a 1 DNS ADDRESS.
   C. CONTAINERS v ramci 1 CONTAINER GROUP mozu vzajomne komunikovat prostrednicvom LOCALHOST.
   !!! D. CONTAINER GROUP umoznuje definovat viacero CONTAINERS v ramci 1 CONFIGURATION FILE. Toto umoznuje spolocne nasadenie vsetkych CONTAINERS v ramci tej iste CONTAINER GROUP.
   E. Kazdy CONTAINER v CONTAINER GROUP moze mat nastavene naroky na CPU, MEMORY, VOLUMES, PORTS, ENVIRONMENT VARIABLES a dalsie RESOURCES.
   F. Pre kazdy CONTAINER v CONTAINER GROUP je mozne nastavit RESTART POLICY, ktora urcuje ci a kedy ma byt CONTAINER RESTARTED ak dojde ku CRASH.
   G. Pouzitim CONTAINER GROUPS zjednodusuju DEPLOYMENT a MANAGEMENT CONTAINERS v AZURE KUBERNETES SERVICE.
   !!! H. AZURE CONTAINER INSTANCES standardne NIE je spravovany AZURE KUBERNETES SERVICE.
   !!! I. AZURE CONTAINER INSTANCES je vhodny pre USE CASES, kde je treba rychly SCALING UP v situacii rychleho narastu WORKLOADS.
   !!! J. AZURE CONTAINER INSTANCES NIE JE VHODNY, pre LONG TERM WORKLOADS, STATEFUL WORKLOADS, alebo HIGH AVAILABILITY WORKLOADS.
27. AZURE KUBERNETES SERVICE a AZURE CONTAINER INSTANCES mozu byt vzajomne integrovane pomocou VIRTUAL KUBELET. Platia nasledujuce fakty.
   A. VIRTUAL KUBELET umoznuju AZURE KUBERNETES SERVICE spravu AZURE CONTAINER INSTANCES.
   B. VIRTUAL KUBELET definuje novy typ NODE nazyvany VIRTUAL NODE. VIRTUAL NODE reprezentuje beziace AZURE CONTAINER INSTANCES v AZURE KUBERNETES SERVICE.
   C. VIRTUAL KUBELET umoznuje rychly SCALING UP VIRTUAL NODES co je hlavna vyhoda pouzitia AZURE CONTAINER INSTANCES cim VIRTUAL KUBELET vhodny pre nasadenie SHORT LIVED, CPU INTENSIVE TASKS.
   D. VIRTUAL KUBELET je zodpoveny za vytvaranie a nasadzovanie CONTAINER GROUPS na VIRTUAL NODES spravovane AZURE KUBERNETES SERVICE.
   E. VIRTUAL KUBELET monitoruje VIRTUAL NODES beziace v AZURE CONTAINER INSTANCES a vykonava ich SCALING tak aby sa aktualny stav VIRTUAL NODES zhodoval s pozadovanym stavom VIRTUAL NODES.
   F. VIRTUAL KUBELET vystavuje do externeho prostredia VIRTUAL NODES pomocou KUBERNETES SERVICES.
   G. VIRTUAL KUBELET realizuje NETWORK INTEGRATION medzi AZURE KUBERNETES SERVICE a AZURE CONTAINER INSTANCES pomocou AZURE CONTAINER NETWORKING INTERFACE.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
Dolezite pojmy v KUBERNETES.

1. KUBERNETES PODS. Pre KUBERNETES PODS platia nasledujuce fakty.
   A. KUBERNETES POD je skupina CONTAINERS, ktore bezia na tom istom HOST.
   B. KUBERNETES PODS mozu mat STORAGE RESOURCES a NETWORK RESOURCES, ktore su SHARED medzi jednotlivymi CONTAINERS.
2. KUBERNETES SERVICES. Pre KUBERNETES SERVICES platia nasledujuce fakty.
   A. KUBERNETES SERVICE je logicka skupina PODS obsahujuca RULE ako sa je mozne k danej SERVICE (a tym padom aj PODS) dostat z externeho prostredia.
   B. KUBERNETES SERVICE vystavuje STABLE ACCESS POINT (STATIC IP ADDRESS) pomocou ktoreho mozu CLIENTS pristupovat ku CONTAINERS beziacim v PODS.
   C. KUBERNETES SERVICES umoznuju distribuovat zataz medzi jednotlive KUBERNETES PODS.
3. KUBERNETES CONTROLLERS. Pre KUBERNETES CONTROLLERS platia nasledujuce fakty.
   A. KUBERNETES CONTROLLER je PROCESS, ktory monitoruje aspon 1 KUBERNETES RESOURCE.
   B. KUBERNETES CONTROLLERS su zodpovedne za monitorovanie aktualneho stavu daneho KUBERNETES RESOURCE.
   C. KUBERNETES CONTROLLERS mozu v pripade, ze aktualny stav KUBERNETES RESOURCE lisi od pozadovaneho stavu KUBERNETES RESOURCE vykonat nastavene operacie, alebo odoslat notifikaciu do API SERVER.
4. WORKER NODE je fyzicky HW HOST na ktorom bezi KUBERNETES POD.
5. KUBERNETES CLUSTER je zoznam vsetkych WORKER NODES, ktore ma KUBERNETES CLUSTER k dispozicii.
6. KUBERNETES CONTROL PLANE zabezpecuje manazment KUBERNETES CLUSTER.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - AZURE KUBERNETES SERVICES.

1. COMMAND [az aks list]. COMMAND vracia zoznam vsetkych KUBERNETES CLUSTERS.
2. COMMAND [az aks create --name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME --tier SKU_TIER --location LOCATION_NAME --os-sku OS_TYPE].
   A. COMMAND vytvara novy KUBERNETES CLUSTER.
   B. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--tier SKU_TIER] vo VALUE [SKU_TIER] urcuje SKU TIER. VALUE [free] je FREE TIER.
   E. OPTION [--name LOCATION_NAME] vo VALUE [LOCATION_NAME] urcuje nazov LOCATION.
   F. OPTION [--os-sku OS_TYPE] vo VALUE [OS_TYPE] urcuje nazov OPERATING SYSTEM.
3. COMMAND [az aks delete --name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND odstranuje existujuci KUBERNETES CLUSTER.
   B. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
4. COMMAND [az aks get-credentials --name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   !!! A. COMMAND nacita KUBERNETES CLUSTER CREDENTIALS a zapise ich do LOCAL FILE, aby ich mohol vyuzivat TOOL [kubectl].
   B. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
5. COMMAND [az aks start --name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND spusta KUBERNETES CLUSTER.
   B. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
6. COMMAND [az aks stop --name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND zastavuje KUBERNETES CLUSTER.
   B. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
7. COMMAND [az aks nodepool list --cluster-name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND zobrazuje zoznam KUBERNETES NODE POOLS.
   B. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
8. COMMAND [az aks nodepool add --nodepool-name NODE_POOL_NAME --cluster-name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME --mode NODE_MODE --node-vm-size VIRTUAL_MACHINE_NAME --min-count MIN_COUNT --max-count MAX_COUNT --max-pods MAX_PODS --enable-cluster-autoscaler --scale-down-mode SCALE_DOWN_MODE].
   A. COMMAND vytvara KUBERNETES NODE POOL.
   B. OPTION [--nodepool-name NODE_POOL_NAME] vo VALUE [NODE_POOL_NAME] obsahuje nazov KUBERNETES NODE POOL.
   C. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   E. OPTION [--mode NODE_MODE] vo VALUE [NODE_MODE] urcuje NODE MODE. Moze nadobudat VALUE [System], alebo VALUE [User].
   F. OPTION [--node-vm-size VIRTUAL_MACHINE_NAME] vo VALUE [VIRTUAL_MACHINE_NAME] urcuje nazov VIRUTAL MACHINE.
   G. OPTION [--min-count MIN_COUNT] vo VALUE [MIN_COUNT] urcuje minimalny pocet NODES pre AUTOSCALING.
   H. OPTION [--max-count MAX_COUNT] vo VALUE [MAX_COUNT] urcuje maximalny pocet NODES pre AUTOSCALING.
   I. OPTION [--max-pods MAX_PODS] vo VALUE [MAX_PODS] urcuje maximalny pocet PODS, ktore mozu byt nasadene na NODE.
   J. OPTION [--enable-cluster-autoscaler] povoluje AUTOSCALER.
   K. OPTION [--scale-down-mode SCALE_DOWN_MODE] vo VALUE [SCALE_DOWN_MODE] urcuje SCALE DOWN MODE. Moze nadobudat VALUE [Deallocate], alebo VALUE [Delete].
9. COMMAND [az aks nodepool delete --nodepool-name KUBERNETES_CLUSTER_NAME --cluster-name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND odstranuje existujuci KUBERNETES NODE POOL.
   B. OPTION [--nodepool-name NODE_POOL_NAME] vo VALUE [NODE_POOL_NAME] obsahuje nazov KUBERNETES NODE POOL.
   C. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
10. COMMAND [az aks nodepool start --nodepool-name NODE_POOL_NAME --cluster-name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND spusta KUBERNETES NODE POOL.
   B. OPTION [--nodepool-name NODE_POOL_NAME] vo VALUE [NODE_POOL_NAME] obsahuje nazov KUBERNETES NODE POOL.
   C. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
11. COMMAND [az aks nodepool stop --nodepool-name NODE_POOL_NAME --cluster-name KUBERNETES_CLUSTER_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND zastavuje KUBERNETES NODE POOL.
   B. OPTION [--nodepool-name NODE_POOL_NAME] vo VALUE [NODE_POOL_NAME] obsahuje nazov KUBERNETES NODE POOL.
   C. OPTION [--name KUBERNETES_CLUSTER_NAME] vo VALUE [KUBERNETES_CLUSTER_NAME] obsahuje nazov KUBERNETES CLUSTER.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
KUBERNETES CLI COMMANDS.

1. COMMAND [kubectl get nodes] vracia vsetky NODES daneho KUBERNETES CLUSTER.
2. COMMAND [kubectl get node NODE_ID].
   A. COMMAND vracia informacie o danom KUBERNETES NODE.
   B. VALUE [NODE_ID] obsahuje identifikator KUBERNETES NODE.
3. COMMAND [kubectl get pods] vracia vsetky PODS daneho KUBERNETES CLUSTER.
4. COMMAND [kubectl get pod POD_ID].
   A. COMMAND vracia informacie o danom KUBERNETES POD.
   B. VALUE [POD_ID] obsahuje identifikator KUBERNETES POD.
5. COMMAND [kubectl get pod --selector app=PROGRAM_NAME].
   A. COMMAND vracia informacie o danom KUBERNETES POD.
   B. VALUE [POD_ID] obsahuje identifikator KUBERNETES POD.
   C. OPTION [--selector app=PROGRAM_NAME] vo VALUE [PROGRAM_NAME] obsahuje nazov PROGRAMU ktoreho stav PODU sa ma vratit.
6. COMMAND [kubectl get deployments] vracia vsetky DEPLOYMENTS daneho KUBERNETES CLUSTER.
7. COMMAND [kubectl get deployment DEPLOYMENT_NAME].
   A. COMMAND vracia informacie o danom DEPLOYMENT v KUBERNETES CLUSTER. COMMAND vracia informaciu o pocte beziacich REPLICAS.
   B. VALUE [DEPLOYMENT_NAME] obsahuje nazov KUBERNETES DEPLOYMENT.
8. COMMAND [kubectl get service SERVICE_NAME].
   A. COMMAND vracia informacie o SERVICE, vratane EXTERNAL IP ADDRESS, ktoru je mozne pouzit na pristup k WEB PROGRAM, ktory je nasadeny na KUBERNETES CLUSTER.
   B. VALUE [SERVICE_NAME] obsahuje nazov KUBERNETES SERVICE.
9. COMMAND [kubectl describe node NODE_ID].
   A. COMMAND vracia podrobne informacie o danom KUBERNETES NODE.
   B. VALUE [NODE_ID] obsahuje identifikator KUBERNETES NODE.
10. COMMAND [kubectl exec -it POD_ID -- /bin/sh].
   A. COMMAND spusta SHELL na danom KUBERNETES POD.
   B. VALUE [POD_ID] obsahuje identifikator KUBERNETES POD.
11. COMMAND [kubectl logs POD_ID].
   A. COMMAND vracia LOG RECORDS z daneho KUBERNETES POD.
   B. VALUE [POD_ID] obsahuje identifikator KUBERNETES POD.
//----------------------------------------------------------------------------------------------------------------------