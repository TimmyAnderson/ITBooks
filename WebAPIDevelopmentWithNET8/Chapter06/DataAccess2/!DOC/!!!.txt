//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu RELATIONSHIPS v ENTITY FRAMEWORK v ASP.NET CORE.
2. V RELATIONSHIP medzi 2 ENTITIES sa rozlisuju nasledujuce typy ENTITIES.
   A. PRINCIPAL ENTITY je ENTITY, ktora reprezentuje MASTER ENTITY.
   B. DEPENDENT ENTITY je ENTITY, ktora reprezentuje DETAIL ENTITY. DEPENDENT ENTITY ma FOREIGN KEY na PRINCIPAL ENTITY.
3. PRINCIPAL KEY je UNIKATNY KEY v ENTITY. Pre PRINCIPAL KEYS platia nasledujuca fakty.
   A. PRINCIPAL KEY MUSI mat pre kazdy RECORD vzdy UNIKANTU VALUE v ramci celej DB TABLE.
   B. PRINCIPAL KEY je kazdy PRIMARY KEY.
   C. PRINCIAPL KEY je ALTERNATE KEY. ALTERNATE KEY je KEY, ktory NIE JE PRIMARY KEY, ale je UNIKATNY.
4. DEPEDNENT ENTITIES mozu mat definovany FOREIGN KEY PROPERTY. Pre FOREIGN KEY PROPERTIES platia nasledujuca fakty.
   A. FOREIGN KEY PROPERTY je vzdy definovany v DEPENDENT ENTITY. DEPENDENT ENTITY pomocou FOREIGN KEY referuje na PRINCIPAL ENTITY.
   B. FOREIGN KEY PROPERTY je MAPPED do FOREIGN KEY DB COLUMN.
   !!! C. Ak DEPENDENT ENTITY NEMA explicitne definovanu FOREIGN KEY PROPERTY, tak ENTITY FRAMEWORK vytvori FOREIGN KEY PROPERTY ako SHADOW PROPERTY a zaroven k nemu vytvori aj DB COLUMN.
   D. Ak ma FOREIGN KEY PROPERTY NON-NULLABLE TYPE, potom je RELATIONSHIP je REQUIRED.
   E. Ak ma FOREIGN KEY PROPERTY NULLABLE TYPE, potom je RELATIONSHIP je OPTIONAL.
5. NAVIGATION PROPERTY je PROPERTY referujuca na PRINCIPAL ENTITY, alebo DEPENDENT ENTITY v ENTITY RELATIONSHIP Pre NAVIGATION PROPERTIES platia nasledujuce fakty.
   A. Pomocou NAVIGATION PROPERTIES je mozny pristup k druhej strane RELATIONSHIP.
   B. NAVIGATION PROPERTY v PRINCIPAL ENTITY ma TYPE COLLECTION DEPENDENT ENTITY, lebo jednej PRINCIPAL ENTITY prislucha viacero DEPENDENT ENTITIES.
   C. NAVIGATION PROPERTY v DEPEDNENT ENTITY ma TYPE PRINCIPAL ENTITY, lebo jednej DEPENDENT ENTITY prislucha jedna PRINCIPAL ENTITY.
   !!! D. NAVIGATION PROPERTIES NIE SU POVINNE. Na vytvorenie RELATIONSHIP staci definovanie FOREIGN KEY PROPERTY v DEPENDENT PROPERTY. Ich definovanie ma zmysel iba vtedy, ak je naozaj potreba pre navigaciu z PRINCIPAL ENTITY na DEPENDENT ENTITIES ci z DEPENDENT ENTITIES na PRINCIPAL ENTITY.
6. Konfigfuraciu RELATIONALSHIPS v ENTITY FRAMEWORK CORE je mozne vykonat nasledujucimi sposobmi.
   A. Pouzitim CONVENTIONS.
   B. Pouzitim DATA ANNOTATIONS.
   C. Pouzitim FLUENT API.
7. RELATIONSHIPS medzi 2 ENTITIES je pomocou FLUENT API sa realizuje v nasledujucich krokoch.
   A. Ziska sa instancia CLASS [EntityTypeBuilder<TEntity>].
   B. Zavola sa bud METHOD [ReferenceNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasOne<TRelatedEntity>(Expression<Func<TEntity,TRelatedEntity>> NavigationExpression)], alebo METHOD [CollectionNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasMany<TRelatedEntity>(Expression<Func<TEntity,IEnumerable<TRelatedEntity>>> NavigationExpression)], ktora definuje NAVIGATION PROPERTY cez ktoru su 2 ENTITIES RELATED.
   C. Zavola sa METHOD [ReferenceReferenceBuilder<TEntity,TRelatedEntity> ReferenceNavigationBuilder<TEntity,TRelatedEntity>.WithOne(Expression<Func<TRelatedEntity,TEntity>> NavigationExpression)], METHOD [ReferenceCollectionBuilder<TRelatedEntity,TEntity> WithMany(Expression<Func<TRelatedEntity,IEnumerable<TEntity>>> NavigationExpression)], METHOD [ReferenceCollectionBuilder<TEntity,TRelatedEntity> WithOne(Expression<Func<TRelatedEntity,TEntity>> NavigationExpression)], alebo METHOD [CollectionCollectionBuilder<TRelatedEntity,TEntity> WithMany(Expression<Func<TRelatedEntity,IEnumerable<TEntity>>> NavigationExpression)] na definiciu RELATIONSHIP a zaroven OPTIONALLY aj definovanie INVERSE NAVIGATION PROPERTY.
   D. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)], alebo METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceReferenceBuilder<TEntity,TRelatedEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] ktorou sa definuje FOREIGN KEY PROPERTY.
8. RELATIONSHIP 0/1:N a RELATIONSHIP 1:N sa pomocou FLUENT API na PRINCIPAL ENTITY konfiguruju nasledujucim sposobom.
   A. Na PRINCIPAL ENTITY sa zavola METHOD [CollectionNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasMany<TRelatedEntity>(Expression<Func<TEntity,IEnumerable<TRelatedEntity>>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP.
   B. Zavola sa METHOD [ReferenceCollectionBuilder<TEntity,TRelatedEntity> CollectionNavigationBuilder<TEntity,TRelatedEntity>.WithOne(Expression<Func<TRelatedEntity,TEntity>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP.
   C. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   D. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/1:N, alebo RELATIONSHIP 1:N.
9. RELATIONSHIP 0/1:N a RELATIONSHIP 1:N sa pomocou FLUENT API na DEPENDENT ENTITY konfiguruju nasledujucim sposobom.
   A. Na DEPENDENT ENTITY sa zavola METHOD [ReferenceNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasOne(Expression<Func<TEntity,TRelatedEntity>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP.
   B. Zavola sa METHOD [ReferenceCollectionBuilder<TRelatedEntity,TEntity> ReferenceNavigationBuilder<TEntity,TRelatedEntity>.WithMany(Expression<Func<TRelatedEntity,IEnumerable<TEntity>>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP.
   C. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   D. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/1:N, alebo RELATIONSHIP 1:N.
!!!!! 10. LINQ OPERATOR [Include] funguje nasledujucim sposobom.
   !!!!! A. Ak QUERY pre PRINCIPAL ENTITY nacitava pomocou LINQ OPERATOR [Include] dalsich 'N' DEPENDENT ENTITIES, ENTITY FRAMEWORK CORE standardne vytvara 1 VELKU QUERY, ktora pouziva 'N' JOIN CLAUSES. Problemom takejto QUERY je, ze ked pocet RECORDS pre jednotlive DEPENDENT ENTITY CLASSES je (R1,R2...RN), tak celkovy pocet nacitanych ROWS je rovny (ROWS=R1*R2*...*RN). To znamena, ze pri velkom pocte RECORDS je QUERY s pouzitim LINQ OPERATOR [Include] EXTREMNE POMALA. Tento problem sa nazyva CARTESIAN EXPLOSION.
   !!!!! B. Riesenim problemu CARTESIAN EXPLOSION je pouzitie LINQ OPERATOR [AsSplitQuery], ktory sposobi QUERY SPLITTING. Pri QUERY SPLITTING ENTITY FRAMEWORK CORE NEVYKONA 1 VELKU QUERY s 'N' JOIN CLAUSES, ale vykona 'N' QUERIES. To znamena, ze kazdu ENTITY nacita v OSOBITNEJ QUERY a nasledne spoji vysledky. Tychto 'N' QUERIES vedie k tomu, ze celkovy pocet nacitanych RECORDS je (ROWS=R1+R2+...+RN).
   !!! C. Umiestnenie LINQ OPERATOR [AsSplitQuery] v QUERY je KLUCOVE, lebo AZ od momentu jeho pouzitia dochadza ku QUERY SPLITTING.
!!!!! 11. JSON SERIALIZER BY DEFAULT neumoznuje prenasat OBJECTS, ktore obsahuju CYCLES, co je pripad ENTITIES, ktore maju RELATIONSHIPS a maju nastavene NAVIGATIONAL PROPERTIES pre PRINCIPAL ENTITY aj PRINCIPAL ENTITIES. CYCLES je mozne povolit nasledujucim sposobom.
   A. Volanim METHOD [IMvcBuilder AddJsonOptions(this IMvcBuilder Builder, Action<JsonOptions> Configure)] sa vyvola CALLBACK METHOD v PARAMETER [Action<JsonOptions> Configure].
   B. V CALLBACK METHOD sa nastavi PROPERTY [ReferenceHandler JsonSerializerOptions.ReferenceHandler] na VALUE [ReferenceHandler.IgnoreCycles].
12. RELATIONSHIP 0/1:1 a RELATIONSHIP 1:1 sa pomocou FLUENT API konfiguruju nasledujucim sposobom.
   !!! A. RELATIONSHIP je mozne konfigurovat pre PRINCIPAL ENTITY i DEPENDENT ENTITY.
   B. Na ENTITY sa zavola METHOD [ReferenceNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder.HasOne<TRelatedEntity>(Expression<Func<TEntity,TRelatedEntity>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP.
   C. Zavola sa METHOD [ReferenceReferenceBuilder<TEntity,TRelatedEntity> ReferenceNavigationBuilder<TEntity,TRelatedEntity>.WithOne(Expression<Func<TRelatedEntity,TEntity>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP.
   D. Zavola sa METHOD [ReferenceReferenceBuilder<TEntity,TRelatedEntity> ReferenceReferenceBuilder<TEntity,TRelatedEntity>.HasForeignKey<TDependentEntity>(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   E. Zavola sa METHOD [ReferenceReferenceBuilder<TEntity,TRelatedEntity> ReferenceReferenceBuilder<TEntity,TRelatedEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/1:1, alebo RELATIONSHIP 1:1.
!!! 13. Pri RELATIONSHIP 0/1:1 a RELATIONSHIP 1:1 DEPENDENT ENTITY moze mat PRIMARY KEY a FOREIGN KEY nastaveny na TEN ISTY DB COLUMN.
14. RELATIONSHIP 0/M:N a RELATIONSHIP M:N sa pomocou FLUENT API na PRINCIPAL ENTITY M a PRINCIPAL ENTITY N konfiguruju nasledujucim sposobom.
   A. Na PRINCIPAL ENTITY M sa zavola METHOD [CollectionNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasMany<TRelatedEntity>(Expression<Func<TEntity,IEnumerable<TRelatedEntity>>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP M:MN.
   B. Zavola sa METHOD [ReferenceCollectionBuilder<TEntity,TRelatedEntity> CollectionNavigationBuilder<TEntity,TRelatedEntity>.WithOne(Expression<Func<TRelatedEntity,TEntity>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP M:MN.
   C. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   D. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/M:N, alebo RELATIONSHIP M:N.
   E. Na PRINCIPAL ENTITY N sa zavola METHOD [CollectionNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasMany<TRelatedEntity>(Expression<Func<TEntity,IEnumerable<TRelatedEntity>>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP N:MN.
   F. Zavola sa METHOD [ReferenceCollectionBuilder<TEntity,TRelatedEntity> CollectionNavigationBuilder<TEntity,TRelatedEntity>.WithOne(Expression<Func<TRelatedEntity,TEntity>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP N:MN.
   G. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   H. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/M:N, alebo RELATIONSHIP M:N.
15. RELATIONSHIP 0/M:N a RELATIONSHIP M:N sa pomocou FLUENT API na DEPENDENT ENTITY MN konfiguruju nasledujucim sposobom.
   A. Na DEPENDENT ENTITY MN sa zavola METHOD [ReferenceNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasOne(Expression<Func<TEntity,TRelatedEntity>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP M:MN.
   B. Zavola sa METHOD [ReferenceCollectionBuilder<TRelatedEntity,TEntity> ReferenceNavigationBuilder<TEntity,TRelatedEntity>.WithMany(Expression<Func<TRelatedEntity,IEnumerable<TEntity>>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP M:MN.
   C. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   D. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/M:N, alebo RELATIONSHIP M:N.
   E. Na DEPENDENT ENTITY MN sa zavola METHOD [ReferenceNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.HasOne(Expression<Func<TEntity,TRelatedEntity>> NavigationExpression)], ktora nastavi LEFT SIDE RELATIONSHIP N:MN.
   F. Zavola sa METHOD [ReferenceCollectionBuilder<TRelatedEntity,TEntity> ReferenceNavigationBuilder<TEntity,TRelatedEntity>.WithMany(Expression<Func<TRelatedEntity,IEnumerable<TEntity>>> NavigationExpression)], nastavi RIGHT SIDE RELATIONSHIP N:MN.
   G. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)] na urcenie FOREIGN KEY PROPERTY.
   H. Zavola sa METHOD [ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity> ReferenceCollectionBuilder<TPrincipalEntity,TDependentEntity>.IsRequired(bool Required)] na urcenie ci je RELATIONSHIP 0/M:N, alebo RELATIONSHIP M:N.
!!! 16. Pri RELATIONSHIP 0/M:N a RELATIONSHIP M:N DEPENDENT ENTITY MN moze byt PRIMARY KEY COMPOSITE, tvoreny FOREIGN KEY PRINCIPAL ENTITY M a FOREIGN KEY PRINCIPAL ENTITY N. Takyto COMPOSITE PRIMARY KEY tvori FOREIGN KEYS do PRINCIPAL ENTITY M a PRINCIPAL ENTITY N.
17. OWNED TYPE je C# CLASS, ktora moze byt ulozena do DB, aj ked nema definovany PRIMARY KEY. Pre OWNED TYPES platia nasledujuce fakty.
   A. OWNED TYPES sa pouzivaju ak je treba ENTITY CLASS rozdelit na viacero mensich CLASSES, pretoze povodna ENTITY CLASS by mala prilis vela PROPERTIES, alebo sa OWNED TYPE pouziva viackrat v jednej ENTITY, alebo vo viacerich ENTITIES. Typickym prikladom OWNED CLASSES su napriklad CLASSES ukladajuce ADDRESS, ktore je treba pouzit vo viacerych rozlicnych ENTITIES a v kazdej maju rovnaku strukturu.
   B. OWNED TYPE BY-DEFAULT nema PRIMARY KEY.
   C. OWNED TYPE moze byt ulozeny do tej istej TABLE ako PARENT ENTITY, alebo do separatnej HIDDEN TABLE s ktorou ENTITY FRAMEWORK CORE na pozadi vytvori 0/1:1 RELATIONSHIP, alebo 0/1:N RELATIONSHIP.
   D. OWNED TYPES mozu byt NESTED. To znamena, ze jeden OWNED TYPE moze obsahovat ine OWNED TYPES.
   !!! E. OWNED TYPES su nacitavane AUTOMATICKY ENTITY FRAMEWORK CORE a preto sa na ich nacitanie NEMOZE pouzit LINQ OPERATOR [Include].
   !!!!! F. PARENT ENTITY moze obsahovat aj COLLECTION OWNED TYPES. V takom pripade su instancie OWNED TYPES ulozene v separatnej TABLE, ktoru ENTITY FRAMEWORK vytvori. Takato TABLE ma svoj PRIMARY KEY a FOREIGN KEY do PARENT ENTITY TABLE.
18. OWNED TYPES mozu byt v ENTITY FRAMEWORK CORE ukladane nasledujucimi sposobmi.
   A. V rovnakej TABLE na ktoru je namapovana ENTITY, ktora vyuziva OWNED TYPE.
   B. V nezavislej HIDDEN TABLE mimo TABLE do ktorej je mapovana ENTITY, ktora vyuziva OWNED TYPE. HIDDEN TABLE vytvara interne ENTITY FRAMEWORK CORE, ktory zaroven vytvori 0/1:1 RELATIONSHIP, alebo 0/1:N RELATIONSHIP s PARENT ENTITY TABLE.
19. OWNED TYPE sa pomocou DATA ANNOTATIONS vytvara aplikovanim ATTRIBUTE [OwnedAttribute] na OWNED TYPE.
20. OWNED TYPE sa pomocou FLUENT API pre RELATIONSHIP TYPE 1:1 sa vytvara nasledujucim sposobom.
   A. V OWNER TYPE sa zavola METHOD [OwnedNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity>.OwnsOne<TRelatedEntity>(Expression<Func<TEntity,TRelatedEntity>> NavigationExpression)], ktora v OWNER TYPE referuje na NAVIGATION PROPERTY na OWNED TYPE.
   !!! B. Ak OWNED TYPE obsahuje REFERENCE PROPERTY na OWNER TYPE, zavola sa METHOD [OwnershipBuilder<TOwnerEntity,TDependentEntity> OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>.WithOwner(Expression<Func<TDependentEntity,TOwnerEntity>> ReferenceExpression)], ktora v OWNED TYPE referuje na NAVIGATION PROPERTY na OWNER TYPE.
   C. Zavola sa METHOD [OwnershipBuilder<TEntity,TDependentEntity> OwnershipBuilder<TEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)], ktorym sa urci FOREIGN KEY na OWNED TYPE.
   !!! D. Ak je OWNED TYPE ulozeny v separatnej TABLE, zavola sa METHOD [OwnedNavigationBuilder<TOwnerEntity,TDependentEntity> ToTable<TOwnerEntity,TDependentEntity>(this OwnedNavigationBuilder<TOwnerEntity,TDependentEntity> OwnedNavigationBuilder, string Name)].
   !!! E. Ak je OWNED TYPE ukladany v separatnej TABLE, pre RELATIONSHIP TYPU 1:1 moze byt PRIMARY KEY OWNED TYPE zaroven aj FOREIGN KEY OWNED TYPE.
21. OWNED TYPE sa pomocou FLUENT API pre RELATIONSHIP TYPE 1:N sa vytvara nasledujucim sposobom.
   A. V OWNER TYPE sa zavola METHOD [OwnedNavigationBuilder<TEntity,TRelatedEntity> EntityTypeBuilder<TEntity,TRelatedEntity>.OwnsMany<TRelatedEntity>(Expression<Func<TEntity,IEnumerable<TRelatedEntity>>> NavigationExpression)], ktora v OWNER TYPE referuje na NAVIGATION PROPERTY na OWNED TYPE.
   !!! B. Ak OWNED TYPE obsahuje REFERENCE PROPERTY na OWNER TYPE, zavola sa METHOD [OwnershipBuilder<TOwnerEntity,TDependentEntity> OwnedNavigationBuilder<TOwnerEntity,TDependentEntity>.WithOwner(Expression<Func<TDependentEntity,TOwnerEntity>> ReferenceExpression)], ktora v OWNED TYPE referuje na NAVIGATION PROPERTY na OWNER TYPE.
   C. Zavola sa METHOD [OwnershipBuilder<TEntity,TDependentEntity> OwnershipBuilder<TEntity,TDependentEntity>.HasForeignKey(Expression<Func<TDependentEntity,object>> ForeignKeyExpression)], ktorym sa urci FOREIGN KEY na OWNED TYPE.
   !!! D. Zavola sa METHOD [OwnedNavigationBuilder<TOwnerEntity,TDependentEntity> ToTable<TOwnerEntity,TDependentEntity>(this OwnedNavigationBuilder<TOwnerEntity, TDependentEntity> OwnedNavigationBuilder, string Name)], ktorym sa urci nazov TABLE v ktorej sa budu OWNED TYPES ukladat.
   !!! E. Zavola sa METHOD [KeyBuilder<TDependentEntity> OwnedNavigationBuilder<TEntity,TDependentEntity>.HasKey(Expression<Func<TDependentEntity,Object?>> KeyExpression)], ktorym sa urci PRIMARY KEY PROPERTY na OWNED TYPE.
   !!!!! F. Pri RELATIONSHIP TYPE 1:N sa MUSIA PRIMARY KEY PROPERTY a FOREIGN KEY PROPERTY lisit.
22. Ak je OWNED TYPE ulozeny v tej istej TABLE ako PARENT ENTITY, platia nasledujuce fakty.
   A. ENTITY FRAMEWORK CORE vytvori pre kazdy OWNED TYPE v PARENT ENTITY TABLE COLUMNS pre vsetky PROPERTIES OWNED TYPE. NAMING CONVENTION pre COLUMNS je [(PARENT_TYPE_PROPERTY_NAME)_(OWNED_TYPE_PROPERTY_NAME)], kde VALUE [PARENT_TYPE_PROPERTY_NAME] predstavuje nazov PROPERTY OWNED TYPE v PARENT ENTITY a VALUE [OWNED_TYPE_PROPERTY_NAME] predstavuje nazov PROPERTY OWNED TYPE.
   !!! B. BY-DEFAULT su vsetky COLUMNS OWNED TYPE oznacene ako NULLABLE, vratane NON NULLABLE PRIMITIVE TYPES ci PROPERTIES oznacenych ako REQUIRED. Je to preto, lebo samotny OWNED TYPE je CLASS, ktory moze mat VALUE NULL. Ak ma VALUE NULL, potom VALUES vsetkych COLUMNS OWNED TYPE je nastavena na NULL a to je pre ENTITY FRAMEWORK CORE indikator, ze OWNED TYPE je NULL.
   !!! C. OWNED ENTITY moze byt nastavena ako REQUIRED volanim METHOD [NavigationBuilder<TEntity,TNavigation> EntityTypeBuilder<TEntity>.Navigation<TNavigation>(Expression<Func<TEntity,TNavigation>> NavigationExpression)] a nasledne volanim METHOD [NavigationBuilder<TSource,TTarget> NavigationBuilder<TSource,TTarget>.IsRequired(bool Required)].
   !!!!! D. Ak je OWNED ENTITY REQUIRED, tak pre NON-NULLABLE a REQUIRED PROPERTIES OWNED TYPE je su v DB TABLE vytvorene NON-NULL COLUMNS, kedze OWNED ENTITY NEMOZE nadobudat VALUE NULL.
23. Ak je OWNED TYPE ulozeny v separatnej TABLE, platia nasledujuce fakty.
   A. ENTITY FRAMEWORK CORE vytvori pre OWNED TYPE nezavislu TABLE, ktora ma vlastny PRIMARY KEY a FOREIGN KEY.
   !!! B. Pre RELATIONSHIP TYPE 1:1 moze byt PRIMARY KEY a FOREIGN KEY v tej istej PROPERTY. 
   !!! C. Pre RELATIONSHIP TYPE 1:N MUSIA byt PRIMARY KEY a FOREIGN KEY ulozene v ROZLICNYCH PROPERTIES.
   D. COLUMNS OWNED TYPE TABLE su NON-NULLABLE, alebo NULLABLE, podla toho ako su definovane v OWNED TYPE. To znamena, ze nedochadza k zmene NULLABLITY DB COLUMNS ako je to v pripade OWNED TYPES ulozenych v PARENT ENTITY TABLE.
   E. V pripade, ze OWNED TYPE je nastaveny na NULL, tak sa v DB TABLE OWNED TYPE nevytvori novy RECORD.
   !!! F. OWNED TYPE TABLE NIE JE priamo pristupna cez DB CONTEXT. Je pristupna IBA pomocou PARENT ENTITY.
//----------------------------------------------------------------------------------------------------------------------