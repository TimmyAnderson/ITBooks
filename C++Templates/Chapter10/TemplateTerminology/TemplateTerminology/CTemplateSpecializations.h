//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "MyDebug.h"
//----------------------------------------------------------------------------------------------------------------------
// !!! Toto je PRIMARY TEMPLATE.
template<typename TType1, typename TType2>
class CTemplateSpecializations final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		TType1													MField1;
		TType2													MField2;

	public:
		void Print(void) const;

	public:
		CTemplateSpecializations(TType1 Field1, TType2 Field2);
		virtual ~CTemplateSpecializations(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
CTemplateSpecializations<TType1,TType2>::CTemplateSpecializations(TType1 Field1, TType2 Field2)
	: MField1(Field1), MField2(Field2)
{
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
CTemplateSpecializations<TType1,TType2>::~CTemplateSpecializations(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
void CTemplateSpecializations<TType1,TType2>::Print(void) const
{
	std::wcout << L"PRIMARY TEMPLATE - TYPE 1 [" << GetTypeInfoName<TType1>() << L"] TYPE 2 [" << GetTypeInfoName<TType2>() << L"] FIELD 1 [" << MField1 << L"] FIELD 2 [" << MField2 << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! Toto je PARTIAL TEMPLATE SPECIALIZATION.
template<typename TType>
class CTemplateSpecializations<TType,int> final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		TType													MField1;
		int														MField2;

	public:
		void Print(void) const;

	public:
		CTemplateSpecializations(TType Field1, int Field2);
		virtual ~CTemplateSpecializations(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CTemplateSpecializations<TType,int>::CTemplateSpecializations(TType Field1, int Field2)
	: MField1(Field1), MField2(Field2)
{
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CTemplateSpecializations<TType,int>::~CTemplateSpecializations(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CTemplateSpecializations<TType,int>::Print(void) const
{
	std::wcout << L"PARTIAL SPECIALIZATION TEMPLATE - TYPE [" << GetTypeInfoName<TType>() << L"] FIELD 1 [" << MField1 << L"] FIELD 2 [" << MField2 << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! Toto je FULL TEMPLATE SPECIALIZATION.
template<>
class CTemplateSpecializations<int,int> final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		int														MField1;
		int														MField2;

	public:
		void Print(void) const;

	public:
		CTemplateSpecializations(int Field1, int Field2);
		virtual ~CTemplateSpecializations(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
CTemplateSpecializations<int,int>::CTemplateSpecializations(int Field1, int Field2)
	: MField1(Field1), MField2(Field2)
{
}
//----------------------------------------------------------------------------------------------------------------------
CTemplateSpecializations<int,int>::~CTemplateSpecializations(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
void CTemplateSpecializations<int,int>::Print(void) const
{
	std::wcout << L"FULL SPECIALIZATION TEMPLATE - FIELD 1 [" << MField1 << L"] FIELD 2 [" << MField2 << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------