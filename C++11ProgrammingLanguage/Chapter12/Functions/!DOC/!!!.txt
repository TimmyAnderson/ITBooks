//-----------------------------------------------------------------------------
1. Solution demonstruje definiciu a pouzitie FUNCTIONS.
2. V C++ FUNCTIONS obsahuju EXECUTABLE CODE.
3. FUNCTIONS su definovane v 2 krokoch.
   A. FUNCTION DECLARATION je deklaracia FUNCTION NAME a FUNCTION PROTOTYPE, ktory obsahuje RETURN VALUE TYPE a vsetky PARAMETERS danej FUNCTION.
   B. FUNCTION DEFINITION obsahuje FUNCTION DECLARATION a FUNCTION BODY.
4. Pre FUNCTION DECLARATION platia nasledujuce fakty.
   A. FUNCTION DECLARATION obsahuje FUNCTION NAME, RETURN VALUE TYPE a zoznam PARAMETERS, ktore obsahuju PARAMETER TYPE a OPTIONALLY aj PARAMETER NAME.
   B. FUNCTION DECLARATION NEOBSAHUJE FUNCTION BODY.
   !!! C. PARAMETER vo FUNCTION DECLARATION su OPTIONAL. COMPILER ich nazvy IGNORUJE a ich NAMES NEMUSIA BYT ROVNAKE ako vo FUNCTION DEFINITION. Sluzia iba pre potreby zvysenia citatelnosti CODE.
5. Pre FUNCTION DEFINITION platia nasledujuce fakty.
   A. FUNCTION DEFINITION obsahuje FUNCTION DECLARATION a FUNCTION BODY.
   B. FUNCTION DEFINITION sluzi aj ako FUNCTION DECLARATION. To znaci, ze ak CODE obsahuje FUNCTION DEFINITION, tak ta je automaticky povazovana aj za FUNCTION DECLARATION.
6. FUNCTIONS je mozne volat IBA VTEDY ak uz boli predtym DECLARED. To znaci, ze FUNCTION DECLARATION MUSI PREDCHADZAT miestu kde je FUNCTION CALLED.
7. FUNCTION TYPE tvoria nasledujuce ELEMENTS.
   A. RETURN VALUE TYPE.
   B. Poradie a TYPES vsetkych PARAMETERS.
   !!! C. V pripade, ze FUNCTION reprezentuje METHOD, tak aj CLASS TYPE.
!!! 8. Pri zasielani ARGUMENTS do FUNCTION sa pouziva COPY SEMANTICS. Pre zasielanie ARGUMENTS do FUNCTION platia nasledujuce fakty.
   A. ARGUMENTS su zasielane do FUNCTION aplikovanim COPY SEMANTICS.
   B. Pri zasielani POINTERS a REFERENCES dochadza ku kopirovaniu POINTER VALUES a REFERENCE VALUES a nie samotnych VALUES zaslanych PARAMETERS.
9. FUNCTION PROTOTYPE tvoria nasledujuce ELEMENTS.
   A. FUNCTION NAME.
   B. RETURN VALUE TYPE.
   C. Definicia PARAMETERS, ktora pre kazdy PARAMETER obsahuje PARAMETER TYPE a OPTIONALLY aj PARAMETER NAME.
   D. INLINE SPECIFIER, ktory urcuje, ze FUNCTION moze byt INLINED.
   !!! E. CONST EXPRESSION SPECIFIER, ktory urcuje, ze FUNCTION moze byt EVAULATED v RUNTIME, ak je ARGUMENTS su CONSTANT EXPRESSIONS.
   F. LINKAGE SPECIFIER (STATIC, alebo EXTERN), ktory urcuje, ze akym sposobom bude FUNCTION LINKED.
   G. NOEXCEPT SPECIFIER, ktory urcuje, ze FUNCTION NESMIE hodit EXCEPTION.
   H. NO RETURN SPECIFIER, ktory urcuje, ze FUNCTION nikdy NEVRATI RETURN VALUE (napriklad kvoli nekonecnemu cyklu), aj ked moze hodit EXCEPTION.
10. V pripade, ze FUNCTION predstavuje METHOD, jej PROTOTYPE moze obsahovat aj nasledujuce ELEMENTS.
   A. CONST SPECIFIER, ktory urcuje, ze METHOD NEMOZE modifikovat FIELDS svojho OBJECT.
   B. VIRTUAL SPECIFIER, ktory urcuje, ze METHOD je VIRTUAL.
   C. OVERRIDE SPECIFIER, ktory urcuje, ze VIRTUAL METHOD je OVERRIDEN.
   D. FINAL SPECIFIER, ktory urcuje, ze VIRTUAL METHOD NEMOZE byt v DERIVED CLASSES OVERRIDEN.
   E. STATIC SPECIFIER, ktory urcuje, ze METHOD je STATIC METHOD co znaci, ze METHOD nie je asociovana so ziadnym OBJECT.
!!!!! 11. V C++ CONST SPECIFIERS aplikovane na BY-VALUE PARAMETERS NIE SU rozlisovacim kriteriom pre FUNCTION OVERLOADING. To znaci, ze FUNCTION [void XXX(int)] a FUNCTION [void XXX(const int)] maju ROVNAKY TYPE a v pripade, ze CODE definuje obe FUNCTION, COMPILER hodi ERROR, pretoze FUNCTION uz BOLA DEFINED.
!!!!! 12. V C++ ak su CONST SPECIFIERS aplikovane na POINTER PARAMETERS a REFERENCE PARAMETERS, tak tieto CONST SPECIFIERS SLUZIA ako rozlisovacie kriteria pre FUNCTION OVERLOADING. To znaci, ze FUNCTION [void XXX(int&)] a FUNCTION [void XXX(const int&)] maju ROZDIELNY TYPE.
13. Ak FUNCTION niektory PARAMETER NEPOUZIVA, potom je mozne v DEFINITION vynechat nazov tohto PARAMETER.
14. Kazda FUNCTION moze vraciat RETURN VALUE. Pre RETURN VALUES platia nasledujuce fakty.
   A. RETURN VALUE TYPE moze byt definovany pomocou SYNTAXE [RETURN_VALUE_TYPE FUNCTION_NAME(PARAMETERS)], alebo pomocou SYNTAXE [auto FUNCTION_NAME(PARAMETERS) -> RETURN_VALUE_TYPE]. SYNTAX [auto FUNCTION_NAME(PARAMETERS) -> RETURN_VALUE_TYPE] ma tu vyhodu, ze RETURN VALUE TYPE moze zavisiet na FUNCTION PARAMETER TYPES co sa vyuziva najma pri TEMPLATE DEFINITIONS.
   B. RETURN VALUE sa z FUNCTION vracia pomocou KEYWORD [return()]. FUNCTION moze obsahovat aj viacero KEYWORDS [return()] v rozlicnych BRANCHES CODE.
   !!! C. RETURN VALUES sa vracaju BY-VALUE, pricom sa aplikuju vsetky standardne CONVERSIONS vratane volania CUSTOM CONVERSION OPERATORS.
   D. V pripade, ze FUNCTION nevracia ziadnu VALUE, RETURN VALUE TYPE musi byt nastaveny na KEYWORD [void].
   !!! E. FUNCTIONS, ktore maju ako RETURN VALUE TYPE KEYWORD [void] mozu pouzit KEYWORD [return()], ak EXPRESSION v KEYWORD [return()] vracia TYPE [void].
   F. Ak FUNCTION hodi UNHANDLED EXCEPTION, tak FUNCTION okamzite skonci bez vratenia RETURN VALUE.
   G. Ak FUNCTION nikdy NEKONCI svoje BODY, je ju vhodne oznacit pomocou ATTRIBUTE [[[noreturn]]], aby COMPILER vedel, ze z FUNCTION sa PROGRAM NIKDY NEVRATI.
15. FUNCTIONS mozu byt oznacene pomocou KEYWORD [inline]. Pre INLINE SPECIFIER platia nasledujuce fakty.
   A. KEYWORD [inline] aplikovany na FUNCTION je HINT, ktory umoznuje COMPILER vykonat OPTIMALIZATION, kde FUNCTION CALLS su transformovane tak, ze namiesto FUNCTION CALL je na miesto volania vlozeny FUNCTION BODY INLINE FUNCTION. To umoznuje vyhnut sa casovo narocnejsiemu predavaniu FUNCTION ARGUMENTS.
   B. Pre INLINE FUNCTIONS je mozne ziskat ich ADDRESSES.
   C. INLINE FUNCTIONS su spravidla definovane v HEADER FILES, pretoze pre vykonanie OPTIMALIZATION je NUTNE, aby bola FUNCTION DEFINITION (a nie iba DECLARATION) PRISTUPNA.
   !!! D. Ak su INLINE FUNCTIONS DEFINED vo VIACERYCH TRANSLATION UNITS co je bezne, pretoze DEFINITION INLINE FUNCTION sa robi spravidla v HEADER FILE, potom KAZDA DEFINITION INLINE FUNCTION MUSI BYT IDENTICKA.
16. FUNCTIONS mozu byt oznacene pomocou KEYWORD [constexpr]. Pre CONSTEXPR SPECIFIER platia nasledujuce fakty.
   A. Primarnym cielom CONSTEXPR FUNCTIONS je, aby tieto FUNCTION v pripade, ze ako ARGUMENTS su im zadane COMPILE TIME CONSTANTS mohli byt EVALUATED v COMPILE TIME.
   !!! B. CONSTEXPR FUNCTIONS mozu byt EVALUATED v COMPILE TIME IBA ak VSETKY AGRUMENTS, ktore su zaslane do CONSTEXPR FUNCTION su CONSTANTS, alebo RETURN VALUES CONSTEXPR FUNCTIONS.
   !!!!! C. VSETKY PARAMETERS CONSTEXPR FUNCTIONS MUSIA byt LITERAL TYPES. LITERAL TYPES NESMU obsahovat CONSTRUCTORS s vynimkou CONSTEXPR CONSTRUCTORS a CUSTOM DESTRUCTORS.
   !!!!! D. RETURN VALUES CONSTEXPR FUNCTIONS MUSIA byt LITERAL TYPES. LITERAL TYPES NESMU obsahovat CONSTRUCTORS s vynimkou CONSTEXPR CONSTRUCTORS a CUSTOM DESTRUCTORS.
   !!! E. CONSTEXPR FUNCTIONS NESMU sposobovat SIDE EFFECTS. To znaci, ze NESMU vykonat WRITE do NON-LOCAL OBJECTS.
   !!! F. CONSTEXPR FUNCTIONS MOZU vykonavat READ z NON-LOCAL OBJECTS.
   !!! G. CONSTEXPR FUNCTIONS MOZU mat ako PARAMETERS CONST REFERENCES.
   !!! H. CONSTEXPR FUNCTIONS MOZU pouzivat CONDITIONAL EXPRESSIONS.
   !!!!! I. CONSTEXPR FUNCTIONS MOZU obsahovat LUBOVOLNE STATEMENTS okrem TRY-CATCH STATEMENT, GOTO STATEMENT, ASM DECLARATION.
   J. CONSTEXPR FUNCTIONS ak su DEFINED vo viacerych TRANSLATION UNITS MUSIA byt ich DEFINITIONS IDENTICKE v kazdom TRANSLATION UNIT.
   K. C++ umoznuje definovat CONSTEXPR METHODS a CONSTEXPR CONSTRUCTORS.
   L. CONSTEXPR FUNCTIONS je mozne pouzit na inicializaciu CONST VARIABLES.
   M. CONSTEXPR FUNCTIONS mozu generovat EXCEPTIONS.
!!!!! 17. Principialny ROZDIEL medzi CONST VARIABLES a CONSTEXPR VARIABLES je nasledujuci.
   A. CONST VARIABLES su VARIABLES, ktorych VALUE NEMOZE byt MODIFIKOVANA, no MOZE byt vypocitana v COMPILE TIME, alebo RUNTIME. Ak je VALUE vypocitana v COMPILE TIME, tak MOZE byt pouzita na urcenie ARRAY SIZE.
   B. CONSTEXPR VARIABLES su VZDY COMPILE TIME CONSTANTS, ktore MUSIA byt vypocitane v COMPILE TIME. Kedze sa VZDY jedna o COMPILE TIME CONSTANT, moze byt pouzita na urcenie ARRAY SIZE.
!!!!! 18. Pre CONST VARIABLES platia nasledujuce fakty.
   A. CONST VARIABLES su VARIABLES, ktorych VALUES sa pocas behu PROGRAMU NEMENIA. To znaci, ze po inicializacii sa ich VALUE uz NEMOZE ZMENIT.
   !!! B. CONST VARIABLES MOZU byt EVAULATED bud v COMPILE TIME, alebo v RUNTIME. Ak su EVALUATED v COMPILE TIME, tak MOZU sluzit na urcenie ARRAY SIZE. Ak su EVALUATED v RUNTIME tak NEMOZU sluzit na definovanie ARRAY SIZE.
   !!!!! C. CONST VARIABLES teda mozu definovat COMPILE TIME CONSTANTS, ak su EVALUATED v COMPILE TIME, alebo RUN TIME CONSTANTS, ak su EVALUATED v RUN TIME. RUN TIME CONSTATNS vsak NIE JE MOZNE pouzit ako ARRAY SIZES, pretoze ich VALUE je EVALUATED az v RUN TIME.
!!!!! 19. Pre CONSTEXPR VARIABLES platia nasledujuce fakty.
   A. CONSTEXPR VARIABLES su VARIABLES, ktorych VALUES sa pocas behu PROGRAMU NEMENIA. To znaci, ze po inicializacii sa ich VALUE uz NEMOZE ZMENIT.
   !!!!! B. CONSTEXPR VARIABLES mozu byt EVALUATED IBA v COMPILE TIME. To znaci ze uz pri kompilacii MUSI byt COMPILER schopny vypocitat ich VALUES.
   !!!!! C. CONSTEXPR VARIABLES VZDY definuju COMPILE TIME CONSTANTS, ktore VZDY mozu byt pouzite na definovanie ARRAY SIZE.
!!!!! 20. Pre CONST METHODS platia nasledujuce fakty.
   A. CONST METHODS NEMOZU menit obsah FIELDS daneho OBJECT.
   B. CONST METHODS mozu byt iba NON-STATIC METHODS.
   !!! C. CONST METHODS su METHODS, ktore nemozu menit svoje FIELDS, ale NEGARANTUJU, ze ich RETURN VALUE je CONSTANT.
!!!!! 21. Pre CONSTEXPR METHODS platia nasledujuce fakty.
   A. CONSTEXPR METHODS NEMOZU menit obsah FIELDS daneho OBJECT.
   B. CONSTEXPR METHODS mozu byt iba NON-STATIC METHODS aj STATIC METHODS.
   !!! C. CONSTEXPR METHODS su METHODS, ktore MUSIA byt DEKLAROVANE v HEADER (.H) FILES ak COMPILER ma vediet spravit ich EVALUATION v COMPILE TIME.
   !!!!! D. Ak je zavolana CONSTEXPR METHOD s COMPILE TIME CONSTANTS ako ARGUMENTS, potom RETURN VALUE je COMPILE TIME CONSTANT, ktoru je mozne pouzit napriklad na definovanie ARRAY SIZE.
   !!! E. Ak CONSTEXPR METHOD je volana s NON-COMPILE TIME CONSTANTS, potom RETURN VALUE NIE JE COMPILE TIME CONSTANT.
!!!!! 22. Pre CONSTEXPR FUNCTIONS platia nasledujuce fakty.
   !!! A. CONSTEXPR FUNCTIONS su FUNCTIONS, ktore MUSIA byt DEKLAROVANE v HEADER (.H) FILES ak COMPILER ma vediet spravit ich EVALUATION v COMPILE TIME.
   !!!!! B. Ak je zavolana CONSTEXPR FUNCTION s COMPILE TIME CONSTANTS ako ARGUMENTS, potom RETURN VALUE je COMPILE TIME CONSTANT, ktoru je mozne pouzit napriklad na definovanie ARRAY SIZE.
   !!! C. Ak CONSTEXPR FUNCTION je volana s NON-COMPILE TIME CONSTANTS, potom RETURN VALUE NIE JE COMPILE TIME CONSTANT.
23. FUNCTIONS mozu byt oznacene pomocou ATTRIBUTE [[[noreturn]]]. Pre ATTRIBUTE [[[noreturn]]] platia nasledujuce fakty.
   A. FUNCTION s ATTRIBUTE [[[noreturn]]] sa NESMIE UKONCIT.
   B. Ak je FUNCTION s ATTRIBUTE [[[noreturn]]] ukoncena, nastane UNDEFINED BEHAVIOR.
   C. FUNCTION s ATTRIBUTE [[[noreturn]]] MOZE hodit EXCEPTION.
   D. ATTRIBUTE [[[noreturn]]] umoznuje COMPILER vykonat urcite OPTIMALIZATIONS.
24. FUNCTIONS mozu definovat 2 typy LOCAL VARIABLES.
   A. AUTOMATIC LOCAL VARIABLE je VARIABLE, ktora je inicializovana VZDY ked sa PROGRAM dostane na miesto, kde je VARIABLE DEFINED.
   B. STATIC LOCAL VARIABLE je VARIABLE, ktora je inicializovana IBA RAZ pocas CELEHO BEHU PROGRAMU a drzi si svoju VALUE aj pri OPAKOVANOM volani danej FUNCTION.
25. Pre STATIC LOCAL VARIABLES platia nasledujuce fakty.
   A. STATIC LOCAL VARIABLE je VARIABLE, ktora je inicializovana IBA RAZ pocas CELEHO BEHU PROGRAMU.
   B. STATIC LOCAL VARIABLE si drzi svoju VALUE aj pri OPAKOVANOM volani danej FUNCTION.
   !!! C. C++ GARANTUJE, ze inicializacia STATIC LOCAL VARIABLE je THREAD SAFE.
   !!!!! D. Ak je STATIC LOCAL VARIABLE inicializovana pomocou RECURSIVE FUNCTION CALL, jej VALUE je UNDEFINED.
26. Pri volani FUNCTIONS su za FUNCTION PARAMETERS substituovane FUNCTION ARGUMENTS, ktore su specifikovane pomocou FUNCTION CALL OPERATOR, ktory ma tvar OPERATOR(). Pre zasielanie FUNCTION ARGUMENTS do FUNCTIONS platia nasledujuce pravidla.
   A. Pri prenose ARGUMENT do FUNCTION sa pouziva COPY INITIALIZATION SEMANTICS.
   B. COPY INITIALIZATION SEMANTICS sposobuje, ze su vykonavane vsetky STANDARD CONVERSIONS v pripade, ze su nutne, resp. volaju sa CUSTOM CONVERSIONS OPERATORS, ak su tieto definovane.
   !!! C. Ak PARAMETER NIE JE REFERENCE TYPE, tak sa pri COPY INITIALIZATION SEMANTICS vytvara KOPIA zadaneho ARGUMENT, ktora je zaslana do FUNCTION.
27. Pri volani FUNCTION sa pre prenos ARGUMENTS moze pouzit bud BY-VALUE SEMANTICS, alebo BY-REFERENCE SEMANTICS. Pre prenos ARGUMENTS do FUNCTIONS platia nasledujuce pravidla.
   A. Ak je FUNCTION PARAMETER typu VALUE a FUNCTION ARGUMENT TYPU VALUE, vytvori sa KOPIA FUNCTION ARGUMENT pomocou COPY SEMANTICS.
   B. Ak je FUNCTION PARAMETER typu POINTER a FUNCTION ARGUMENT TYPU POINTER, vytvori sa KOPIA FUNCTION ARGUMENT pomocou COPY SEMANTICS. Vysledkom je KOPIA zadaneho POINTER.
   C. Ak je FUNCTION PARAMETER typu REFERENCE a FUNCTION ARGUMENT TYPU REFERENCE, vytvori sa KOPIA FUNCTION ARGUMENT pomocou COPY SEMANTICS. Vysledkom je KOPIA zadanej REFERENCE.
   !!! D. Ak je FUNCTION PARAMETER typu REFERENCE a FUNCTION ARGUMENT TYPU VALUE, vytvori REFERENCE na zadany ARGUMENT, ktory sa zasle ako ARGUMENT do FUNCTION.
!!! 28. Pri prenose ARGUMENTS do FUNCTIONS BY-REFERENCE platia nasledujuce pravidla.
   A. Ak je PARAMETER typu NON-CONST REFERENCE, tak modifikacia hodnoty ARGUMENT v CALLED FUNCTION sposobi modifikaciu VALUE v zaslaneho ARGUMENT v CALLER FUNCTION.
   B. Ak je PARAMETER typu CONST REFERENCE, tak CALLED FUNCTION NEMOZE modifikovat VALUE zaslaneho ARGUMENT.
   !!!!! C. Ak je PARAMETER typu NON-CONST REFERENCE, tak C++ ZAKAZUJE zaslat ARGUMENT, ktory ma ODLISNY TYPE, alebo REFERENCE na CONST VARIABLE ci LITERAL. Je to vlastnost C++, ktora ma zabranit tomu, aby v CALLED FUNCTION pri modifikacii zaslaneho ARGUMENT bol modifikovany TEMPORARY OBJECT, ktory OKAMZITE po skonceni CALLED FUNCTION prestane existovat. Ak by C++ tuto SEMANTICS podporovala, viedlo by to k zle citatelnemu CODE.
   !!! D. Ak je PARAMETER typu CONST REFERENCE, tak C++ UMOZNUJE zaslat ARGUMENT, ktory ma ODLISNY TYPE, alebo REFERENCE na CONST VARIABLE ci LITERAL.
29. Pre zasielanie FUNCTION ARGUMENTS typu ARRAY do FUNCTIONS platia nasledujuce fakty.
   A. ARRAYS su do FUNCTIONS zasielane ako POINTERS na 1. ELEMENT.
   B. Kedze ARRAYS su prenasane BY-POINTERS, zmena ARRAY ITEMS v CALLED FUNCTION sa prejavi zmenou ARRAY ITEMS v CALLER FUNCTION.
   !!! C. V CALLED FUNCTIONS NIE JE MOZNE z ARRAY ARGUMENTS ziskat dlzky ARRAYS.
   !!! D. C++ IGNORUJE ARRAY SIZE specifikovanu pri definicii ARRAY PARAMETERS. To znaci, ze ARRAY ARGUMENT moze mat ODLISNY pocet ITEMS ako je definovane v ARRAY PARAMETER.
!!!!! 30. Riesenim problemu s ignorovanim ARRAY SIZE je prenos ARRAYS pomocou REFERENCES.
   A. ARRAY PARAMETERS vo FUNCTIONS musia byt definovane pomocou REFERENCES s definovanou dlzkou. To znaci, ze napriklad INTEGER ARRAY PARAMETER o dlzke 'ARRAY_SIZE' ITEMS bude definovany ako [int(PARAMETER_NAME&)[ARRAY_SIZE]].
   B. Ak je ARRAY PARAMETER definovany ako REFERENCE, potom COMPILER ZABRANI zaslat do FUNCTION ARRAY s INOU DLZKOU ako 'ARRAY_SIZE'.
31. UNIFORM INITIALIZATION [{}] je mozne pouzivat aj pri prenose ARGUMENTS do FUNCTIONS. Pre prenos ARGUMENTS pomocou UNIFORM INITIALIZATION [{}] platia nasledujuce pravidla.
   A. UNIFORM INITIALIZATION [{}] je mozne pouzit pre prenos tych PARAMETERS, ktore je mozne inicializovat pomocou UNIFORM INITIALIZATION [{}]. To znaci, ze pomocou UNIFORM INITIALIZATION [{}] je mozne prenasat lubovolne COLLECTIONS, vratane ARRAYS ako aj instancie CLASSES, ktore je mozne inicializovat pomocou UNIFORM INITIALIZATION [{}].
   !!! B. V pripade AMBIGUITY je VZDY uprednostnena FUNCTION, ktora ma ako PARAMETER TYPE [initializer_list]. Toto pravidlo sa aplikuje pre PARAMETER TYPE [initializer_list], ale NIE pre PARAMETER TYPE [initializer_list&] ci PARAMETER TYPE [const initializer_list&].
32. C++ umoznuje definovat FUNCTIONS, ktore maju VARIABILNY POCET a TYPES svojich PARAMETERS nasledujucimi sposobmi.
   A. C++ podporuje ELLIPSE PARAMETERS [...], ktore umoznuju do FUNCTIONS zaslat lubovolny POCET a TYPES PARAMETERS.
   B. VARIADIC TEMPLATE FUNCTIONS, ktore umoznuju do FUNCTIONS zaslat lubovolny POCET a TYPES PARAMETERS.
33. Pre ELLIPSE PARAMETERS [...] platia nasledujuce fakty.
   A. FUNCTION moze pouzivat IBA 1 ELLIPSE PARAMETER.
   B. ELLIPSE PARAMETER MUSI byt zadany ako POSLEDNY PARAMETER danej FUNCTION.
   C. FUNCTION s ELLIPSE PARAMETER moze mat LUBOVOLNY POCET ARGUMENTS.
   D. Pristup k ARGUMENTS FUNCTIONS s ELLIPSE PARAMETERS sa vykonava pomocou MACROS definovanych v LIBRARY <cstrarg>.
   E. TYPE [va_list] reprezentuje ARGUMENTS, ktore su prenesene pomocou ELLIPSE PARAMETER.
   F. MACRO va_start() zacina iteraciu ARGUMENTS, ktore su prenesene pomocou ELLIPSE PARAMETER.
   !!! G. MACRO va_end() ukoncuje iteraciu ARGUMENTS, ktore su prenesene pomocou ELLIPSE PARAMETER. MACRO va_end() vracia STACK do korektneho stavu, preto je KLUCOVE ju VZDY po skonceni iterovania volat.
   H. MACRO va_arg() umoznuje ziskat ARGUMENT, pricom ho konvertuje na TYPE, ktory je zaslany ako ARGUMENT do MACRO. Je na logike CODE, aby TYPE ARGUMENT bol identicky s TYPE, ktory je zaslany do MACRO va_arg().
34. C++ umoznuje definovat DEFAULT ARGUMENTS pre FUNCTION PARAMETERS. Pre DEFAULT ARGUMENTS platia nasledujuce fakty.
   A. DEFAULT ARGUMENTS MUSIA byt zadane iba v 1. DECLARATION a v DEFINITION sa NESMU OPAKOVAT, ani mat odlisne VALUES.
   B. DEFAULT ARGUMENTS MUSIA byt ako POSLEDNE PARAMETERS danej FUNCTION. FUNCTION ich moze mat viac, no MUSIA byt na POSLEDNYCH POZICIACH.
   C. DEFAULT ARGUMENTS su EVALUATED v RUNTIME pri volani FUNCTION.
35. C++ podporuje mechanizmus FUNCTION OVERLOADING, kedy viacero FUNCTIONS moze mat priradene rovnaky NAME a lisi sa iba v pocet a TYPES svojich PARAMETERS. COMPILER je schopny vybrat, ktora FUNCTION sa ma pre zadane ARGUMENTS volat. Pre FUNCTION OVERLOADING platia nasledujuce fakty.
   A. FUNCTION OVERLOADING umoznuje, aby viacero FUNCTIONS malo priradeny rovnaky NAME, pricom FUNCTIONS sa vzajomne lisia iba podla poctu a TYPES svojich PARAMETERS.
   B. COMPILER urcuje, ktora OVERLOADED FUNCTION sa ma volat aplikovanim RESOLUTION RULES, ktore predstavuju zoznam RULES, ktore sa vyhodnocuju od RULE s najvyssou prioritou az po RULE s najnizsou prioritou.
   C. RESOLUTION RULES sa aplikuju podla PRIRORITY pricom plati, ze ak COMPILER najde RULE, ktory vyhovuje danej FUNCTION, RULES s NIZSOU PRIORITOU uz NEAPLIKUJE.
   !!! D. Ak COMPILER najde RULE s ROVNAKOU PRIORITOU, ktory dokaze aplikovat na VIACERO FUNCTIONS, tak COMPILER hodi COMPILATION ERROR.
   !!! E. FUNCTION RESOLUTION sa NEVYKONAVA na zaklade RETURN VALUES. RETURN VALUES su pri urcovani, ktora OVERLOADED FUNCTION sa ma volat IGNOROVANE.
36. C++ pre OVERLOADED FUNCTIONS aplikuje nasledujuce RESOLUTION RULES. RESOLUTION RULES su zoradene podla svojej PRIORITY.
   A. EXACT MATCH. OVERLOADED FUNCTION musi mat bud IDENTICKY POCET a TYPES PARAMETERS ako zaslane ARGUMENTS, alebo sa aplikuju iba TRIVIAL CONVERSIONS ako su konverzie ARRAYS na POINTERS, FUNCTION NAMES na POINTERS, alebo TYPE na CONST TYPE.
   B. MATCH USING PROMOTIONS. OVERLOADED FUNCTION musi mat IDENTICKY POCET PARAMETERS ako su zadane ARGUMENTS, pricom pre TYPES je mozne vykonat PROMOTIONS ako napriklad BOOL na INT, INT na LONG, UNSIGNED SHORT na UNSIGNED INT ci FLOAT na DOUBLE.
   C. MATCH USING STANDARD CONVERSIONS. OVERLOADED FUNCTION musi mat IDENTICKY POCET PARAMETERS ako su zadane ARGUMENTS, pricom pre TYPES je mozne vykonat STANDARD CONVERSIONS ako napriklad INT na DOUBLE, DOUBLE na INT, DOUBLE na LONG DOUBLE, INT na UNSIGNED INT, DERIVED* na BASE* ci TYPE* na VOID*.
   D. MATCH USING USER DEFINED CONVERSIONS. OVERLOADED FUNCTION musi mat IDENTICKY POCET PARAMETERS ako su zadane ARGUMENTS, pricom pre TYPES je mozne vykonat USER DEFINED CONVERSIONS ako napriklad DOUBLE na COMPLEX<DOUBLE>.
   E. MATCH USING ELLIPSES. OVERLOADED FUNCTION pouziva ELLIPSES PARAMETER, ktory je mozne substituovat lubovolnym POCTOM a TYPES zadanych ARGUMENTS.
!!! 37. OVERLOADED FUNCTIONS, ktore sa beru do uvahy pri FUNCTION RESOLUTION su IBA TIE, ktore su deklarovane v TOM ISTOM SCOPE. To znaci, ze FUNCTIONS, ktore maju ROVNAKY NAME, no su deklarovane v INOM SCOPE su IGNOROVANE pri FUNCTION RESOLUTION.
   A. Pri OVERLOADED FUNCTION RESOLUTION sa beru do uvahy FUNCTION s rovnakym NAME v CURRENT SCOPE. Ak je definovana FUNCTION, ktora ma ROVNAKY NAME, no je definovane v PARENT SCOPE, pricom v CURRENT SCOPE je definovana FUNCTION v ROVNAKYM NAME, FUNCTIONS v PARENT SCOPE su IGNOROVANE.
   B. PARENT CLASSES sa v DERIVED CLASSES povazuju za NON-CURRENT SCOPES. To znaci, ze ak v DERIVED CLASS su definovane FUNCTIONS s ROVNAKYM NAME ako v PARENT CLASSES, tak FUNCTIONS v PARENT CLASSES su IGNOROVANE pri OVERLOADED FUNCTION RESOLUTION.
   C. Iny NAMESPACE je povazovany za NON-CURRENT SCOPE. To znaci, ze ak v CURRENT NAMESPACE su definovane FUNCTIONS s ROVNAKYM NAME ako v OTHER NAMESPACES, tak FUNCTIONS v OTHER NAMESPACES su IGNOROVANE pri OVERLOADED FUNCTION RESOLUTION.
!!! 38. Pri OVERLOADED FUNCTION RESOLUTION ak maju OVERLOADED FUNCTIONS VIACERO PARAMETERS, RESOLUTION sa vykonava nasledujucim sposobom.
   A. Pre KAZDY ARGUMENT sa najde OVERLOADED FUNCTION, podla kriterii na vyhodnocovanie ARGUMENTS pri OVERLOADED FUNCTION RESOLUTION.
   B. FUNCTION, ktora BEST MATCH pre jeden ARGUMENT a pre ostatne ARGUMENTS je EQUAL, alebo BETTER MATCH (RULE, ktory sa aplikoval na dany ARGUMENT ma ROVNAKU alebo VYSSIU PRIORITU), takato OVERLOADED FUNCTION je vybrana ako vysledok OVERLOADED FUNCTION RESOLUTION.
   C. Ak sa takato FUNCTION nenajde, alebo sa najde VIACERO FUNCTIONS, je OVERLOADED FUNCTION RESOLUTION NEUSPESNY a COMPILER hodi ERROR.
39. POINTER na FUNCTION je POINTER obsahujuci ADDRESS danej FUNCTION. Pre POINTERS na FUNCTIONS platia nasledujuce fakty.
   A. POINTER na FUNCTION sa definuje pomocou SYNTAX [RETURN_VALUE_TYPE (POINTER_TO_FUNCTION_VARIABLE_NAME*)(PARAMETER_TYPE_1, PARAMETER_TYPE_2, ..., PARAMETER_TYPE_N)].
   !!! B. Do POINTER na FUNCTION sa prideluje ADDRESS pomocou OPERATOR&. Pouzitie OPERATOR& je OPTIONAL. C++ dokaze detekovat pokus o priradenie ADDRESS danej FUNCTION do POINTER na FUNCTION, a preto pouzitie OPERATOR& NIE JE POVINNE.
   !!! C. Volanie FUNCTION na ktoru ukazuje POINTER na FUNCTION sa robi pomocou OPERATOR*. Pouziva sa SYNTAX [RETURN_VALUE=(*POINTER_TO_FUNCTION_VARIABLE_NAME)(ARGUMENT_1,ARGUMENT_2,...,ARGUMENT_N)]. Pouzitie OPERATOR* NIE JE POVINNE. C++ umoznuje volat FUNCTION na ktoru odkazuje POINTER na FUNCTION aj pomocou SYNTAXE [RETURN_VALUE=POINTER_TO_FUNCTION_VARIABLE_NAME(ARGUMENT_1,ARGUMENT_2,...,ARGUMENT_N)].
   !!!!! D. Do POINTER na FUNCTION je mozne priradit ADDRESS IBA na TIE FUNCTIONS, ktore maju ROVNAKY PROTOTYPE, VRATANE RETURN VALUE TYPE. To znaci, ze PROTOTYPE FUNCTION a POINTER na FUNCTION MUSI byt UPLNE IDENTICKY, inak COMPILER hodi ERROR. Jedinou vynimkou je, moznost do priradit NOEXCEPT FUNCTION do POINTER NA FUNCTION, ktory nema v PROTOTYPE NOEXEPT.
   E. V pripade, ze sa do POINTER na FUNCTION priradzuje ADDRESS FUNCTION, ktora je OVERLOADED, C++ COMPILER vyberie IBA tu verziu, ktora ma PROTOTYPE UPLNE IDENTICKY s PROTOTYPE POINTER na FUNCTION. Ak taka OVERLOADED FUNCTION NEEXISTUJE, COMPILER hodi ERROR.
   !!! F. POINTERS na FUNCTIONS je mozne konvertovat na ine typy POINTERS na FUNCTIONS pomocou KEYWORD [reinterpret_cast<POINTER_TO_FUNCTION_TYPE>(POINTER_TO_FUNCTION)]. Jedna sa vsak o EXTREMNE NEBEZPECNU KONVERZIU, ktora moze sposobit, ze PROGRAM sa dostane do UNDEFINED BEHAVIOR.
   G. PROTOTYPE POINTERS na FUNCTIONS sa musi zhodovat s PROTOTYPE ADDRESS priradzovanej FUNCTION aj v LINKAGE.
40. C++ umoznuje definovat MACROS. Pre MACROS platia nasledujuce fakty.
   A. MACRO je VZDY interpretovane pomocou PREPROCESSOR, ktory nahradzuje MACRO za jeho CONTENT este PRED vykonanim COMPILATION.
   B. MACRO je definovane pomocou KEYWORD [#define].
   C. MACRO moze byt BEZPARAMETRICKE, alebo PARAMETRICKE, kde PARAMETERS su ulozene v ZATVORKACH [()].
   D. C++ podporuje aj VARIADIC MACROS, ktore na oznacenie nedefinovaneho poctu PARAMETERS pouzivat IDENTIFIER [...]. V tele MACRO je mozne rozvinut tieto PARAMETERS pomocou KEYWORD [__VA_ARGS__].
   E. MACROS NEMOZU byt OVERLOADED podla poctu PARAMETERS. Nova definicia MACRO NAHRADZUJE povodnu definiciu MACRO.
   F. MACROS NEMOZU byt RECURSIVE.
   G. V MACRO je mozne pouzit OPERATOR#, ktory sa transformuje na TEXTOVY NAZOV zaslaneho PARAMETER.
   H. V MACRO je mozne pouzit OPERATOR##, ktory zlucuje TEXTOVE NAZVY PARAMETERS, alebo STRING LITERALS.
   I. Pomocou KEYWORD [#undef] moze byt MACRO UNDEFINED, takze ho uz nie je mozne pouzit.
!!! 41. Pouzivanie MACROS je potencialne NEBEZPECNE, pretoze moze viest k SIDE EFFECTS, ktore zneprehladnuju CODE.
42. MACROS je mozne pouzit na implementaciu CONDITIONAL COMPILATION. Pri CONDITIONAL COMPILATION MACROS definuju podmienky, ktore urcuju, ktore casti CODE budu COMPILED a ktore casti CODE bude COMPILER ignorovat. C++ definuje nasledujuce DIRECTIVES pomocou, ktorych je mozne vykonavat CONDITIONAL COMPILATION.
   A. DIRECTIVE [#if EXPRESSION] vlozi CODE za DIRECTIVE ak EXPRESSION 'EXPRESSION' ma VALUE TRUE. EXPRESSION moze obsahovat KEYWORD [defined(IDENTIFIER)] na testovanie ci bol definovany IDENTIFIER 'IDENTIFIER'.
   B. DIRECTIVE [#elif EXPRESSION] vlozi CODE za DIRECTIVE ak EXPRESSION 'EXPRESSION' ma VALUE TRUE. DIRECTIVE [#elif] musi predchadzat DIRECTIVE [#if]. EXPRESSION moze obsahovat KEYWORD [defined(IDENTIFIER)] na testovanie ci bol definovany IDENTIFIER 'IDENTIFIER'.
   C. DIRECTIVE [#ifdef IDENTIFIER] vlozi CODE za DIRECTIVE ak IDENTIFIER 'IDENTIFIER' je DEFINED pomocou DIRECTIVE [#define].
   D. DIRECTIVE [#ifndef IDENTIFIER] vlozi CODE za DIRECTIVE ak IDENTIFIER 'IDENTIFIER' NIE je DEFINED.
   E. DIRECTIVE [#else] vlozi CODE za DIRECTIVE ak predchadzajuca 'IF' DIRECTIVE vratila VALUE FALSE.
   F. DIRECTIVE [#endif] oznacuje koniec CONDITIONAL COMPILATION bloku.
43. C++ STANDARD definuje nasledujuce MACROS, ktore je mozne pouzit.
   A. MACRO [__DATE__] obsahuje CURRENT DATE.
   B. MACRO [__TIME__] obsahuje CURRENT TIME.
   C. MACRO [__FILE__] obsahuje nazov CURRENT FILE z ktoreho je MACRO volane.
   D. MACRO [__LINE__] obsahuje cislo CURRENT LINE z ktorej je MACRO volane.
   E. MACRO [__FUNCTION__] obsahuje nazov CURRENT FUNCTION z ktorej je MACRO volane.
   F. MACRO [__cplusplus] obsahuje VERSION C++, ktoru COMPILER podporuje.
44. C++ STANDARD definuje DIRECTIVE [#pragma], ktora umoznuje definovat COMPILER SPECIFIC EXTENSIONS.
//-----------------------------------------------------------------------------