//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include "MyDebug.h"
//----------------------------------------------------------------------------------------------------------------------
// !!! VARIABLE DECLARATION.
extern int DeclarationsVsDefinitionsVariable;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE VARIABLE DECLARATION a DEFINITION.
template<typename TType>
TType DeclarationsVsDefinitionsVariableTemplate=TType(100);
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! FUNCTION DECLARATION.
void DeclarationsVsDefinitionsPrint(int Value);
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE FUNCTION DECLARATION.
template<typename TType>
void DeclarationsVsDefinitionsPrintTemplate(TType Value);
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE FUNCTION DEFINITION.
template<typename TType>
void DeclarationsVsDefinitionsPrintTemplate(TType Value)
{
	std::wcout << L"TEMPLATE FUNCTION - TYPE [" << GetTypeInfoName<TType>() << L"] VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! CLASS DECLARATION.
class CDeclarationsVsDefinitions;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! CLASS DEFINITION.
class CDeclarationsVsDefinitions
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		int														MField;

	public:
		// !!! METHOD DECLARATION.
		void Print(void) const;

	public:
		// !!! CONSTRUCTOR DECLARATION.
		CDeclarationsVsDefinitions(int Field);
		// !!! DESTRUCTOR DECLARATION.
		virtual ~CDeclarationsVsDefinitions(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE CLASS DECLARATION.
template<typename TType>
class CDeclarationsVsDefinitionsTemplate;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE CLASS DEFINITION.
template<typename TType>
class CDeclarationsVsDefinitionsTemplate
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		TType													MField;

	public:
		// !!! TEMPLATE METHOD DECLARATION.
		void Print(void) const;

	public:
		// !!! TEMPLATE CONSTRUCTOR DECLARATION.
		CDeclarationsVsDefinitionsTemplate(TType Field);
		// !!! TEMPLATE DESTRUCTOR DECLARATION.
		virtual ~CDeclarationsVsDefinitionsTemplate(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! CONSTRUCTOR DEFINITION.
template<typename TType>
CDeclarationsVsDefinitionsTemplate<TType>::CDeclarationsVsDefinitionsTemplate(TType Field)
	: MField(Field)
{
}
//----------------------------------------------------------------------------------------------------------------------
// !!! DESTRUCTOR DEFINITION.
template<typename TType>
CDeclarationsVsDefinitionsTemplate<TType>::~CDeclarationsVsDefinitionsTemplate(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! METHOD DEFINITION.
template<typename TType>
void CDeclarationsVsDefinitionsTemplate<TType>::Print(void) const
{
	std::wcout << L"TEMPLATE CLASS METHOD - TYPE [" << GetTypeInfoName<TType>() << L"] FIELD [" << MField << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------