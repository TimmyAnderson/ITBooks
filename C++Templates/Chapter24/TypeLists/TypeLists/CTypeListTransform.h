//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "CTypeList.h"
#include "CTypeListIsEmpty.h"
#include "CTypeListFront.h"
#include "CTypeListPushFront.h"
#include "CTypeListPopFront.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! 1. TEMPLATE PARAMETER je TYPE LIST a 2. TEMPLATE PARAMETER OPERATION, ktora sa ma aplikovat na kazdy TYPE v TYPE LIST.
template<typename TTypeList, template<typename> class TOperation, bool EMPTY=CTypeListIsEmpty<TTypeList>>
class CTypeListTransformType;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! OPERATION odstrani FRONT TYPE z TYPE LIST, modifikuje ho pomocoi OPERATION a nasledne ho vlozi na zaciatok TYPE LIST. A tento ALGORITHM sa robi rekurzivne.
template<typename TTypeList, template<typename> class TOperation>
class CTypeListTransformType<TTypeList,TOperation,false> : public CTypeListPushFrontType<typename CTypeListTransformType<CTypeListPopFront<TTypeList>,TOperation>::TYPE,typename TOperation<CTypeListFront<TTypeList>>::TYPE>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList, template<typename> class TOperation>
class CTypeListTransformType<TTypeList,TOperation,true>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													TYPE=TTypeList;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList, template<typename> class TOperation>
using															CTypeListTransform=typename CTypeListTransformType<TTypeList,TOperation>::TYPE;
//----------------------------------------------------------------------------------------------------------------------