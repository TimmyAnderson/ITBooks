//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "CTypeList.h"
#include "CTypeListIsEmpty.h"
#include "CTypeListFront.h"
#include "CTypeListPushFront.h"
#include "CTypeListPopFront.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! 1. TEMPLATE PARAMETER je TYPE LIST, 2. TEMPLATE PARAMETER je novy TYPE, ktory ma byt do TYPE LIST pridany a 3. TEMPLATE PARAMETER urcuje ci TYPE LIST je EMPTY.
template<typename TTypeList, typename TNewType, bool EMPTY=CTypeListIsEmpty<TTypeList>>
class CTypeListPushBack2Type;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList, typename TNewType>
class CTypeListPushBack2Type<TTypeList,TNewType,false>
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		// !!! TYPE obsahuje 1. TYPE v TYPE LIST.
		using													Head=CTypeListFront<TTypeList>;

		// !!! TYPE obsahuje ostatne TYPES okrem 1. TYPE v TYPE LIST.
		using													Tail=CTypeListPopFront<TTypeList>;

		// !!! Novy TAIL, ktory obsahuje ostatne TYPES s pridanym novym TYPE na koniec TYPE LIST.
		using													NewTail=typename CTypeListPushBack2Type<Tail,TNewType>::TYPE;

	public:
		using													TYPE=CTypeListPushFront<NewTail,Head>;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList, typename TNewType>
class CTypeListPushBack2Type<TTypeList,TNewType,true>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													TYPE=CTypeListPushFront<TTypeList,TNewType>;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList, typename TNewType>
using															CTypeListPushBack2=typename CTypeListPushBack2Type<TTypeList,TNewType>::TYPE;
//----------------------------------------------------------------------------------------------------------------------