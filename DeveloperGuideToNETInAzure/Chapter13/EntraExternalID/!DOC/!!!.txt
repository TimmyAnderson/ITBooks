//----------------------------------------------------------------------------------------------------------------------
1. SOLUTION demonstruje pouzitie ENTRA EXTERNAL ID v ASP.NET CORE.
2. ENTRA EXTERNAL ID umoznuje EXTERNAL IDENTITIES bezpecne pristupovat k RESOURCES daneho PROGRAMU. K EXTERNAL IDENTITIES patria IDENTITIES overene inymi firmami ci IDENTITY PROVIDERS ako GOOGLE, alebo FACEBOOK.
3. ENTRA EXTERNAL ID je mozne pouzit v nasledujucich CONFIGURATIONS.
   A. EXTERNAL CONFIGURATION.
   B. WORKFORCE CONFIGURATION.
4. Pre EXTERNAL CONFIGURATION platia nasledujuce fakty.
   A. EXTERNAL CONFIGURATION umoznuje PROGRAMOM COMPANY [A] pouzit ENTRA EXTERNAL ID, aby spristupnila tieto PROGRAMY USERS COMPANY [A] i USERS COMPANY [B]. ENTRA EXTERNAL ID sa pouziva na vykonanie AUTHENTICATION a AUTHORIZATION USERS.
   !!!!! B. Pri EXTERNAL CONFIGURATION su USER OBJECTS COMPANY [A] vytvorene pre dany PROGRAM NEZAVISLE od USER OBJECTS COMPANY [A], ktore USERS COMPANY [A] pouzivaju na pristup inym RESOURCES COMPANY [A].
   C. Pri EXTERNAL CONFIGURATION je SELF SIGN-IN proces plne CUSTOMIZABLE.
      A. Pri SELF SIGN-IN REGISTRATION PROCESS sa definuju STEPS, ktore musia USERS pri REGISTRATION PROCESS vykonat, ako aj sposob AUTHENTICATION.
      B. Vizualne zobrazenie REGISTRATION PROCESS je plne CUSTOMIZABLE.
      C. Zoznam informacii, ktore sa pri REGISTRATION PROCESS zbieraju od USERS je definovany bud pomocou BUILT IN ATTRIBUTES, alebo aj pomocou CUSTOM ATTRIBUTES.
   !!! D. Pri pouziti EXTERNAL CONFIGURATION USERS mozu pouzit svoje existujuce IDENTITIES.
5. WORKFORCE CONFIGURATION. Pre WORKFORCE CONFIGURATION platia nasledujuce fakty.
   !!! A. WORKFORCE CONFIGURATION umoznuje BUSINESS-TO-BUSINESS COLLABORATION. To znamena, ze USERS COMPANY [A] mozu spolupracovat s USERS COMPANY [B], bez toho, aby si USERS COMPANY [B] museli vytvarat ACCOUNTS v COMPANY [A].
   B. Pri WORKFORCE CONFIGURATION COMPANY [A] moze pozvat USERS COMPANY [B], aby sa prihlasili k ENTRA EXTERNAL ID COMPANY [A] pomocou CREDENTIALS COMPANY [B] a nasledne pouzivali RESOURCES COMPANY [A], ktore COMPANY [A] pre COMPANY [B] nazdiela.
   C. Pri WORKFORCE CONFIGURATION sa USERS COMPANY [B] prihlasuju na ENTRA EXTERNAL ID COMPANY [A] pomocou CREDENTIALS COMPANY [B]. A COMPANY [A] nasledne verifikuje ci USERS COMPANY [B] su opravneni pristupit k pozadovanym RESOURCES COMPANY [A].
   D. WORKFORCE CONFIGURATION umoznuje nasledujuce sposoby ako COMPANY [A] moze spristupnit svoje RESOURCES pre USERS COMPANY [B].
      A. INIVITATION. Pre INVITATION platia nasledujuce fakty.
         A. COMPANY [A] pozve USERS COMPANY [B], aby pouzili svoje interne ENTRA EXTERNAL ID ACCOUNTS, alebo SOCIAL IDENTITY ACCOUNTS, ako napriklad od GOOGLE na pristup k RESOURCES COMPANY [A].
         B. ADMINISTRATORS COMPANY [A] moze pomocou ENTRA ADMIN CENTER, alebo POWER SHELL odoslat pozvanky USERS COMPANY [B].
         C. USERS COMPANY [B] sa pri pristupe k RESOURCES COMPANY [B] prihlasia pomocou svojich ENTRA EXTERNAL ID ACCOUNTS, alebo SOCIAL IDENTITY ACCOUNTS, aby ziskali pristup k RESOURCES COMPANY [A].
      B. SELF SIGN-IN. Pre SELF SIGN-IN platia nasledujuce fakty.
         A. Pri SELF SIGN-IN nie je nutne odosielat INIVITATIONS, ale USERS COMPANY [B] sa sami mozu prihlasit pomocou svojich ACCOUNTS na pristup k RESOURCES COMPANY [A].
         B. Pri SELF SIGN-IN je mozne urcit ake typy ACCOUNTS COMPANY [B] COMPANY [A] umozni pristup. Ci umozni pristup pracovnym HOME ACCOUNTS, WORK ACCOUNTS, alebo SOCIAL  ACCOUNTS.
         C. Pri SELF SIGN-IN moze COMPANY [A] zbierat informacie, ktore poskytnu USERS COMPANY [B].
   !!! E. Pri WORKFORCE CONFIGURATION USER OBJECTS vytvorene pre USERS COMPANY [B] sa nachadzaju v tom istom DIRECTORY ako USER OBJECTS COMPANY [A]. Preto tieto USER OBJECTS je mozne spravovat rovnako a USER OBJECTS COMPANY [B] je mozne zaradzovat do USER GROUPS COMPANY [A], ako keby to boli interni USERS COMPANY [A].
6. ENTRA TENANT je dedikovana instancia ENTRA EXTERNAL ID, ktora obsahuje nasledujuce data.
   A. RESOURCES, vratane zaregistrovanych PROGRAMS ku ktorym je pomocou ENTRA EXTERNAL ID pristupit.
   B. USERS DIRECTORY, ktory obsahuje zoznam povolenych USERS, ktori sa mozu k ENTRA EXTERNAL ID prihlasovat.
7. ENTRA EXTERNAL ID podporuje nasledujuce typy TENANTS.
   A. WORKFORCE TENANT.
   B. EXTERNAL TENANT.
8. Pre WORKFORCE TENANT platia nasledujuce fakty.
   !!! A. WORKFORCE TENANT je standardny ENTRA TENANT, ktory obsahuje nasledujuce RESOURCES.
      A. INTERNAL USERS danej COMPANY.
      B. INTERNAL BUSINESS PROGRAMS, ktore vyuziva dana COMPANY.
      C. Ine RESOURCES, ktore vyuziva dana COMPANY.
   B. Vo WORKFORCE TENANT INTERNAL USERS COMPANY [A] mozu vykonavat COLLABORATION s USERS COMPANY [B] pomocou BUSINESS-TO-BUSINESS COLLABORATION.
   C. WORKFORCE TENANT je automaticky vytvoreny pri registracii danej COMPANY v AZURE.
9. Pre EXTERNAL TENANT platia nasledujuce fakty.
   A. EXTERNAL TENANT obsahuje nasledujuce RESOURCES.
      A. USER DIRECTORY. USER DIRECTORY obsahuje CUSTOMER CREDENTIALS a PROFILE DATA COMPANY [B]. Ak EXTERNAL USER sa prihlasi do EXTERNAL TENANT, tak sa pren vytvori novy RECORD v USER DIRECTORY.
      B. PROGRAM REGISTRATIONS. PROGRAM REGISTRATIONS obsahuje zoznam PROGRAMS, ktore su v EXTERNAL TENANT spristupne EXTERNAL USERS v COMPANY [B]. Registrovat je mozne iba PROGRAMS, ktore pre AUTHENTICATION pouzivaju bud PROTOCOL [OpenID Connect], alebo PROTOCOL [Security Assertion Markup Language] a SINGLE SIGN-ON.
      C. USER FLOWS. EXTERNAL TENANT obsahuje SELF SERVICE SIGN-UP, SIGN-IN a PASSWORD RESET, ktore je mozne povolit EXTERNAL USERS.
      D. EXTENSIONS. EXTERNAL TENANT umoznuje pomocou EXTENSIONS pridat CUSTOM ATTRIBUTES a DATA z EXTERNAL SYSTEMS, ktore rozsiria USER FLOWS.
      E. SIGN-IN METHODS. EXTERNAL TENANT umoznuje vyber z mnozstva SIGN-IN METHODS, vratane USERNAME/PASSWORD, ONE-TIME PASSCODE ci EXTERNAL AUTHENTICATION PROVIDERS ako GOOGLE ci FACEBOOK.
      F. ENCRYPTION KEYS. EXTERNAL TENANT umoznuje pridavanie a manazment ENCRYPTION KEYS pre SIGNING, TOKEN VALIDATION, CLIENT SECRETS, CERTIFICATES ci PASSWORDS.
   !!!!! B. EXTERNAL TENANT sa VYLUCNE pouziva, ak PROGRAMY COMPANY [A], ktore maju byt pristupne aj pre USERS COMPANY [B].
   C. EXTERNAL TENANT sa vytvara manualne, ak COMPANY [A] potrebuje spristupnit svoje PROGRAMY COMPANY [B].
!!!!! 10. EXTERNAL TENANTS sa vytvaraju v MICROSOFT ENTRA ADMIN CENTER. Vytvaranie EXTERNAL TENANTS pomocou COMANND LINE INTERFACE (CLI) ci POWER SHELL NIE JE MOZNE.
11. ENTRA EXTERNAL ID v EXTERNAL CONFIGURATION podporuje CUSTOMER IDENTITY AND ACCESS MANAGEMENT (CIAM). Pre CUSTOMER IDENTITY AND ACCESS MANAGEMENT platia nasledujuce fakty.
   A. CUSTOMER IDENTITY AND ACCESS MANAGEMENT je system na ukladanie DIGITAL IDENTITIES EXTERNAL USERS, ako su CUSTOMERS ci BUSINESS PARTNERS.
   B. Na rozdiel od IDENTITY AND ACCESS MANAGEMENT (IAM) je CUSTOMER IDENTITY AND ACCESS MANAGEMENT (CIAM) je urceny na ukladanie IDENTITIES EXTERNAL USERS, nie INTERNAL USERS.
12. EXTERNAL TENANT obsahuje nasledujuce typy USERS.
   A. ADMINISTRATORS. ADMINISTRATORS vykonavaju spravu EXTERNAL TENANT.
   B. CUSTOMER ACCOUNTS. CUSTOMER ACCOUNTS su EXTERNAL USERS, ktori vyuzivaju PROGRAMS, ktore su zaregistrovane v EXTERNAL TENANT.
13. ENTRA EXTERNAL ID je implementovana v nasledujucich PACKAGES.
   A. PACKAGE [Microsoft.Identity.Web.UI] sa pouziva vo WEB PAGES PROGRAM.
   B. PACKAGE [Microsoft.Identity.Web] sa pouziva vo WEB API PROGRAM a CONSOLE PROGRAMS.
14. EXTERNAL TENANT sa vytvara v nasledujucich krokoch.
   !!! A. EXTERNAL TENANT sa vytvara pomocou MICROSOFT ENTRA WEB PAGE. MICROSOFT ENTRA NEPODPORUJE POWER SHELL ani CLI.
   B. V MENU [Overview -> Manage tenants] sa vyberie BUTTON [Create].
   C. Vyberie sa OPTION [External] a stlaci BUTTON [Continue].
   D. V TAB [Basics] je nutne nastavit nasledujuce SETTINGS a stlacit BUTTON [Next: Add a subscription].
      A. SETTINGS [Tenant Name] sa nastavi na VALUE [MyEntraExternalID].
      B. SETTINGS [Domain Name] sa nastavi na VALUE [MyEntraExternalID].
      C. SETTINGS [Country/Region] sa nastavi na VALUE [United States].
   E. V TAB [Add a subscription] je nutne nastavit nasledujuce SETTINGS a stlacit BUTTON [Next: Review + create].
      A. SETTINGS [Subscription] sa nastavi na VALUE [My Subscription].
      B. SETTINGS [Resource group] sa nastavi na VALUE [Chapter13].
   F. Na SCREEN [Create a tenant] sa stlaci BUTTON [Create].
   G. DEFAULT TENANT sa nastavuje na SCREEN [Portal Settings], ku ktorej sa da dostat stlacenim SETTING BUTTON.
15. WEB API PROGRAM sa v EXTERNAL TENANT registruje nasledujucim sposobom.
   A. EXTERNAL TENANT sa nastavi ako DEFAULT TENANT pomocou SCREEN [Portal Settings], ku ktorej sa da dostat stlacenim SETTING BUTTON.
   B. V MENU [App registrations] sa vyberie BUTTON [New registration], kde sa nastavia nasledujuce SETTINGS a nasledne stlaci BUTTON [Register].
      A. SETTINGS [Name] sa nastavi na VALUE [entra-external-ID-web-api].
      B. SETTINGS [Supported account types] sa nastavi na VALUE [Accounts in this organizational directory only].
   C. V MENU [App registrations] sa vyberie TAB [All applications] a PROGRAM [entra-external-ID-web-api].
   !!! D. Z MENU [App registrations -> Overview] je potrebne ulozit si SETTINGS, ktore su potrebne pre nakonfigurovanie ASP.NET CORE PROGRAMU u CLIENT PROGRAMU. Cast SETTINGS je v TAB [Endpoints].
   E. Z MENU [App registrations -> Overview] je potrebne vytvorit APPLICATION ID URL. To sa vytvara klepnutim na LINK [Add an Application ID URI] a vykonanim naslednych krokov.
      A. Na SCREEN [Expose an API] sa stlaci na LINK [Application ID URI - Add], ktory vytvori APPLICATION ID URL. Vygenerovane URL ma FORMAT [api://GUID], kde VALUE [GUID] je identicka s GUID vo VALUE [Application (client) ID].
      B. Na SCREEN [Expose an API] sa sa prida nova SCOPE s nasledujucimi SETTINGS.
         A. SETTINGS [Scope name] sa nastavi na VALUE [EntraExternalIDWebAPI.Read].
         B. SETTINGS [Who can consent?] sa nastavi na VALUE [Admins only].
         C. SETTINGS [Admin consent display name] sa nastavi na VALUE [Read users using PROGRAM [EntraExternalIDWebAPI].].
         D. SETTINGS [Admin consent description] sa nastavi na VALUE [Allow to READ from PROGRAM [EntraExternalIDWebAPI].].
         E. SETTINGS [State] sa nastavi na VALUE [Enabled].
      C. Na SCREEN [Expose an API] sa sa prida nova SCOPE s nasledujucimi SETTINGS.
         A. SETTINGS [Scope name] sa nastavi na VALUE [EntraExternalIDWebAPI.ReadWrite].
         B. SETTINGS [Who can consent?] sa nastavi na VALUE [Admins only].
         C. SETTINGS [Admin consent display name] sa nastavi na VALUE [Read/write users using PROGRAM [EntraExternalIDWebAPI].].
         D. SETTINGS [Admin consent description] sa nastavi na VALUE [Allow to READ/WRITE from PROGRAM [EntraExternalIDWebAPI].].
         E. SETTINGS [State] sa nastavi na VALUE [Enabled].
   F. Z MENU [App registrations -> Add roles] je potrebne zaregistrovat ROLES stlacenim BUTTON [Create app role]. ROLES sa registruju v nasledujucich krokoch.
      A. Prida sa ROLE s nasledujucimi SETTINGS.
         A. SETTINGS [Display name] sa nastavi na VALUE [EntraExternalIDWebAPI.Read.All].
         B. SETTINGS [Allowed member types] sa nastavi na VALUE [Applications].
         C. SETTINGS [Value] sa nastavi na VALUE [EntraExternalIDWebAPI.Read.All].
         D. SETTINGS [Description] sa nastavi na VALUE [Allow to READ from PROGRAM [EntraExternalIDWebAPI].].
         E. SETTINGS [Do you want to enable this app role?] sa nastavi na VALUE [Yes].
      B. Prida sa ROLE s nasledujucimi SETTINGS.
         A. SETTINGS [Display name] sa nastavi na VALUE [EntraExternalIDWebAPI.ReadWrite.All].
         B. SETTINGS [Allowed member types] sa nastavi na VALUE [Applications].
         C. SETTINGS [Value] sa nastavi na VALUE [EntraExternalIDWebAPI.ReadWrite.All].
         D. SETTINGS [Description] sa nastavi na VALUE [Allow to READ/WRITE from PROGRAM [EntraExternalIDWebAPI].].
         E. SETTINGS [Do you want to enable this app role?] sa nastavi na VALUE [Yes].
16. WEB API PROGRAM vyuzivajuci AUTHENTICATION a AUTHORIZATION pomocou EXTERNAL TENANT sa implementuje v nasledujucich krokoch.
   A. WEB API PROGRAM musi byt zaregistrovany v EXTERNAL TENANT. Registracia musi obsahovat nasledujuce SETTINGS.
      A. SETTING [PROGRAM_NAME]. VALUE obsahuje nazov PROGRAMU zaregistrovaneho v EXTERNAL TENANT. Prikladom je VALUE [MyEntraExternalID].
      B. SETTING [INSTANCE_ID]. Standardne ma FORMAT [https://PROGRAM_NAME.ciamlogin.com/], kde VALUE [PROGRAM_NAME] reprezentuje SETTING [PROGRAM_NAME].
      C. SETTING [TENANT_ID]. Je to GUID, ktory je vytvoreny pri vytvoreni EXTERNAL TENANT. Prikladom je VALUE [ce01cc41-baa9-4e92-b2a0-10d891c18c5a].
      D. SETTING [CLIENT_ID]. Je to unikatny identifikator zaregistrovaneho PROGRAMU. Prikladom je VALUE [44cbea37-c6ee-4877-aa3b-8563198c769e].
      E. SETTING [SCOPES]. PROGRAM moze mat zaregistrovanych viacero SCOPES. Prikladom SCOPE je VALUE [EntraExternalIDWebAPI.ReadWrite].
      F. SETTING [APP_PERMISSIONS]. Tento SETTINGS urcuje ROLES, ktore mozu mat USERS pristupujuci k PROGRAMU. PROGRAM moze registrovat viacero APP PERMISIONS. Prikladom APP PERMISION je VALUE [EntraExternalIDWebAPI.ReadWrite.All].
   B. PROGRAM sa vo FILE [Program.cs] nakonfiguruje nasledujucim sposobom.
      A. Zavola sa METHOD [AuthenticationBuilder AddAuthentication(this IServiceCollection Services, string DefaultScheme)], ktorou sa zaregistruju SERVICES potrebne na realizaciu AUTHENTICATION.
      B. Zavola sa METHOD [MicrosoftIdentityWebApiAuthenticationBuilder AddMicrosoftIdentityWebApi(this AuthenticationBuilder Builder, Action<JwtBearerOptions> ConfigureJwtBearerOptions, Action<MicrosoftIdentityOptions> ConfigureMicrosoftIdentityOptions, string JwtBearerScheme, bool SubscribeToJwtBearerMiddlewareDiagnosticsEvents)], ktorou sa nastavia CALLBACK METHODS, ktore umoznuju nakonfigurovat CLASS [JwtBearerOptions] a CLASS [MicrosoftIdentityOptions].
      C. V CALLBACK METHOD konfigurujucej CLASS [MicrosoftIdentityOptions] sa MINIMALNE nastavi PROPERTY [MicrosoftIdentityOptions.Instance], PROPERTY [MicrosoftIdentityOptions.TenantId] a PROPERTY [MicrosoftIdentityOptions.ClientId].
      D. Zavola sa METHOD [IApplicationBuilder UseAuthorization(this IApplicationBuilder App)], ktorou sa prida do HTTP REQUEST PIPELINE MIDDLEWARE COMPONENT realizujuci AUTHORIZATION.
   C. Vytvori sa SECURE CONTROLLER, ktory obsahuje SECURE METHODS. SECURE METHODS vyzaduju AUTHENTICATION a AUTHORIZATION pomocou EXTERNAL TENANT. SECURE CONTROLLER sa implementuje nasledujucim sposobom.
      A. Definuje sa CONTROLLER CLASS, ktory je DERIVED z CLASS [ControllerBase].
      B. CONTROLLER CLASS, alebo jednotlive METHODS sa oznacia pomocou ATTRIBUTE [Authorize], ktory vyzaduje, aby HTTP REQUESTS k tymto METHODS boli AUTHENTICATED a AUTHORIZED.
      C. METHODS sa oznacia pomocou ATTRIBUTE [RequiredScopeOrAppPermission]. Tento ATTRIBUTE urcuje zoznam SCOPES a zoznam APP PERMISSIONS, ktore musi HTTP REQUEST obsahovat, aby bol povoleny pristup k SECURE METHOD.
      D. V CODE METHODS je unikatny OBJECT ID, ktory identifikuje USER mozne ziskat volanim METHOD [string GetObjectId(this ClaimsPrincipal ClaimsPrincipal)].
      E. CLAIMS USER, ktory zavolal SECURE METHOD sa ziskava z PROPERTY [IEnumerable<Claim> ClaimsPrincipal.Claims].
17. WEB API CLIENT PROGRAM sa v EXTERNAL TENANT registruje nasledujucim sposobom.
   A. EXTERNAL TENANT sa nastavi ako DEFAULT TENANT pomocou SCREEN [Portal Settings], ku ktorej sa da dostat stlacenim SETTING BUTTON.
   B. V MENU [App registrations] sa vyberie BUTTON [New registration], kde sa nastavia nasledujuce SETTINGS a nasledne stlaci BUTTON [Register].
      A. SETTINGS [Name] sa nastavi na VALUE [entra-external-ID-web-cli].
      B. SETTINGS [Supported account types] sa nastavi na VALUE [Accounts in this organizational directory only].
   C. V MENU [App registrations] sa vyberie TAB [All applications] a PROGRAM [entra-external-ID-web-cli].
   !!! D. Z MENU [App registrations -> Overview] je potrebne ulozit si SETTINGS, ktore su potrebne pre nakonfigurovanie ASP.NET CORE PROGRAMU u CLIENT PROGRAMU. Cast SETTINGS je v TAB [Endpoints]. Je potrebne ulozit nasledujuce SETTINGS.
      A. SETTING [Application (client) ID].
      B. SETTING [Directory (tenant) ID].
   E. V MENU [App registrations -> Certificates & secrets] je potrebne vytvorit CLIENT CREDENTIALS klepnutim na LINK [New client secret]. CLIENT SECRET sa vytvara s nasledujucimi SETTINGS.
      A. SETTING [Description] musi byt nastavena na VALUE [ My client secret.].
      B. SETTING [Expires] musi byt nastavena na VALUE [180 days (6 months)].
   F. Po vytvoreni CLIENT SECRET je nutne ulozit nasledujuce VALUES.
      A. VALUE [Value].
      B. VALUE [Secret ID].
   G. V MENU [App registrations -> API permissions] sa klepnutim na LINK [Add a permission] vytvori PERMISSION nasledujucim sposobom.
      A. Vyberie sa TAB [APIs my organization uses].
      B. Vyberie sa API PERMISSION [entra-external-ID-web-api].
      C. Na SCREEN [Request API permissions] sa vyberie OPTION [Application permissions] a PERMISSION [EntraExternalIDWebAPI.Read.All] a PERMISSION [EntraExternalIDWebAPI.ReadWrite.All].
      D. Stlaci sa BUTTON [Add permissions].
      E. Na SCREEN [API permissions] sa vyberie BUTTON [Grant admin consent for MyEntraExternalID].
18. WEB API CLIENT PROGRAM pristupujuci k WEB API PROGRAM vyuzivajuci AUTHENTICATION a AUTHORIZATION pomocou EXTERNAL TENANT sa implementuje v nasledujucich krokoch.
   A. WEB API CLIENT PROGRAM musi byt zaregistrovany v EXTERNAL TENANT. Registracia musi obsahovat nasledujuce SETTINGS.
      A. SETTING [CLIENT_ID]. Je to unikatny identifikator zaregistrovaneho PROGRAMU. Prikladom je VALUE [3eaa4193-5f8c-4750-92d4-043f5b779543].
      B. SETTING [CLIENT_SECRET]. CLIENT SECRET sa vytvara pri registracii PROGRAMU. Prikladom je VALUE [tTY8Q~tu_ehOF_n_V1FuyLKABV~om6RMydnvPdpC].
      C. SETTING [SCOPES]. SCOPES obsahuje URL na WEB API PROGRAM, cez ktore su pristupne SCOPES WEB API PROGRAM. Prikladom je VALUE [api://WEB_API_CLIENT_ID/.default], kde VALUE [WEB_API_CLIENT_ID] je CLIENT ID WEB API PROGRAM.
      D. SETTING [TENANT_NAME]. Je to nazov zaregistrovaneho WEB API PROGRAM. Prikladom je VALUE [MyEntraExternalID].
      E. SETTING [AUTHORITY]. Obsahuje AUTHORITY URL zaregistrovaneho WEB API PROGRAM. Prikladom je VALUE [https://{TENANT_NAME}.ciamlogin.com/], kde VALUE [TENANT_NAME] je nazov zaregistrovaneho WEB API PROGRAM.
   B. ACCESS TOKEN sa ziska vykonanim nasledujucich krokov.
      A. Vytvori sa instancia CLASS [ConfidentialClientApplicationBuilder] do ktorej je cez CONSTRUTOR odoslany CLIENT ID.
      B. Zavola sa METHOD [TAuthority ConfidentialClientApplicationBuilder.WithAuthority(string AuthorityUri, bool ValidateAuthority)], ktorou sa nastavi AUTHORITY.
      C. Zavola sa METHOD [ConfidentialClientApplicationBuilder ConfidentialClientApplicationBuilder.WithClientSecret(string ClientSecret)], ktorou sa nastavi CLIENT SECRET.
      D. Zavola sa METHOD [IConfidentialClientApplication ConfidentialClientApplicationBuilder.Build()], ktora vytvori instanciu INTERFACE [IConfidentialClientApplication].
      E. Zavola sa METHOD [AcquireTokenForClientParameterBuilder IConfidentialClientApplication.AcquireTokenForClient(IEnumerable<string> Scopes)], ktora vytvori instanciu CLASS [AcquireTokenForClientParameterBuilder].
      F. Zavola sa METHOD [Task<AuthenticationResult> AcquireTokenForClientParameterBuilder.ExecuteAsync()], ktora vykona AUTHENTICATION a v pripade uspesnej AUTHENTICATION vrati ACCESS TOKEN.
      G. V pripade uspesnej AUTHENTICATION je ACCESS TOKEN ulozeny v PROPERTY [string AuthenticationResult.AccessToken].
   C. Ziskany ACCESS TOKEN sa vlozi do AUTHORIZATION HEADER HTTP REQUEST MESSAGE.
19. WEB PAGES PROGRAM sa v EXTERNAL TENANT registruje nasledujucim sposobom.
   A. EXTERNAL TENANT sa nastavi ako DEFAULT TENANT pomocou SCREEN [Portal Settings], ku ktorej sa da dostat stlacenim SETTING BUTTON.
   B. V MENU [App registrations] sa vyberie BUTTON [New registration], kde sa nastavia nasledujuce SETTINGS a nasledne stlaci BUTTON [Register].
      A. SETTINGS [Name] sa nastavi na VALUE [entra-external-ID-web-pages].
      B. SETTINGS [Supported account types] sa nastavi na VALUE [Accounts in this organizational directory only].
      C. SETTINGS [Redirect URI] sa nastavi na VALUE [Web] a VALUE [https://localhost:8000/signin-oidc].
   C. V MENU [App registrations] sa vyberie TAB [All applications] a PROGRAM [entra-external-ID-web-pages].
   !!! D. Z MENU [App registrations -> Overview] je potrebne ulozit si SETTINGS, ktore su potrebne pre nakonfigurovanie ASP.NET CORE PROGRAMU u CLIENT PROGRAMU. Cast SETTINGS je v TAB [Endpoints].
   E. V MENU [App registrations -> Authentication] je potrebne nastavit SETTINGS [Front-channel logout URL] na VALUE [https://localhost:8000/signout-callback-oidc].
   F. WEB PAGES PROGRAM vyzaduje vytvorenie a registraciu CERTIFICATE. CERTIFICATE sa vytvara a registruje nasledujucim sposobom.
      A. POWER SHELL COMMAND [Export-Certificate -Cert New-SelfSignedCertificate -Subject "CN=MyExternalEntraIDCertificate" -CertStoreLocation "Cert:\CurrentUser\My" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256 -FilePath "D:\Programy\.NET\CSharp\DeveloperGuideToNETInAzure\Chapter13\EntraExternalID\Certificates\MyExternalEntraIDCertificate.pem"] vytvara novy CERTIFICATE.
      B. V MENU [App registrations -> Certificates & secrets] sa vyberie TAB [Certificates] a stlaci na LINK [Upload certificate] v ktorom sa zadaju nasledujuce SETTINGS.
         A. SETTINGS [Upload a certificate (public key) with one of the following file types: .cer, .pem, .crt] sa nastavi na VALUE [D:\Programy\.NET\CSharp\DeveloperGuideToNETInAzure\Chapter13\EntraExternalID\Certificates\MyExternalEntraIDCertificate.pem].
         B. SETTINGS [Description] sa nastavi na VALUE [My certificate.].
      C. Po zaregistrovani CERTIFICATE je nutne ulozit VALUE [Thumbprint]. Prikladom THUMBPRINT je VALUE [C7F9A124259B554CC62D5B3272F65DACDC344B1D].
   G. Vytvori sa USER FLOW pomocou nasledujucich krokov.
      A. V MENU [Entra ID -> External Identities] sa vyberie MENU [User flows].
      B. Stlaci sa BUTTON [New user flow]. Na SCREEN [Create] sa nastavia tieto SETTINGS.
         A. SETTINGS [Name] sa nastavi na VALUE [SignInFlow].
         B. Zaskrtne sa SETTINGS [Email Account].
         C. Vyberie sa SETTINGS [Email with password].
   H. Zaregistruje sa pouzitie USER FLOW pomocou nasledujucich krokov.
      A. V MENU [Entra ID -> External Identities] sa vyberie MENU [User flows].
      B. Vyberie sa USER FLOW.
      C. V MENU [Use -> Application] s stlaci BUTTON [Add application], kde sa vyberie APPLICATION [entra-external-ID-web-pages].
20. WEB PAGES PROGRAM vyuzivajuci AUTHENTICATION a AUTHORIZATION pomocou EXTERNAL TENANT sa implementuje v nasledujucich krokoch.
   A. WEB PAGES PROGRAM musi byt zaregistrovany v EXTERNAL TENANT. Registracia musi obsahovat nasledujuce SETTINGS.
      A. SETTING [CLIENT_ID]. Je to unikatny identifikator zaregistrovaneho PROGRAMU. Prikladom je VALUE [3eaa4193-5f8c-4750-92d4-043f5b779543].
      B. SETTING [TENANT_NAME]. Je to nazov zaregistrovaneho WEB API PROGRAM. Prikladom je VALUE [MyEntraExternalID].
      C. SETTING [AUTHORITY]. Obsahuje AUTHORITY URL zaregistrovaneho WEB API PROGRAM. Prikladom je VALUE [https://{TENANT_NAME}.ciamlogin.com/], kde VALUE [TENANT_NAME] je nazov zaregistrovaneho WEB API PROGRAM.
      D. SETTING [CERTIFICATE_THUMBPRINT]. Obsahuje THUMBPRINT SELF-SIGNED CERTIFICATE, ktory musi byt zaregistrovany pocas APP REGISTRATION. Prikladom je VALUE [C7F9A124259B554CC62D5B3272F65DACDC344B1D].
   B. SETTINGS sa vlozia do FILE [appsettings.json] do ELEMENT [AzureAd].
   C. Vo FILE [Program.cs] sa vykonaju nasledujuce zmeny.
      A. PROPERTY [bool JwtSecurityTokenHandler.DefaultMapInboundClaims] sa nastavi na VALUE [false].
      B. Volanim METHOD [AuthenticationBuilder AddAuthentication(this IServiceCollection Services, string DefaultScheme)] sa pridaju SERVICES, ktoru su potrebne na vykonanie AUTHENTICATION.
      C. Volanim METHOD [MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebApp(this AuthenticationBuilder Builder, IConfiguration Configuration, string ConfigSectionName, string OpenIdConnectScheme, string CookieScheme, bool SubscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string DisplayName)] sa nacitaju EXTERNAL ENTRA ID CONFIGURATIONS z CONFIGURATION FILE [appsettings.json].
      D. Volanim METHOD [MicrosoftIdentityAppCallsWebApiAuthenticationBuilder MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration.EnableTokenAcquisitionToCallDownstreamApi(IEnumerable<string> InitialScopes)] sa povoli aby PROGRAM mohol ziskavat ACCESS TOKENS z EXTERNAL ENTRA ID.
      E. Volanim METHOD [MicrosoftIdentityAppCallsWebApiAuthenticationBuilder MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(Action<MsalMemoryTokenCacheOptions> ConfigureOptions, Action<MemoryCacheOptions> MemoryCacheOptions)] sa prida WEB CACHE ukladajuca ziskane ACCESS TOKENS.
      F. Volanim METHOD [IMvcBuilder AddControllersWithViews(this IServiceCollection Services, Action<MvcOptions> Configure)] sa vlozia do DEPENDENCY INJECTION CONTAINER SERVICES potrebne pre cinnost CONTROLLERS. V CALLBACK METHODS je potrebne vykonat nasledujuci CODE.
         A. Vytvori sa instancia CLASS [AuthorizationPolicyBuilder] umoznujuca vytvorit AURHORIZATION POLICY.
         B. Volanim METHOD [AuthorizationPolicyBuilder AuthorizationPolicyBuilder.RequireAuthenticatedUser()] sa vyziada USER AUTHENTICATION pre kazde volanie PROGRAMU.
         C. Volanim METHOD [AuthorizationPolicy AuthorizationPolicyBuilder.Build()] sa vytvori instancia CLASS [AuthorizationPolicy] reprezentujuca AUTHORIZATION POLICY.
         D. Vytvori sa instancia CLASS [AuthorizeFilter], do ktorej sa cez CONSTRUCTOR vlozi instancia CLASS [AuthorizationPolicy].
         E. Volanim METHOD [void FilterCollection.Add(TFilterMetadata item)] sa vlozi instancia CLASS [AuthorizeFilter] do zoznamu AUTHORIZE FILTERS.
      G. Volanim METHOD [IMvcBuilder IMvcBuilder.AddMicrosoftIdentityUI(this IMvcBuilder Builder)] sa pridaju CONTROLLERS a RAZOR PAGES umoznujuce AUTHENTICATION pomocou EXTERNAL ENTRA ID.
      H. Volanim METHOD [IApplicationBuilder UseAuthorization(this IApplicationBuilder App)] sa prida do HTTP REQUEST PIPELINE MIDDLEWARE COMPONENT realizujuci AUTHORIZATION.
   D. Do PROJECT sa prida VIEW [_LoginPartial.cshtml], ktory zobrazuje SIGN IN BUTTON, alebo SIGN OUT BUTTON podla toho ci je USER LOGGED.
   E. Do VIEW [_Layout.cshtml] sa prida CODE [<partial name="_LoginPartial" />], ktory zobrazi VIEW [_LoginPartial.cshtml] obsahujuci SIGN IN BUTTON, alebo SIGN OUT BUTTON podla toho ci je USER LOGGED.
   F. HOME CONTROLLER sa oznaci pomocou ATTRIBUTE [Authorize], aby sa vyziadala AUTHENTICATION pri pristupe k PROGRAMU.
//----------------------------------------------------------------------------------------------------------------------