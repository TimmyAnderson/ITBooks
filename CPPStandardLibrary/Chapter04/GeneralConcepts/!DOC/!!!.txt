//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje niektore zakladne koncepty C++ STANDARD LIBRARY.
2. C++ STANDARD LIBRARY definuje vsetky svoje ELEMETS v NAMESPACE [std].
3. C++ STANDARD LIBRARY ma VSETKY HEADER FILES definovane BEZ FILE EXTENSION.
4. FUNCTIONS a STRUCTURES z C STANDARD LIBRARY su definovane v HEADERS s formatom <cXXX>, kde 'XXX' je meno povodnej C STANDARD LIBRARY HEADER BEZ FILE EXTENSION. Takze napriklad HEADER <stdio.h> je v C++ STANDARD LIBRARY mapovany na HEADER <cstdio>.
!!! 5. ELEMENTS definovane v HEADERS s formatom <cXXX> su VSETKY definovane v NAMESPACE [std].
!!!!! 6. C++ PROGRAMS by mali VZDY pouzivat HEADERS s formatom <cXXX> namiesto starych C STANDARD LIBRARY HEADERS.
7. Vsetky EXCEPTIONS (okrem EXCEPTION [nested_exception]), ktore C++ STANDARD LIBRARY hadze su DERIVED z CLASS [exception], ktora je definovana v HEADER [exception].
8. C++ STANDARD LIBRARY definuje nasledujuce EXCEPTIONS.
   A. CLASS [exception] je BASE CLASS pre VSETKY EXCEPTIONS okrem EXCEPTION [nested_exception].
   B. CLASS [nested_exception] umoznuje EXCEPTION NESTING.
   C. CLASS [logic_error] je DERIVED z CLASS [exception] a predstavuje BASE CLASS pre vsetky LOGIC ERROR EXCEPTIONS.
   D. CLASS [runtime_error] je DERIVED z CLASS [exception] a predstavuje BASE CLASS pre vsetky RUNTIME ERROR EXCEPTIONS.
   E. CLASS [bad_cast] je DERIVED z CLASS [exception] a je hodena pri zlom CASTING. Napriklad ju hadze OPERATOR [dynamic_cast<>].
   F. CLASS [bad_typeid] je DERIVED z CLASS [exception] a je hodena OPERATOR [typeid] napriklad pri pokuse o ziskanie TYPE z NULL POINTER.
   G. CLASS [bad_exception] je DERIVED z CLASS [exception] a je hodena pri pokuse hodi INU EXCEPTION, aku definuje EXCEPTION SPECIFICATION. Kedze vsak EXCEPTION SPECIFICATIONS su DEPRECATED, tato EXCEPTION by sa uz nemala zjavovat.
   H. CLASS [bad_alloc] je DERIVED z CLASS [exception] a je hodena pri nedostatku MEMORY.
   I. CLASS [bad_weak_ptr] je DERIVED z CLASS [exception] a je hodena ak dojde k chybe pri pokuse o vytvorenie WEAK POINTER zo SHARED POINTER.
   J. CLASS [bad_function_call] je DERIVED z CLASS [exception] a je hodena pri pokuse vyvolat FUNCTION WRAPPER OBJECT, ktory nema nastaveny TARGET.
   I. CLASS [bad_array_new_length] je DERIVED z CLASS [bad_alloc] a je hodena pri pokuse o alokaciu ARRAY so zapornou velkostou, alebo velkostou pressahujucou IMPLEMENTATION LIMIT pre alokaciu ARRAYS.
   K. CLASS [domain_error] je DERIVED z CLASS [logic_error] a je hodena pri reportovani DOMAIN ERROR.
   L. CLASS [invalid_argument] je DERIVED z CLASS [logic_error] a je hodena pri detekcii nespravneho ARGUMENT.
   M. CLASS [length_error] je DERIVED z CLASS [logic_error] a je hodena pri detekcii nespravnej dlzky, napriklad pri pridavani CHARACTERS do STRING.
   N. CLASS [out_of_range] je DERIVED z CLASS [logic_error] a je hodena pri detekcii nespravneho rozsahu, napriklad pri praci s ARRAYS.
   O. CLASS [future_error] je DERIVED z CLASS [logic_error] a je hodena pri vzniku logickej chyby pri ASYNCHRONOUS SYSTEM CALL.
   P. CLASS [system_error] je DERIVED z CLASS [runtime_error] a je hodena pri vzniku chyby na urovni OPERATION SYSTEM.
   Q. CLASS [range_error] je DERIVED z CLASS [runtime_error] a je hodena pri prekroceni stanoveneho rozsahu pri realizacii internych vypoctov C++ STANDARD LIBRARY.
   R. CLASS [overflow_error] je DERIVED z CLASS [runtime_error] a je hodena pri detekcii OVERFLOW ERROR pocas matematickej operacii.
   S. CLASS [underflow_error] je DERIVED z CLASS [runtime_error] a je hodena pri detekcii UNDERFLOW ERROR pocas matematickej operacii.
   T. CLASS [ios_base::failure] je DERIVED z CLASS [system_error] a je BASE EXCEPTION pre IO OPERATIONS poskytovane C++ STANDARD LIBRARY.
9. CLASS [exception] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [exception].
   B. DESTRUCTOR uvolnuje RESOURCES alokovane instanciou CLASS [exception].
   C. OPERATOR= umoznuje priradit jednu instanciu CLASS [exception] do inej.
   !!! D. VIRTUAL METHOD what() vracia POINTER na CHAR obsahujuci popis EXCEPTION. POINTER je validny IBA v CATCH CLAUSE, v ktorej bol EXCEPTION zachyteny.
10. C++ EXCEPTIONS definuju dvojicu pomocnych CLASSES zapuzdrujucich ERROR VALUES, ktore umoznuju rozlisovat ERROR VALUES medzi PORTABLE a SYSTEM SPECIFIC.
   A. CLASS [error_code] zapuzdruje ERROR CODES. ERROR CODES reprezentuju SYSTEM SPEFICIC ERROR VALUES, ktore NIE su prenositelne medzi rozlicnymi PLATFORMS. Instanciu CLASS [error_code] je mozne ziskat volanim METHOD system_exception.code().
   B. CLASS [error_condition] zapuzdruje ERROR CONDITIONS. ERROR CONDITIONS reprezentuju PORTABLE ERROR VALUES, ktore su prenositelne medzi rozlicnymi PLATFORMS. Instanciu CLASS [error_condition] je mozne ziskat volanim METHOD system_exception.code().default_error_condition().
11. Instancie CLASS [error_code] je mozne vytvorit pomocou FUNCTION make_error_code(). C++ definuje 3 OVERLOADED VERZIE, ktore prijmamu niektory z PARAMETER CLASS [errc], CLASS [io_errc] a CLASS [future_errc].
12. Instancie CLASS [error_condition] je mozne vytvorit pomocou FUNCTION make_error_condition().
!!! 13. CLASS [system_error] obsahuje METHOD code(), ktora vracia instanciu ERROR VALUE CLASS [error_code] reprezentujucu ERROR CODE danej EXCEPTION.
14. CLASS [error_code] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [error_code].
   B. OPERATOR= umoznuje priradit jednu instanciu CLASS [error_code] do inej.
   C. OPERATOR BOOL() vracia TRUE, ak hodnota vratena METHOD value() je rozna od 0, inak vrati FALSE.
   !!! D. METHOD value() vracia hodnotu ERROR CODE, ktoru instancia CLASS [error_code] zapuzdruje.
   E. METHOD message() vracia instanciu CLASS [string] obsahujucu popis ERROR CODE.
   F. METHOD assign() priradzuje instancii CLASS [error_code] novu hodnotu ERROR CODE a zaroven umoznuje nastavit aj ERROR CATEGORY.
   G. METHOD clear() resetuje instanciu CLASS [error_code], aby neobsahovala ziaden ERROR CODE.
   !!! H. METHOD default_error_condition() vracia instanciu CLASS [error_condition], ktora reprezentuje ERROR CONDITION asociovanu s ERROR CODE, ktory zapuzdruje instancia CLASS [error_code].
   I. METHOD category() vracia instanciu CLASS [error_category], ktora reprezentuje ERROR CATEGORY asociovanu s ERROR CODE, ktory zapuzdruje instancia CLASS [error_code].
15. CLASS [error_condition] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [error_condition].
   B. OPERATOR= umoznuje priradit jednu instanciu CLASS [error_condition] do inej.
   C. OPERATOR BOOL() vracia TRUE, ak hodnota vratena METHOD value() je rozna od 0, inak vrati FALSE.
   !!! D. METHOD value() vracia hodnotu ERROR CONDITION, ktoru instancia CLASS [error_condition] zapuzdruje.
   E. METHOD message() vracia instanciu CLASS [string] obsahujucu popis ERROR CONDITION.
   F. METHOD assign() priradzuje instancii CLASS [error_condition] novu hodnotu ERROR CONDITION a zaroven umoznuje nastavit aj ERROR CATEGORY.
   G. METHOD clear() resetuje instanciu CLASS [error_condition], aby neobsahovala ziadnu ERROR CONDITION.
   H. METHOD category() vracia instanciu CLASS [error_category], ktora reprezentuje ERROR CATEGORY asociovanu s ERROR CONDITION, ktoru zapuzdruje instancia CLASS [error_condition].
16. CLASS [error_category] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [error_category].
   B. DESTRUCTOR uvolnuje RESOURCES alokovane instanciou CLASS [error_category].
   C. OPERATOR== umoznuje porovnat 2 instancie CLASS [error_category] na rovnost.
   D. OPERATOR!= umoznuje porovnat 2 instancie CLASS [error_category] na roznost.
   E. OPERATOR< umoznuje porovnat 2 instancie CLASS [error_category] na to ci je jedna mensia ako druha.
   F. METHOD name() vracia POINTER na CHAR obsahujuci nazov ERROR CATEGORY.
   !!! G. METHOD equivalent() testuje ci ERROR CODE je ekvivalentny danej ERROR CONDITION.
   H. METHOD message() vracia instanciu CLASS [string] obsahujucu popis ERROR CATEGORY.
   !!! I. METHOD default_error_condition() vracia instanciu CLASS [error_condition] pre danu ERROR CATEGORY, ktora je ekvivalentna zadanemu ERROR CODE.
17. Z CLASS [error_category] su DERIVED nasledujuce CLASSES.
   A. CLASS [generic_category].
   B. CLASS [system_category].
   C. CLASS [iostream_category].
   D. CLASS [future_category].
!!! 18. SCOPED ENUM [errc] obsahuje ERROR CONDITIONS, ktore zodpovedaju ERROR VALUES v LIBRARY [<cerrno>].
19. SCOPED ENUM [io_errc] obsahuje ERROR CODE (iba jeden) pre EXCEPTION CLASS [ios_base::failure].
20. SCOPED ENUM [future_errc] obsahuje ERROR CODES pre EXCEPTION CLASS [future_error], ktore hadze CONCURRENCY LIBRARY.
!!! 21. CLASS [exception_ptr] je IMPLEMENTATION DEPENDENT CLASS umoznujuca ulozenie EXCEPTIONS (CLASSES DERIVED z CLASS [exception] ale aj CUSTOM EXCEPTIONS) aj mimo kontext CATCH BLOCKS. CLASS [exception_ptr] sa pouziva napriklad na prenos EXCEPTIONS do inych FUNCTIONS ci THREADS, kde moze byt znova RETHROWN.
22. S CLASS [exception_ptr] je mozne pracovat pomocou nasledujucich FUNCTIONS.
   !!! A. FUNCTION current_exception() vracia instanciu CLASS [exception_ptr]. Tuto FUNCTION je mozne volat v CATCH BLOCKS. Ak sa vola mimo CATCH BLOCKS vracia prazdnu instanciu CLASS [exception_ptr].
   B. FUNCTION rethrow_exception() vykonava RETHROW EXCEPTION pre instanciu CLASS [exception_ptr].
   C. FUNCTION make_exception_ptr() sluzi na vytvorenie instancie CLASS [exception_ptr].
!!!!! 23. V CLASS [exception_ptr] je mozne ulozit aj CUSTOM EXCEPTION CLASSES, nie iba CLASSES zdedene z CLASS [exception].
!!!!! 24. C++ NEUMOZNUJE aby CODE hodil EXCEPTION CLASSES, ktore su RESERVED pre C++. G++ pri pokuse o hodenie takejto EXCEPTION CLASS generuje COMPILATION ERROR, zatial co VC++ to nespravne akceptuje. Nasledujuce EXCEPTION CLASSES nie je mozne hodit z CODE.
   A. CLASS [exception].
   B. CLASS [bad_cast].
   C. CLASS [bad_typeid].
   D. CLASS [bad_exception].
25. Z CLASS [exception] a DERIVED CLASSES je mozne dedit dalsie EXCEPTION CLASSES.
26. CALLABLE OBJECT je C++ ENTITY, ktora moze byt na vyvolanie CUSTOM CODE. V C++ existuju nasledujuce CALLABLE OBJECTS.
   A. FUNCTIONS.
   B. POINTER na MEMBER FUNCTION.
   C. FUNCTION OBJECT (FUNCTOR).
   D. LAMBDA FUNCTION.
!!! 27. CALLABLE OBJECTS je mozne ukladat do TEMPLATE CLASS [function<>], ktorej 1. TYPE PARAMETER reprezentuje RETURN VALUE CALLABLE OBJECT a dalsie TYPE PARAMETERS reprezentuju CALLABLE OBJECT PARAMETERS.
28. STANDARD LIBRARY v C++ 11 obsahuje CLASSES umoznujuce vytvaranie a pracu s THREADS. STANDARD LIBRARY takisto obsahuje CLASSES pre implementujuce LOCKS.
29. ALLOCATORS reprezentuju CONCEPT, ktory umoznuje CUSTOM implementaciu OBJECT, ktory bude zodpovedny za alokovanie a uvolnovanie MEMORY. CUSTOM ALLOCATOR musi byt TEMPLATE CLASS, ktora ma nasledujuce METHODS.
   A. METHOD ALLOCATOR::address() vrati pre REFERENCE jej ADDRESS.
   B. METHOD ALLOCATOR::allocate() alokuje 'N' ITEMS, kde kazdy ITEM ma velkost sizeof(ALLOCATOR::value_type).
   C. METHOD ALLOCATOR::deallocate() uvolnuje 'N' ITEMS, kde kazdy ITEM ma velkost sizeof(ALLOCATOR::value_type).
   D. METHOD ALLOCATOR::construct<XXX,PARAMS>() vytvara instanciu OBJECT 'XXX'.
   E. METHOD ALLOCATOR::destroy<XXX>() uvolnuje instanciu OBJECT 'XXX'.
   F. METHOD ALLOCATOR::max_size() vracia maximalny pocet ITEMS, ktore ALLOCATOR moze alokovat. Kazdy ITEM ma velkost sizeof(ALLOCATOR::value_type).
   G. TYPEDEF ALLOCATOR::value_type vracia TYPE daneho ELEMENT, ktory ALLOCATOR alokuje.
   H. TYPEDEF ALLOCATOR::pointer vracia POINTER na ELEMENT, ktory ALLOCATOR alokuje.
   I. TYPEDEF ALLOCATOR::reference vracia REFERENCE na ELEMENT, ktory ALLOCATOR alokuje.
   J. TYPEDEF ALLOCATOR::const_pointer vracia CONST POINTER na ELEMENT, ktory ALLOCATOR alokuje.
   K. TYPEDEF ALLOCATOR::const_reference vracia CONST REFERENCE na ELEMENT, ktory ALLOCATOR alokuje.
   L. TYPEDEF ALLOCATOR::size_type vracia TYPE, v ktorom sa urcuje velkost ELEMENTS.
   M. TYPEDEF ALLOCATOR::difference_type vracia TYPE, v ktorom sa urcuje rozdiel medzi dvoma POINTERS.
30. DEFAULT ALLOCATOR je reprezentovany CLASS [allocator], ktora na alokovanie pouziva GLOBAL OPERATOR NEW a na uvolnovanie pouziva GLOBAL OPERATOR DELETE.
//-------------------------------------------------------------------------------------------------------