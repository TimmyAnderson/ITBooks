//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje vykonavanie TESTS v SPRING.
2. TESTS je mozne rozdelit do nasledujucich kategorii.
   A. UNIT TESTS su TESTS, ktore testuju izolovanu cast CODE.
   B. INTEGRATION TESTS su TESTS, ktore testuju vicere prepojene casti CODE.
3. REGRESION TESTING je pristup, ktory vyzaduje kontinualne vykonavanie TESTS. TESTS sa spustaju pri kazdom BUILD.
4. TESTS mozu byt vykonavane AUTOMATICKY pomocou CONTINUOUS INTEGRATION TOOLS. CONTINUOUS INTEGRATION TOOLS funguju nasledujucim sposobom.
   A. Do REPOSITORY je vlozeny novy CODE COMMIT.
   B. CONTINUOUS INTEGRATION TOOL spusti vsetky nastavene TESTS.
   C. V pripade, ze niektory TEST zlyha, je o tom informovany PROGRAMMER.
5. V MAVEN PROJECTS sa TESTS realizuju nasledovne.
   A. Pre skupinu TESTS sa vytvori CUSTOM CLASS v DIRECTORY [test].
   B. Pre kazdy TEST CASE sa v CUSTOM CLASS definuje jedna METHOD, ktora vykona dany TEST.
6. UNIT TEST pozostava z nasledujucich krokov.
   A. ASSUMPTIONS. Pred vykonanim UNIT TEST je nutne vytvorit vsetky INPUTS do testovaneho CODE a vyriesit vsetky DEPENDENCIES, ktore testovany CODE vyzaduje.
   B. CALL (EXECUTION). Vykona sa testovany CODE s INPUTS a DEPENDENCIES vytvorenych v kroku ASSUMPTIONS.
   C. VALIDATIONS. Vykonaju sa samotne testy ci vysledok testovaneho CODE zodpoveda ocakavanemu vysledku.
7. DEPENDENCES v UNIT TEST sa riesia pouzivanim MOCK OBJECTS. MOCK OBJECT je OBJECT, ktory implementuje tu cast funkcionality danej DEPENDENCY, ktoru testovany CODE vola.
8. Pre UNIT TEST METHODS platia nasledujuce fakty.
   A. UNIT TESTS musia byt definovane v CLASS, ktory je ulozeny v DIRECTORY [test].
   B. Pre kazdy UNIT TEST sa definuje METHOD v CLASS, ktory je ulozeny v DIRECTORY [test].
   C. Na UNIT TEST METHODS MUSIA byt aplikovane ANNOTATIONS [@Test].
   D. Na UNIT TEST METHODS mozu byt aplikovane ANNOTATIONS [@DisplayName], ktore blizsie vysvetluju zmysel testu.
9. Na vykonavanie UNIT TESTS a SPRING INTEGRATION TESTS sa v JAVE pouziva LIBRARY [JUnit].
!!! 10. MOCK OBJECTS je mozne vytvarat pomocou MOCK LIBRARY [Mockito]. MOCK LIBRARY [Mockito] definuje skupinu STATIC METHODS, ktore je mozne pouzit na vytvorenie MOCK OBJECTS, definiciu ich BEHAVIORS, aj kontrolu ci METHODS MOCK OBJECTS boli pocas testovania volane s danymi PARAMETERS. MOCK LIBRARY [Mockito] definuje nasledujuce METHODS.
   A. Pomocou METHOD [<T> T Mockito.mock(Class<T> ClassToMock)] je mozne vytvarat EMTPTY MOCK OBJECTS.
   B. Pomocou METHOD [<T> BDDMyOngoingStubbing<T> BDDMockito.given(T MethodCall)] je mozne definovat ako ma MOCK OBJECT reagovat, ak sa zavola METHOD 'MethodCall' s danymi PARAMETERS.
   !!! C. Pomocou METHOD [BDDMyOngoingStubbing<T> BDDMockito.willReturn(T Value)] je mozne definovat aku VALUE ma vracat MOCK OBJECT v reakcii na volanie METHOD MOCK OBJECT. METHOD sa pouziva PO volani METHOD [<T> BDDMockito.BDDMyOngoingStubbing<T> given(T MethodCall)].
   D. Pomocou METHOD [<T> T Mockito.verify(T Mock)] sa vykona kontrola bola zavolana METHOD MOCK OBJECT so danymi PARAMETERS.
   !!! E. Pomocou METHOD [<T extends Throwable> T Assertions.assertThrows(Class<T> ExpectedType, Executable Executable)] sa zavola testovana METHOD 'Executable', pricom sa ocakava, ze METHOD hodi EXCEPTION TYPE 'ExpectedType'.
   F. Pomocou METHOD [<T> OngoingStubbing<T> Mockito.when(T MethodCall)] je mozne definovat ako ma MOCK OBJECT reagovat, ak sa zavola METHOD 'MethodCall' s danymi PARAMETERS.
   !!! G. Pomocou METHOD METHOD [OngoingStubbing<T> OngoingStubbing<T>.thenReturn(T Value)] je mozne definovat aku VALUE ma vracat MOCK OBJECT v reakcii na volanie METHOD MOCK OBJECT. METHOD sa pouziva PO volani METHOD [<T> OngoingStubbing<T> Mockito.when(T MethodCall)].
11. TESTS sa daju v ECLIPSE IDE spustat nasledujucimi sposobmi.
   A. Pomocou MAIN MENU COMMAND [Run->Coverage] sa spustia VSEKTY TESTS.
   B. Pomocou CONTEXT MENU COMMAND [Coverage As] vo WORKSPACE WINODW na konkretny TEST CLASS sa spustia vsetky TESTS v danej TEST CLASS.
   C. Pomocou CONTEXT MENU COMMAND [Coverage As] vo WORKSPACE WINODW na konkretnu TEST METHOD v TEST CLASS sa spusti dany TEST v danej TEST CLASS.
!!! 12. MOCK OBJECTS nemusia byt manualne vytvorene pomocou METHOD [<T> T Mockito.mock(Class<T> ClassToMock)], ale je ich mozne nechat vytvorit pomocou MOCK LIBRARY [Mockito]. Na vytvorenie MOCK OBJECTS je potrebne vykonat nasledujuce kroky.
   A. Na TEST CLASS sa aplikuje ANNOTATION [@ExtendWith(MockitoExtension.class)], aby MOCK LIBRARY [Mockito] vedela, ze musi vytvorit MOCK OBJECTS.
   B. V TEST CLASS sa na FIELDS do ktorych maju byt ulozene MOCK OBJECTS aplikuje ANNOTATION [@Mock], aby MOCK LIBRARY [Mockito] tieto FIELDS naplnil instanciami MOCK OBJECTS.
   C. V TEST CLASS sa na FIELDS do ktorych maju byt ulozene OBJECTS, v ktorych sa pouzivaju MOCK OBJECTS je potrebne aplikovat ANNOTATION [@InjectMocks], aby MOCK LIBRARY [Mockito] vytvoril aj s nastavenymi MOCK OBJECTS.
13. CLASS [Assertions] obsahuje HELPERS METHODS, ktore umoznuje vykonavat ASSERTIONS.
14. SPRING umoznuje vykonavat SPRING INTEGRATION TESTS. Pre SPRING INTEGRATION TESTS platia nasledujuce fakty.
   A. SPRING INTEGRATION TESTS testuju interakciu viacerych COMPONENTS, ktore by predtym mali byt otestovane pomocou UNIT TESTS.
   B. SPRING INTEGRATION TESTS umoznuju zapojit do TESTING aj SPRING tym, ze SPRING moze vytvorit SPRING BEANS OBJECTS, tak ako by ich vytvoril, ak by bol normalne spusteny PROGRAM.
   C. Pri SPRING INTEGRATION TESTS mozu byt MOCK OBJECTS nahradene realnymi SPRING BEAN OBJECTS, ktore su vytvorene pomocou SPRING APPLICATION CONTEXT.
   D. SPRING INTEGRATION TESTS umoznuju otestovat aj COMPONENTS poskytovane SPRING FRAMEWORK.
15. SPRING INTEGRATION TESTS sa definuju nasledujucim sposobom.
   A. SPRING INTEGRATION TESTS musia byt definovane v CLASS, ktory je ulozeny v DIRECTORY [test].
   !!! B. Na CLASS so SPRING INTEGRATION TESTS MUSI byt aplikovana ANNOTATION [@SpringBootTest], aby SPRING BOOT vedel, ze CLASS obsahuje SPRING INTEGRATION TESTS. Zaroven je v PROPERTY [classes] NUTNE definovat APPLICATION CLASS. APPLICATION CLASS je CLASS v ktorej sa nachadza JAVA MAIN METHOD.
   !!! C. Na FIELDS, ktore obsahuju SPRING BOOT OBJECTS, ktore maju byt vytvorene ako MOCK OBJECTS je treba aplikovat ANNOTATION [@MockBean]. Tieto SPRING BEAN OBJECTS su vytvorene zo SPRING APPLICATION CONTEXT.
   !!! D. Na FIELDS, ktore obsahuju SPRING BOOT OBJECTS a su DEPENDENT na inych SPRING BOOT OBJECTS je treba aplikovat ANNOTATION [@Autowired].
   E. Na SPRING INTEGRATION TEST METHODS MUSIA byt aplikovane ANNOTATIONS [@Test].
16. SPRING INTEGRATION TESTS su pomalsie ako UNIT TESTS, kedze sa vyuziva SPRING APPLICATION CONTEXT a preto by sa tieto TESTS mali pouzivat iba na vykonavanie INTEGRATION TESTS.
//----------------------------------------------------------------------------------------------------------------------