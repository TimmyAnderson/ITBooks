//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include "MyDebug.h"
//----------------------------------------------------------------------------------------------------------------------
// !!! Vseobecna TEMPLATE CLASS.
template<typename TType>
class CCArrayTemplateClass final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static void Print(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CCArrayTemplateClass<TType>::Print(void)
{
	std::wcout << L"TEMPLATE [CCArrayTemplateClass<TType>] TYPE [" << GetTypeInfoName(typeid(TType)) << L"] !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre TYPE [TType[SIZE]].
template<typename TType, std::size_t SIZE>
class CCArrayTemplateClass<TType[SIZE]> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static void Print(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, std::size_t SIZE>
void CCArrayTemplateClass<TType[SIZE]>::Print(void)
{
	std::wcout << L"TEMPLATE SPECIALIZATION [CCArrayTemplateClass<TType[SIZE]>] TYPE [" << GetTypeInfoName(typeid(TType)) << L"] SIZE [" << SIZE << L"] !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre TYPE [TType(&)[SIZE]].
template<typename TType, std::size_t SIZE>
class CCArrayTemplateClass<TType(&)[SIZE]> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static void Print(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, std::size_t SIZE>
void CCArrayTemplateClass<TType(&)[SIZE]>::Print(void)
{
	std::wcout << L"TEMPLATE SPECIALIZATION [CCArrayTemplateClass<TType(&)[SIZE]>] TYPE [" << GetTypeInfoName(typeid(TType)) << L"] SIZE [" << SIZE << L"] !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre TYPE [TType[]].
template<typename TType>
class CCArrayTemplateClass<TType[]> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static void Print(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CCArrayTemplateClass<TType[]>::Print(void)
{
	std::wcout << L"TEMPLATE SPECIALIZATION [CCArrayTemplateClass<TType[]>] TYPE [" << GetTypeInfoName(typeid(TType)) << L"] !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre TYPE [TType(&)[]].
template<typename TType>
class CCArrayTemplateClass<TType(&)[]> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static void Print(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CCArrayTemplateClass<TType(&)[]>::Print(void)
{
	std::wcout << L"TEMPLATE SPECIALIZATION [CCArrayTemplateClass<TType(&)[]>] TYPE [" << GetTypeInfoName(typeid(TType)) << L"] !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE SPECIALIZATION pre TYPE [TType*].
template<typename TType>
class CCArrayTemplateClass<TType*> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		static void Print(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CCArrayTemplateClass<TType*>::Print(void)
{
	std::wcout << L"TEMPLATE SPECIALIZATION [CCArrayTemplateClass<TType*>] TYPE [" << GetTypeInfoName(typeid(TType)) << L"] !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------