//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "CMemoryOperators.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TLock>
concept CConceptLock=requires(TLock Value)
{
	Value.Lock();
	Value.Unlock();
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TLock> requires CConceptLock<TLock>
class CLocker final : public CMemoryOperators
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		TLock&													MLock;

	public:
		explicit CLocker(TLock& Lock);
		~CLocker(void);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TLock> requires CConceptLock<TLock>
CLocker<TLock>::CLocker(TLock& Lock)
	: MLock(Lock)
{
	MLock.Lock();
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TLock> requires CConceptLock<TLock>
CLocker<TLock>::~CLocker(void)
{
	MLock.Unlock();
}
//----------------------------------------------------------------------------------------------------------------------/----------------------------------------------------------------------------------------------------------------------