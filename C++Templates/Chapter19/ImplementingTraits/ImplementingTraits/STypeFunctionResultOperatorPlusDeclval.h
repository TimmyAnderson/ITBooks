//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TRAIT vracia RESULT TYPE pouzitia OPERATOR [OPERATOR+].
template<typename TType1, typename TType2>
struct STypeFunctionResultOperatorPlusDeclval final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		// !!!!! Vdaka pouziti TYPE TRAIT [declval<TType>] NIE JE NUTNE, aby mali TYPE [TType1] a TYPE [TType2] DEFAULT CONSTRUCTOR.
		using													Type=decltype(std::declval<TType1>()+std::declval<TType2>());
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
using															TypeFunctionResultOperatorPlusDeclval=typename STypeFunctionResultOperatorPlusDeclval<TType1,TType2>::Type;
//----------------------------------------------------------------------------------------------------------------------