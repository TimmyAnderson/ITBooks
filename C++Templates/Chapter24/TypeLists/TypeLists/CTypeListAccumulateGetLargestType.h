//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "STraitsIfThenElse.h"
#include "CTypeListIsEmpty.h"
#include "CTypeListAccumulate.h"
#include "CTypeListFront.h"
#include "CTypeListPopFront.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! 1. TEMPLATE PARAMETER je 1. TYPE a 2. TEMPLATE PARAMETER 2. TYPE.
template<typename TType1, typename TType2>
class CTypeListAccumulateGetLargerTypeType : public STraitsIfThenElseType<sizeof(TType1)>=sizeof(TType2),TType1,TType2>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! TEMPLATE PARAMETER je TYPE LIST.
template<typename TTypeList, bool EMPTY=CTypeListIsEmpty<TTypeList>>
class CTypeListAccumulateGetLargestTypeType;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList>
class CTypeListAccumulateGetLargestTypeType<TTypeList,false> : public CTypeListAccumulateType<CTypeListPopFront<TTypeList>,CTypeListAccumulateGetLargerTypeType,CTypeListFront<TTypeList>>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList>
class CTypeListAccumulateGetLargestTypeType<TTypeList,true>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeList>
using															CTypeListAccumulateGetLargestType=typename CTypeListAccumulateGetLargestTypeType<TTypeList>::TYPE;
//----------------------------------------------------------------------------------------------------------------------