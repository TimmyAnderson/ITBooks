//------------------------------------------------------------------------------
1. Program demonstruje pouzitie Monitor.Wait() a Monitor.Pulse().
2. Metoda Monitor.Wait(XXX) vykona ATOMICKY uvolnenie LOCK XXX - aby druhy thread mohol VOJST DO OBLASTI CHRANENEJ LOCK XXX a ZAROVEN ZARADI VOLAJUCI THREAD do WAITING QUEUE cakajuc AZ KYM NEBUDE LOCK XXX SIGNALIZOVANY volanim Monitor.Pulse(XXX).
!!! 3. Metody Monitor.Wait(XXX) a Monitor.Pulse(XXX) je mozne volat IBA zo Z VNUTRA SEKCIE CHRANENEJ LOCK XXX - teda zvnutra lock(xxx){}. Inak hodi EXCEPTION.
!!! 4. Metoda Monitor.Pulse(XXX) SIGNALIZUJE LOCK XXX, ktory bol privedeny volanim Monitor.Wait(XXX) do nesignalizovaneho stavu. THREAD, ktory VOLAL Monitor.Wait(XXX) je po zavolani Monitor.Pause(XXX) INYM THREADOM JE UVOLNENY, avsak NIE HNED, ale AZ KED THREAD VOLAJUCI Monitor.Pause(XXX) UKONCI SEKCIU CHRANENU LOCK(XXX).
!!! 5. Volanie Monitor.Wait(XXX) NIE JE UKLADANE a teda VOLANIE Monitor.Pulse(XXX) PRED Monitor.Wait(XXX) je IGNOROVANE. Teda AKOBY SA NESTALO a Monitor.Wait(XXX) je BLOKOVANA.
!!!!! 6. Monitor.Wait(XXX) sa da predstavit AKOBY OBJEKT mal ManualResetEvent(), ktory sa uvolnuje volanim Monitor.Pulse(XXX). Dolezite vsak je, ze thread VOLAJUCI Monitor.Wait(XXX) sa uvolni AZ PO SKONCENI LOCK XXX BLOKU threadu, ktory zavolal Monitor.Pulse(XXX).
//------------------------------------------------------------------------------