//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje nove FEATURES PROGRAMMING LANGUAGE C#.
2. Pre OPERATOR?. platia nasledujuce fakty.
   A. OPERATOR?. testuje VALUE je NULL VALUE.
   B. CODE [VALUE_1.OPERATOR?.VALUE_2] testuje ci 'VALUE_1' je NOT NULL. Ak 'VALUE_1' je NOT NULL, tak OPERATOR?. vracia VALUE 'VALUE_1.VALUE_2', inak vracia NULL VALUE.
   C. OPERATOR?. umoznuje OPERATOR CHANING, kde je mozne vykonat CHAINING viacerych OPERATOR?.
3. Pre OPERATOR?[] platia nasledujuce fakty.
   A. OPERATOR?[] testuje VALUE je NULL VALUE.
   B. CODE [VALUE_1.OPERATOR?[VALUE_2]] testuje ci 'VALUE_1' je NOT NULL. Ak 'VALUE_1' je NOT NULL, tak OPERATOR?[] vracia VALUE 'VALUE_1[VALUE_2]', inak vracia NULL VALUE.
   C. OPERATOR?[] umoznuje OPERATOR CHANING, kde je mozne vykonat CHAINING viacerych OPERATOR[.
4. Pre OPERATOR?? platia nasledujuce fakty.
   A. OPERATOR?? testuje ci VALUE je NULL VALUE.
   B. CODE [VALUE_1.OPERATOR??VALUE_2] testuje ci 'VALUE_1' je NOT NULL. Ak 'VALUE_1' je NOT NULL, tak OPERATOR?? vracia VALUE 'VALUE_1', inak vracia 'VALUE_2'.
5. C# definuje automaticky implementovane PROPERTIES. Pre automaticky implementovane PROPERTIES platia nasledujuce fakty.
   A. Automaticky implementovane PROPERTIES pouzivaju SYNTAX [TYPE PROPERTY_NAME{get;set;}=DEFAULT_VALUE;], kde 'TYPE' je TYPE PROPERTY, 'PROPERTY_NAME' je meno PROPERTY a 'DEFAULT_VALUE' je DEFAULT VALUE inicializacnej SYNTAXE, ktora sa prideli pri vytvarani OBJECT.
   B. Automaticky implementovane PROPERTIES definuju okrem PROPERTY aj SKRYTY FIELD, ku ktoremu PROPERTY pristupuje.
   C. Automaticky implementovane PROPERTIES mozu byt inicializovane na DEFAULT VALUE, ktoru je mozne definovat v definicii PROPERTY.
   D. Automaticky implementovane PROPERTIES mozu byt VIRTUAL aj READ ONLY ci WRITE ONLY.
   !!! E. Aj READ ONLY PROPERTIES je mozne inicializovat pomocou inicializecnej SYNTAXE.
6. C# definuje STRING INTERPOLATION. Pre STRING INTERPOLATION platia nasledujuce fakty.
   A. STRING INTERPOLATION ma SYNTAX [$"XXX{VALUE:FORMAT}YYY"], kde 'VALUE' je VARIABLE, alebo LOCAL ACCESSIBLE VALUE, ktoreho hodnota je vlozena do STRING a 'FORMAT' reprezentuje OPTIONAL FORMAT hodnoty 'VALUE'.
   B. STRING INTERPOLATION interne vyuziva METHOD [string String.Format()], kde supluje zadane VALUES do STRING.
   C. STRING INTERPOLATION umoznuje pouzivat FORMATOVANIE rovnake ako umoznuje METHOD [string String.Format()].
7. OBJECT INITIALIZERS umoznuju inicializovat OBJECTS pomocou SYNTAX [new TYPE{PROPERTY_NAME_1=VALUE_1,PROPERTY_NAME_2=VALUE_2,...,PROPERTY_NAME_N=VALUE_N}], kde 'TYPE' je TYPE vytvaraneho OBJECT, 'PROPERTY_NAME_X' je nazov PROPERTY a 'VALUE_X' je VALUE na ktoru sa PROPERTY nastavi.
8. ARRAY INITIALIZERS umoznuju inicializovat ARRAYS pomocou SYNTAX [new TYPE[]{VALUE_1,VALUE_2,...,VALUE_N}], kde 'TYPE' je TYPE vytvaraneho ARRAY a 'VALUE_X' je ITEM vytvaraneho ARRAY.
9. COLLECTION INITIALIZERS umoznuju inicializovat COLLECTIONS pomocou SYNTAX [new TYPE{VALUE_1,VALUE_2,...,VALUE_N}], kde 'TYPE' je TYPE vytvaranej COLLECTION a 'VALUE_X' je ITEM vytvaranej COLLECTION.
10. Pre COLLECTIONS s definovanym INDEXER C# definuje INDEXER INITIALIZERS SYNTAX umoznujucu inicializaciu COLLECTIONS pomocou INDEXER INITIALIZATION SYNTAX [new TYPE{[KEY_1]=VALUE_1,[KEY_2]=VALUE_2},...,[KEY_N]=VALUE_N], kde 'TYPE' je TYPE vytvaranej COLLECTION, 'KEY_X' je hodnota KEY INDEXER COLLECTION a 'VALUE_X' je hodnota VALUE INDEXER COLLECTION.
11. C# definuje novu SYNTAX pre prikaz 'if', ktora umoznuje v jednom kroku vykonat testovanie TYPE a konverziu na tento TYPE. SYNTAX [if (EXPRESSION is TYPE VARIABLE)] vykonava test ci 'EXPRESSION' je TYPE 'TYPE', a ak ano, do VARIABLE 'VARIABLE' je ulozena konvertovana VALUE 'EXPRESSION'.
!!! 12. Nevyhodnou 'is' SYNTAXE pre 'if' je, ze VARIABLE ma SCOPE na urovni PARENT COMMAND a tym padom pri viacerych 'if' je nutne mat vzdy ROZDIELNY NAZOV VARIABLES pre VSETKY 'if'.
13. C# definuje novu SYNTAX pre prikaz 'case'. SYNTAX [case TYPE VARIABLE when EXPRESSION:] znamena, ze CASE BLOCK je volany iba vtedy ak SWITCH BLOCK obsahuje VARIABLE TYPE 'TYPE', a zaroven plati, ze pretypovana VALUE ulozena do VARIABLE 'VARIABLE' splna EXPRESSION 'EXPRESSION'. BLOCK WHEN je NEPOVINNY.
14. EXTENSION METHODS su STATIC METHODS, ktore sa SYNTAKTICKY chovaju ako MEMBER METHODS. Pre EXTENSION METHODS platia nasledujuce fakty.
   A. EXTENSION METHODS su definovane ako STATIC METHODS v STATIC CLASSES.
   B. EXTENSION METHODS maju 1. POVINNY PARAMETER oznaceny KEYWORD [this], urcujuci na ktoru TYPE sa EXTENSION METHOD aplikuje.
   C. EXTENSION METHODS je mozne volat ROVNAKOU SYNTAX ako MEMBER METHODS, kde OBJECT pre ktory sa ma EXTENSION METHODS zavolat je AUTOMATICKY SUBSTITUOVANY za OBJECT, ktory sa pouzil pri volani. Napriklad volanie EXTENSION METHOD [OBJECT.METHOD(PARAMETERS)] zavola EXTENSION METHOD 'METHOD()' na OBJECT 'OBJECT' s PARAMETERS 'PARAMETERS'.
   !!! D. EXTENSION METHODS NENARUSAJU ACCESS RIGHTS k MEMBERS. To znaci, ze EXTENSION METHODS mozu pristupovat iba k tym MEMBERS ku ktorym maju ACCESS RIGHTS.
   E. EXTENSION METHODS mozu byt aplikovane aj na INTERFACES, STRUCTURES a ENUMS.
15. LAMBDA EXPRESSIONS umoznuju INLINE definiciu FUNCTIONS. Pre LAMBDA EXPRESSIONS platia nasledujuce fakty.
   A. LAMBDA EXPRESSIONS maju SYNTAX [(VARIABLES)=>EXPRESSION], kde 'VARIABLES' su PARAMETERS LAMBDA EXPRESSION a 'EXPRESSION' je EXPRESSION, ktoru ma LAMBDA EXPRESSIONS vykonat. EXPRESSION 'EXPRESSION' moze byt uzatvoreny v zatvorkach [{}].
   B. LAMBDA EXPRESSIONS mozu pristupovat k VARIABLES, ktore su pristupne v SCOPE v ktorom je definovana LAMBDA EXPRESSION.
16. KEYWORD [var] umoznuje vynutit od C# COMPILER, aby sam zistil TYPE VARIABLE z VALUE, ktora mu je priradena. VARIABLE bude mat konkretny TYPE, akurat ho nie je nutne explicitne zapisovat, pretoze COMPILER ho zisti sam.
17. C# umoznuje definovat ANONYMOUS TYPES. Pre ANONYMOUS TYPES platia nasledujuce fakty.
   A. ANONYMOUS TYPES sa definuju pomocou SYNTAX [var VARIABLE_NAME=new{PROPERTY_NAME_1=VALUE_1,PROPERTY_NAME_2=VALUE_2,...,PROPERTY_NAME_N=VALUE_N}], alebo pomocou SYNTAX [var VARIABLE_NAME=new[]{new {PROPERTY_NAME_1=VALUE_1_1,PROPERTY_NAME_2=VALUE_1_2,...,PROPERTY_NAME_N=VALUE_1_N},new {PROPERTY_NAME_1=VALUE_2_1,PROPERTY_NAME_2=VALUE_2_2,...,PROPERTY_NAME_N=VALUE_2_N},...,new {PROPERTY_NAME_1=VALUE_M_1,PROPERTY_NAME_2=VALUE_M_2,...,PROPERTY_NAME_N=VALUE_M_N}].
   B. Ak 2 instancie ANONYMOUS OBJECTS maju ROVNAKE PROPERTIES, C# im priradi ROVNAKY TYPE.
   !!! C. ANONYMOUS TYPES maju pre kazdu PROPERTY iba GETTER METHOD. To znaci, ze NIE JE mozne MODIFIKOVAT VALUES jednotlivych FIELDS.
18. C# umoznuje definovat DEFAULT IMPLEMENTATION INTERFACE MEMBERS. DEFAULT IMPLEMENTATION INTERFACE MEMBER je PROPERTY, alebo METHOD definovania priamo v INTERFACE, ktora moze byt nahradena v CLASS, ktora dany INTERFACE implementuje.
19. C# implementuje ASYNCHRONOUS TASKS pomocou CLASS [Task]. CLASS [Task] umoznuje definovat novy TASK. TASK je cinnost, ktora je vykonana PARALELNE podobne ako REQUEST v THREAD POOL, avsak ma daleko lepsiu podporu na VRATENIE VYSLEDKOV, previazanie s inymi TASKS, podporu CANCELLATION, CHILD TASKS a mnoho inych vlastnosti.
20. Existuju 2 typy TASKS.
   A. CLASS [Task] umoznuje volat METHOD s PARAMETER typu [object], ktora nevracia ziadnu RETURN VALUE.
   B. CLASS [Task<TType>] umoznuje volat CLASS s PARAMETER typu [object], ktora vracia RETURN VALUE typu 'TType'.
21. CLASS [Task<TType>] ma nasledujuce MEMBERS.
   A. PROPERTY [Status] TYPE [TaskStatus] urcuje stav TASK. Urcuje v akom stave je dany TASK a ak skoncil, tak urcuje ci skoncil KOREKTNE [RanToCompletion], bol CANCELED [Canceled], alebo hodil EXCEPTION [Faulted].
   !!! B. PROPERTY [Result] TYPE [TType] vracia VALUE, ktoru vratil TASK. Ak TASK este NESKONCIL, tak je THREAD, ktory pristupil k PROPERTY [Result] privedeny do WAIT stavu.
   !!! C. PROPERTY [Exception] TYPE [AggregateException?] vracia EXCEPTION ak TASK SKONCIL GENEROVANIM EXCEPTION. Ak TASK este NESKONCIL, tak je THREAD, ktory pristupil k PROPERTY [Exception] privedeny do WAIT stavu.
   D. PROPERTY [CreationOptions] TYPE [EnumCreationOptions] obsahuje optimalizacne nastavenia, zadane pri konstrukcii TASK, ktore sa aplikuju pri vykonani TASK.
   !!! E. PROPERTY [Id] TYPE [int] udava unikatny ID, ktory sa vsak vytvara AZ PRI PRVOM PRISTUPE k TEJTO PROPERTY. Dokonca sa vytvori i pri PRVOM PRISTUPE cez DEBUGGER. PROPERTY [Id] je vo forme COUNTER, ktory sa pri KAZDOM NOVOM TASK ZVYSUJE.
   F. PROPERTY [IsCompleted] TYPE [bool] vychadza z hodnoty PROPERTY [Status] a urcuje ci dany TASK SKONCIL v COMPLETED STATE.
   G. PROPERTY [IsCanceled] TYPE [bool] vychadza z hodnoty PROPERTY [Status] a urcuje ci dany TASK SKONCIL v CANCELLED STATE.
   H. PROPERTY [IsFaulted] TYPE [bool] vychadza z hodnoty PROPERTY [Status] a urcuje ci dany TASK SKONCIL vo FAULT STATE.
   I. PROPERTY AsyncState TYPE [object?] vracia TASK STATE DATA, ktore boli do TASK zaslane v case vytvorenia TASK.
   J. STATIC PROPERTY Factory TYPE [TaskFactory] vracia instanciu TASK FACTORY, ktoru je mozne pouzit na vytvaranie novych TASKS.
   K. METHOD [void Dispose()] uvolni vsetky RESOURCES asociovane s danym TASK.
   L. METHOD [void Start()] spusta TASK.
   M. METHOD [Task Run(Func<Task?> Function, CancellationToken CancellationToken)] vytvara a zaroven spusta novy TASK.
   !!! N. METHOD [bool Wait(int MillisecondsTimeout, CancellationToken CancellationToken)] umoznuje EXPLICITNE CAKAT na SKONCENIE TASKU. Ak TASK ESTE NEZACAL (ale UZ BOLA VOLANA METODA [void Start()]), tak je TASK pri volani METHOD [bool Wait(int MillisecondsTimeout, CancellationToken CancellationToken)] vykonany OKAMZITE a to na THREADE, ktory VOLAL [bool Wait(int MillisecondsTimeout, CancellationToken CancellationToken)]. Vyhodou tejto implementacie je, ze sa NEVYTVARA NOVY THREAD a teda ani nedochadza k PERFORMACE HIT s tym spojeny.
   O. STATIC METHOD [int WaitAny(Task[] Tasks, int MillisecondsTimeout, CancellationToken CancellationToken)] umoznuje cakat na skoncenie JEDNEHO z VIACERYCH TASKS.
   P. STATIC METHOD [bool WaitAll(Task[] Tasks, int MillisecondsTimeout, CancellationToken CancellationToken)] umoznuje cakat na skoncenie VSETKYCH TASKS.
   Q. METHOD [Task<TResult> ContinueWith<TResult>(Func<Task,object?,TResult> ContinuationFunction, object? State, CancellationToken CancellationToken, TaskContinuationOptions ContinuationOptions, TaskScheduler Scheduler)] umoznuje vytvrit NOVY TASK, ktory sa spusti po dokonceni tohto TASKU.
   R. METHOD [Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>,object?,TNewResult> ContinuationFunction, object? State, CancellationToken CancellationToken, TaskContinuationOptions ContinuationOptions, TaskScheduler Scheduler)] umoznuje vytvrit NOVY TASK, ktory sa spusti po dokonceni tohto TASKU a ma ako RETURN VALUE objekt TYPE 'TNewResult'.
   S. METHOD [ConfiguredTaskAwaitable ConfigureAwait(bool ContinueOnCapturedContext)] nakonfiguruje AWAITER [TaskAwaiter] pouzity na cakanie na ukoncenie daneho TASK.
   T. METHOD [TaskAwaiter GetAwaiter()] vracia AWAITER OBJECT [TaskAwaiter] pouzity na cakanie na ukoncenie daneho TASK.
   U. STATIC METHOD [YieldAwaitable Yield()] vracia AWAITABLE TASK [YieldAwaitable], ktory sa vrati do CURRENT CONTEXT, ked TASK na ktory caka skonci.
   V. STATIC METHOD [Task Delay(int MillisecondsDelay, CancellationToken CancellationToken)] vytvori TASK, ktory nic nerobi, iba sa po stanovenom case automaticky ukonci.
   W. STATIC METHOD [Task<TResult> FromResult<TResult>(TResult Result)] vytvori TASK, ktory sa OKAMZITE SKONCI, pricom ako RETURN VALUE vrati VALUE stanovenu ako PARAMETER.
   X. METHOD [void RunSynchronously()] SYNCHRONNE spusti dany TASK na TASK SCHEDULER.
22. C# 5.0. obsahuje nove KEYWORDS, ktore zjednodusuju pisanie ASYNCHRONNEHO CODE.
   A. KEYWORD [async] sluzi na oznacenie ASYNCHRONOUS FUNCTIONS, ktorych CODE sa ma vykonavat ASYNCHRONNE.
   B. KEYWORD [await] pouzivany v [async] METHODS je OPERATOR, ktory oznacuje EXPRESSION obsahujuci spustenie ASYNCHRONNEJ OPERATION (zvycajne volanie ASYNCHRONNEJ FUNCTION). EXPRESSION MUSI vracat OBJECT pre ktory je mozne volat METHOD [GetAwaiter()] (ako MEMBER METHOD, alebo EXTENSION METHOD).
!!! 23. CODE ASYNCHRONOUS FUNCTION C# COMPILER preklada na STATE MACHINE, ktora postupne vykonava jednotlive casti ASYNCHRONOUS FUNCTION.
!!!!! 24. OPERATOR [await] v ASYNCHRONOUS FUNCTION je pre C# ZARAZKA, ktora definuje NOVY STATE v generovanej STATE MACHINE. C# ROZLOZI CODE ASYNCHRONOUS FUNCTION na jednotlive casti, ktore su oddelene prave OPERATOR [await]. Z tychto casti vytvori STATES generovanej STATE MACHINE. Jednotlive STATES su vykonavane v OSOBITNYCH TASKS, ktore su naviazane na seba. STATE MACHINE po vykonani kazdeho TASK STATE MACHINE skontroluje ako TASK SKONCIL a ak skoncil hodenim EXCEPTION, tak namiesto vykonania dalsieho TASK generuje EXCEPTION.
!!!!! 25. Vykonavanie ASYNCHRONOUS FUNCTION SKONCI OKAMZITE, ked CODE narazi na PRVY VYSKYT OPERATOR [await] a riadenie sa vrati do METHOD, ktora ASYNCHRONOUS FUNCTION zavolala. ASYNCHRONOUS FUNCTION vracia Tast<RETURN_VALUE>, kde RETURN_VALUE je TYPE RETURN VALUE, ktoru ASYNCHRONOUS FUNCTION vracia. CALLER CODE ASYNCHRONOUS FUNCTION, moze vyuzit vrateny TASK na detekciu, kedy CODE ASYNCHRONOUS FUNCTION skoncil a zistit ci skoncil korektne, alebo generovanim EXCEPTION.
!!! 26. ASYNCHRONOUS FUNCTIONS maju nasledujuce obmedzenia.
   A. Nemozu sa pouzit v Main() METHOD.
   B. Nemozu sa pouzit v CONSTRUCTORS
   C. Nemozu sa pouzit v PROPERTY GETTERS a SETTERS.
   D. Nemozu sa pouzit v EVENT GETTERS a SETTERS.
   E. Nemozu mat [ref] a [out] PARAMETERS.
!!! 27. Pouzitie KEYWORD [await] ma nasledujuce ombedzenia.
   A. Nemoze byt obaleny v [lock] KEYWORD ani pomocou volani METHODS CLASS [Monitor], pretoze CODE PRED a PO [await] moze byt vykonavany v ROZLICNYCH THREADS a Monitor CLASS si DRZI informaciu o LOCK OWNERSHIP. Ak by INE THREADS vykonali LOCK a UNNLOCK, CLASS [Monitor] by to detekoval a generoval EXCEPTION.
   B. Nemoze byt pouzity v [catch] BLOCK.
   C. Nemoze byt pouzity vo [finally] BLOCK.
   D. Nemoze byt pouzity v [unsafe] BLOCK.
!!!!! 28. C# preklada ASYNCHRONOUS FUNCTIONS nasledujucim sposobom.
   A. Vygeneruje NOVY CLASS implementujuci INTERFACE [IAsyncStateMachine]. CLASS je implementaciou STATE MACHINE, ktora vykonava casti CODE POVODNEJ FUNCTION oddelene OPERATOR [await].
   !!! B. Vygenerovany CLASS obsahuje v METHOD [IAsyncStateMachine.MoveNext()] CODE POVODNEJ FUNCTION modifikovanej tak, aby casti POVODNEJ FUNCTION oddelene OPERATOR [await] mohli byt vykonavane v OSOBITNYCH TASKS.
   !!! C. Vygenerovany CLASS ma FIELD typu [AsyncTaskMethodBuilder<RETURN_VALUE>], ktory ma v PROPERTY [Task] ulozeny TASK, ktory je vrateny ako RETURN VALUE POVODNEJ FUNCTION.
   D. CODE POVODNEJ FUNCTION obsahuje iba VYTVORENIE INSTANCIE vygenerovanej CLASS reprezentujucej STATE MACHINE, jej spustenie a vratenie PROPERTY [AsyncTaskMethodBuilder<RETURN_VALUE>.Task].
   !!!!! E. METHOD [IAsyncStateMachine.NextMove()] vo vygenerovanej CLASS je OPATOVNE volana pri dokonceni niektorej [await] OPERATION a vykonava prechod medzi jednotlivymi stavmi STATE MACHINE.
!!!!! 29. Ak C# objavi OPERATOR [await] v CODE POVODNEJ FUNCTION, vykonava nasledujuce cinnosti.
   A. C# zoberie OPERAND OPERATOR [await] (CODE za [await] - zvycajne volanie FUNCTION, ktora v RETURN VALUE vracia OBJECT [Task]) a na tomto CODE zavola METHOD [GetAwaiter()].
   !!! B. METHOD [GetAwaiter()] moze byt sucastou TYPE, ktory CODE za [await] vracia, alebo to moze byt EXTENSION METHOD.
   !!!!! C. Vo VACSINE PRIPADOV je CODE za OPERATOR [await] volanim FUNCTION, ktora vracia instanciu CLASS [Task]. CLASS TASK implementuje METHOD [Task.GetAwaiter()], ktora vracia instanciu CLASS [TaskAwaiter].
   !!!!! D. CODE za OPERATOR [await] moze obsahovat LUBOVOLNU EXPRESSION, ktora vracia OBJECT na ktory je mozne aplikovat volanie METHOD [GetAwaiter()]. OPERATOR [await] teda moze mat namiesto volania METHOD ako OPERAND OBJECT typu [Task], ktory ma MEMBER METHOD [GetAwaiter()].
   !!!!! E. OBJECT [Task], ktory vracia EXPRESSION za OPERATOR [await] MUSI byt SPUSTENY. METHOD [GetAwaiter()] ho AUTOMATICKY NESPUSTA.
!!!!! 30. OPERATOR [await] je mozne pouzit IBA na EXPRESSIONS pre ktore je mozne volat METHOD, alebo EXTENSION METHOD [GetAwaiter()].
!!! 31. ASP.NET CORE definuje INTERFACE [IAsyncEnumerable<TType>], ktory umoznuje ASYNCHRONNU ENUMERACIU cez COLLECTION RESULTS. INTERFACE [IAsyncEnumerable<TType>] sa pouziva nasledujucim sposobom.
   A. Definuje sa PRODUCER METHOD, ktora vracia TYPE [IAsyncEnumerable<TType>]. PRODUCER METHOD generuje jednotlive RESULTS a vracia ich pomocou KEYWORD [yield return].
   B. CONSUMER METHOD spracuvava COLLECTION RESULTS pomocou KEYWORD [await foreach()].
   !!! C. Vdaka pouzitiu INTERFACE [IAsyncEnumerable<TType>] moze CONSUMER METHOD spracuvavat jednotlive RESULTS POSTUPNE ako su GENEROVANE este skor ako je cela COLLECTION vygenerovana.
32. OPERATOR [nameof()] umoznuje ziskat nazov odkazovanej ENTITY (VARIABLE, PROPERTY, METHOD, CLASS).
//----------------------------------------------------------------------------------------------------------------------