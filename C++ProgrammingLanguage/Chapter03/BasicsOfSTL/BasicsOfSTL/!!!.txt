//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje niektore zakladne koncepty STL.
2. Vsetky triedy a funkcie v STL su definovane v NAMESPACE 'std'.
3. Trieda 'cout' sluzi ako STREAM na vypis na KONZOLU.
4. Trieda 'wcout' ja UNICODE verzia 'cout'.
5. Triedy 'string' a 'wstring' realizuju STANDARDNY ANSI a UNICODE STRING.
!!!!! 6. Trieda 'cout', resp. 'wcout' MA OPERATOR '<<' pre 'string', resp. 'wstring' definovant v <string> a teda ak NESPRAVIM [#include <string>] tak do 'cout', resp. 'wcout' NEMOZEM ZAPISAT 'string', resp. 'wstring'.
7. Trieda 'cin', resp. 'wcin' sluzia na citanie STREAMU z KONZOLY. RIGHT parameter operatora '>>' urcuje aky typ vstupu sa bude citat.
!!! 8. Ak vystup 'cin' ukladam do 'string', alebo 'wstring', tak 'cin' cita do 1. vyskytu WHITE CHAR. To znamena, ze ked napisem text [Timmy Anderson], tak sa zoberie iba retazec [Timmy]. Ak chcem citat CELY RIADOK, musim pouzit FUNKCIU getline().
9. STL poskytuje viacero rozlicnych CONTAINERS.
   A. Trieda 'vector' implementuje dynamicky rozsirovatelne pole.
   B. Trieda 'list' implementuje SPOJKOVY ZOZNAM a teda NEMA operator [] a k datam sa pristupuje cez ITERATORS.
   C. Trieda 'map' implementuje DICTIONARY.
!!! 10. Trieda 'vector' pri pouziti operatora [] NEKONTROLUJE ci nedoslo k prekroceniu maximalnej dlzky 'vector'. Metoda at() vykonava takuto kontrolu, pricom ak dojde k prekroceniu maximalnej dlzky 'vector' je HODENA EXCEPTION 'out_of_range'.
!!!!! 11. V DEBUG kompilacii dochadza pri prekroceni velkosti 'vector' cez operator [] k hodeniu ASSERT. v RELEASE kompilacii k takejto kontrole NEDOCHADZA.
12. STL CONTAINERS maju okrem ITERATORS aj CONST ITERATORS, ktore je mozne vyuzit ak pri iteracii sa NEMODIFIKUJU DATA, ktore iterujem.
13. STL obsahuje sadu ALGORITHMS, ktore pracuju s CONTAINTERS prostrednictvom ITERATORS.
!!!!! 14. ITERATORS mozu byt REPREZENTOVANE LUBOVOLNYM KONSTUKTOM, ktory vsak MUSI obsahovat nasledujuce OPERATORS.
   A. Operator '++' sluzi na presun na nasledujuci ITEM.
   B. Operator '*' sluzi na vratenie hodnoty daneho ITEM.
!!! 15. ITERATORS mozu byt v zavislosti na TYPE CONTAINER reprezntovane napriklad aj nasledujucimi sposobmi.
   A. Klasicke C ARRAYS maju definovany ITERATOR ako KLASICKY POINTER. C++ POINTER, kedze MA DEFINOVANE OPERATORS '++' a '*', MOZE SLUZIT ako POINTER.
   B. Trieda 'vector' ma ITERATOR definovany ako POINTER na ELEMENT. Teda ROVNAKO ako C ARRAYS.
   C. Trieda 'list' ma ITERATOR definovny ako SPECIALIZOVANU TRIEDU, ktora obsahuje POINTER na NASLEDUJUCI ITEM a POINTER na HODNOTU. Tato trieda ma pretazene OPERATORY '++' a '*', aby splnala zakladne poziadavky na ITERATOR.
!!!!! 16. Kazdy STL CONTAINER obsahuje MINIMALNE nasledujuce 2 ITERATORS.
   A. Typ 'iterator' pre KAZDY CONTAINER vracia STANDARDNY ITERATOR umoznujuci iteraciu ITEMS daneho CONTAINER a MODIFIKACIU ITEMS POCAS ITEROVANIA.
   B. Typ 'const_iterator' pre KAZDY CONTAINTER vracia CONST ITERATOR, ktory pri iteracii NEUMOZNUJE MENIT ITEMS daneho CONTAINER.
!!!!! 17. Je ABSTOLUTNE KLUCOVE si uvedomit FILOZOFIU ITERATORS v C++.
   A. ITERATORS v C++ su zalozene na TEMPLATES, ktore su vyhodnocovane v COMPILE TIME.
   B. To znamena, ze v COMPILE TIME sa kontroluje ci KONSTRUKT, ktory dany CONTAINER vracia ako ITERATOR MA DEFINOVANE OPERATORS '++' a '*'.
   C. Z toho vyplyva, ze ITERATOR moze byt kludne i POINTER, kedze ten ma obe tieto OPERATORS definovane.
   D. No ITERATOR moze byt i LUBOVOLNY CLASS, ak prenho PRETAZIM OPERATORS '++' a '*'.
!!!!! 18. ALGORITHMS definovane v kniznici <alogrithm> pouzivaju ITERATORS nasledujucim sposobom.
   A. Dany ALGORITHM definuje TYP ITERATORA, ktory od KONSTUKTU nad ktorym chcem robit dany ALGORITHM pozaduje.
   B. KONSTRUKT (C ARRAY, alebo CONTAINER) musi MAT DEFINOVANY PRISLUSNY TYP ITERATORA - teda KONSTUKT implementujuci OPERATORS '++' a '*'. To moze byt bud SPECIALIZOVANY CLASS, alebo KLASICKY POINTER, kedze obe tieto KONSTRUKTY SPLNAJU ZAKLADNU POZIADAVKU na ITERATORS - definovane OPERATORS '++' a '*'.
   !!! C. ALGORITHM pouzije zadany ITERATOR, pricom uz POCAS KOMPILACIE sa skontroluje, ci KONSTRUKT zaslany do FUNKCIE ALGORITHM splna poziadavky na ITERATOR - ma definovane OPERATORS '++' a '*'. Ak ho nesplna a teda NIE JE ITERATOR, KOMPILATOR hodi CHYBU.
!!!!! 19. ZASADNY ROZDIEL medzi pouzitim ALGORITHMS BEZ vyuzitia C++ ITERATORS a s VYUZITIM C++ ITERATORS je v VYKONNOSTI. Pouzitie ITERATORS je DALEKO EFEKTIVNEJSIE ako pouzitie napriklad INTERFACES.
    !!! A. Ak NEPOUZIJEM C++ ITERATORS, tak napriklad v C# NAMIESTO ITERATORS vyzivajucich PRETAZENE OPERATORS vyuzivam ITERFACES. Napriklad pri SORTING v C# je VZDY volana METODA INTERFACE, ktore spravi POROVNANIE 2 ITEMS. Tym, ze NEUSTALE VOLAM METODY INTERFACE, NEUSTALE je pouzivana VIRTUAL TABLE a METODY INTERFACE su volane VIRTUALNE. Z toho vyplyva VYRAZNY PERFORMANCNE
    !!! B. Ak POUZIJEM C++ ITERATORS, tak napriklad pri realizacii SORTING sa pouzivaju OPERATORS '++' a '*' NAMIESTO VOLANIA VIRTUALNTCH FUNKCII. A kedze OPERATORS '++' a '*' spravidla NEOBSAHUJU VOLANIE VIRTUALNYCH METOD (casto ako ITERATOR sa pouzije POINTER) je pouzitie ALGORITHMS s ITERATORS DALEKO RYCHLEJSIE ako pouzitie INTERFACES.
!!! 20. Aj STL STREAMS podporuju ITERATORS co umoznuje pouzitie STREAMS v ALGORITHMS.
   A. Trieda 'istream_iterator<T>' reprezentuje INPUT STREAM ITERATOR.
   B. Trieda 'ostream_iterator<T>' reprezentuje OUTPUT STREAM ITERATOR.
21. ALGORITHM for_each() umoznuje vykonat FUNKCIU zaslanu ako PARAMETER pre KAZDY ITEM daneho ITERATOR.
22. ALGORITHM find_if() vyhladava ITEM splnajuci PREDICATE zaslany ako argument funkcie find_if().
23. ALGORITHM count_if() spocitava pocet ITEMS splnajucich PREDICATE zaslany ako argument funkcie count_if().
!!! 24. ALGORITHMS mem_fun() a mem_fun_ref() KONVERTUJU METHOD (funkciu nejakej CLASS) na FUNCTION OBJECT, ktory umoznuje POUZIT ako PREDICATES a ACTIONS i CLASS METHODS. Vdaka mem_fun() a mem_fun_ref() je mozne pouzit METHOD ako PREDICATE, alebo ACTION v ALGORITHMS ako su napriklad for_each() ci find_if().
   A. ALGORITHM mem_fun() sa pouziva ak chcem pracovat na CONTAINER obsahujucim POINTERS (napriklad vector<CName*>).
   B. ALGORITHM mem_fun_ref() sa pouziva ak chcem pracovat na CONTAINER obsahujucim OBJEKTY (napriklad vector<CName>).
25. STL obsahuje podporne triedy ako complex<T>, ci valarray<T> na realizaciu matematickych operacii.
//-------------------------------------------------------------------------------------------------------