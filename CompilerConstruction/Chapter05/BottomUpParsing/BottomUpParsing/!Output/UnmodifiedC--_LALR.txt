TYPE: [KEYWORD], TOKEN: [void] !
TYPE: [IDENTIFIER], TOKEN: [Add] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [COMMA], TOKEN: [,] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [CURLY BRACKET LEFT], TOKEN: [{] !
TYPE: [KEYWORD], TOKEN: [return] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [PLUS], TOKEN: [+] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [CURLY BRACKET RIGHT], TOKEN: [}] !
TYPE: [KEYWORD], TOKEN: [void] !
TYPE: [IDENTIFIER], TOKEN: [Main] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [KEYWORD], TOKEN: [void] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [CURLY BRACKET LEFT], TOKEN: [{] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [int] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [STRING], TOKEN: ["Program \"Example2\" STARTED !\n"] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [ASSIGMENT], TOKEN: [=] !
TYPE: [NUMBER], TOKEN: [10] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ASSIGMENT], TOKEN: [=] !
TYPE: [NUMBER], TOKEN: [5] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ASSIGMENT], TOKEN: [=] !
TYPE: [IDENTIFIER], TOKEN: [Add] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [X] !
TYPE: [COMMA], TOKEN: [,] !
TYPE: [IDENTIFIER], TOKEN: [Y] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [NOT EQUAL], TOKEN: [!=] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [LESSER OR EQUAL], TOKEN: [<=] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [GREATER OR EQUAL], TOKEN: [>=] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [KEYWORD], TOKEN: [if] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [EQUAL], TOKEN: [==] !
TYPE: [NUMBER], TOKEN: [15] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [KEYWORD], TOKEN: [else] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [IDENTIFIER], TOKEN: [Ret] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [IDENTIFIER], TOKEN: [Print] !
TYPE: [ROUND BRACKET LEFT], TOKEN: [(] !
TYPE: [STRING], TOKEN: ["Program \"Example2\" FINISHED !\n"] !
TYPE: [ROUND BRACKET RIGHT], TOKEN: [)] !
TYPE: [SEMICOLON], TOKEN: [;] !
TYPE: [CURLY BRACKET RIGHT], TOKEN: [}] !
TYPE: [EOF], TOKEN: [$] !
SCANER SUCCESSFULLY COMPLETED !
CALCULATION of DFA and PARSING TABLE for LR(1) !
Number of NFA STATES: [1553] !
Number of LR(1) DFA STATES: [818] !
Number of SHIFT-REDUCE conflicts: [1] !
Number of REDUCE-REDUCE conflicts: [0] !
CALCULATION of DFA and PARSING TABLE for LALR(1) !
Number of LALR(1) DFA STATES: [104] !
Number of SHIFT-REDUCE conflicts: [1] !
Number of REDUCE-REDUCE conflicts: [0] !



PROGRAM
 DECLARATION_LIST
  DECLARATION_LIST
   DECLARATION
    FUNCTION_DECLARATION
     TYPE_SPECIFIER
      void
     Add
     (
     PARAMS
      PARAM_LIST
       PARAM_LIST
        PARAM
         TYPE_SPECIFIER
          int
         X
       ,
       PARAM
        TYPE_SPECIFIER
         int
        Y
     )
     COMPOUND_STATEMENT
      {
      LOCAL_DECLARATIONS
       ?
      STATEMENT_LIST
       STATEMENT_LIST
        ?
       STATEMENT
        RETURN_STATEMENT
         return
         (
         EXPRESSION
          SIMPLE_EXPRESSION
           ADDITIVE_EXPRESSION
            ADDITIVE_EXPRESSION
             TERM
              FACTOR
               VARIABLE
                X
            ADD_OPERATION
             +
            TERM
             FACTOR
              VARIABLE
               Y
         )
         ;
      }
  DECLARATION
   FUNCTION_DECLARATION
    TYPE_SPECIFIER
     void
    Main
    (
    PARAMS
     void
    )
    COMPOUND_STATEMENT
     {
     LOCAL_DECLARATIONS
      LOCAL_DECLARATIONS
       LOCAL_DECLARATIONS
        LOCAL_DECLARATIONS
         ?
        VARIABLE_DECLARATION
         TYPE_SPECIFIER
          int
         X
         ;
       VARIABLE_DECLARATION
        TYPE_SPECIFIER
         int
        Y
        ;
      VARIABLE_DECLARATION
       TYPE_SPECIFIER
        int
       Ret
       ;
     STATEMENT_LIST
      STATEMENT_LIST
       STATEMENT_LIST
        STATEMENT_LIST
         STATEMENT_LIST
          STATEMENT_LIST
           STATEMENT_LIST
            ?
           STATEMENT
            EXPRESSION_STATEMENT
             EXPRESSION
              SIMPLE_EXPRESSION
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  CALL
                   Print
                   (
                   ARGS
                    ARG_LIST
                     EXPRESSION
                      SIMPLE_EXPRESSION
                       ADDITIVE_EXPRESSION
                        TERM
                         FACTOR
                          "Program \"Example2\" STARTED !\n"
                   )
             ;
          STATEMENT
           EXPRESSION_STATEMENT
            EXPRESSION
             VARIABLE
              X
             =
             EXPRESSION
              SIMPLE_EXPRESSION
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  10
            ;
         STATEMENT
          EXPRESSION_STATEMENT
           EXPRESSION
            VARIABLE
             Y
            =
            EXPRESSION
             SIMPLE_EXPRESSION
              ADDITIVE_EXPRESSION
               TERM
                FACTOR
                 5
           ;
        STATEMENT
         EXPRESSION_STATEMENT
          EXPRESSION
           VARIABLE
            Ret
           =
           EXPRESSION
            SIMPLE_EXPRESSION
             ADDITIVE_EXPRESSION
              TERM
               FACTOR
                CALL
                 Add
                 (
                 ARGS
                  ARG_LIST
                   ARG_LIST
                    EXPRESSION
                     SIMPLE_EXPRESSION
                      ADDITIVE_EXPRESSION
                       TERM
                        FACTOR
                         VARIABLE
                          X
                   ,
                   EXPRESSION
                    SIMPLE_EXPRESSION
                     ADDITIVE_EXPRESSION
                      TERM
                       FACTOR
                        VARIABLE
                         Y
                 )
          ;
       STATEMENT
        SELECTION_STATEMENT
         if
         (
         EXPRESSION
          SIMPLE_EXPRESSION
           ADDITIVE_EXPRESSION
            TERM
             FACTOR
              VARIABLE
               Ret
           COMPARE_OPERATION
            !=
           ADDITIVE_EXPRESSION
            TERM
             FACTOR
              15
         )
         STATEMENT
          EXPRESSION_STATEMENT
           EXPRESSION
            SIMPLE_EXPRESSION
             ADDITIVE_EXPRESSION
              TERM
               FACTOR
                CALL
                 Print
                 (
                 ARGS
                  ARG_LIST
                   EXPRESSION
                    SIMPLE_EXPRESSION
                     ADDITIVE_EXPRESSION
                      TERM
                       FACTOR
                        VARIABLE
                         Ret
                 )
           ;
         else
         STATEMENT
          SELECTION_STATEMENT
           if
           (
           EXPRESSION
            SIMPLE_EXPRESSION
             ADDITIVE_EXPRESSION
              TERM
               FACTOR
                VARIABLE
                 Ret
             COMPARE_OPERATION
              <=
             ADDITIVE_EXPRESSION
              TERM
               FACTOR
                15
           )
           STATEMENT
            EXPRESSION_STATEMENT
             EXPRESSION
              SIMPLE_EXPRESSION
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  CALL
                   Print
                   (
                   ARGS
                    ARG_LIST
                     EXPRESSION
                      SIMPLE_EXPRESSION
                       ADDITIVE_EXPRESSION
                        TERM
                         FACTOR
                          VARIABLE
                           Ret
                   )
             ;
           else
           STATEMENT
            SELECTION_STATEMENT
             if
             (
             EXPRESSION
              SIMPLE_EXPRESSION
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  VARIABLE
                   Ret
               COMPARE_OPERATION
                >=
               ADDITIVE_EXPRESSION
                TERM
                 FACTOR
                  15
             )
             STATEMENT
              EXPRESSION_STATEMENT
               EXPRESSION
                SIMPLE_EXPRESSION
                 ADDITIVE_EXPRESSION
                  TERM
                   FACTOR
                    CALL
                     Print
                     (
                     ARGS
                      ARG_LIST
                       EXPRESSION
                        SIMPLE_EXPRESSION
                         ADDITIVE_EXPRESSION
                          TERM
                           FACTOR
                            VARIABLE
                             Ret
                     )
               ;
             else
             STATEMENT
              SELECTION_STATEMENT
               if
               (
               EXPRESSION
                SIMPLE_EXPRESSION
                 ADDITIVE_EXPRESSION
                  TERM
                   FACTOR
                    VARIABLE
                     Ret
                 COMPARE_OPERATION
                  ==
                 ADDITIVE_EXPRESSION
                  TERM
                   FACTOR
                    15
               )
               STATEMENT
                EXPRESSION_STATEMENT
                 EXPRESSION
                  SIMPLE_EXPRESSION
                   ADDITIVE_EXPRESSION
                    TERM
                     FACTOR
                      CALL
                       Print
                       (
                       ARGS
                        ARG_LIST
                         EXPRESSION
                          SIMPLE_EXPRESSION
                           ADDITIVE_EXPRESSION
                            TERM
                             FACTOR
                              VARIABLE
                               Ret
                       )
                 ;
               else
               STATEMENT
                EXPRESSION_STATEMENT
                 EXPRESSION
                  SIMPLE_EXPRESSION
                   ADDITIVE_EXPRESSION
                    TERM
                     FACTOR
                      CALL
                       Print
                       (
                       ARGS
                        ARG_LIST
                         EXPRESSION
                          SIMPLE_EXPRESSION
                           ADDITIVE_EXPRESSION
                            TERM
                             FACTOR
                              VARIABLE
                               Ret
                       )
                 ;
      STATEMENT
       EXPRESSION_STATEMENT
        EXPRESSION
         SIMPLE_EXPRESSION
          ADDITIVE_EXPRESSION
           TERM
            FACTOR
             CALL
              Print
              (
              ARGS
               ARG_LIST
                EXPRESSION
                 SIMPLE_EXPRESSION
                  ADDITIVE_EXPRESSION
                   TERM
                    FACTOR
                     "Program \"Example2\" FINISHED !\n"
              )
        ;
     }




PARSING SUCCESSFULLY FINISHED !

Press any key to EXIT !
