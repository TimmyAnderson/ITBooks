//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pracu s ARRAYS v JavaScripte.
!!! 2. ARRAYS su v JavaScript specialne typy OBJECTS, ktore maju PROPERTIES pomenovane podla INDEXOV ARRAY.
3. ARRAYS su vzdy ZERO-BASED ARRAYS.
!!!!! 4. Kedze ARRAYS su OBJECTS, tak KAZDY INDEX je zaroven i PROPERTY. V ARRAYS sa rozlisuju 2 typy PROPERTIES.
   A. INDEXES su PROPERTIES typu INTEGER, ktore su VACSIE ako 0. Pri pouziti OPERATOR[] k takymto PROPRETIES je JavaScript schopny vykonat OPTIMALIZOVANY pristup.
   B. PROPERTIES typu NON-INTEGER, ZAPORNE, alebo i STRINGS sa NEPOVAZUJU za INDEXES a ak sa aplikuje na ne OPERATOR[], tak pristup k nim NIE JE SPECIALNE OPTIMALIZOVANY.
5. ARRAYS v JavaScript su UNTYPED a teda kazdy ITEM moze byt ROZLICNEHO TYPU.
!!! 6. PROPERTY Array.length vracia pocet ITEMS v ARRAY. AVSAK ak ARRAY je SPARSE (teda INDEXES NIE SU KONTINUALNE), tak vracia (MAX_INDEX+1).
7. ARRAYS je mozne vytvarat bud ako LITERALS [var MyArray=[Value1,Value2,...,ValueN]], alebo pomocou Array CONSTRUCTOR [var MyArray=new Array()], [var MyArray=new Array(10) - ARRAY ma 10 ITEMS], alebo [var MyArray=new Array(Value1,Value2,...,ValueN)].
!!! 8. Pomocou OPERATOR delete je mozne odstranit ITEMS z ARRAY. Hodnota Array.length sa vsak NEZMENI.
!!! 9. Pri iterovani pomocou 'for-in' ARRAY su ENUMEROVANE VSETKO ENUMERABLE PROPERTIES. To znamena, ze ak napriklad je do ARRAY pridana FUNCTION (napriklad z BASE OBJECT) ako ENUMERABLE PROPERTY, tak i tato sa pri iterovani pomocou 'for-in' vrati. Takisto vo 'for-in' NIE JE GARANTOVANE PORADIE v akom su ITEMS ITEROVANE.
!!! 10. JavaScript podporuje viacdimenzionalne ARRAYS NEPRIAMO tym, ze za kazdy ITEM ARRAY je mozne vlozit ine ARRAYS a tym vytvorit viacdimenzionalne ARRAYS.
11. OBJECT Array obsahuje viacero MEMBERS, ktore su definovane v OBJECT Array.prototype.
   A. PROPERTY 'length' vracia pocet ITEMS v ARRAY. AVSAK ak ARRAY je SPARSE (teda INDEXES NIE SU KONTINUALNE), tak vracia (MAX_INDEX+1).
   B. METHOD join() konveruje vsetky ITEMS na STRING a zluci ich. Ako SEPARATOR je standardne pouzity znak ',', ktory je vsak mozne zmenit PARAMETROM.
   C. METHOD reverse() obrati ARRAY. REVERSE sa deje na danom ARRAY a NEVYTVARA sa NOVY ARRAY.
   D. METHOD sort() vykonava ALPHANUMERIC SORT nad ARRAY. Ak je potrebny INY TYP SORTU ako ALPHANUMERIC, je potrebne ako parameter sort() zadat COMPARATOR FUNCTION. COMPARATOR FUNCTION musi mat 2 PARAMETRE, pricom ak PARAM1<PARAM2 musi vratit ZAPORNU hodnotu, ak PARAM1>PARAM2 musi vratit KLADNU hodnotu a ak PARAM1==PARAM2 musi vratit 0.
   E. METHOD concat() vytvara NOVY ARRAY tym, ze zlucuje ITEMS ARRAY pre ktory je volana so vsetkymi PARAMETRAMI METHOD. Ak je parametrom ARRAY, tak su do noveho ARRAY pridane VSETKY ITEMS tohto ARRAY. Ak vsak sa jedna o VIACDIMENZIONALNY ARRAY, tak su zlucene iba ITEMS v 1. DIMENZII. Inak povedane METHOD pre ARRAY PARAMETRE NIE JE VOLANA REKURZIVNE.
   F. METHOD slice() vytvara NOVY ARRAY tym, ze z povodneho ARRAY vyberie SUBARRAY na INDEXES, ktore su zadane ako PARAMETRE. Ak su INDEXES ZAPORNE, tak vyjadruju poziciu (LAST_ITEM-INDEX). Vysledok je NOVY ARRAY obsahujuci ITEMS na poziciach <INDEX1,INDEX2).
   G. METHOD splice() vymazava a pridava ITEMS do ARRAY pre ktory je volana. Prikaz [MyArray.splice(Index,NumberOfItems,Param1,Param2,...,ParamN)] odstrani 'NumberOfItems' ITEMS od INDEXU 'Index' a od INDEXU 'Index' vlozi hodnoty 'Param1', 'Param2' az 'ParamN'. Hodnoty 'Param1', 'Param2' az 'ParamN' su NEPOVINNE. METHOD vracia ARRAY s tymi ITEMS, ktore boli odstranene.
   H. METHOD push() pridava 1-N ITEMS na KONIEC ARRAY a vracia dlzku ARRAY.
   I. METHOD pop() odstranuje ITEM z KONCA ARRAY a vracia odstraneny ITEM.
   J. METHOD unshift() pridava 1-N ITEMS na ZACIATOK ARRAY a vracia dlzku ARRAY.
   K. METHOD shift() odstranuje ITEM zo ZACIATKU ARRAY a vracia odstraneny ITEM.
   L. METHOD toString() vracia ITEMS ARRAY ako STRING, kde jednotlive ITEMS su oddelene znakom ','.
   M. METHOD toLocaleString() je LOKALIZOVANA analogia METHOD toString().
   N. METHOD forEach() pre KAZDY ITEM vola CALLBACK FUNCTION, ktory je zaslany ako 1. PARAMETER forEach(). Ako 2. OPTIONAL PARAMETER forEach() moze byt OBJECT nad, ktorym sa vola CALLBACK zaslana ako 1. PARAMETER. CALLBACK FUNCTION ma 3 PARAMETRE obsahujuce ITEM, INDEX a ARRAY.
   O. METHOD map() pre KAZDY ITEM vola CALLBACK FUNCTION a vracia ARRAY s hodnotami, ktore CALLBACK FUNCTION vracia. CALLBACK FUNCTION ma jediny PARAMETER obsahujuci hodnotu ITEM.
   P. METHOD filter() pre KAZDY ITEM vola CALLBACK FUNCTION typu PREDICATE. Vysledkom volania je ARRAY obsahujuci ite ITEMS pre ktore PREDICATE vratil hodnotu 'true'.
   Q. METHOD every() pre KAZDY ITEM vola CALLBACK FUNCTION typu PREDICATE. Ak PREDICTE pre KAZDY ITEM vrati 'true', every() vrati 'true', inak vrati 'false'.
   R. METHOD some() pre KAZDY ITEM vola CALLBACK FUNCTION typu PREDICATE. Ak PREDICTE aspon pre 1 ITEM vrati 'true', some() vrati 'true', inak vrati 'false'.
   S. METHOD reduce() pre KAZDY ITEM vola CALLBACK FUNCTION, ktora vykonava AGREGACIU ITEMS. CALLBACK FUNCTION ma 2 PARAMETRE, kde 1. PARAMETER je doteraz AGREGOVANA hodnota a 2. PARAMETER je ITEM. METHOD reduce() vracia vyslednu agregovanu hodnotu. METHOD reduce() moze mat ako 2. NEPOVINNY PARAMETER inicializacnu hodnotu.
   T. METHOD reduceRight() je ANALOGIOU k reduce(), akurat volania CALLBACK FUNCTION idu od NAJVYSSIEHO INDEXU k NAJNIZSIEMU.
   U. METHOD indexOf() najde PRVY ITEM smerom od NAJNIZSIEHO k NAJVYSSIEMU ITEM, ktory je zhodny s 1. PARAMETROM indexOf(). METHOD indexOf() ma ako OPTIONAL i 2. PARAMETER, ktory definuje INDEX od ktoreho sa zacina vyhladavanie. Tato hodnota moze byt aj ZAPORNA a vtedy za vyhladava od INDEX (MAX_INDEX-INDEX). V pripade, ze ITEM s danou hodnotu NIE JE NAJDENY, vrati indexOf() hodnotu -1.
   V. METHOD lastIndexOf() najde PRVY ITEM smerom od NAJVYSSIEEHO k NAJNIZSIEMU ITEM, ktory je zhodny s 1. PARAMETROM lastIndexOf(). METHOD lastIndexOf() ma ako OPTIONAL i 2. PARAMETER, ktory definuje INDEX od ktoreho sa zacina vyhladavanie. Tato hodnota moze byt aj ZAPORNA a vtedy za vyhladava od INDEX (MAX_INDEX-INDEX). V pripade, ze ITEM s danou hodnotu NIE JE NAJDENY, vrati lastIndexOf() hodnotu -1.
12. METHOD Array.IsArray() vracia 'true', ak OBJECT je ARRAY, inak vrati 'false'.
//-------------------------------------------------------------------------------------------------------