//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu REST SERVICES v SPRING.
2. REST SERVICES umoznuju poskytovat API ENDPOINTS pre WEB BROWSER APPLICATIONS, pre MOBILE APPLICATIONS si ine BACKEND SERVICES.
3. REST SERVICES su v SPRING implementovane pomocou rovnakeho MVC FRAMEWORK ako WEB APPLICATIONS.
4. HTTP REQUEST na REST SERVICE je v SPRING spracovany v nasledujucich krokoch.
   A. WEB CLIENT zasle HTTP REQUEST.
   B. SERVLET CONTAINER TOMCAT WEB SERVER zachyti HTTP REQUEST a zasle ho do DISPATCHER SERVLET.
   C. DISPATCHER SERVLET najde na zaklade PATH a HTTP VERB ACTION METHOD, ktoru ma pre dany HTTP REQUEST zavolat.
   D. DISPATCHER SERVLET zavola ACTION METHOD.
   E. DISPATCHER SERVLET RETURN VALUE ACTION METHOD nezasiela do VIEW RESOLVER, ale priamo do SERVLET CONTAINER TOMCAT, ktory vytvori HTTP RESPONSE.
   F. HTTP RESPONSE je vratena na WEB CLIENT na dalsie spracovanie.
5. MVC CONTROLLER, ktory by implementoval REST SERVICE sa realizuje v nasledujucich krokoch.
   A. Na CONTROLLER CLASS sa aplikuje ANNOTATION [@Controller]. Tato ANNOTATION oznaci instancie CLASS za SPRING BEAN OBJECTS.
   B. Na ACTION METHOD sa aplikuje ANNOTATION [@RequestMapping(URL)], ktora ma ako PARAMETER URL PATH pre ktoru sa ma dana ACTION METHOD vyvolat. ANNOTATION [@RequestMapping] umoznuje definovat aj HTTP VERB pre ktoru sa ACTION METHOD ma volat. Alternativou je pouzitie specializovanej ANNOTATION pre dany HTTP VERB ako napriklad ANNOTATION [@GetMapping].
   !!! C. Na ACTION METHOD sa aplikuje ANNOTATION [@ResponseBody], ktory urcuje, ze ACTION METHOD nebude vracat VIEW NAME, ale CONTENT, ktory sa ma vratit v HTTP RESPONSE ako HTTP CONTENT.
6. ANNOTATION [@RestController] je mozne aplikovat na cely CONTROLLER co znamena, ze vsetky jej ACTION METHODS budu automaticky povazovane ze REST SERVICES aj bez toho, aby na ne bola aplikovana ANNOTATION [@ResponseBody].
7. CURL je CONSOLE WEB CLIENT, ktory umoznuje zasielat HTTP REQUESTS na WEB SERVERS a zobrazovat HTTP RESPONSES. CURL umoznuje definovat nasledujuce COMMANDS.
   A. COMMAND [curl URL] odosiela HTTP REQUEST s HTTP VERB GET na URL 'URL'.
   B. COMMAND [curl -X VERB URL] odosiela HTTP REQUEST s HTTP VERB 'VERB' na URL 'URL'.
   C. COMMAND [curl -v -X VERB URL] odosiela HTTP REQUEST s HTTP VERB 'VERB' na URL 'URL' pricom zobrazuje podrobnejsi vystup z HTTP RESPONSE.
   D. COMMAND [curl -v -X VERB URL -d 'JSON_CONTENT' -H  "Content-Type: application/json"] odosiela HTTP REQUEST s HTTP VERB 'VERB' na URL 'URL' pricom zobrazuje podrobnejsi vystup z HTTP RESPONSE. HTTP REQUEST ma CONTENT TYPE JSON a VALUE 'JSON_CONTENT' obsahuje JSON CONTENT.
8. HTTP RESPONSE obsahuje nasledujuce casti.
   A. HTTP RESPONSE STATUS. Urcuje ci OPERATION na WEB SERVER bola vykonana upesne.
   B. HTTP RESPONSE HEADERS. Obsahuju KEY-VALUE VALUES, ktore popisuju HTTP RESPONSE.
   C. HTTP RESPONSE BODY. Obsahuje DATA, ktore sa vracaju v HTTP RESPONSE.
9. WEB SERVICE moze vracat lubovolny CUSTOM JAVA OBJECT.
10. WEB SERVICE BY-DEFAULT vracia DATA v HTTP RESPONSE BODY formatovany ako JSON. HTTP RESPONSE BODY moze byt formatovany aj v XML ci YAML.
11. WEB SERVICE BY-DEFAULT vracia HTTP RESPONSE STATUS na zaklade toho ako ACTION METHOD skonci.
   A. HTTP RESPONSE STATUS [200] je vrateny, ak ACTION METHOD skonci uspesne bez hodenia EXCEPTION.
   B. HTTP RESPONSE STATUS [400] je vrateny, ak HTTP REQUEST nie je mozne namapovat na PARAMETERS ACTION METHOD.
   C. HTTP RESPONSE STATUS [404] je vrateny, ak pre danu PATH nebol najdeny ziaden RESOURCE.
   D. HTTP RESPONSE STATUS [500] je vrateny, ak ACTION METHOD skonci hodenim EXCEPTION.
!!! 12. SPRING umoznuje definovat obsah HTTP RESPONSE pomocou CLASS [ResponseEntity<T>], kde TYPE 'T' je TYPE OBJECT, ktory je vrateny ako HTTP RESPONSE BODY. Pre CLASS [ResponseEntity<T>] platia nasledujuce fakty.
   A. CLASS [ResponseEntity<T>] ma TYPE PARAMETER 'T' TYPE OBJECT, ktory je vrateny ako HTTP RESPONSE BODY.
   B. CLASS [ResponseEntity<T>] ma CONSTRUCTORS, pomocou ktorych je mozne nastavit HTTP RESPONSE STATUS, HTTP RESPONSE HEADERS aj HTTP RESPONSE BODY.
!!!!! 13. JAVA umoznuje definovat GENERIC TYPE, ktory NEMA definovany INNER TYPE.
   A. SYNTAX [GENERIC_TYPE<?>] definuje GENERIC TYPE, ktory NEMA definovany INNER TYPE.
   B. Za INNER TYPE je mozne pouzit lubovolny TYPE, pricom ak napriklad sa TYPE [GENERIC_TYPE<?>] sa pouzije ako RETURN VALUE METHOD, tak METHOD moze vracat raz [GENERIC_TYPE<INNER_TYPE_1>] a inokedy [GENERIC_TYPE<INNER_TYPE_2>].
14. EXCEPTIONS mozu byt v REST CONTROLLERS spracovane aj genericky pomocou EXCEPTION ADVICES. Pre EXCEPTION ADVICES platia nasledujuce fakty.
   A. EXCEPTION ADVICE umoznuje zachytit EXCEPTIONS, ktore vznikli v ACTION METHODS REST CONTROLLERS a vratit pre ne uniformny HTTP RESPONSE s ERROR MESSAGE. To zjednodusuje spracovanie EXCEPTIONS v REST CONTROLLERS, kedze EXCEPTION HANDLING je mozne implementovat v EXCEPTION ADVICES.
   !!! B. EXCEPTION ADVICES funguju tak, ze ked REST CONTROLLER generuje EXCEPTION rovnakeho TYPE, aky dany EXCEPTION ADVICE spracovava, tak sa vyvola CODE EXCEPTION ADVICE, ktory nasledne spracuje danu EXCEPTION a vrati HTTP RESPONSE, ktora je odoslana spat na WEB CLIENT.
   C. EXCEPTION ADVICE je METHOD, ktora je definovana v CLASS, ktora musi byt oznacena pomocou ANNOTATION [@RestControllerAdvice].
   D. EXCEPTION ADVICE je METHOD, ktora MUSI byt oznacena pomocou ANNOTATION [@ExceptionHandler]. ANNOTATION [@ExceptionHandler] ma ako parameter EXCEPTION CLASS, pre ktoru sa ma spustat.
   E. EXCEPTION ADVICE by mala mat PROTOTYPE [ResponseEntity<CUSTOM_HTTP_BODY> ADVICE_NAME(EXCEPTION_TYPE Exception)], kde TYPE 'CUSTOM_HTTP_BODY' reprezentuje HTTP RESPONSE BODY HTTP RESPONSE, ktory EXCEPTION ADVICE vrati. VALUE 'ADVICE_NAME' je CUSTOM NAME EXCEPTION ADVICE. VALUE 'EXCEPTION_TYPE' je EXCEPTION TYPE, ktory EXCEPTION ADVICE spracovava.
   !!! F. PARAMETER EXCEPTION ADVICE TYPE 'EXCEPTION_TYPE' je OPTIONAL.
15. V ACTION METHOD je mozne ziskat HTTP REQUEST BODY nasledujucim sposobom.
   A. V ACTION METHOD sa definuje PARAMETER, ktory ma CUSTOM TYPE do ktoreho sa ma ulozit HTTP REQUEST BODY.
   B. PARAMETER sa oznaci pomocou ANNOTATION [@RequestBody].
   !!! C. HTTP REQUEST BODY BY-DEFAULT musi mat format JSON.
!!!!! 16. HTTP GET VERB od roku 2014 MOZE obsahovat HTTP REQUEST BODY.
//----------------------------------------------------------------------------------------------------------------------