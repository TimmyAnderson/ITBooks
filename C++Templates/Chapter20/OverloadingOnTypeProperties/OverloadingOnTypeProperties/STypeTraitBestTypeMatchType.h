//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! DECLARATION HELPER TEMPLATE CLASS.
template<typename... TTypes>
struct STypeTraitBestTypeMatchInternal;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! DEFINITION TEMPLATE CLASS HELPER SPECIALIZATION pre DEFAULT CASE.
// !!!!! TEMPLATE CLASS SPECIALIZATION sa pouziva ako DEFAULT CASE, ked ziaden iny MATCH nevyhovuje. V taktom pripade sa pouzije tato TEMPLATE CLASS SPECIALIZATION, ktora kedze vsak NEOBSAHUJE USING [TYPE], tak sposobi COMPILATION ERROR.
template<>
struct STypeTraitBestTypeMatchInternal<>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		// !!!!! RETURN VALUE TYPE sa pouziva na urcenie TYPE, ktory splna MATCH.
		// !!!!! METHOD NEPOTREBUJE DEFINITION, pretoze sa pouziva IBA v OPERATOR [OPERATOR decltype()].
		static void Match(...);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! DEFINITION TEMPLATE CLASS HELPER SPECIALIZATION pre RECURSIVE CASE.
template<typename TType, typename... TTypes>
struct STypeTraitBestTypeMatchInternal<TType,TTypes...> : public STypeTraitBestTypeMatchInternal<TTypes...>
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		// !!!!! RETURN VALUE TYPE sa pouziva na urcenie TYPE, ktory splna MATCH.
		// !!!!! METHOD NEPOTREBUJE DEFINITION, pretoze sa pouziva IBA v OPERATOR [OPERATOR decltype()].
		static TType Match(TType);

	public:
		using													STypeTraitBestTypeMatchInternal<TTypes...>::Match;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS urci, ktory TYPE z TYPES [TTypes] je najblizsi TYPE [TType].
template<typename TType, typename... TTypes>
struct STypeTraitBestTypeMatchType final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													TYPE=decltype(STypeTraitBestTypeMatchInternal<TTypes...>::Match(std::declval<TType>()));
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, typename... TTypes>
using															STypeTraitBestTypeMatchAlias=typename STypeTraitBestTypeMatchType<TType,TTypes...>::TYPE;
//----------------------------------------------------------------------------------------------------------------------