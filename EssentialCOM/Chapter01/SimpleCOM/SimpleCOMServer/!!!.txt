//------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu jednoducheho COM objektu.
2. Kazdy COM objekt musi implementovat rozhranie IUnknown, ktore ma nasledujuce metody.
   A. QueryInterface() - zistuje ci COM objekt implementuje INTERFACE a ak ano, vrati POINTER na tento INTERFACE. Zaroven inkrementuje COUNTER objektov.
   B. AddRef() - inkrementuje COUNTER objektov.
   C. Release() - inkrementuje COUNTER objektov a ak je tento rovny 0, tak zmaze objekt volanim delete(this).
!!! 3. Pre COM objekt je vzdy nutne aby pri skonceni pouzivania COM objektu bol COUNTER dekrementovany na 0 a COM objekt sa mohol vymazat, inak dojde k MEMORY LEAK.
4. Visal C++ poskytuje EXTENSION KEYWORDS, ktore umoznuju pracovat s identifikatormi COM INTERFACE (IID).
   A. KEYWORD uuid() asociuje IID s COM INTERFACE.
   B. KEYWORD __uuidof() vracia IID asociovany s COM INTERFACE.
!!!!! 5. EXPORTOVANE FUNKCIE MUSIA byt v .DEF subore, ktory v NASTAVENIACH LINKERU (Linker -> Input -> Module Definition File) musi byt NASTAVENY.
6. Implementacia COM objektu si vyzaduje nasledujuce kroky.
   A. Vytvorenie COM INTERFACE, ktory dedi z IUnknown.
   B. Implementacia COM OBJEKTU a vsetkych metod IUnknown INTERFACE.
   C. Implementacia COM FACTORY, ktora vytvara instancie COM OBJEKTU.
   D. Implementacia exportovanej DLL metody DllGetClassObject(), ktora vytvara instanciu COM FACTORY.
   E. Implementacia exportovanych DLL metod DllRegisterServer() a DllUnregisterServer(), ktore realizuju REGISTRACIU COM objektu.
//------------------------------------------------------------------------------------------------------