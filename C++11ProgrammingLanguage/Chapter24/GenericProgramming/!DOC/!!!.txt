//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje GENERIC PROGRAMMING v C++.
2. TEMPLATES predstavuju zakladny nastroj pre GENERIC PROGRAMMING v C++. TEMPLATES poskytuju nasledujuce vyhody.
   A. Schopnost pouzivat TYPES ako argumenty bez straty informacii.
   B. Odlozeny TYPE CHECKING, ktory sa vykonava az pri vytvarani instancii TEMPLATES (v COMPILE TIME).
   C. Schopnost konstanty ako argumenty. To umoznuje COMPILE TIME COMPUTATION.
3. Klucom ku GENERIC PROGRAMMING je vytvaranie ALGORITHMS, ktore su NEZAVISLE na ARGUMENT TYPES, ktore do daneho ALGORITHM vstupuju.
!!! 4. C++ 11 definuje v HEADER [type_traits] subor TEMPLATES pomocou ktorych je mozne testovat CLASSES ci FUNCTIONS na ich rozlicne PROPERTIES, ako napriklad to ci ENTITA je FUNCTION, alebo CLASS, ci CLASS ma DEFAULT CONSTRUCTOR, alebo ci je ABSTRACT.
5. Pri definicii TEMPLATES je vhodne definovat mnozinu pravidiel na TEMPLATE ARGUMENTS, ktore musia TYPES splnat, aby mohli byt pouzite ako TEMPLATE ARGUMENTS. Pravidla je mozne rozdelit do 2 kategorii.
   A. CONSTRAINTS su jednoduche pravidla, ktore musia TYPES splnat, aby sa kvalifikovali ako TYPES, ktore je mozne pouzit ako TEMPLATE ARGUMENTS. CONSTRAINTS su JEDNOUCELOVE, definovane pre KONKRETNU TEMPLATE.
   B. CONCEPTS je subor komplexny pravidiel, ktore musia TYPES splnat, aby sa kvalifikovali ako TYPES, ktore je mozne pouzit ako TEMPLATE ARGUMENTS. Na rozdiel od CONSTRAINTS sa jedna o KOMPLEXNE PRAVIDLA, ktore je mozne aplikovat na celu mnozinu TEMPLATES. Typickym prikladom CONCEPTS su ITERATORS.
!!! 6. C++ zatial NEUMOZNUJE definovat CONSTRAINTS ani CONCEPTS v deklaracii TEMPLATES. No C++ 11 umoznuje pouzit KEYWORD static_assert(), pomocou ktoreho je mozne definovat niektore typy CONSTRAINTS.
7. KEYWORD static_assert() umoznuje v 1. PARAMETER definovat COMPILE-TIME CONDITION, ktoru kontroluje COMPILER v COMPILE TIME. Ak CONDITION vrati FALSE, potom COMPILER zobrazi MESSAGE, ktora je zadana ako 2. PARAMETER.
!!!!! 8. KEYWORD static_assert() je ked syntakticky vyzera ako volanie FUNCTION, v skutocnosti je to COMPILE-TIME CONSTRUCT, ktory je mozny pouzit nielen v telach FUNCTIONS ci METHODS, ale aj aj na urovni CLASSES ci dokonca aj NAMESPACES.
9. Ak ma TEMPLATE viacero TYPE ARGUMENTS, casto je nutne, aby medzi jednotlivymi TYPE ARGUMENTS existovali iste vztahy, ktore TEMPLATE predpoklada. Tieto je mozne vyjadrit pomocou TEMPLATES v HEADER <type_traits> a pomocou KEYWORD [static_assert()].
//-------------------------------------------------------------------------------------------------------