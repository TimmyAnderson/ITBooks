//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje prakticke aspekty pouzitia TEMPLATES v C++.
2. V C++ je standardne CODE organizovany nasledovne.
   A. V FILES [.H] su uvedene DECLARATIONS VARIABLES, FUNCTIONS a CLASSES.
   B. V FILES [.CPP] su uvedene DEFINITIONS VARIABLES, FUNCTIONS a CLASSES.
!!! 3. Tradicna organizacia CODE na FILES [.H] a FILES [.CPP] umoznuje spristupnit DECLARATIONS v kazdom COMPILATION MODULE (FILE [.CPP]), a zaroven respektuje ONE DEFINITION RULE, kedze DEFINITIONS su uvedene iba RAZ v prislusnom FILE [.CPP].
!!!!! 4. TEMPLATES sa v C++ organizuju tak, ze cely CODE MUSI byt vo FILES [.H]. To znamena, ze nestaci iba DECLARATION, ale vo FILE [.H] musi byt aj DEFINITION TEMPLATE. Dovod pre ktory musi vo FILE [.H] byt aj TEMPLATE DEFINITION je nasledujuci.
   A. Vo FILE [TEMPLATE.H] sa nachadza DECLARATION TEMPLATE FUNCTION [template<typename TType> void FUNCTION(TType PARAMETER)].
   B. Vo FILE [TEMPLATE.CPP] sa nachadza DEFINITION TEMPLATE FUNCTION [template<typename TType> void FUNCTION(TType PARAMETER){}].
   !!! C. Vo FILE [USE_TEMPLATE.CPP] sa zavola TEMPLATE FUNCTION [void FUNCTION<double>(TType PARAMETER)] z FILE [TEMPLATE.H]. TYPE PARAMETER ma TYPE [double].
   !!!!! D. COMPILER vykona uspesnu COMPILATION FILE [USE_TEMPLATE.CPP], pretoze vo FILE [USE_TEMPLATE.CPP] sa nachadza INCLUDE na FILE [TEMPLATE.H], ktory obsahuje DECLARATION TEMPLATE FUNCTION [template<typename TType> void FUNCTION(TType PARAMETER)].
   !!!!! E. COMPILER vsak NENAJDE DEFINITION FUNCTION [void FUNCTION(double PARAMETER)] a tym padom NESPRAVI jej INSTANTIATION. COMPILER tak necha C++ LINKER aby nasiel REFERENCE na FUNCTION [void FUNCTION(double PARAMETER)].
   !!!!! F. COMPILER vo FILE [TEMPLATE.CPP] vsak NESPRAVI INSTANTIATION FUNCTION [void FUNCTION(double PARAMETER)] z TEMPLATE FUNCTION [template<typename TType> void FUNCTION(TType PARAMETER)], pretoze vo FILE [TEMPLATE.CPP] ziaden CODE TEMPLATE FUNCTION [template<typename TType> void FUNCTION(TType PARAMETER)] s PARAMETER TYPE [double] NEVOLA.
   !!!!! G. Vysledkom CODE je LINKER ERROR, lebo LINKER nedokazal najst pozadovanu FUNCTION [void FUNCTION(double PARAMETER)].
5. Podobne ako INLINE FUNCTIONS, aj TEMPLATE FUNCTIONS mozu byt DEFINED vo VIACERYCH COMPILATION UNITS. Je na LINKER, aby tieto TEMPLATE FUNCTIONS spravne zlucil.
!!!!! 6. TEMPLATE FUNCTION SPECIALIZATIONS MUSIA byt DEFINED iba v 1 COMPILATION UNIT, alebo byt oznacene pomocou KEYWORD [inline], aby ich COMPILER povazoval za INLINE FUNCTIONS. Inak LINKER hodi ERROR, ze dana TEMPLATE FUNCTION SEPCIALIZATION sa nachadza vo viacerych COMPILATION UNITS.
7. Niektore C++ podporuju koncept PRECOMPILED HEADERS pre zrychlenie COMPILATION. Pre PRECOMPILED HEADERS platia nasledujuce fakty.
   A. PRECOMPILED HEADERS umoznuju vykonat doprednu COMPILATION, jej vysledky ulozit a pri vyskyte toho isteho CODE v PROGRAME pouzit ulozene PRECOMPILED HEADERS, namiesto opatovnej COMPILATION.
   B. PRECOMPILED HEADERS vykonavaju COMPILATION prvych N LINES kazdeho TRANSLATION UNIT, ktore spravidla obsahuju KEYWORDS [#include].
   !!! C. PRECOMPILED HEADERS sa aplikuju LEN VTEDY, ak viacero TRANSLATION UNITS zacina TYMI ISTYMI INCLUDES, ktore zaroven musia byt v ROVNAKOM PORADI. Ak je poradie INCLUDES rozdielne, tak . PRECOMPILED HEADERS nie je mozne vyuzit.
8. Pri vyskyte ERRORS v TEMPLATE CODE mozu COMPILERS generovat velke a zlozite ERROR MESSAGES, z ktorych je zlozite zistit zdroj problemu. Riesenim moze byt pouzit viacero roznych COMPILERS, pretoze ine COMPILERS mozu pre tu istu ERROR generovat zmysluplnejsiu ERROR MESSAGE.
//----------------------------------------------------------------------------------------------------------------------