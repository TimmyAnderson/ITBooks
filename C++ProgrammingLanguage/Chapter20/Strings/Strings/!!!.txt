//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie STRINGS v STL.
2. C++ STRINGS su definovane v kniznici <string>. Zakladnym CLASS je basic_string<TChar> z ktorej su definovane TYPEDEFS 'string' a 'wstring'.
3. TEMPLATE CLASS char_traits<TChar> obsahuje definiciu CONVERSION METHODS, COPY/MOVE METHODS, COMPARISON METHODS pre jednotlive CHAR TYPES. Pre KAZDY CHAR TYPE je definovana SPECIALIZOVANE TEMPLATE z char_traits<TChar>, ktore obsahuje konkretne implementacie metod.
!!! 4. Ak chcem pouzivat TEMPLATE CLASS basic_string<TChar>, tak MUSI mat definovanu SPECIALIZOVANU TEMPLATE CLASS char_traits<TChar> pre 'TChar'.
5. CLASS basic_string<TChar> predstavuje implementaciu STRING v C++. Za 'TChar' moze byt pouzity TYP, ktory sa chova ako CHARACTER TYP, ktory NESMIE mat COPY CONSTRUCTOR, DESTRUCTOR a OPERATOR=.
!!! 6. CLASS basic_string<TChar> NEMA ZIADNE VIRTUALNE METODY a NIE JE TEDA VHODNA na DEDENIE.
7. CLASS basic_string<TChar> podporuje koncepciu ITERATORS. Ma metody ako begin(), end(), rbegin() a rend() vdaka ktorym je mozne vykonat ITERACIU cez vsetky CHARS.
8. Prechadzat cez CHARS v basic_string<TChar> je mozne bud cez OPERATOR[], alebo cez metodu at(). Metoda at() NA ROZDIEL od OPERATOR[] vykonava KONTROLU HRANIC a ak je prekrocena, tak HODI EXCEPTION 'out_of_range'.
!!! 9. CLASS basic_string<TChar> NEMA CONSTRUCTOR, ktorym by bolo mozne INT, alebo CHAR konvertovat na basic_string<TChar>. Da sa to vsak spravit pomocou CLASS 'basic_stringstream<TChar>' z kniznice <sstring>.
10. Metoda length() vracia POCET CHARS v basic_string<TChar>, avsak BEZ NULL TERMINATOR, ktory sa v basic_string<TChar> NEPOUZIVA.
11. CLASS basic_string<TChar> hadze nasledujuce typy EXCEPTIONS.
   A. EXCEPTION 'out_of_range' je hodena METODAMI, ktore KONTROLUJU PREKROCENIE VELKOSTI STRINGU. Naopak u tych metod a OPERATORS, ktore tuto kontrolu NEROBIA, znamena prekrocenie hranic STRINGU PAD PROGRAMU.
   B. EXCEPTION 'length_error' je hodena, ak sa pokusim vytvorit PRILIS DLHY STRING.
12. STATIC CONST 'npos' urcuje MAXIMALNU VELKOST STRINGU.
13. OPERATOR= vykonava VZDY KOPIU STRINGU. STRING je mozne priradzovat aj pomocou metody assign().
14. STRING ulozeny v basic_string<TChar> je mozne extrahovat nasledujucimi metodami.
   A. Metoda copy() kopiruje N CHARS co BUFFERA. NULL TERMINATOR na koniec NEPRIDAVA. STRING NIE JE UKOCENY NULL TERMINATOR.
   B. Metoda data() vracia POINTER na INTERNY BUFFER obsahujuci CHARS daneho STRINGU. Jeho platnost je vsak IBA pokym nad STRING NIE JE ZAVOLANA dalsia NON-CONST metoda. STRING NIE JE UKOCENY NULL TERMINATOR.
   C. Metoda c_str() vracia POINTER na INTERNY BUFFER obsahujuci CHARS daneho STRINGU. Jeho platnost je vsak IBA pokym nad STRING NIE JE ZAVOLANA dalsia NON-CONST metoda. STRING JE UKOCENY NULL TERMINATOR.
25. Porovnavanie STRINGS je mozne vykonat bud pomocou OPERATOR==, OPERATOR!=, OPERATOR<, OPERATOR>, OPERATOR<=, alebo OPERATOR>=. Takisto je mozne pouzit metodu compare(), ktora vraciia pri zhode 0, ak je STRING1<STRING2, tak ZAPORNE CISLO a ako je STRING1>STRING2, tak KLADNE CISLO.
26. Pomocou metody insert() je mozne vkladat C STRINGS, alebo basic_string<TChar> na poziciu v STRING.
27. Pomocou metody append() je mozne pridat na koniec STRING dalsi retazec. To iste je mozne i pomocou OPERATOR+=.
28. STRING je mozne zlucovat aj pomocou OPERATOR+.
!!! 29. STRING obsahuje sadu metod find() a find_XXX(), ktore umoznuju vyhladavat STRINGS v ramci daneho STRING. Ak metody find() a find_XXX() NENAJDU hladany STRING, vracaju hodnotu basic_string<TChar>::npos.
30. Metoda replace() umoznuje nahradit jeden STRING za iny.
31. Metoda erase() umoznuje odstranit STRING zo STRINGU.
32. Metoda clear() maze cely obsah STRINGU.
33. Metoda substr() umoznuje vybrat zo STRINGU SUBSTRING.
34. Metody size() a length() vracaju pocet CHARS v STRING. Do poctu sa NEZARATAVA NULL TERMINATOR.
35. Metoda resize() umoznuje zmenit velkost STRING.
36. Metoda capacity vracia rezervovany pocet CHARS. Metoda reserve() umoznuje rezervovat pamat pre stanoveny pocet CHARS.
37. Metoda max_size() vracia MAXIMALNY MOZNY POCET CHARS v STRING.
38. Metoda empty() vracia informaciu o tom ci je STRING prazdny.
39. Metoda swap() umoznuje EFEKTIVNYM sposobom vymentit 2 instancie STRINGS.
40. V kniznici <string> su definovane OPERATOR<< a OPERATOR>> pre zapis a citanie basic_string<TChar> do a zo STREAM.
41. Kniznice <cwctype> a <cctype> obsahuju sadu metod, ktore umoznuju analyzovat CHARS. Umoznuju napriklad urcit ci dany CHAR je alfanumericky, cislo ci WHITE SPACE. Takisto obsahuju konverzne metody toupper() a tolower().
//-------------------------------------------------------------------------------------------------------