//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje buduce rozsirenia C++.
2. C++ 20 umoznuje pouzitie KEYWORD [typename] na oznacenie DEPENDENT NAME na niektorych miestach za OPTIONAL. KEYWORD [typename] nie je nutne pouzit napriklad v tychto situaciach.
   A. Na definovanie TYPE za OPERATOR [OPERATOR NEW].
   B. Na definovanie TYPE ID pri definicii ALIAS.
   C. Na definovanie TYPE v TRAILING RETURN TYPE.
   D. Na definovanie TYPE v DEFAULT TEMPLATE ARGUMENT.
   E. Na definovanie TYPE v OPERATOR [OPERATOR static_cast<>()], OPERATOR [OPERATOR dynamic_cast<>()], OPERATOR [OPERATOR const_cast<>()] a OPERATOR [OPERATOR reinterpret_cast<>()].
3. C++ 20 umoznuje pouzitie nasledujucich TYPES ako NON-TYPE TEMPLATE PARAMETERS.
   A. FLOATING POINT TYPES.
   B. LITERAL TYPES.
4. C++ 20 NEPODPORUJE TEMPLATE FUNCTION PARTIAL SPECIALIZATION. Podporovana je len FULL SPECIALIZATION.
5. C++ 20 NEPODPORUJE OVERLOADED TEMPLATE CLASSES, kde by rovnako pomenovane TEMPLATE CLASSES mohli mat iny pocet TEMPLATE PARAMETERS, alebo sa lisit v TYPES TEMPLATE PARAMETERS (TYPE TEMPLATE PARAMETER, NON-TYPE TEMPLATE PARAMETER a TEMPLATE TEMPLATE PARAMETER).
6. C++ 20 podporuje TYPE CHECKING TEMPLATE PARAMETERS pomocou CONCEPTS. CONCEPTS umoznuju definovat CONSTRAINTS, ktore musia jednotlive TEMPLATE PARAMETERS splnat. Vdaka CONCEPTS moze C++ generovat zrozumitelnejsie ERRORS, ak TEMPLATE PARAMETES nesplnaju CONSTRAINTS definovane v CONCEPTS.
7. C++ 20 NEPODPORUJE REFLECTION. REFLECTION je zatial v stave technickej specifikacie, ktora vsak nebola presunuta do C++ STANDARD.
8. C++ MODULES umoznuje nahradenie pouzivania HEADER FILES [.H] a CODE FILES [.CPP] za MODULES. C++ MODULES funguju nasledujucim sposobom.
   A. Definuje sa MODULE FILE [.IXX].
   B. MODULE FILE [.IXX] obsahuje ENTITIES (CLASSES, FUNCTIONS), ktore MOZU byt EXPORTED a tie, ktore NEMOZU byt EXPORTED.
   C. TRANSLATION UNIT, ktory pouziva MODULE FILE [.IXX] vykona jeho IMPORT.
   D. Po vykonani IMPORT moze TRANSLATION UNIT pouzivat EXPORTED ENTITIES z MODULE FILE [.IXX].
9. MODULE FILE [.IXX] ma nasledujucu strukturu.
   A. MODULE musi byt pomenovany pomocou CODE [export module MODULE_NAME], kde VALUE 'MODULE_NAME' je nazov MODULE.
   B. MODULE musi obsahovat EXPORTABLE ENTITIES, ktore su oznacene pomocou KEYWORD [export], alebo KEYWORD [export{}].
   C. MODULE moze obsahovat IMPORTS pomocou CODE [import LIBRARY_NAME], kde VALUE 'LIBRARY_NAME' je nazov importovanej LIBRARY.
10. MODULE sa importuje pomocou CODE [import MODULE_NAME], kde VALUE 'MODULE_NAME' je nazov MODULE.
!!!!! 11. C++ MODULES NIE SU kompletne PODPOROVANE v G++.
//----------------------------------------------------------------------------------------------------------------------