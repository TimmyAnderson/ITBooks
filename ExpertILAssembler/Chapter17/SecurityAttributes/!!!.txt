//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje vytvaranie a aplikovanie SECURITY ATTRIBUTES.
2. Definovat SECURITY REQUIREMENTS je v .NET mozne dvoma sposobmi.
   A. IMPERATIVNOU SECURITY. Jedna sa o CUSTOM CODE, ktory vola METHODS SECURITY API, ktore verifikuju ci CODE ma pozadovane ACCESS RIGHTS.
   B. DEKLARATIVNOU SECURITY. Jedna sa o CUSTOM ATTRIBUTES (su sucastou METADATA), ktore sa aplikuju na METHODS. CLR pred vykonanim takto oznacenych METHODS verifikuju ci METHODS maju pozadovane ACCESS RIGHTS.
3. DEKLARATIVNA SECURITY (CUSTOM SECURITY ATTRIBUTES) moze byt aplikovana na CLASSES, alebo na METHODS.
4. CUSTOM SECURITY ATTRIBUTES maju 3 charakteristiky.
   A. TARGET. Je to METADATA ITEM ku ktoremu je CUSTOM SECURITY ATTRIBUTE priradeny.
   B. PERMISSION. Je to typ ACCESS RIGHT, ktory, ktory ma byt TARGET priradeny.
   C. ACTION. Je sposob interpretacie ACCESS RIGHT (napriklad ACCESS, alebo DENY).
5. CLR definuje nasledujuce typy PERMISSIONS.
   A. PERMISSION [Request Minimum] je vyhodnocovana pri NACITAVANI ASSEMBLY. Definuje MINIMUM SECURITY REQUIREMENTS, ktore ASSEMBLY vyzaduje, aby mohla byt nacitana.
   B. PERMISSION [Request Optional] je vyhodnocovana pri NACITAVANI ASSEMBLY. Definuje OPTIONAL SECURITY REQUIREMENTS, ktore ASSEMBLY potrebuje pre optimalnu cinnost. Aj bez pridelenia OPTIONAL SECURITY REQUIREMENTS by ASSEMBLY mala byt funkcna, no nemusi pracovat optimalne.
   C. PERMISSION [Request Refuse] je vyhodnocovana pri NACITAVANI ASSEMBLY. Definuje PERMISSIONS, ktore by nemali byt ASSEMBLY poskytnuta a to ani vtedy, ak to prostredie umoznuje. Je to bezpecnostna FEATURE, aby ASSEMBLY nemohla byt zneuzita.
   D. PERMISSION [Inheritance Demand] je vyhodnocovana pri NACITAVANI CLASSES a ich MEMBERS. Aplikovana na CLASSES definuje PERMISSIONS, ktore musia mad DERIVED CLASSES. Aplikovana na METHODS definuje PERMISSIONS, ktore musia mad OVERRIDEN METHODS.
   E. PERMISSION [Link Demand] je vyhodnocovana pri JIT COMPILATION. Aplikovana na METHOD definuje PERMISSIONS, ktore musia mat CALLER METHODS, ktore danu METHOD volaju. PERMISSIONS musia mat iba PRIAMI CALLERS. Aplikovana na CLASS urcuje PERMISSIONS, ktore musia mat CALLERS METHODS VSETKYCH METHODS danej CLASS.
   F. PERMISSION [Demand] je vyhodnocovana pri vykonavani METHODS. Aplikovana na METHOD definuje PERMISSIONS, ktore musia mat CALLER METHODS, ktore danu METHOD volaju. PERMISSIONS musia mat NIELEN PRIAMI CALLERS, ale aj VSETCI CALLERS v CALL STACK.
   G. PERMISSION [Assert] je vyhodnocovana pri vykonavani METHODS. Definuje PERMISSIONS, ktore musi mat CURRENT METHOD, avsak nemusia ich mat PARENT METHODS v CALL STACK.
   H. PERMISSION [Deny] je vyhodnocovana pri vykonavani METHODS. Definuje PERMISSIONS, ktore NESMU mat METHODS, ktore su volane z CURRENT METHOD.
   I. PERMISSION [Permit Only] je vyhodnocovana pri vykonavani METHODS. Definuje PERMISSIONS, ktore MUSIA mat METHODS volane z CURRENT METHOD. Pritom plati, ze ZIADNE INE PERMISSIONS METHODS volane z CURRENT METHOD NESMU MAT. Viacero [Permit Only] PERMISSIONS je mozne kombinovat pre 1 METHOD vdaka comu je mozne vyspecifikovat vsetky PERMISSIONS, ktore METHODS volane z CURRENT METHOD mozu mat a zaroven PERMISSIONS, ktore METHODS volane z CURRENT METHOD NESMU MAT.
6. CLR definuje PERMISSIONS ako CLASSES. K tymto CLASSES su definovane ATTRIBUTE CLASSES, ktore umoznuju definovat PERMISSIONS deklarativne, aplikovanim na prislusny METADATA ITEM (CLASS, alebo METHOD).
!!! 7. PERMISSION CLASSES by mali implemenovat nasledujuce INTERFACES.
   A. INTERFACE [IPermission]. Je to MANDATORY INTERFACE. Definuje zakladne METHODS PERMISSION CLASS.
   B. INTERFACE [IUnrestrictedPermission]. Je to OPTIONAL INTERFACE. Pouziva sa pre PERMISSION CLASSES, ktore mozu definovat UNRESTRICTED ACCESS.
   C. INTERFACE [ISecurityEncodable]. Je to OPTIONAL INTERFACE. Pouziva sa pre PERMISSION CLASSES, ktore mozu byt SERIALIZED a DESERIALIZED do XML.
   D. INTERFACE [ISerializable]. Je to OPTIONAL INTERFACE. Je to podporny INTERFACES pre PERMISSION CLASSES, ktore mozu byt SERIALIZED a DESERIALIZED do XML.
8. CLR umoznuje definovat CUSTOM PERMISSIONS, ktore moze vyhodnocovat rovnakym mechanizmom ako standardne PERMISSIONS. CUSTOM PERMISSIONS sa definuju v nasledujucich krokoch.
   A. Definuje sa PERMISSION CLASS, ktora implementuje INTERFACE IPermission a OPTIONALLY aj INTERFACES IUnrestrictedPermission, ISecurityEncodable a ISerializable.
   B. Definuje sa CONSTRUCTOR PERMISSION CLASS.
   C. Definuju sa vsetky METHODS INTERFACE IPermission.
   D. Ak PERMISSION umoznuje UNRESTRICTED ACCESS, definuju sa METHOD IUnrestrictedPermission.InUnrestricted().
   E. Ak PERMISSION CLASS je XML SERIALIZABLE, definuju sa METHODS INTERFACES ISecurityEncodable a ISerializable.
   !!! F. Definuju sa CUSTOM METHODS, ktore kontroluju CALLING CODE ma priradenu danu PERMISSION a ak nie generuju EXCEPTION [SecurityException].
   G. Definuje sa PERMISSION ATTRIBUTE CLASS zodpovedajuci danej PERMISSION CLASS.
9. PERMISSIONS sa zdruzuju do PERMISSION SETS. PERMISSION SET je reprezenovana CLASS [PermissionSet]. Pre PERMISSION SETS platia nasledujuce vlastnosti.
   A. Individualne PERMISSION CLASSES sa mozu kombinovat, pricom kombinaciou vznika PERMISSION SET.
   B. PERMISSION CLASSES su zdedene z CLASS [PermissionSet].
   C. DECLARATIVE SECURITY pouziva PERMISSION SETS na ukladanie informacie o tom ake PERMISSIONS su asociovane s danym METADATA ITEM (ASSEMBLY, CLASS, alebo METHOD). DECLARATIVE PERMISSIONS su ulozene v PERMISSION SET podla svojej SECURITY ACTION.
!!! 10. Informacie o DECLARATIVE SECURITY (SECURITY pomocou ATTRIBUTES) su ulozene v METADATA TABLE [DeclSecurity]. METADATA TABLE [DeclSecurity] obsahuje nasledujuce COLUMNS.
   A. COLUMN [Action]. Ma 2 BYTES a obsahuje SECURITY ACTION CODE.
   B. COLUMN [Parent]. Obsahuje TOKEN typu [HasDeclSecurity], ktory referuje na METADATA TABLES [Assembly], [TypeDef], alebo [Method]. Obsahuje informaciu s ktorym METADATA ITEM je dany DECLARATION SECURITY ATTRIBUTE asociovany.
   C. COLUMN [PermissionSet]. Referuje do METADATA STREAM [#Blob] a obsahuje ENCODED PERMISSION SET, ktory je asociovany s danym ACTION a METADATA ITEM.
!!! 11. COLUMN [PermissionSet] v METADATA TABLE [DeclSecurity] moze mat bud XML FORMAT (vtedy je v METADATA STREAM [#Blob] ulozeny XML), alebo BINARY FORMAT, ktory ma nasledujuci tvar.
   A. Prvy BYTE obsahuje hodnotu 0x2E. Sluzi ako identifikator BINARY FORMAT.
   B. Nasleduje 1-4 BYTES obsahujucich pocet PERMISSIONS v PERMISSION SET. Pocet je v ENCODED tvare, ktory zavisi od hodnoty. Ak pocet PERMISSIONS je <0x00000000,0x0000007F>, tak hodnota je ulozena v 1 BYTE. Ak pocet PERMISSIONS je <0x00000080,0x00003FFF>, tak hodnota je ulozena v 2 BYTES, pricom NAJVYSSI BIT v 1. BYTE je nastaveny na 1. Ak pocet PERMISSIONS je <0x00004000,0x1FF0FFFF>, tak hodnota je ulozena v 4 BYTES, pricom NAJVYSSIE 2 BITS v 1. BYTE su nastavene na 1.
   C. Nasleduju 1-N PERMISSIONS.
12. PERMISSIONS su v BINARY FORMAT COLUMN [PermissionSet] v METADATA TABLE [DeclSecurity] ulozene nasledujucim sposobom.
   A. PERMISSION zacina dlzkou PERMISSION CLASS NAME v ENCODED tvare.
   B. Nasleduje PERMISSION CLASS NAME v REFLECTION notacii.
   C. Nasleduje 1-4 BYTES obsahujucich velkost PERMISSION BLOB v ENCODED tvare.
   D. Nasleduje 1-4 BYTES obsahujucich pocet PROPERTIES, ktore su v danej PERMISSION nastavene. Pocet je ulozeny v ENCODED tvare.
   E. Nasleduju 0-N PROPERTIES, ktore sa nastavia pre danu ATTRIBUTE PERMISSION CLASS.
13. PROPERTIES ATTRIBUTE PERMISSION CLASS su v BINARY FORMAT COLUMN [PermissionSet] v METADATA TABLE [DeclSecurity] ulozene nasledujucim sposobom.
   A. PROPERTY zacina hodnotu 0x54, ktora urcuje, ze sa nastavuje PROPERTY.
   B. Nasleduje 1 BYTE identifikujuci TYPE danej PROPERTY, ktora sa ma nastavit.
   C. Nasleduje 1-4 BYTES obsahujucich velkost PROPERTY NAME v ENCODED tvare.
   D. Nasleduje PROPERTY NAME.
   E. Nasleduje ENCODED VALUE, ktora pouziva podobny ENCODING ako CONSTRUCTOR PARAMETERS.
!!!!! 14. MSIL definuje sadu KEYWORD, ktory je mozne definovat DECLARATIVE SECURITY ACTION.
   A. KEYWORD [request] definuje ACTION [Request].
   B. KEYWORD [demand] definuje ACTION [Demand].
   C. KEYWORD [assert] definuje ACTION [Assert].
   D. KEYWORD [deny] definuje ACTION [Deny].
   E. KEYWORD [permitonly] definuje ACTION [Permit Only].
   F. KEYWORD [linkcheck] definuje ACTION [LinkDemand].
   G. KEYWORD [inheritcheck] definuje ACTION [Inheritance].
   H. KEYWORD [reqmin] definuje ACTION [Request Minumum].
   I. KEYWORD [reqopt] definuje ACTION [Request Optional].
   J. KEYWORD [reqrefuse] definuje ACTION [Request Refuse].
   K. KEYWORD [prejitgrant] definuje ACTION [Pre-JIT Grant].
   L. KEYWORD [prejitdeny] definuje ACTION [Pre-JIT Deny].
   M. KEYWORD [noncasdemand] definuje ACTION [Non-CAS Demand].
   N. KEYWORD [noncaslinkdemand] definuje ACTION [Non-CAS Link Demand].
   O. KEYWORD [noncasinheritance] definuje ACTION [Non-CAS Inheritance].
15. MSIL umoznuje definovat PERMISSIONS 2 sposobmi.
   A. Definovanim jednotlivych PERMISSIONS pomocou KEYWORD [.permission]. Tie potom MSIL pre kazdu ACTION zluci to jedneho PERMISSION SET.
   B. Definovanim PERMISSION SET pomocou KEYWORD [.permissionset].
!!! 16. KEYWORDS [.permission] a [.permissionset] sa vzdy aplikuju v SCOPE toho METADATA ITEM na ktory sa ma PERMISSION aplikovat. Takze napriklad v pripade METHOD je to v tele METHOD.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
MSIL KEYWORDS.

!!!!! 1. V MSIL je zodpovednostou PROGRAMATORA, aby KOREKTNE naplnil METADATA TABLES aplikovanim spravnych KEYWORDS na ASSEMBLY ci ine ENTITIES.
!!!!! 2. Ak v MSIL CODE NEDEFINUJE korektne vsetky METADATA TABLES, MSIL COMPILER moze pre dany CODE vygenerovat PE FILE, avsak pri pokuse o spustenie tohto PE FILE hodi CLR EXCEPTION oznamujuci, ze PE FILE nema vsetky potrebne METADATA. Napriklad, pri MULTI-FILE ASSEMBLY, ak som v PRIMARY MODULE nemal pouzity KEYWORD [.file] s odkazom na ostatne FILES, tak MSIL COMPILER CODE korektne skompiloval, no pri spusteni CLR hodilo EXCEPTION BadImageFormatException. Az po doplneni KEYWORDS [.file], ktore doplnili zaznamy do METADATA TABLES sa PROGRAM korektne spustil.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
KEYWORD [.assembly] pre definiciu ASSEMBLY.

1. ASSEMBLY sa DEFINUJE pomocou KEYWORD [.assembly].
!!! 2. ASSEMBLY DEFINITION sa uklada v METADATA TABLE [Assembly].
3. SYNTAX KEYWORD [.assembly] pre definiciu ASSEMBLY je nasledovna.
   A. RULE [<ASSEMBLIES> ::= <ASSEMBLY>].
   B. RULE [<ASSEMBLY> ::= .assembly <FLAGS> <NAME> { <ASSEMBLY_DECLARATION>* }]. NAME je meno ASSEMBLY.
   C. RULE [<FLAGS> ::=	<NONE>]. ASSEMBLY NEMOZE byt RETARGETED.
   D. RULE [<FLAGS> ::=	retargetable]. ASSEMBLY MOZE byt RETARGETED.
   E. RULE [<ASSEMBLY_DECLARATION> ::= .hash algorithm <int32>]. Nastavuje ASSEMBLY HASH ALGORITHM pre vypocet HASH CODES ASSEMBLY FILES.
   F. RULE [<ASSEMBLY_DECLARATION> ::= .ver <int32>:<int32>:<int32>:<int32>]. Nastavuje ASSEMBLY VERSION.
   G. RULE [<ASSEMBLY_DECLARATION> ::= .publickey = ( <bytes> )]. Nastavuje ASSEMBLY ENCRYPTION PUBLIC KEY.
   H. RULE [<ASSEMBLY_DECLARATION> ::= .locale <LOCALE_STRING>]. Nastavuje ASSEMBLY CULTURE.
   I. RULE [<ASSEMBLY_DECLARATION> ::= <SECURITY_DECLARATION>]. Nastavuje ASSEMBLY SECURITY PERMISSIONS.
   J. RULE [<ASSEMBLY_DECLARATION> ::= <CUSTOM_ATTRIBUTE_DECLARATION>]. Definuje ASSEMBLY CUSTOM ATTRIBUTES.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.assembly extern] pre definiciu ASSEMBLY REFERENCE.

1. ASSEMBLY REFERENCE sa DEFINUJE pomocou KEYWORD [.assembly extern].
!!! 2. ASSEMBLY REFERENCE sa uklada v METADATA TABLE [AssemblyRef].
3. SYNTAX KEYWORD [.assembly extern] pre definiciu ASSEMBLY REFERENCE je nasledovna.
   A. RULE [<ASSEMBLY_REFERENCES> ::= <ASSEMBLY_REFERENCE>].
   B. RULE [<ASSEMBLY_REFERENCE> ::= .assembly extern <NAME> [as ALIAS] { <ASSEMBLY_REFERENCE_DECLARATION>* }]. NAME je meno REFERRED ASSEMBLY.
   C. RULE [<ASSEMBLY_DECLARATION> ::= .ver <int32>:<int32>:<int32>:<int32>]. Nastavuje ASSEMBLY REFERENCE VERSION.
   D. RULE [<ASSEMBLY_DECLARATION> ::= .publickey = ( <bytes> )]. Nastavuje ASSEMBLY REFERENCE ENCRYPTION PUBLIC KEY.
   E. RULE [<ASSEMBLY_DECLARATION> ::= .publickeytoken = ( <bytes> )]. Nastavuje ASSEMBLY REFERENCE ENCRYPTION PUBLIC KEY TOKEN.
   F. RULE [<ASSEMBLY_DECLARATION> ::= .locale <LOCALE_STRING>]. Nastavuje ASSEMBLY REFERENCE CULTURE.
   G. RULE [<ASSEMBLY_DECLARATION> ::= .hash = ( <bytes> )]. Nastavuje ASSEMBLY REFERENCE HASH VALUE.
   H. RULE [<ASSEMBLY_DECLARATION> ::= <CUSTOM_ATTRIBUTE_DECLARATION>]. Definuje ASSEMBLY REFERENCE CUSTOM ATTRIBUTES.
   !!! I. RULE [<ASSEMBLY_DECLARATION> ::= auto]. Umoznuje definovat ASSEMBLY REFERENCE na ASSEMBLY v GAC (IBA na ASSEMBLIES v GAC), ktorej VERSION nie je presne definovana. LOADER pri pouziti 'auto' prechadza GAC a AUTOMATICKY najde vhodnu verziu ASSEMBLY.
!!! 4. ASSEMBLY REFERENCES mozu mat priradene ALIASES vdaka ktorym sa je mozne referovat na dane ASSEMBLIES, ktora maju napriklad rovnake meno, ale lisia sa vo verzii. Napriklad [call void [MyAlias] CSomeClass::SomeMethod()], kde 'MyAlias' je ALIAS na REFERRED ASSEMBLY.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.module] pre definiciu MODULE.

1. MODULE sa DEFINUJE pomocou KEYWORD [.module].
!!! 2. MODULE sa uklada v METADATA TABLE [Module].
3. SYNTAX KEYWORD [.module] pre definiciu MODULE je nasledovna.
   A. RULE [<MODULES> ::= <MODULE>].
   B. RULE [<MODULE> ::= .module <NAME>].
//-------------------------------------------------------------------------------------------------------
KEYWORD [.module extern] pre definiciu MODULE REFERENCE.

1. MODULE REFERENCE sa DEFINUJE pomocou KEYWORD [.module extern].
!!! 2. MODULE REFERENCE sa uklada v METADATA TABLE [ModuleRef].
3. SYNTAX KEYWORD [.module extern] pre definiciu MODULE REFERENCE je nasledovna.
   A. RULE [<MODULE_REFERENCES> ::= <MODULE_REFERENCE>].
   B. RULE [<MODULE_REFERENCE> ::= .module extern <NAME>].
!!!!! 4. Kazdy RECORD v [.module extern] MUSI byt sparovany s RECORD v METADATA TABLE [File] pomocou KEYWORD [.file].
!!! 5. Okrem MANAGED MODULES je mozne pomocou KEYWORD [.module extern] pridat aj UNMANAGED MODULES (UNMANAGED .DLL FILES). UNMANAGED MODULES je NUTNE explicitne pridat do MSIL CODE IBA ak maju byt DEPOLYED spolu s ASSEMBLIES. Pri pouziti P/INVOKE to vsak NIE JE TREBA, pretoze P/INVOKE vsak AUTOMATICKY pridava vsetky MODULE REFERENCES na UNMANAGED MODULES.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.file] pre definiciu FILE.

1. FILE sa DEFINUJE pomocou KEYWORD [.file].
!!! 2. FILE sa uklada v METADATA TABLE [File].
3. SYNTAX KEYWORD [.file] pre definiciu FILE je nasledovny.
   A. RULE [<FILES> ::= <FILE>].
   A. RULE [<FILE> ::= .file <FLAG> <NAME> [.hash = ( <bytes> )] [.entrypoint]]. NAME je meno FILE. HASH VALUE je NEPOVINNA, pretoze MSIL COMPILER je schopny si ju vypocitat ak FILE je pristupny v COMPILE TIME. VALUE [.entrypoint] sa pouziva IBA na NON-PRIMARY MODULE, ak obsahuje ENTRY POINT.
   B. RULE [<FLAG> ::= <NONE>]. FILE reprezentuje MANAGED MODULE.
   C. RULE [<FLAG> ::= nometadata]. FILE reprezentuje UNMANAGED MODULE, alebo RESOURCE FILE.
!!!!! 4. Kazdy RECORD v [.module extern] MUSI byt sparovany s RECORD v METADATA TABLE [File] pomocou KEYWORD [.file].
!!! 5. Ak RECORD v METADATA TABLE [File] NEOBSAHUJE HASH VALUE, tak MSIL COMPILER ju dokaze, ak je FILE v COMPILE TIME vypocitat a nastavit. Ak FILE v COMPILE TIME NIE JE PRISTUPNY, tak sa hodnota [HashValue] nastavi na 0.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.mresource] pre definiciu MANAGED RESOURCE.

1. MANAGED RESOURCE sa DEFINUJE pomocou KEYWORD [.mresource].
!!! 2. MANAGED RESOURCE sa uklada v METADATA TABLE [ManifestResource].
3. SYNTAX KEYWORD [.mresource] pre definiciu MANAGED RESOURCE je nasledovny.
   A. RULE [<MANAGED_RESOURCES> ::= <MANAGED_RESOURCE>].
   B. RULE [<MANAGED_RESOURCE> ::= .mresource <FLAG> <NAME> [as <FILENAME>] { <MANAGED_RESOURCE_DECLARATION>* }]. Hodnota 'FILENAME' obsahuje FILENAME MANAGED RESOURCE a pouziva sa iba ak 'NAME' obsahuje znaky, ktore nie je mozne pouzit v PATH a FILENAME.
   C. RULE [<FLAG> ::= public | private]. DEFAULT hodnota je 'private'.
   D. RULE [<MANAGED_RESOURCE_DECLARATION> ::= .assembly extern <ALIAS>]. Ak je MANAGED RESOURCE importovany z INEJ ASSEMBLY.
   E. RULE [<MANAGED_RESOURCE_DECLARATION> ::= .file <NAME> at <int32>]. Ak je MANAGED RESOURCE v INOM FILE CURRENT ASSEMBLY. Hodnota <int32> udava OFFSET MANAGED RESOURCE.
   F. RULE [<MANAGED_RESOURCE_DECLARATION> ::= <CUSTOM_ATTRIBUTE_DECLARATION>]. Umoznuje definovat CUSTOM ATTRIBUTE pre tento MANAGED RESOURCE.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.class extern] pre definiciu EXPORTED TYPE.

1. EXPORTED TYPE sa DEFINUJE pomocou KEYWORD [.class extern].
!!! 2. EXPORTED TYPE sa uklada v METADATA TABLE [ExportedType].
3. SYNTAX KEYWORD [.mresource] pre definiciu MANAGED RESOURCE je nasledovny.
   A. RULE [<EXPORTED_TYPES> ::= <EXPORTED_TYPE>].
   B. RULE [<EXPORTED_TYPE> ::= .class extern <FLAG> <NAMESPACE>.<NAME> { <EXPORTED_TYPE_DECLARATION> * }].
   C. RULE [<FLAG> ::= public]. TYPE je v INOM MODULE CURRENT ASSEMBLY.
   D. RULE [<FLAG> ::= nested public]. TYPE je v INOM MODULE CURRENT ASSEMBLY ako NESTED TYPE.
   E. RULE [<FLAG> ::= forwarder]. RECORD reprezentuje FORWARDER REFERENCE.
   F. RULE [<EXPORTED_TYPE_DECLARATION> ::= .file <NAME>]. Hodnota NAME obsahuje FILE v ktorom je EXPORTED TYPE definovany. Moze sa pouzit IBA s FLAG 'public'.
   G. RULE [<EXPORTED_TYPE_DECLARATION> ::= .class extern <NAMESPACE>.<NAME>]. Hodnoty NAMESPACE a NAME urcuju ENCLOSING TYPE v ktorom je dany EXPORETED TYPE definovany. Moze sa pouzit IBA s FLAG 'public nested'.
   H. RULE [<EXPORTED_TYPE_DECLARATION> ::= .assembly extern <NAME>]. RECORD reprezentuje FORWARDER REFERENCE. Hodnota NAME obsahuje ASSEMBLY v ktorom je EXPORTED TYPE definovany. Moze sa pouzit IBA s FLAG 'forwarder'.
   I. RULE [<EXPORTED_TYPE_DECLARATION> ::= .class <int32>]. Nastavuje hodnotu COLUMN [TypeDefId].
   J. RULE [<EXPORTED_TYPE_DECLARATION> ::= <CUSTOM_ATTRIBUTE_DECLARATION>]. Umoznuje definovat CUSTOM ATTRIBUTE pre tento EXPORTED TYPE.
!!! 4. Pre RECORDS v METADATA TABLE [ExportedType] platia nasledujuce fakty.
   A. METADATA TABLE [ExportedType] sa moze nachadzat IBA v PRIMARY MODULE.
   B. METADATA TABLE [ExportedType] moze obsahovat IBA PUBLIC TYPES, ktore su definovane v INYCH MODULES CURRENT ASSEMBLY.
   !!! C. METADATA TABLE [ExportedType] NESMIE obsahovat PUBLIC TYPES, ktore su definovane v CURRENT (PRIMARY) MODULE.
   D. METADATA TABLE [ExportedType] moze obsahovat aj FORWARDER REFERENCES, ktore umoznuju vytvorit odkaz na CLASS, ak sa CLASS medzi verziami ASSEMBLY presunula do inej ASSEMBLY. Vdaka tomu ASSEMBLIES, ktore zmenenu ASSEMBLY pouzivaju NEMUSIA byt RECOMPILED.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.class] pre definiciu CLASS.

1. CLASS sa DEFINUJE pomocou KEYWORD [.class].
!!! 2. CLASS sa uklada v METADATA TABLE [TypeDef].
3. SYNTAX KEYWORD [.class] pre definiciu CLASS je nasledovny.
   A. RULE [<CLASSES> ::= <CLASS>].
   B. RULE [<CLASS> ::= .class <FLAGS> <CLASS_NAME> [extends <CLASS_REF>] [implements <CLASS_REFS>] {}]. Za KEYWORD [extends] MUSI nasledovat CLASS NAME z ktoreho CLASS dedi. KAZDA CLASS v .NET (okrem INTERFACES a CLASS System.Object) dedi z nejakej inej CLASS. Za KEYWORD [implements] nasleduje 1-N INTERFACES, ktore CLASS implementuje.
   C. RULE [<CLASS_NAME> ::= <DOTTED_NAME>]. CLASS NAME musi byt DOTTED NAME.
   D. RULE [<CLASS_REFS> ::= <CLASS_REF> [,<CLASS_REF>*]]. CLASS NAME musi byt DOTTED NAME.
   E. RULE [<CLASS_REF> ::= [<RESOLUTION_SCOPE>] <FULL_TYPE_NAME>]. ZLOZENE ZATVORKY [] oznacuju OPTIONAL BLOCK, pretoze ak je CLASS definovany v CURRENT MODULE, tak [RESOLUTION_SCOPE] NIE JE POTREBNY a [FULL_TYPE_NAME] referuje do METADATA TABLE [TableRef]. Ak [RESOLUTION_SCOPE] je definovany, tak [FULL_TYPE_NAME] referuje do METADATA TABLE [TypeRef].
   F. RULE [<RESOLUTION_SCOPE> ::= [<ASSEMBLY_REF_ALIAS>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [AssemblyRef].
   G. RULE [<RESOLUTION_SCOPE> ::= [.module <MODULE_REF_NAME>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [ModuleRef].
4. Kaluzula [extends <CLASS_REF>] je OPTIONAL.
   A. V INTERFACES sa NESMIE pouzit, pretoze INTERFACES NEMAJU BASE CLASS. Ak INTERFACE dedi z ineho INTERFACE, tak je nutne pouzit klauzulu [implements <CLASS_REFS>]].
   B. V CLASSES sa ako DEFAULT pouzije CLASS System.Object.
   C. Vo VALUE TYPES sa ako DEFAULT pouzije CLASS System.ValueType.
   D. Vo ENUMERATIONS sa ako DEFAULT pouzije CLASS System.Enum.
!!! 5. Ak CLASS ma nastaveny FLAG [sequential], alebo FLAG [explicit], tak BASE CLASS MUSI mat nastaveny ROVNAKY FLAG, alebo BASE CLASS musi byt typu System.Object, System.ValueType, alebo System.Enum.
6. Pre kazdy INTERFACE urceny v klauzule [implements <CLASS_REFS>] sa vytvori RECORD v METADATA TABLE [InterfaceImpl].
7. CLASSES mozu mat nasledujuce kategorie FLAGS.
   A. VISIBILITY FLAGS.
   B. LAYOUT FLAGS.
   C. TYPE SEMANTICS FLAGS.
   D. TYPE IMPLEMENTATION FLAGS.
   E. STRING FORMATTING FLAGS.
   F. RESERVED FLAGS.
   G. SEMANTICS PSEUDOFLAGS.
8. CLASSES mozu mat nasledujuce VISIBILITY FLAGS.
   A. FLAG [private]. CLASS je viditelna iba v ramci CURRENT ASSEMBLY.
   B. FLAG [public]. CLASS je viditelna z lubovolnej ASSEMBLY.
   C. FLAG [nested public]. NESTED CLASS je viditelna z lubovolnej ASSEMBLY.
   D. FLAG [nested private]. NESTED CLASS je viditelna iba v ENCLOSING CLASS.
   E. FLAG [nested family]. NESTED CLASS je viditelna iba v CLASSES, ktore su DERIVED z ENCLOSING CLASS.
   F. FLAG [nested assembly]. NESTED CLASS je viditelna iba v CURRENT ASSEMBLY.
   G. FLAG [nested famandassem]. NESTED CLASS je viditelna iba v CLASSES, ktore su DERIVED z ENCLOSING CLASS a zaroven su v CURRENT ASSEMBLY.
   H. FLAG [nested famorassem]. NESTED CLASS je viditelna iba v CLASSES, ktore su DERIVED z ENCLOSING CLASS, ktore mozu byt v LUBOVOLNEJ ASSEMBLY.
9. CLASSES mozu mat nasledujuce LAYOUT FLAGS.
   A. FLAG [auto]. CLASS LAYOUT nie je explicitne urceny a je na LOADER ako nacita danu CLASS.
   B. FLAG [sequential]. CLASS LAYOUT je dany sekvencnym usporiadanim FIELDS v CLASS.
   C. FLAG [explicit]. CLASS LAYOUT je dany explicitnym stanovenim FIELDS v CLASS.
10. CLASSES mozu mat nasledujuce TYPE SEMANTICS FLAGS.
   A. FLAG [interface]. CLASS reprezentuje INTERFACE. V tomto pripade CLASS NEMA BASE CLASS.
   B. FLAG [abstract]. CLASS reprezentuje ABSTRACT CLASS, z ktorej nemozu byt vytvarane instancie.
   C. FLAG [sealed]. CLASS reprezentuje SEALED CLASS, ktora nemoze byt DERIVED.
   D. FLAG [specialname]. CLASS ma specialne meno, ktore CLR specialne interpretuje.
11. CLASSES mozu mat nasledujuce TYPE IMPLEMENTATION FLAGS.
   A. FLAG [import]. CLASS reprezentuje CLASS importovany z COM TYPE LIBRARY.
   B. FLAG [serializable]. CLASS je SERIALIZABLE.
   C. FLAG [beforefieldinit]. CLASS moze byt INITIALIZED (zavolany jej STATIC CONSTRUCTOR) aj skor ako pred prvym pristupom ku CLASS.
12. CLASSES mozu mat nasledujuce STRING FORMATTING FLAGS.
   A. FLAG [ansi]. CLASS ak vo svojich METHODS pouziva UNMANAGED CODE, ktore vyzaduju MARSHALLING STRINGS, tak DEFAULT MARSHALLING bude nastaveny na ANSI STRING. Ak vsak je typ STRING MARSHALLING explicitne urceny, tak sa pouzije tento typ.
   B. FLAG [unicode]. CLASS ak vo svojich METHODS pouziva UNMANAGED CODE, ktore vyzaduju MARSHALLING STRINGS, tak DEFAULT MARSHALLING bude nastaveny na UNICODE STRING. Ak vsak je typ STRING MARSHALLING explicitne urceny, tak sa pouzije tento typ.
   C. FLAG [autochar]. CLASS ak vo svojich METHODS pouziva UNMANAGED CODE, ktore vyzaduju MARSHALLING STRINGS, tak DEFAULT MARSHALLING bude nastaveny na DEFAULT MARSHALLING danej PLATFORM. Ak vsak je typ STRING MARSHALLING explicitne urceny, tak sa pouzije tento typ.
13. CLASSES mozu mat nasledujuce RESERVED FLAGS.
   A. FLAG [rtspecialname]. Pouziva sa v spojitosti s FLAG [specialname], ak ma CLASS rezervovane NAME.
   B. FLAG [<no keyword>]. CLASS ma asociovane DECLARATIVE SECURITY METADATA. FLAG je nastavovany METADATA EMISSION API, ak su DECLARATIVE SECURITY METADATA emitovane spolu s CLASS.
14. CLASSES mozu mat nasledujuce SEMANTICS PSEUDOFLAGS.
   A. FLAG [value]. CLASS je VALUE TYPE, ktory je DERIVED z CLASS System.ValueType.
   B. FLAG [enum]. CLASS je ENUM TYPE, ktory je DERIVED z CLASS System.Enum.
!!! 15. Ak CLASS obsahuje FLAG [sequential], alebo FLAG [explicit], tak je pre dany CLASS vytvoreny RECORD v METADATA TABLE [ClassLayout]. Zaroven v deklaracii CLASS je mozne pouzit nasledujuce KEYWORD.
   A. KEYWORD [.pack VALUE] nastavuje hodnotu COLUMN [ClassLayout].[PackingSize] v MEDADATA TABLE [ClassLayout].
   A. KEYWORD [.size VALUE] nastavuje hodnotu COLUMN [ClassLayout].[ClassSize] v MEDADATA TABLE [ClassLayout].
//-------------------------------------------------------------------------------------------------------
KEYWORD [.class] pre definiciu GENERIC CLASS.

1. GENERIC CLASS sa DEFINUJE pomocou KEYWORD [.class].
!!! 2. GENERIC CLASS sa uklada v METADATA TABLE [TypeDef], ale informacie o TYPE PARAMETERS sa ukladaju v METADATA TABLE [GenericParam] a informacie o TYPE PARAMETER CONSTRAINTS sa ukladaju do METADATA TABLE [GenericParamConstraint].
3. SYNTAX KEYWORD [.class] pre definiciu CLASS je nasledovny.
   A. RULE [<GENERIC_CLASSES> ::= <GENERIC_CLASS>].
   B. RULE [<CLASS> ::= .class <FLAGS> <CLASS_NAME><<GENERIC_PARAMS>> [extends <CLASS_REF>] [implements <CLASS_REFS>] {}]. Zlozene zatvorky okolo [GENERIC_PARAMS] su POVINNE.
   C. RULE [<CLASS_NAME> ::= <DOTTED_NAME>]. Hodnota [CLASS_NAME] musi byt DOTTED NAME.
   D. RULE [<GENERIC_PARAMS> ::= <GENERIC_PARAM> [, <GENERIC_PARAM>]*]. GENERIC TYPE moze mat 1-N TYPE PARAMETERS.
   E. RULE [<GENERIC_PARAM> ::= [<CONSTRAINT_FLAGS>] [( <CONSTRAINTS> )] <GENERIC_PARAM_NAME>]. Kazdy TYPE PARAMETER obsahuje v ZATVORKACH () vsetky CONSTRAINTS.
   F. RULE [<CONSTRAINT_FLAGS> ::= +].
   G. RULE [<CONSTRAINT_FLAGS> ::= -].
   H. RULE [<CONSTRAINT_FLAGS> ::= class]. Urcuje, ze TYPE PARAMETER MUSI byt REFERENCE TYPE.
   I. RULE [<CONSTRAINT_FLAGS> ::= valuetype]. Urcuje, ze TYPE PARAMETER MUSI byt VALUE TYPE.
   J. RULE [<CONSTRAINT_FLAGS> ::= .ctor]. Urcuje, ze TYPE PARAMETER MUSI mat DEFAULT CONSTRUCTOR.
   K. RULE [<CONSTRAINTS> ::= <CLASS_REF>,[CLASS_REF]*]. Obsahuje zoznam CLASSES, ktore reprezentuju CONSTRAINTS aplikovanych na TYPE PARAMETERS.
   L. RULE [<GENERIC_PARAM_NAME> ::= <SIMPLE_NAME>]. SIMPLE NAME je obycajny TYPE PARAMETER NAME.
   M. RULE [<CLASS_REFS> ::= <CLASS_REF> [,<CLASS_REF>*]]. CLASS NAME musi byt DOTTED NAME.
   N. RULE [<CLASS_REF> ::= [<RESOLUTION_SCOPE>] <FULL_TYPE_NAME>]. ZLOZENE ZATVORKY [] oznacuju OPTIONAL BLOCK, pretoze ak je CLASS definovany v CURRENT MODULE, tak [RESOLUTION_SCOPE] NIE JE POTREBNY a [FULL_TYPE_NAME] referuje do METADATA TABLE [TableRef]. Ak [RESOLUTION_SCOPE] je definovany, tak [FULL_TYPE_NAME] referuje do METADATA TABLE [TypeRef].
   O. RULE [<RESOLUTION_SCOPE> ::= [<ASSEMBLY_REF_ALIAS>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [AssemblyRef].
   P. RULE [<RESOLUTION_SCOPE> ::= [.module <MODULE_REF_NAME>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [ModuleRef].
//-------------------------------------------------------------------------------------------------------
KEYWORD [.typelist] pre definovanie poradia CLASSES v ASSEMBLY.

1. Poradie v akom bude MSIL generovat CLASSES do ASSEMBLY sa DEFINUJE pomocou KEYWORD [.typelist].
2. SYNTAX KEYWORD [.typelist] pre definiciu poriada CLASSES je nasledovny.
   A. RULE [<TYPE_LISTS> ::= <TYPE_LIST>].
   B. RULE [<TYPE_LIST> ::= .typelist {<TYPE>[,<TYPE>*]}].
//-------------------------------------------------------------------------------------------------------
KEYWORD [.field] pre definiciu FIELD.

1. FIELD sa DEFINUJE pomocou KEYWORD [.field].
!!! 2. FIELD sa uklada v METADATA TABLE [Field].
3. SYNTAX KEYWORD [.field] pre definiciu FIELD je nasledovny.
   A. RULE [<FIELDS> ::= <FIELD>].
   B. RULE [<FIELD> ::= .field <FLAGS> <TYPE> <NAME>].
   C. RULE [<FIELD> ::= .field <FLAGS> <TYPE> <NAME>=CONST]. Ak FIELD ma definovanu DEFAULT VALUE. MSIL bohuzial NENASTAVUJE hodnotu FIELD na DEFAULT VALUE, iba DEFAULT VALUE zapise do METADATA TABLE [Constants].
   D. RULE [<FIELD> ::= .field <FLAGS> <TYPE> <NAME> at <DATA_LABEL>]. Ak FIELD reprezentuje MAPPED FIELD. Iba STATIC FIELDS mozu byt MAPPED FIELDS. Hodnota [DATA_LABEL] je MEMORY BLOCK na ktory ma byt MAPPED FIELD MAPPED. Ak [DATA_LABEL] ma SYNTAX [@NUMBER], tak [NUMBER] reprezentuje RVA MEMORY BLOCK na ktory ma byt FIELD MAPPED.
   E. RULE [<CONST> ::= <CONST_TYPE>(VALUE)].
   F. RULE [<CONST> ::= nullref]. Ak REFERENCE TYPE ma byt nastaveny na NULL.
   G. RULE [<CONST> ::= "XXX"]. Pre STRINGS.
   H. RULE [<CONST> ::= bytearray(00 01 02 03 04 05)]. Pre lubovolne typy CONSTANTS, vratane STRINGS.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.data] pre definiciu DATA SEGMENTS.

1. DATA SEGMENTS sa DEFINUJU pomocou KEYWORD [.data].
!!! 2. DATA SEGMENTS sa uklada do PE FILE.
   A. Ak v definicii DATA SEGMENT NIE JE pouzity KEYWORD [tls], tak DATA SEGMENT je ulozeny v PE FILE SEGMENT [.sdata].
   B. Ak v definicii DATA SEGMENT JE pouzity KEYWORD [tls], tak DATA SEGMENT je ulozeny v PE FILE SEGMENT [.tls].
3. SYNTAX KEYWORD [.data] pre definiciu DATA SEGMENT je nasledovny.
   A. RULE [<DATA_SEGMENTS> ::= <DATA_SEGMENT>].
   B. RULE [<DATA_SEGMENT> ::= .data [tls] [<DATA_LABEL>=]<DATA_ITEMS>. KEYWORD [tls] znamena, ze DATA SEGMENT bude ulozeny v PE FILE SEGMENT [.tls]. Ak sa nepouzije, tak DATA SEGMENT bude ulozeny v PE FILE SEGMENT [.sdata].
   C. RULE [<DATA_ITEMS> ::= {<DATA_ITEM>[,<DATA_ITEM>*]}].
   D. RULE [<DATA_ITEMS> ::= <DATA_ITEM>].
   E. RULE [<DATA_ITEM> ::= <DATA_TYPE>[(<VALUE>)][[<COUNT>]]. Hodnota [<VALUE>] reprezentuje inicializacnu hodnotu. Hodnota [<COUNT>] reprezentuje pocet ITEMS daneho datoveho TYPE.
!!! 4. DATA SEGMENTS mozu byt aj BEZ MENA. Vtedy sa na ne neda referovat a sluzia ako PADDING.
5. Ak [<DATA_TYPE>] je [bytearray()], tak hodnota [<VALUE>] MUSI byt definovana a hodnota [<COUNT>] NESMIE byt definovana.
6. Ak [<DATA_TYPE>] je [char*()], tak hodnota [<VALUE>] MUSI byt definovana a hodnota [<COUNT>] NESMIE byt definovana. Hodnota [<VALUE>] bude konvertovana na UNICODE STRING.
7. Ak [<DATA_TYPE>] je [&()], tak hodnota [<VALUE>] MUSI byt definovana a hodnota [<COUNT>] NESMIE byt definovana. Hodnota [<VALUE>] musi odkazovat na INY DATA SEGMENT na ktory sa dany DATA SEGMENT bude referovat.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.method] pre definiciu METHOD.

1. METHOD sa DEFINUJE pomocou KEYWORD [.method].
!!! 2. METHOD sa uklada v METADATA TABLE [Method].
3. SYNTAX KEYWORD [.method] pre definiciu METHOD je nasledovny.
   A. RULE [<METHODS> ::= <METHOD>].
   B. RULE [<METHOD> ::= .method <FLAGS> <CALLING_CONVENTION> <RETURN_TYPE> <NAME>(<PARAMETER_LIST>) <IMPLEMENTATION_FLAGS> {<BODY>}].
   C. RULE [<RETURN_TYPE> ::= <TYPE> [marshal(<NATIVE_TYPE>)]].
   D. RULE [<PARAMETER_LIST> ::= [<PARAMETER>[,<PARAMETER>*]]].
   E. RULE [<PARAMETER> ::= [[<PARAMETER_FLAGS>]*] <TYPE> [marshal(<NATIVE_TYPE>)] [<PARAMETER_NAME>]].
   E. RULE [<PARAMETER_FLAGS> ::= in].
   F. RULE [<PARAMETER_FLAGS> ::= out].
   G. RULE [<PARAMETER_FLAGS> ::= opt].
!!! 4. CONSTANTS sa definuju v METHOD BODY pomocou nasledujucej SYNTAXE.
   A. RULE [<PARAMETER_CONSTANT_DEFINITIONS> ::= <PARAMETER_CONSTANT_DEFINITION>].
   B. RULE [<PARAMETER_CONSTANT_DEFINITION> ::= .param[<SEQUENCE>]=<CONSTANT_TYPE>[(VALUE)]]. Zlozene zatvorky okolo hodnoty [<SEQUENCE>] su POVINNE. Hodnota [<SEQUENCE>] udava poradove cislo PARAMETER, ktoreho CONSTANT VALUE ma byt definovana.
5. Na RETURN VALUES nie je mozne aplikovat NAMES, FLAGS ani DEFAULT VALUES.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.override] pre definiciu EXPLICIT METHOD OVERRIDING.

1. EXPLICIT METHOD OVERRIDING sa DEFINUJE pomocou KEYWORD [.override].
!!! 2. Informacia o EXPLICIT METHOD OVERRIDING kazdej METHOD je ulozena v METADATA TABLE [MethodImpl].
3. SYNTAX KEYWORD [.override] pre definiciu EXPLICIT METHOD OVERRIDING je nasledovny.
   A. RULE [<EXPLICIT_METHOD_OVERRIDINGS> ::= <EXPLICIT_METHOD_OVERRIDING>].
   B. RULE [<EXPLICIT_METHOD_OVERRIDING> ::= <CLASS_REFERENCE>::<METHOD_NAME>]. Tato SYNTAX MUSI byt pouzita v METHOD BODY tej METHOD v DERIVED CLASS, ktora vykonala EXPLICIT METHOD OVERRIDING BASE METHOD.
   C. RULE [<EXPLICIT_METHOD_OVERRIDING> ::= <CLASS_REFERENCE>::<METHOD_NAME> with <METHOD_REFERENCE>]. Tato SYNTAX MUSI byt pouzita v CLASS BODY DERIVED CLASS, ma EXPLICIT OVERRIDDEN METHODS.
!!!!! 4. Jedna METHOD moze vykonat EXPLICIT METHOD OVERRIDING VIACERYCH METHODS BASE CLASS (INTERFACES).
//-------------------------------------------------------------------------------------------------------
KEYWORD [.locals] pre definiciu LOCAL VARIABLES.

1. LOCAL VARIABLES sa DEFINUJU pomocou KEYWORD [.locals].
!!! 2. VSETKY LOCAL VARIABLES definovane v 1 METHOD tvoria 1 SIGNATURE, ktora sa uklada do METADATA TABLE [StandAloneSig].
3. SYNTAX KEYWORD [.locals] pre definiciu LOCAL VARIABLES je nasledovny.
   A. RULE [<LOCAL_VARIABLES_DEFINITIONS> ::= <LOCAL_VARIABLES_DEFINITIONS>].
   B. RULE [<LOCAL_VARIABLES_DEFINITION> ::= .locals [FLAGS] (<VARIABLE>[,VARIABLE]*)]. Za FLAGS sa zvycajne dava hodnota [init], ktora znaci, ze vsetky VARIABLES budu INICIALIZOVANE pred zavolanim METHOD. Ak sa FLAG [init] NEPOUZIJE, tak CODE danej METHOD NIE JE VERIFIABLE.
   C. RULE [<VARIABLE> ::= [[<ORDINAL NUMBER>]] TYPE NAME], kde ORDINAL NUMBER je OPTIONAL a urcuje INDEX LOCAL VARIABLE. Ak je zadany, MUSI byt v ZLOZENYCH ZATVORKACH. ORDINAL NUMBERS sa MOZU aj PREKRYVAT, co sa da vyuzit, ak su VARIABLES definovane v rozlicnych SCOPES a nie su naraz potrebne.
!!! D. LOCAL VARIABLES mozu byt pouzite aj vo VNORENYCH SCOPES.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.event] pre definiciu EVENTS.

1. EVENTS sa DEFINUJU pomocou KEYWORD [.event].
!!! 2. EVENTS sa uklada v METADATA TABLE [Event].
3. SYNTAX KEYWORD [.event] pre definiciu EVENTS je nasledovny.
   A. RULE [<EVENTS> ::= <EVENT>].
   B. RULE [<EVENT> ::= <CLASS_REF> <NAME> {<METHOD_SEMANTICS_DECL>*}]. V zlozenych zatvorkach su definicie METHODS na pridavanie EVENT HANDLERS, odstranovanie EVENT HANDLERS a spustanie EVENT HANDLERS.
   C. RULE [<METHOD_SEMANTICS_DECL> ::= <SEMANTICS> <METHOD_REF>].
   D. RULE [<SEMANTICS> ::= .addon].
   E. RULE [<SEMANTICS> ::= .removeon].
   F. RULE [<SEMANTICS> ::= .fire].
   G. RULE [<SEMANTICS> ::= .other].
!!!!! 4. EVENTS su len METADATA ENTITIES, ktore MSIL NIJAKO NEPODPORUJE. To znamena, ze NEEXISTUJU ZIADNE MSIL INSTRUCTIONS, ktore by dokazali pracovat priamo s EVENTS a s EVENTS sa da pracovat iba PRIAMYM volanim ich METHODS.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.property] pre definiciu PROPERTIES.

1. PROPERTIES sa DEFINUJU pomocou KEYWORD [.property].
!!! 2. PROPERTIES sa uklada v METADATA TABLE [Property].
3. SYNTAX KEYWORD [.property] pre definiciu PROPERTIES je nasledovny.
   A. RULE [<PROPERTIES> ::= <PROPERTY>].
   B. RULE [<PROPERTY> ::= .property <FLAGS> <RETURN_TYPE> <NAME>(<PARAM_TYPE>[,<PARAM_TYPE>*]]) [<CONSTANT_DECL>] {<METHOD_SEMANTICS_DECL>*}. PROPERTIES maju 1 RETURN VALUE a 0-N PARAMETERS. V zlozenych zatvorkach su definicie GETTER a SETTER METHODS.
   C. RULE [<METHOD_SEMANTICS_DECL> ::= <SEMANTICS> <METHOD_REF>].
   D. RULE [<SEMANTICS> ::= .set].
   E. RULE [<SEMANTICS> ::= .get].
   F. RULE [<SEMANTICS> ::= .other].
   G. RULE [<CONSTANT_DECL> ::= <CONST_TYPE> [(<CONST_VALUE>)]].
!!!!! 4. PROPERTIES su len METADATA ENTITIES, ktore MSIL NIJAKO NEPODPORUJE. To znamena, ze NEEXISTUJU ZIADNE MSIL INSTRUCTIONS, ktore by dokazali pracovat priamo s PROPERTIES a s PROPERTIES sa da pracovat iba PRIAMYM volanim ich METHODS.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.custom] pre definiciu CUSTOM ATTRIBUTES.

1. CUSTOM ATTRIBUTES sa DEFINUJU pomocou KEYWORD [.custom].
!!! 2. CUSTOM ATTRIBUTES sa uklada v METADATA TABLE [CustomAttribute].
3. MSIL definuje 4 rozlicne SYNTXE pre definiciu CUSTOM ATTRIBUTES.
   A. RAW SYNTAX.
   B. VERBAL SYNTAX.
   C. FULL RAW SYNTAX. Tato SYNTAX umoznuje EXPLICITNE specifikovat na ktory METADATA ITEM sa ma CUSTOM ATTRIBUTE aplikovat. Pouziva sa pre METADATA ITEMS v METADATA TABLES [TypeRef], [TypeSpec] a [MemberRef] ktorym nie je mozne pomocou klasickej SYNTAXE priradit CUSTOM ATTRIBUTES.
   D. FULL VERBAL SYNTAX. Tato SYNTAX umoznuje EXPLICITNE specifikovat na ktory METADATA ITEM sa ma CUSTOM ATTRIBUTE aplikovat. Pouziva sa pre METADATA ITEMS v METADATA TABLES [TypeRef], [TypeSpec] a [MemberRef] ktorym nie je mozne pomocou klasickej SYNTAXE priradit CUSTOM ATTRIBUTES.
4. RAW SYNTAX CUSTOM ATTRIBUTES je nasledovna.
   A. RULE [<CUSTOM_ATTRIBUTE> ::= .custom <ATTRIBUTE_TYPE> [=(HEX_BYTES)]].
   B. RULE [<ATTRIBUTE_TYPE> ::= instance void <CLASS_REF>::.ctor(<ARGUMENT_LIST>). CUSTOM ATTRIBUTES je mozne definovat iba tak, ze sa pouzije ich CONSTRUCTOR.
5. VERBAL SYNTAX CUSTOM ATTRIBUTES je nasledovna.
   A. RULE [<CUSTOM_ATTRIBUTE> ::= .custom <ATTRIBUTE_TYPE> [={SERIALIZED_VALUES}]].
   B. RULE [<ATTRIBUTE_TYPE> ::= instance void <CLASS_REF>::.ctor(<ARGUMENT_LIST>). CUSTOM ATTRIBUTES je mozne definovat iba tak, ze sa pouzije ich CONSTRUCTOR.
6. FULL RAW SYNTAX CUSTOM ATTRIBUTES je nasledovna.
   A. RULE [<CUSTOM_ATTRIBUTE> ::= .custom (<OWNER_SPECIFICATION>) <ATTRIBUTE_TYPE> [=(HEX_BYTES)]].
   B. RULE [<ATTRIBUTE_TYPE> ::= instance void <CLASS_REF>::.ctor(<ARGUMENT_LIST>). CUSTOM ATTRIBUTES je mozne definovat iba tak, ze sa pouzije ich CONSTRUCTOR.
   C. RULE [<OWNER_SPECIFICATION> ::= <CLASS_REFERENCE>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [TypeRef].
   D. RULE [<OWNER_SPECIFICATION> ::= <TYPE_SPECIFICATION>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [TypeSpec].
   E. RULE [<OWNER_SPECIFICATION> ::= method <METHOD_REFERENCE>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [MemberRef].
   F. RULE [<OWNER_SPECIFICATION> ::= field <FIELD_REFERENCE>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [MemberRef].
7. FULL VERBAL SYNTAX CUSTOM ATTRIBUTES je nasledovna.
   A. RULE [<CUSTOM_ATTRIBUTE> ::= .custom (<OWNER_SPECIFICATION>) <ATTRIBUTE_TYPE> [={SERIALIZED_VALUES}]].
   B. RULE [<ATTRIBUTE_TYPE> ::= instance void <CLASS_REF>::.ctor(<ARGUMENT_LIST>). CUSTOM ATTRIBUTES je mozne definovat iba tak, ze sa pouzije ich CONSTRUCTOR.
   C. RULE [<OWNER_SPECIFICATION> ::= <CLASS_REFERENCES>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [TypeRef].
   D. RULE [<OWNER_SPECIFICATION> ::= <TYPE_SPECIFICATION>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [TypeSpec].
   E. RULE [<OWNER_SPECIFICATION> ::= method <METHOD_REFERENCE>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [MemberRef].
   F. RULE [<OWNER_SPECIFICATION> ::= field <FIELD_REFERENCE>]. Ak sa CUSTOM ATTRIBUTE odkazuje na RECORD v METADATA TABLE [MemberRef].
//-------------------------------------------------------------------------------------------------------
KEYWORD [.permission] pre definiciu PERMISSIONS.

1. PERMISSIONS sa DEFINUJU pomocou KEYWORD [.permission].
!!! 2. PERMISSIONS su MSIL podla typu ACTION zlucene do PERMISSION SETS, ktore sa ukladaju v METADATA TABLE [DeclSecurity].
3. SYNTAX KEYWORD [.permission] pre definiciu PERMISSIONS je nasledovny.
   A. RULE [<PERMISSION> ::= .permission <SECURITY_ACTION> <CLASS_REFERENCE> [(<NAME_VALUE_PAIRS>)]. Hodnota [<CLASS_REFERENCE>] je meno ATTRIBUTE PERMISSION CLASS (napriklad [[mscorlib]System.Security.Permissions.FileIOPermissionAttribute]). Hodnota [<NAME_VALUE_PAIRS>] obsahuje NAME VALUE PAIRS pre PROPERTIES, ktore sa maju na prislnom ATTRIBUTE PERMISSION CLASS nastavit.
   B. RULE [<SECURITY_ACTION> ::= request | demand | assert | deny | permitonly | linkcheck | inheritcheck | reqmin | reqopt | reqrefuse | prejitgrant | prejitdeny | noncasdemand | noncaslinkdemand | noncasinheritance].
   C. RULE [<NAME_VALUE_PAIRS> ::= <NAME_VALUE_PAIR>[<NAME_VALUE_PAIR>*]].
   D. RULE [<NAME_VALUE_PAIR> ::= <PROPERTY_NAME>=<PROPERTY_VALUE>]. Hodnota [<PROPERTY_NAME>] obsahuje nazov PROPERTY v ATTRIBUTE PERMISSION CLASS.
   E. RULE [<PROPERTY_VALUE> ::= true]. Pre BOOLEAN PROPERTIES.
   F. RULE [<PROPERTY_VALUE> ::= false]. Pre BOOLEAN PROPERTIES.
   G. RULE [<PROPERTY_VALUE> ::= "STRING"]. Pre STRING PROPERTIES.
   H. RULE [<PROPERTY_VALUE> ::= <INT32>]. Pre INTEGER PROPERTIES.
   I. RULE [<PROPERTY_VALUE> ::= int32(<INT32>)]. Pre INTEGER PROPERTIES.
   J. RULE [<PROPERTY_VALUE> ::= <CLASS_REFERENCE>(<INT32>)]. Pre ENUMS, kde ENUM TYPE je obsiahnuty v hodnote [<INT32>].
   K. RULE [<PROPERTY_VALUE> ::= <CLASS_REFERENCE>(<INT_TYPE>:<INT32>)]. Pre ENUMS, kde ENUM TYPE je obsiahnuty v hodnote [<INT32>]. Hodnota [<INT_TYPE>] urcuje TYPE INTEGER TYPE.
   L. RULE [<INT_TYPE> ::= <INT8>].
   M. RULE [<INT_TYPE> ::= <INT16>].
   N. RULE [<INT_TYPE> ::= <INT32>].
!!! 4. KEYWORD [.permission] sa vzdy aplikuje v SCOPE toho METADATA ITEM na ktory sa ma PERMISSION aplikovat. Takze napriklad v pripade METHOD je to v tele METHOD.
//-------------------------------------------------------------------------------------------------------
KEYWORD [.permissionset] pre definiciu PERMISSION SETS.

1. PERMISSION SETS sa DEFINUJU pomocou KEYWORD [.permissionset].
!!! 2. PERMISSION SETS sa ukladaju v METADATA TABLE [DeclSecurity].
3. SYNTAX KEYWORD [.permission] pre definiciu PERMISSION SETS je nasledovny.
   A. RULE [<PERMISSION_SET> ::= .permissionset <SECURITY_ACTION> (<HEX_BYTES>)]. Je to RAW deklaracia, kde hodnota [<HEX_BYTES>] reprezenuje PERMISSION SET BLOB.
   B. RULE [<PERMISSION_SET> ::= .permissionset <SECURITY_ACTION> {<CLASS_REFERENCE>=[<PROPERTY_VALUE> [<PROPERTY_VALUE>*]]}]. Hodnota [<CLASS_REFERENCE>] je meno ATTRIBUTE PERMISSION CLASS (napriklad [[mscorlib]System.Security.Permissions.FileIOPermissionAttribute]).
   C. RULE [<PROPERTY_VALUE> ::= property <RETURN_TYPE> <NAME> = <VALUE>].
   D. RULE [<VALUE> ::= <PROPERTY_TYPE> [(<CONSTANT_VALUE>)]].
!!! 4. KEYWORD [.permissionset] sa vzdy aplikuje v SCOPE toho METADATA ITEM na ktory sa ma PERMISSION aplikovat. Takze napriklad v pripade METHOD je to v tele METHOD.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
TYPE REFERENCES.

1. SYNTAX pre TYPE REFERENCES je nasledovna.
   A. RULE [<TYPE_REF> ::= [<RESOLUTION_SCOPE>] <FULL_TYPE_NAME>]. ZLOZENE ZATVORKY [] oznacuju OPTIONAL BLOCK, pretoze ak je TYPE definovany v CURRENT MODULE, tak [RESOLUTION_SCOPE] NIE JE POTREBNY a [FULL_TYPE_NAME] referuje do METADATA TABLE [TableRef]. Ak [RESOLUTION_SCOPE] je definovany, tak [FULL_TYPE_NAME] referuje do METADATA TABLE [TypeRef].
   B. RULE [<RESOLUTION_SCOPE> ::= [<ASSEMBLY_REF_ALIAS>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [AssemblyRef].
   C. RULE [<RESOLUTION_SCOPE> ::= [.module <MODULE_REF_NAME>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [ModuleRef].
2. TYPE REFERENCES sa pouzivaju vzdy tam, kde je potrebne referovat na CLASSES, INTERFACES, STRUCTURES a ENUMERATIONS.
3. Hodnota [RESOLUTION_SCOPE] je OPTIONAL. Ak sa nedefinuje, tak TYPE musi byt v CURRENT MODULE.
4. SYNTAX pre NESTED TYPE REFERENCES je nasledovna.
   A. RULE [<NESTED_TYPE_REF> ::= <ENCLOSING_TYPE_REF>/<FULL_TYPE_NAME>].
   B. RULE [<ENCLOSING_TYPE_REF> ::= <NESTED_TYPE_REF>].
   C. RULE [<ENCLOSING_TYPE_REF> ::= <TYPE_REF>].
   D. RULE [<TYPE_REF> ::= [<RESOLUTION_SCOPE>] <FULL_TYPE_NAME>]. ZLOZENE ZATVORKY [] oznacuju OPTIONAL BLOCK, pretoze ak je TYPE definovany v CURRENT MODULE, tak [RESOLUTION_SCOPE] NIE JE POTREBNY a [FULL_TYPE_NAME] referuje do METADATA TABLE [TableRef]. Ak [RESOLUTION_SCOPE] je definovany, tak [FULL_TYPE_NAME] referuje do METADATA TABLE [TypeRef].
   E. RULE [<RESOLUTION_SCOPE> ::= [<ASSEMBLY_REF_ALIAS>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [AssemblyRef].
   F. RULE [<RESOLUTION_SCOPE> ::= [.module <MODULE_REF_NAME>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [ModuleRef].
//-------------------------------------------------------------------------------------------------------
FIELD REFERENCES.

1. SYNTAX pre FIELD REFERENCES je nasledovna.
   A. RULE [<FIELD_REF> ::= [field] <TYPE>[<TYPE_REF>::]<NAME>. FIELD REFERENCES su ulozene v METADATA TABLE [FieldRef].
   B. RULE [<TYPE_REF> ::= [<RESOLUTION_SCOPE>] <FULL_TYPE_NAME>]. ZLOZENE ZATVORKY [] oznacuju OPTIONAL BLOCK, pretoze ak je TYPE definovany v CURRENT MODULE, tak [RESOLUTION_SCOPE] NIE JE POTREBNY a [FULL_TYPE_NAME] referuje do METADATA TABLE [TableRef]. Ak [RESOLUTION_SCOPE] je definovany, tak [FULL_TYPE_NAME] referuje do METADATA TABLE [TypeRef].
   C. RULE [<RESOLUTION_SCOPE> ::= [<ASSEMBLY_REF_ALIAS>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [AssemblyRef].
   D. RULE [<RESOLUTION_SCOPE> ::= [.module <MODULE_REF_NAME>]]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [ModuleRef].
!!! 2. Ak z CONTEXT NIE JE JASNE, ci sa REFERENCE odkazuje na FIELD, alebo METHOD, je mozne pouzit KEYWORD [field] v tvare napriklad [ldtoken field int32 [.module Another.dll]CClass::MField]].
//-------------------------------------------------------------------------------------------------------
GLOBAL FIELD REFERENCES.

1. SYNTAX pre GLOBAL FIELD REFERENCES je nasledovna.
   A. RULE [<GLOBAL_FIELD_REF> ::= [field] <FIELD_TYPE> <NAME>.
   B. RULE [<FIELD_TYPE> ::= <TYPE>].
   C. RULE [<FIELD_TYPE> ::= [.module <MODULE_REF_NAME>]<TYPE>]. ZLOZENE ZATVORKY [] su SUCASTOU SYNTAXE. Ak RESOLUTION_SCOPE odkazuje na EXTERNAL ASSEMBLY, tak sa referuje do METADATA TABLE [ModuleRef].
!!! 2. Ak z CONTEXT NIE JE JASNE, ci sa REFERENCE odkazuje na FIELD, alebo METHOD, je mozne pouzit KEYWORD [field] v tvare napriklad [ldtoken field int32 [.module Another.dll]MField]].
//-------------------------------------------------------------------------------------------------------
METHOD REFERENCES.

1. SYNTAX pre METHOD REFERENCES je nasledovna.
   A. RULE [<METHOD_REFS> ::= <METHOD_REF>]
   B. RULE [<METHOD_REF> ::= [method] <CALLING_CONVENTION> <RETURN_TYPE> <CLASS_REF>::<NAME>(<PARAMETER_LIST>)].
!!! 2. Ak z CONTEXT NIE JE JASNE, ci sa REFERENCE odkazuje na FIELD, alebo METHOD, je mozne pouzit KEYWORD [method] v tvare napriklad [ldtoken field int32 [.module Another.dll]CClass::MField]]. KEYWORD [method] sa vyuziva v nasledujucich pripadoch.
   A. Ak je METHOD REFERENCED v INSTRUCTION [ldtoken].
   B. Ak je METHOD REFERENCED v EXPLICIT SPECIFICATION v CUSTOM ATTRIBUTES.
3. METHOD REFERENCES sa pouzivaju aj ked CODE ziskava REFERENCE na METHOD pre DELEGATES. Vtedy pomocou INSTRUCTION [ldftn] specifikovanim plnej SIGNATURE je mozne ziskat METHOD REFERENCE, ktory sa zasle ako PARAMETER do CONSTRUCTOR DELEGATE.
//-------------------------------------------------------------------------------------------------------
GENERIC TYPE TYPE PARAMETER REFERENCES.

1. GENERIC TYPE TYPE PARAMETER REFERENCES sa pouzivaju v GENERIC TYPES pri referovani na TYPE PARAMETERS. TYPE PARAMETERS sa pouzivaju pri definovani FIELDS, PROPERTIES, EVENTS, METHOD PARAMETERS, METHOD RETURN VALUES, alebo LOCAL VARIABLES v METHODS.
2. SYNTAX pre GENERIC TYPE TYPE PARAMETER REFERENCES je nasledovna.
   A. RULE [<GENERIC_TYPE_TYPE_PARAMETER_REFERENCE> ::= !<ORDINAL_NUMBER>]. Hodnota [ORDINAL_NUMBER] je poradove cislo TYPE PARAMETER zacinajuce od 0.
   B. RULE [<GENERIC_TYPE_TYPE_PARAMETER_REFERENCE> ::= !<TYPE_PARAMETER_NAME>]. Hodnota [TYPE_PARAMETER_NAME] je NAME, ktore bolo priradene TYPE PARAMETER.
//-------------------------------------------------------------------------------------------------------
GENERIC METHOD TYPE PARAMETER REFERENCES.

1. GENERIC METHOD TYPE PARAMETER REFERENCES sa pouzivaju v GENERIC METHODS pri referovani na TYPE PARAMETERS. TYPE PARAMETERS sa pouzivaju pri definovani METHOD PARAMETERS, METHOD RETURN VALUES, alebo LOCAL VARIABLES v METHODS.
2. SYNTAX pre GENERIC METHOD TYPE PARAMETER REFERENCES je nasledovna.
   A. RULE [<GENERIC_METHOD_TYPE_PARAMETER_REFERENCE> ::= !<ORDINAL_NUMBER>]. Hodnota [ORDINAL_NUMBER] je poradove cislo TYPE PARAMETER zacinajuce od 0.
   B. RULE [<GENERIC_METHOD_TYPE_PARAMETER_REFERENCE> ::= !<TYPE_PARAMETER_NAME>]. Hodnota [TYPE_PARAMETER_NAME] je NAME, ktore bolo priradene TYPE PARAMETER.
//-------------------------------------------------------------------------------------------------------
GENERIC TYPE INSTANTIATION.

1. Pri GENERIC TYPE INSTANTIATION sa vytvaraju NOVE TYPES substituovanim TYPE PARAMETERS za realne TYPES.
2. SYNTAX pre TYPE PARAMETER REFERENCES je nasledovna.
   A. RULE [<GENERIC_TYPE_INSTANTIATIONS> ::= <GENERIC_TYPE_INSTANTIATION>].
   B. RULE [<GENERIC_TYPE_INSTANTIATION> ::= class <TYPE_NAME> <<TYPE>[,<TYPE>]*>]. Pouziva sa ak GENERIC TYPE je REFERENCE TYPE.
   C. RULE [<GENERIC_TYPE_INSTANTIATION> ::= valuetype <TYPE_NAME> <<TYPE>[,<TYPE>]*>]. Pouziva sa ak GENERIC TYPE je VALUE TYPE.
//-------------------------------------------------------------------------------------------------------
GENERIC METHOD INSTANTIATION.

1. Pri GENERIC METHOD INSTANTIATION sa vytvaraju NOVE METHODS substituovanim TYPE PARAMETERS za realne TYPES.
2. SYNTAX pre METHOD PARAMETER REFERENCES je nasledovna.
   A. RULE [<GENERIC_METHOD_INSTANTIATIONS> ::= <GENERIC_METHOD_INSTANTIATION>].
   B. RULE [<GENERIC_METHOD_INSTANTIATION> ::= .method <FLAGS> <CALLING_CONVENTION> <RETURN_TYPE> <NAME><<GENERIC_PARAMS>>(<PARAMETER_LIST>) <IMPLEMENTATION_FLAGS> {<BODY>}]. Hodnota [GENERIC_PARAMETERS] reprezentuje vsetky GENERIC PARAMETERS aj s CONSTRAINTS.
   C. RULE [<RETURN_TYPE> ::= <TYPE> [marshal(<NATIVE_TYPE>)]].
   D. RULE [<PARAMETER_LIST> ::= [<PARAMETER>[,<PARAMETER>*]]].
   E. RULE [<PARAMETER> ::= [[<PARAMETER_FLAGS>]*] <TYPE> [marshal(<NATIVE_TYPE>)] [<PARAMETER_NAME>]].
   F. RULE [<PARAMETER_FLAGS> ::= in].
   G. RULE [<PARAMETER_FLAGS> ::= out].
   H. RULE [<PARAMETER_FLAGS> ::= opt].
   I. RULE [<GENERIC_PARAMS> ::= <GENERIC_PARAM> [, <GENERIC_PARAM>]*]. GENERIC TYPE moze mat 1-N TYPE PARAMETERS.
   J. RULE [<GENERIC_PARAM> ::= [<CONSTRAINT_FLAGS>] [( <CONSTRAINTS> )] <GENERIC_PARAM_NAME>]. Kazdy TYPE PARAMETER obsahuje v ZATVORKACH () vsetky CONSTRAINTS.
   K. RULE [<CONSTRAINT_FLAGS> ::= class]. Urcuje, ze TYPE PARAMETER MUSI byt REFERENCE TYPE.
   L. RULE [<CONSTRAINT_FLAGS> ::= valuetype]. Urcuje, ze TYPE PARAMETER MUSI byt VALUE TYPE.
   M. RULE [<CONSTRAINT_FLAGS> ::= .ctor]. Urcuje, ze TYPE PARAMETER MUSI mat DEFAULT CONSTRUCTOR.
   N. RULE [<CONSTRAINTS> ::= <CLASS_REF>,[CLASS_REF]*]. Obsahuje zoznam CLASSES, ktore reprezentuju CONSTRAINTS aplikovanych na TYPE PARAMETERS.
   O. RULE [<GENERIC_PARAM_NAME> ::= <SIMPLE_NAME>]. SIMPLE NAME je obycajny TYPE PARAMETER NAME.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
EXCEPTION CLAUSES.

1. MSIL definuje 2 rozlicne SYNTAXE pre deklaraciu EXCEPTION CLAUSES.
   A. LABEL FORM.
   B. SCOPE FORM.
   C. MIXED FORM. Kombinuje LABEL FORM a SCOPE FORM v jednej EXCEPTION CLAUSE.
2. LABEL FORM EXCEPTION CLAUSE ma nasledujucu SYNTAX.
   A. RULE [<EXCEPTION_CLAUSE> ::= .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL>].
   B. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= catch <CLASS_REFERENCE>]. Definuje CATCH BLOCK.
   C. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= filter <LABEL>]. Definuje FILTER BLOCK. FILTER CODE musi pred volanim INSTRUCTION [endfilter] ulozit na STACK bud 1, ak nasledovny EXCEPTION HANDLER ma EXCEPTION spracovat, alebo 0, ak sa ma pokracovat s hladanim EXCEPTION HANDLER.
   D. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= finally]. Definuje FINALLY BLOCK.
   E. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= fault]. Definuje FAULT BLOCK.
!!! 3. Jednotlive BLOCKS oddelene LABELS NEMUSIA v CODE nasledovat za sebou tak ako su usporiadane v EXCEPTION CLAUSE. To znaci, ze HANDLER BLOCK moze napriklad byt fyzicky v CODE pre TRY BLOCK. Avsak jednotlive BLOCKS NESMU byt OVERLAPPED.
!!!!! 4. LABELS MUSIA byt fyzicky v CODE definovane PRED EXCEPTION CLAUSE.
!!!!! 5. LABEL FORM EXCEPTION CLAUSE umoznuje definovat VIACERO CATCH a FILTER BLOCKS a to pomocou nasledujucich SYNTAXI.
   A. RULE [<EXCEPTION_CLAUSE> ::= .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL> .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL> .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL>]. V tejto SYNTAXI nasleduju KOMPLETNE deklaracie EXCEPTION CLAUSES.
   B. RULE [<EXCEPTION_CLAUSE> ::= .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL> .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL> .try <LABEL> to <LABEL> <EXCEPTION_BLOCK_CLAUSE> handler <LABEL> to <LABEL> .try <LABEL> to <LABEL>]. V tejto SYNTAXI nasleduje po TRY BLOCK viacero CATCH a FILTER BLOCKS.
!!!!! 6. EXCEPTION CLAUSES mozu mat IBA JEDEN z nasledujucich kombinacii BLOCKS.
   A. EXCEPTION CLAUSES mozu mat 0-N CATCH a FILTER BLOCKS.
   B. EXCEPTION CLAUSES mozu mat 0-1 FILTER BLOCKS.
   C. EXCEPTION CLAUSES mozu mat 0-1 FAULT BLOCKS.
!!!!! 7. Pre EXCEPTION CLAUSES teda platia nasledujuce fakty.
   A. EXCEPTION CLAUSES NESMU mat ZAROVEN definovane CATCH a FILTER BLOCKS a ZAROVEN aj FINALLY a FAULT BLOCKS.
   B. Ak EXCEPTION CLAUSE uz ma CATCH ci FILTER BLOCKS NESMIE mat ANI FINALLY, ani FAULT BLOCKS.
   C. Ak ma FINALLY BLOCKS, tak NESMU mat CATCH a FILTER BLOCKS ani FAULT BLOCKS.
   D. Ak ma FAULT BLOCK, tak NESMU mat CATCH a FILTER BLOCKS ani FINALLY BLOCKS.
   E. EXCEPTION CLAUSES NESMU mat viac ako 1 FINALLY a FAULT BLOCK.
!!!!! 8. CATCH a FILTER BLOCKS maju VZDY pri volani na STACK ulozenu instanciu EXCEPTION, ktora ich vyvolala. CATCH BLOCK moze EXCEPTION spracovat a FILTER BLOCK sa na zaklade EXCEPTION moze rozhodnut ci bude EXCEPTION spracovavat.
9. SCOPE FORM EXCEPTION CLAUSE ma nasledujucu SYNTAX.
   A. RULE [<EXCEPTION_CLAUSE> ::= .try { <CODE> } <EXCEPTION_BLOCK_CLAUSE>*].
   B. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= catch <CLASS_REFERENCE> { <HANDLER_CODE> }]. Definuje CATCH BLOCK.
   C. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= filter { <FILTER_CODE>} { <HANDLER_CODE> }]. Definuje FILTER BLOCK. FILTER CODE musi pred volanim INSTRUCTION [endfilter] ulozit na STACK bud 1, ak nasledovny EXCEPTION HANDLER ma EXCEPTION spracovat, alebo 0, ak sa ma pokracovat s hladanim EXCEPTION HANDLER.
   D. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= finally { <CODE> }]. Definuje FINALLY BLOCK.
   E. RULE [<EXCEPTION_BLOCK_CLAUSE> ::= fault { <CODE> }]. Definuje FAULT BLOCK.
!!! 10. MSIL umoznuje kombinovat LABEL a SCOPE FORM.
//-------------------------------------------------------------------------------------------------------