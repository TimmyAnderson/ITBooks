//------------------------------------------------------------------------------
Multithread Exceptions

1. Exceptions, ktore vzniknu na hocktorom Threade ak nie su zachytene, stanu sa Unhandled Exception a sposobia PAD CELEHO PROCESU.
2. Zvycajne su Exceptions zachytavane (i ked niekedy pad procesu moze byt zelatelna notifikacia o chybe) a su nejakych sposobom spracovane.

Exception Marshaling 

1. Najcastejsim sposobom spracovania Multithread Exceptions je ich MARSHALING do THREADU, ktore SPUSTIL PARALELNE VYKONAVANIE KODU - SPUSTIL THREADS.
2. Problemom Exception Marshaling je rozhodnutie ci Exception marshalovat OKAMZITE, alebo NESKOR, co ak sa stane VIACERO EXCEPTION a podobne.
3. Ak metoda, ktora SPUSTILA PARALELNY PROCES vracia Exception z ineho threadu pri hodeni Exception dochadza k STRATE INFORMACIE O STRACK TRACE (pokial nepouzijem InnerException) a Exceptions sa TAZSIE DEBUGGUJU.
!!! 4. Avsak Exception Marshaling je stale NAJEFEKTIVNEJSIM sposobom spracovania Exceptions.

Multiple Exceptions

1. Pri spracovani paralelnych Exceptions nastava otazka ako riesit situaciu ked je naraz hodenych viacero Exceptions.
2. Najjednoduchsim riesenim je hodit IBA PRVU EXCEPTION a OSTATNE IGNOROVAT. Nevyhodou tohto riesenia je fakt, ze mnohe Exceptions mozu ostat nepovsimnute.
!!! 3. Lepsim riesenim je AGREGACIA EXCEPTIONS. Pri agregacii Exceptions VYTVORIM CUSTOM EXCEPTION, ktora obsahuje KOLEKCIU VSETKYCH ZACHYTENYCH EXCEPTIONS. Tutu kolekciu potom naplnam pocas behu paralelneho programu a HODIM JU PRI SKONCENI PARALELNEHO ALGORITMU.
4. Nevyhodou agregacie je nutnost zachytit AGREGOVANU CUSTOM EXCEPTION a nie skutocnu Exception, ktora bola vratena. Takisto CATCH blok a zotavenie z takejto Exception moze byt komplikovany a komplexny proces.
5. Niekedy je mozne agregovane Exceptions zlucovat - ak je to vhodne z hladiska programu. Teda Exceptions rovnakeho typu su zlucene do jednej Exception. Je to vsak velmi zavsile na danom programe a dochadza aj k strate infromacie - napriklad Call Stack, ak ho specialne neukladam.
//------------------------------------------------------------------------------