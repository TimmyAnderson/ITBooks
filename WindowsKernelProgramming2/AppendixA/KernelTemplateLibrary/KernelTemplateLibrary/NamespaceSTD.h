//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
namespace STD
{
//----------------------------------------------------------------------------------------------------------------------
	template <typename TType>
	struct SRemoveReference final
	{
//----------------------------------------------------------------------------------------------------------------------
		using													TYPE=TType;
		using													CONST_TYPE=const TType;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template <typename TType>
	struct SRemoveReference<TType&> final
	{
//----------------------------------------------------------------------------------------------------------------------
		using													TYPE=TType;
		using													CONST_TYPE=const TType&;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct SRemoveReference<TType&&> final
	{
//----------------------------------------------------------------------------------------------------------------------
		using													TYPE=TType;
		using													CONST_TYPE=const TType&&;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	using														RemoveReferenceType=typename SRemoveReference<TType>::TYPE;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	constexpr RemoveReferenceType<TType>&& Move(TType&& Argument) noexcept
	{
		return(static_cast<RemoveReferenceType<TType>&&>(Argument));
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------