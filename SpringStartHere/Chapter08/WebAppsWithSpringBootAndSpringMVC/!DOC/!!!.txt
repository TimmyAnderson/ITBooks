//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie SPRING BOOT a SPRING MVC pri vytvarani DYNAMIC WEB PAGES.
2. SPRING MVC umoznuje vracat DYNAMIC WEB PAGES pomocou TEMPLATE ENGINES.
3. TEMPLATE ENGINE je DEPENDENCY, ktora umoznuje vkladat DYNAMIC DATA do HTML PAGES.
4. TEMPLATE ENGINE [Thymeleaf] je mozne pridat pridanim DEPENDENCY [spring-boot-starter-thymeleaf] do FILE [pom.xml]. Takisto je tuto DEPENDENCY mozne pridat pri vytvarani SPRING PROJECT na WEB PAGE [start.spring.io].
5. Vytvorenie CONTROLLER, ktory umoznuje vytvarat VIEWS, ktore umoznuju vracat DYNAMIC DATA sa vykonava v nasledujucich krokoch.
   A. Definuje sa PUBLIC CLASS.
   !!! B. Na CLASS sa aplikuje STEREOTYPE ANNOTATION [@Controller]. Tato ANNOTATION oznaci CLASS ako CONTROLLER, a zaroven ako BEAN OBJECT. ANNOTATION [@Controller] je podobna ako ANNOTATION [@Component] na oznacenie BEAN OBJECT, avsak explicitne oznacuje dany BEAN OBJECT ako CONTROLLER.
   !!! C. Definuje sa ACTION METHOD, ktora ma PROTOTYPE [String ACTION_METHOD_NAME(Model Page)]. CLASS [Model] umoznuje prenasat DYNAMIC DATA z CONTROLLER do HTML PAGE VIEW.
   !!! D. ACTION METHOD sa oznaci pomocou ANNOTATION [@RequestMapping(URL)], ktora ma ako PARAMETER URL PATH pre ktoru sa ma dany CONTROLLER vyvolat.
   E. Pomocou METHOD [Model Model.addAttribute(String AttributeName, @Nullable Object AttributeValue)] sa vlozia DYNAMIC DATA. PARAMETER 'AttributeName' reprezentuje IDENTIFIKATOR pomocou ktoreho sa je mozne v HTML VIEW na VALUE referovat a PARAMETER 'AttributeValue' obsahuje samotnu VALUE.
   F. ACTION METHOD vrati ako STRING 'NAME.html' co je nazov HTML FILE, ktory sa ma vrati ako RESPONSE. Tento FILE MUSI byt ulozeny v DIRECTORY [resources/templates].
6. Vytvorenie HTML PAGE, ktora obsahuje DYNAMIC DATA vlozene pomocou TEMPLATE ENGINE [Thymeleaf] sa vykonava v nasledujucich krokoch.
   A. Vytvori sa .HTML FILE s NAME 'NAME.html'.
   B. Vytvoreny .HTML FILE 'NAME.html' musi byt BY-DEFAULT ulozeny v DIRECTORY [resources/templates].
   C. Do HTML TAG sa vlozi HTML ATTRIBUTE [xmlns:th="http://www.thymeleaf.org"], ktory umoznuje TEMPLATE ENGINE [Thymeleaf] rozpoznat HTML ATTRIBUTES, ktore sluzia na vkladanie DYNAMIC DATA.
   D. Do HTML TAGS je mozne pomocou SYNTAX [${KEY_NAME}] mozne vkladat VALUES z DYNAMIC DATA DICTIONARY. VALUE 'KEY_NAME' oznacuje nazov KEY ulozeneho KEY-VALUE PAIR do instancie CLASS [Model] v CONTROLLER pomocou METHOD [Model Model.addAttribute(String AttributeName, @Nullable Object AttributeValue)].
7. HTTP REQUEST moze na WEB SERVER odosielat CUSTOM DATA nasledujucimi sposobmi.
   A. Pomocou PATH VARIABLES. PATH moze mat okrem casti identifikujucej SERVICE aj dalsie PARAMETERS oddelene CHARACTER '/'.
   B. Pomocou HTTP REQUEST PARAMETERS. HTTP REQUEST PARAMETERS (QUERY PARAMETES) su KEY-VALUE hodnoty, ktore su sucastou PATH z oddelujucim CHARACTER '?'.
   C. Pomocou HTTP REQUEST HEADERS. HTTP REQUEST HEADERS su KEY-VALUE hodnoty, ktore su sucastou HTTP CONTENT. Mozu obsahovat dlhsie data ako PATH VARIABLES ci QUERY PARAMETERS.
   D. Pomocou HTTP REQUEST BODY. HTTP REQUEST BODY je sucastou HTTP CONTENT, ktory moze mat velku dlzku.
8. PATH VARIABLES maju format FORMAT [PATH/VALUE_1/VALUE_2/.../VALUE_N], kde VALUE 'PATH' je HTTP PATH a VALUES 'VALUE_X' su VALUES jednotlivych PATH VARIABLES.
9. SPRING umoznuje sparacovavat PATH VARIABLES nasledujucim sposobom.
   A. V ANNOTATION [@RequestMapping] sa musia definovat PATH VARIABLES pomocou SYNTAX [PATH/{PATH_VARIABLE_1}/{PATH_VARIABLE_2}/.../{PATH_VARIABLE_N}], kde VALUE 'PATH' je HTTP PATH a VALUES 'PATH_VARIABLE_X' su NAMES jednotlivych PATH VARIABLES.
   !!! B. Pre kazdu PATH VARIABLE sa do ACTION METHOD prida PARAMETER TYPE 'String'. Jeho NAME sa MUSI zhodovat s NAME PATH VARIABLE.
   C. Pridane PARAMETERS ACTION METHOD sa oznacia pomocou ANNOTATION [@PathVariable].
   !!!!! D. BY-DEFAULT, PATH VARIABLES su MANDATORY. V pripade, ze nie su definovane, HTTP SERVER vrati HTTP STATUS CODE 404, pretoze PATH nebola priradena CONTROLLER.
   !!! E. Ak PATH VARIABLES maju byt OPTIONAL, je nutne nastavit v ANNOTATION [@RequestParam] PROPERTY 'required' na VALUE 'false'. Zaroven je treba pridat do ANNOTATION [@RequestMapping] pridat vsetky kombinacie PATHS pomocou SYNTAX [@RequestMapping(value={"PATH/{MANDATORY_PATH_VARIABLE_1}/{MANDATORY_PATH_VARIABLE_2}","PATH/{MANDATORY_PATH_VARIABLE_1}/{MANDATORY_PATH_VARIABLE_2/{OPTIONAL_PATH_VARIABLE_1}","PATH/{MANDATORY_PATH_VARIABLE_1}/{MANDATORY_PATH_VARIABLE_2}/{OPTIONAL_PATH_VARIABLE_1}/{OPTIONAL_PATH_VARIABLE_2}",...,"PATH/{MANDATORY_PATH_VARIABLE_1}/{MANDATORY_PATH_VARIABLE_2}/{OPTIONAL_PATH_VARIABLE_1}/{OPTIONAL_PATH_VARIABLE_2}/.../{OPTIONAL_PATH_VARIABLE_N}}")].
10. HTTP REQUEST PARAMETERS (QUERY PARAMETES) maju FORMAT [PATH?KEY_1=VALUE_1&KEY_2=VALUE_2&...&KEY_N=VALUE_N], kde VALUE 'PATH' je HTTP PATH, VALUES 'KEY_X' su KEYS jednotlivych HTTP REQUEST PARAMETERS a VALUES 'VALUE_X' su VALUES jednotlivych HTTP REQUEST PARAMETERS.
11. SPRING umoznuje sparacovavat HTTP REQUEST PARAMETERS nasledujucim sposobom.
   A. Pre kazdy HTTP REQUEST PARAMETER sa do ACTION METHOD prida PARAMETER TYPE 'String'.
   B. Pridane PARAMETERS ACTION METHOD sa oznacia pomocou ANNOTATION [@RequestParam].
   !!!!! C. BY-DEFAULT, HTTP REQUEST PARAMETERS su MANDATORY. V pripade, ze nie su definovane, HTTP SERVER vrati HTTP STATUS CODE 400. 
   !!! D. Ak HTTP REQUEST PARAMETERS maju byt OPTIONAL, je nutne nastavit v ANNOTATION [@RequestParam] PROPERTY 'required' na VALUE 'false'.
12. HTTP pouziva HTTP VERBS na urcenie aky typ ACTION sa ma nad danou PATH vykonat. HTTP definuje nasledujuce HTTP VERBS.
   A. GET. Vykonava SELECT dat na SERVERI.
   B. POST. Vykonava INSERT dat na SERVERI.
   C. PUT. Vykonava FULL UPDATE dat na SERVERI.
   D. PATCH. Vykonava PARTIAL UPDATE dat na SERVERI.
   E. DELETE. Vykonava DELETE dat na SERVERI.
13. To pre ktory HTTP VERB sa ma dana ACTION METHOD volat je mozne urcit v ANNOTATION [@RequestMapping] pomocou PROPERTY [method].
14. THYMELEAF umoznuje iterovat COLLECTION ITEMS pomocou SYNTAX [th:each="LOCAL_VARIABLE_NAME: ${COLLECTION_VARIABLE_NAME}], kde VALUE 'LOCAL_VARIABLE_NAME' reprezentuje LOCAL VARIABLE NAME pomocou, ktoreho sa je mozne na ITEM referovat a VALUE 'COLLECTION_VARIABLE_NAME' reprezentuje COLLECTION VARIABLE NAME.
!!! 15. ACTION METHODS mozu mat ako PARAMETER aj ine TYPES ako TYPE 'String'. Napriklad PRIMITIVE TYPE 'int' ci CUSTOM CLASSES. SPRING dokaze vykona konverziu INPUT PARAMETERS na prislusne TYPES.
!!!!! 16. Ak ma ACTION METHOD PARAMETER TYPE CUSTOM CLASS, tak sa NESMIE pouzit ANNOTATION [@RequestParam], ale PARAMETER musi ostat bez ANNOTATION.
17. SPRING definuje pre jednotlive HTTP VERBS ANNOTATIONS, ktore su alternativou voci ANNOTATON [@RequestMapping].
   A. ANNOTATON [@GetMapping] sa pouziva pre GET HTTP VERB.
   B. ANNOTATON [@PostMapping] sa pouziva pre POST HTTP VERB.
   C. ANNOTATON [@PutMapping] sa pouziva pre PUT HTTP VERB.
   D. ANNOTATON [@PatchMapping] sa pouziva pre PATCH HTTP VERB.
   E. ANNOTATON [@DeleteMapping] sa pouziva pre DELETE HTTP VERB.
//----------------------------------------------------------------------------------------------------------------------