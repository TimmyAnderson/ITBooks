using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using Microsoft.EntityFrameworkCore;
using RealApplication4.Models;
//----------------------------------------------------------------------------------------------------------------------
// !!! CODE BEHIND CLASS MUSI byt definovana v ROVNAKOM NAMESPACE ako [Orders.razor].
namespace RealApplication4.Blazor
{
//----------------------------------------------------------------------------------------------------------------------
	public partial class Orders : OwningComponentBase<IOrderRepository>
	{
//----------------------------------------------------------------------------------------------------------------------
		private IEnumerable<COrder>								MAllOrders;
		private IEnumerable<COrder>								MUnshippedOrders;
		private IEnumerable<COrder>								MShippedOrders;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public IOrderRepository									Repository
		{
			get
			{
				return(Service);
			}
		}
//----------------------------------------------------------------------------------------------------------------------
		public IEnumerable<COrder>								AllOrders
		{
			get
			{
				return(MAllOrders);
			}
			set
			{
				MAllOrders=value;
			}
		}
//----------------------------------------------------------------------------------------------------------------------
		public IEnumerable<COrder>								UnshippedOrders
		{
			get
			{
				return(MUnshippedOrders);
			}
			set
			{
				MUnshippedOrders=value;
			}
		}
//----------------------------------------------------------------------------------------------------------------------
		public IEnumerable<COrder>								ShippedOrders
		{
			get
			{
				return(MShippedOrders);
			}
			set
			{
				MShippedOrders=value;
			}
		}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		private void UpdateOrder(int ID, bool ShipValue)
		{
			COrder												Order=Repository.Orders.FirstOrDefault(P => P.OrderID==ID);

			Order.Shipped=ShipValue;

			Repository.SaveOrder(Order);
		}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		protected async override Task OnInitializedAsync()
		{
			await UpdateData();
		}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public async Task UpdateData()
		{
			AllOrders=await Repository.Orders.ToListAsync();

			UnshippedOrders=AllOrders.Where(P => !P.Shipped);

			ShippedOrders=AllOrders.Where(P => P.Shipped);
		}
//----------------------------------------------------------------------------------------------------------------------
		public void ShipOrder(int ID)
		{
			UpdateOrder(ID,true);
		}
//----------------------------------------------------------------------------------------------------------------------
		public void ResetOrder(int ID)
		{
			UpdateOrder(ID,false);
		}
//----------------------------------------------------------------------------------------------------------------------
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------