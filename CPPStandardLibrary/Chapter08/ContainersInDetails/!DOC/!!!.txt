//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie METHODS jednotlivych STL COLLECTIONS.
2. Jednotlive STL COLLECTIONS definuju nasledujuce ITERATOR CATEGORIES.
   A. ARRAY pouziva RANDOM ACCESS ITERATORS.
   B. VECTOR pouziva RANDOM ACCESS ITERATORS.
   C. DEQUEUE pouziva RANDOM ACCESS ITERATORS.
   D. LIST pouziva BIDIRECTIONAL ITERATORS.
   E. FORWARD LIST pouziva FORWARD ITERATORS.
   F. SET pouziva BIDIRECTIONAL ITERATORS. ITEM je CONSTANT.
   G. MULTISET pouziva BIDIRECTIONAL ITERATORS. ITEM je CONSTANT.
   H. MAP pouziva BIDIRECTIONAL ITERATORS. KEY je CONSTANT.
   I. MULTIMAP pouziva BIDIRECTIONAL ITERATORS. KEY je CONSTANT.
   J. UNORDERED SET pouziva FORWARD ITERATORS. ITEM je CONSTANT.
   K. UNORDERED MULTISET pouziva FORWARD ITERATORS. ITEM je CONSTANT.
   L. UNORDERED MAP pouziva FORWARD ITERATORS. KEY je CONSTANT.
   M. UNORDERED MULTIMAP pouziva FORWARD ITERATORS. KEY je CONSTANT.
   N. STRING pouziva RANDOM ACCESS ITERATORS.
3. STL COLLECTIONS definuju nasledujuce TYPES.
   A. TYPE [value_type] urcuje TYPE pre ITEMS ulozene v COLLECTION.
   B. TYPE [reference] urcuje REFERENCE TYPE pre ITEMS ulozene v COLLECTION.
   C. TYPE [const_reference] urcuje CONST REFERENCE TYPE pre ITEMS ulozene v COLLECTION.
   D. TYPE [iterator] urcuje TYPE pre ITERATOR COLLECTION.
   E. TYPE [const_iterator] urcuje TYPE pre CONST ITERATOR COLLECTION.
   F. TYPE [reverse_iterator] urcuje TYPE pre REVERSE ITERATOR COLLECTION.
   G. TYPE [const_reverse_iterator] urcuje TYPE pre CONST REVERSE ITERATOR COLLECTION.
   H. TYPE [pointer] urcuje POINTER TYPE pre ITEMS ulozene v COLLECTION.
   I. TYPE [const_pointer] urcuje CONST POINTER TYPE pre ITEMS ulozene v COLLECTION.
   J. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet ako je napriklad pocet ITEMS v COLLECTION.
   K. TYPE [difference_type] je SIGNED TYPE reprezentujuci hodnoty urcujuce rozdiel ako je napriklad rozdiel medzi poziciami dvoch ITEMS v COLLECTION.
   L. TYPE [key_type] urcuje KEY TYPE ITEMS ulozenych v COLLECTIONS ukladajucich ITEMS na zaklade hodnoty KEY.
   M. TYPE [mapped_type] urcuje VALUE TYPE ITEMS ulozenych v COLLECTIONS ukladajucich ITEMS na zaklade hodnoty KEY.
   N. TYPE [key_compare] urcuje TYPE, ktory sa pouziva ako KEY COMPARER v COLLECTIONS ukladajucich ITEMS na zaklade hodnoty KEY.
   !!! O. TYPE [value_compare] urcuje TYPE, ktory sa pouziva ako VALUE COMPARER v COLLECTIONS ukladajucich ITEMS na zaklade hodnoty KEY. Porovnava IBA hodnoty KEYS. Hodnoty VALUES IGNORUJE.
   P. TYPE [hasher] obsahuje TYPE pouzivany na vypocet HASH FUNCTION v COLLECTION ukladajucich ITEMS na zaklade HASH hodnoty KEY.
   Q. TYPE [key_equal] urcuje TYPE pouzity na porovnanie hodnot 2 KEYS v COLLECTIONS ukladajucich ITEMS na zaklade hodnoty KEY.
   R. TYPE [local_iterator] urcuje TYPE pre ITERATOR pouzivany na prechod ITEMS v ramci jedneho BUCKET v COLLECTIONS, ktore ukladaju ITEMS do BUCKETS. ITERATOR NIE JE MOZNE pouzit na prechod medzi ITEMS v rozlicnych BUCKETS.
   S. TYPE [const_local_iterator] urcuje TYPE pre CONST ITERATOR pouzivany na prechod ITEMS v ramci jedneho BUCKET v COLLECTIONS, ktore ukladaju ITEMS do BUCKETS. ITERATOR NIE JE MOZNE pouzit na prechod medzi ITEMS v rozlicnych BUCKETS.
   T. TYPE [node_type] urcuje TYPE pre NODES, ktore su ulozene v COLLECTION.
   U. TYPE [insert_return_type] urcuje TYPE pouzivany na reprezentaciu vysledku vkladania ITEM do COLLECTION. Obsahuje informaciu ci ITEM bol do COLLECTION vlozeny, poziciu na ktoru bol vlozeny a instanciu CLASS [node_type] obsahuju NODE do ktoreho bol ITEM vlozeny.
   V. TYPE [allocator_type] urcuje TYPE, ktory sa pouziva ako ALLOCATOR alokujuci MEMORY pre COLLECTION.
4. STL COLLECTIONS definuju nasledujuce typy CONSTRUCTORS.
   A. CONSTRUCTOR [COLLECTION(void)] predstavuje DEFAULT CONSTRUCTOR, ktory vytvori prazdnu instanciu COLLECTION.
   B. CONSTRUCTOR [COLLECTION(const TCompareFunction&)] vytvori COLLECTION s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING.
   C. CONSTRUCTOR [COLLECTION(size_type)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS.
   D. CONSTRUCTOR [COLLECTION(size_type,const THasher&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS a CUSTOM HASH FUNCTION.
   E. CONSTRUCTOR [COLLECTION(size_type,const THasher&,const TKeyEqual&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, CUSTOM HASH FUNCTION a CUSTOM KEY EQUAL FUNCTION.
   F. CONSTRUCTOR [COLLECTION(initializer_list<TType>)] vytvori COLLECTION a naplni ju VALUES z INITIALIZER LIST.
   G. CONSTRUCTOR [COLLECTION(initializer_list<TType>,const TCompareFunction&)] vytvori COLLECTION s CUSTOM COMPARE FUNCTION pre SORTING a naplni ju VALUES z INITIALIZER LIST.
   H. CONSTRUCTOR [COLLECTION(initializer_list<TType>,size_type)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS a naplni ju VALUES z INITIALIZER LIST.
   I. CONSTRUCTOR [COLLECTION(initializer_list<TType>,size_type,const THasher&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS a CUSTOM HASH FUNCTION a naplni ju VALUES z INITIALIZER LIST.
   J. CONSTRUCTOR [COLLECTION(initializer_list<TType>,size_type,const THasher&,const TKeyEqual&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, CUSTOM HASH FUNCTION a CUSTOM KEY EQUAL FUNCTION a naplni ju VALUES z INITIALIZER LIST.
   K. CONSTRUCTOR [COLLECTION(const COLLECTION&)] predstavuje COPY CONSTRUCTOR, ktory vytvori kopiu COLLECTION obsahujucu tie iste ITEMS ako povodna COLLECTION.
   L. CONSTRUCTOR [COLLECTION(COLLECTION&&)] predstavuje MOVE CONSTRUCTOR, ktory presunie ITEMS z povodnej COLLECTION do novej COLLECTION pomocou MOVE SEMANTICS.
   M. CONSTRUCTOR [COLLECTION(size_type NumberOfItems)] vytvori COLLECTION s 'N' ITEMS, ktore su vytvorene volanim ich DEFUALT CONSTRUCTORS.
   N. CONSTRUCTOR [COLLECTION(size_type NumberOfItems,const TType&)] vytvori COLLECTION s 'N' ITEMS, ktore su vytvorene ako kopie ITEM, ktory je zaslany ako 2. PARAMETER CONSTRUCTOR.
   O. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator)] vytvori COLLECTION, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
   P. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,const TCompareFunction&)] vytvori COLLECTION s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
   Q. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,size_type)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
   R. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,size_type,const THasher&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS a CUSTOM HASH FUNCTION, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
   S. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,size_type,const THasher&,const TKeyEqual&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, CUSTOM HASH FUNCTION a CUSTOM KEY EQUAL FUNCTION, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS.
5. STL COLLECTIONS definuju DESTRUCTORS, ktore volaju DESTRUCTORS pre ITEMS ulozne v COLLECTIONS a nasledne uvolnuju MEMORY, ktoru COLLECTIONS pouzivali.
6. METHOD [bool empty(void) const] vracia informaciu ci COLLECTION je prazdna.
7. METHOD [size_type size(void) const] vracia pocet ITEMS v COLLECTION.
8. METHOD [size_type max_size(void) const] vracia maximalny pocet ITEMS, ktore je do COLLECTION mozne ulozit.
9. OPERATOR [bool operator==(const COLLECTION&,const COLLECTION&)] zistuje ci dve instancie COLLECTION su lexikograficky rovne.
10. OPERATOR [bool operator!=(const COLLECTION&,const COLLECTION&)] zistuje ci dve instancie COLLECTION su lexikograficky rozne.
11. OPERATOR [bool operator<(const COLLECTION&,const COLLECTION&)] zistuje ci 1. COLLECTION je lexikograficky mensia ako 2. COLLECTION.
12. OPERATOR [bool operator<=(const COLLECTION&,const COLLECTION&)] zistuje ci 1. COLLECTION je lexikograficky mensia, alebo rovna ako 2. COLLECTION.
13. OPERATOR [bool operator>(const COLLECTION&,const COLLECTION&)] zistuje ci 1. COLLECTION je lexikograficky vacsia ako 2. COLLECTION.
14. OPERATOR [bool operator>=(const COLLECTION&,const COLLECTION&)] zistuje ci 1. COLLECTION je lexikograficky vacsia, alebo rovna ako 2. COLLECTION.
15. METHOD [size_type count(const TType&) const] vracia pocet ITEMS s danou hodnotou v COLLECTION.
16. METHOD [iterator find(const TType&)] vracia ITERATOR na ITEM s danou hodnotou v COLLECTION. V pripade, ze ITEM s danou hodnotou v COLLECTION neexistuje, METHOD vracia END ITERATOR.
17. METHOD [const_iterator find(const TType&) const] vracia ITERATOR na ITEM s danou hodnotou v COLLECTION. V pripade, ze ITEM s danou hodnotou v COLLECTION neexistuje, METHOD vracia END ITERATOR.
18. METHOD [iterator lower_bound(const TType&)] vracia ITERATOR, ktory odkazuje na PRVY ITEM, ktory NEMA MENSIU HODNOTU ITEM ako zadana hodnota ITEM. Ak COLLECTION NEMA ITEM, ktory ma MENSIU HODNOTU ITEM ako zadana hodnota ITEM, RETURN VALUE ITERATOR odkazuje na END ITERATOR.
19. METHOD [const_iterator lower_bound(const TType&) const] vracia ITERATOR, ktory odkazuje na PRVY ITEM, ktory NEMA MENSIU HODNOTU ITEM ako zadana hodnota ITEM. Ak COLLECTION NEMA ITEM, ktory ma MENSIU HODNOTU ITEM ako zadana hodnota ITEM, RETURN VALUE ITERATOR odkazuje na END ITERATOR.
20. METHOD [iterator upper_bound(const TType&)] vracia ITERATOR, ktory odkazuje na PRVY ITEM, ktory ma VACSIU HODNOTU ITEM ako ako zadana hodnota ITEM. Ak COLLECTION NEMA ITEM, ktory ma VACSIU HODNOTU ITEM ako zadana hodnota ITEM, RETURN VALUE ITERATOR odkazuje na END ITERATOR.
21. METHOD [const_iterator upper_bound(const TType&) const] vracia ITERATOR, ktory odkazuje na PRVY ITEM, ktory ma VACSIU HODNOTU ITEM ako ako zadana hodnota ITEM. Ak COLLECTION NEMA ITEM, ktory ma VACSIU HODNOTU ITEM ako zadana hodnota ITEM, RETURN VALUE ITERATOR odkazuje na END ITERATOR.
22. METHOD [pair<iterator,iterator> equal_range(const TType&)] vracia ITERATOR PAIR, kde 1. ITERATOR odkazuje na PRVY ITEM, ktory NEMA MENSIU HODNOTU ITEM ako zadana hodnota ITEM a DRUHY ITERATOR odkazuje na PRVY ITEM, ktory ma VACSIU HODNOTU ITEM ako zadana hodnota ITEM. Ak COLLECTION NEMA ITEM, ktory ma MENSIU HODNOTU ITEM ako zadana hodnota ITEM, 1. ITERATOR odkazuje na END ITERATOR. Ak ITEM NEMA ITEM, ktory ma VACSIU HODNOTU ITEM ako zadana hodnota ITEM, 2. ITERATOR odkazuje na END ITERATOR.
23. METHOD [pair<const_iterator,const_iterator> equal_range(const TType&) const] vracia ITERATOR PAIR, kde 1. ITERATOR odkazuje na PRVY ITEM, ktory NEMA MENSIU HODNOTU ITEM ako zadana hodnota ITEM a DRUHY ITERATOR odkazuje na PRVY ITEM, ktory ma VACSIU HODNOTU ITEM ako zadana hodnota ITEM. Ak COLLECTION NEMA ITEM, ktory ma MENSIU HODNOTU ITEM ako zadana hodnota ITEM, 1. ITERATOR odkazuje na END ITERATOR. Ak ITEM NEMA ITEM, ktory ma VACSIU HODNOTU ITEM ako zadana hodnota ITEM, 2. ITERATOR odkazuje na END ITERATOR.
24. OPERATOR [COLLECTION& operator=(const COLLECTION&)] reprezentuje COPY OPERATOR=, ktory priradzuje do COLLECTION ITEMS z inej COLLECTION.
25. OPERATOR [COLLECTION& operator=(COLLECTION&&)] reprezentuje MOVE OPERATOR=, ktory priradzuje do COLLECTION ITEMS z inej COLLECTION pomocou MOVE SEMANTICS.
26. OPERATOR [COLLECTION& operator=(initializer_list<TType>)] priradzuje do COLLECTION ITEMS z INITIALIZER LIST.
27. METHOD [void assign(initializer_list<TType>)] priradzuje do COLLECTION ITEMS z INITIALIZER LIST.
28. METHOD [void assign(size_type,const TType&)] priradzuje do COLLECTION 'N' ITEMS, ktore su kopiami VALUES zadanych ako 2. PARAMETER METHOD.
29. METHOD [void assign(TInputIterator,TInputIterator)] priradzuje do COLLECTION ITEMS z inej COLLECTION, ktora je definovana pomocou paru ITERATORS.
30. METHOD [void fill(const TType&)] naplna vsetky ITEMS COLLECTION kopiami VALUES zadanych ako PARAMETER METHOD.
31. METHOD [void swap(COLLECTION&)] vymiena obsah dvoch instancii COLLECTION vymenou ich vnutornych FIELDS.
32. FUNCTION [void swap(COLLECTION&,COLLECTION&)] vymiena obsah dvoch instancii COLLECTION vymenou ich vnutornych FIELDS.
!!! 33. METHOD [reference at(size_type)] vracia REFERENCE na ITEM s INDEX v COLLECTION. METHOD ROBI kontrolu hranic COLLECTION, a v pripade zistenia chybneho pristupu generuje EXCEPTION [out_of_range].
!!! 34. METHOD [const_reference at(size_type) const] vracia CONST REFERENCE na ITEM s INDEX v COLLECTION. METHOD ROBI kontrolu hranic COLLECTION, a v pripade zistenia chybneho pristupu generuje EXCEPTION [out_of_range].
!!! 35. METHOD [reference at(key_type)] vracia REFERENCE na ITEM so zadanou hodnotou KEY v COLLECTION. METHOD ROBI kontrolu hranic COLLECTION, a v pripade zistenia chybneho pristupu generuje EXCEPTION [out_of_range].
!!! 36. METHOD [const_reference at(key_type) const] vracia CONST REFERENCE na ITEM so zadanou hodnotou KEY v COLLECTION. METHOD ROBI kontrolu hranic COLLECTION, a v pripade zistenia chybneho pristupu generuje EXCEPTION [out_of_range].
!!! 37. OPERATOR [reference operator[](size_type)] vracia REFERENCE na ITEM s INDEX v COLLECTION. METHOD NEROBI kontrolu hranic COLLECTION, a v pripade zistenia chybneho pristupu generuje EXCEPTION [out_of_range].
!!! 38. OPERATOR [const_reference operator[](size_type)] vracia CONST REFERENCE na ITEM s INDEX v COLLECTION. METHOD NEROBI kontrolu hranic COLLECTION, a v pripade zistenia chybneho pristupu generuje EXCEPTION [out_of_range].
!!! 39. OPERATOR [TType& operator[](const key_type&)] ak sa ITEM so zadanou hodnoty KEY v COLLECTION NENACHADZA, tak ho prida do COLLECTION. Ak sa ITEM v COLLECTION nachadza, vracia REFERENCE na ITEM so zadanou hodnotou KEY v COLLECTION.
!!! 40. OPERATOR [TType& operator[](key_type&&)] ak sa ITEM so zadanou hodnoty KEY v COLLECTION NENACHADZA, tak ho prida do COLLECTION pomocou MOVE SEMANTICS. Ak sa ITEM v COLLECTION nachadza, vracia REFERENCE na ITEM so zadanou hodnotou KEY v COLLECTION.
41. METHOD [reference front(void)] vracia REFERENCE na PRVY ITEM v COLLECTION.
42. METHOD [const_reference front(void) const] vracia REFERENCE na PRVY ITEM v COLLECTION.
43. METHOD [reference back(void)] vracia REFERENCE na POSLEDNY ITEM v COLLECTION.
44. METHOD [const_reference back(void) const] vracia REFERENCE na POSLEDNY ITEM v COLLECTION.
45. METHOD [TType* data(void)] vracia POINTER na interny C-ARRAY, ktory COLLECTION zapuzdruje.
46. METHOD [const TType* data(void) const] vracia CONST POINTER na interny C-ARRAY, ktory COLLECTION zapuzdruje.
47. METHOD [iterator begin(void)] vracia ITERATOR ukazujuci na PRVY ITEM COLLECTION.
48. METHOD [const_iterator begin(void) const] vracia CONST ITERATOR ukazujuci na PRVY ITEM COLLECTION.
49. METHOD [const_iterator cbegin(void) const] vracia CONST ITERATOR ukazujuci na PRVY ITEM COLLECTION.
50. METHOD [iterator end(void)] vracia ITERATOR ukazujuci hned za POSLEDNY ITEM COLLECTION.
51. METHOD [const_iterator end(void) const] vracia CONST ITERATOR ukazujuci hned za POSLEDNY ITEM COLLECTION.
52. METHOD [const_iterator cend(void) const] vracia CONST ITERATOR ukazujuci hned za POSLEDNY ITEM COLLECTION.
53. METHOD [iterator rbegin(void)] vracia REVERSE ITERATOR ukazujuci na POSLEDNY ITEM COLLECTION.
54. METHOD [const_iterator rbegin(void) const] vracia CONST REVERSE ITERATOR ukazujuci na POSLEDNY ITEM COLLECTION.
55. METHOD [const_iterator crbegin(void) const] vracia CONST REVERSE ITERATOR ukazujuci na POSLEDNY ITEM COLLECTION.
56. METHOD [iterator rend(void)] vracia REVERSE ITERATOR ukazujuci hned pred PRVY ITEM COLLECTION.
57. METHOD [const_iterator rend(void) const] vracia CONST REVERSE ITERATOR ukazujuci hned pred PRVY ITEM COLLECTION.
58. METHOD [const_iterator crend(void) const] vracia CONST REVERSE ITERATOR ukazujuci hned pred PRVY ITEM COLLECTION.
59. METHOD [pair<iterator,bool> insert(const TType&)] pridava novy ITEM do COLLECTION pomocou COPY SEMANTICS. METHOD vracia informaciu o tom ci ITEM bol do COLLECTION pridany ako aj ITERATOR obsahujuci poziciu na ktoru bol pridany.
60. METHOD [pair<iterator,bool> insert(TType&&)] pridava novy ITEM do COLLECTION pomocou MOVE SEMANTICS. METHOD vracia informaciu o tom ci ITEM bol do COLLECTION pridany ako aj ITERATOR obsahujuci poziciu na ktoru bol pridany.
61. METHOD [iterator insert(const TType&)] pridava novy ITEM do COLLECTION pomocou COPY SEMANTICS. METHOD vracia ITERATOR obsahujuci poziciu na ktoru bol ITEM do COLLECTION pridany.
62. METHOD [iterator insert(TType&&)] pridava novy ITEM do COLLECTION pomocou MOVE SEMANTICS. METHOD vracia ITERATOR obsahujuci poziciu na ktoru bol ITEM do COLLECTION pridany.
63. METHOD [iterator insert(const_iterator,const TType&)] pridava ITEM do COLLECTION pomocou COPY SEMANTICS na poziciu urcenu ITERATOR. METHOD vracia ITERATOR na pridany ITEM.
64. METHOD [iterator insert(const_iterator,TType&&)] pridava ITEM do COLLECTION pomocou MOVE SEMANTICS na poziciu urcenu ITERATOR. METHOD vracia ITERATOR na pridany ITEM.
65. METHOD [void insert(initializer_list<TType>)] pridava do COLLECTION ITEMS z INITIALIZER LIST.
66. METHOD [iterator insert(const_iterator,initializer_list<TType>)] pridava do COLLECTION ITEMS z INITIALIZER LIST na POSITION urcenu ITERATOR. METHOD vracia ITERATOR na poziciu, kde sa vlozil 1. ITEM.
67. METHOD [iterator insert(const_iterator,size_type,const TType&)] pridava do COLLECTION 'N' ITEMS, ktore vzniknu ako kopie ITEM zadananeho ako posledny PARAMETER. METHOD vracia ITERATOR na poziciu, kde sa vlozil 1. ITEM.
68. METHOD [iterator insert(TInputIterator,TInputIterator)] pridava do COLLECTION ITEMS, ktore sa nachadzaju medzi parom ITERATORS.
69. METHOD [iterator insert(const_iterator,TInputIterator,TInputIterator)] pridava do COLLECTION ITEMS, ktore sa nachadzaju medzi parom ITERATORS na POSITION urcenu ITERATOR.
70. METHOD [pair<iterator,bool> emplace(ARGUMENTS)] pridava ITEM do COLLECTION pomocou PLACEMENT NEW. PARAMETERS METHOD su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION. METHOD vracia informaciu o tom ci ITEM bol do COLLECTION pridany ako aj ITERATOR obsahujuci poziciu na ktoru bol pridany.
71. METHOD [iterator emplace(ARGUMENTS)] pridava ITEM do COLLECTION pomocou PLACEMENT NEW. PARAMETERS METHOD su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION. METHOD vracia ITERATOR obsahujuci poziciu na ktoru bol ITEM do COLLECTION pridany.
72. METHOD [iterator emplace(const_iterator,ARGUMENTS)] pridava ITEM do COLLECTION pomocou PLACEMENT NEW na poziciu urcenu ITERATOR. PARAMETERS METHOD od 2. PARAMETER su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION. METHOD vracia ITERATOR obsahujuci poziciu na ktoru bol ITEM do COLLECTION pridany.
73. METHOD [iterator emplace_hint(const_iterator,ARGUMENTS)] pridava ITEM do COLLECTION pomocou PLACEMENT NEW, pricom 1. PARAMETER reprezenuje ITERATOR sluziaci ako HINT. HINT urcuje poziciu PRED ktorou sa v co najmensej vzdialenosti ma COLLECTION pokusit ITEM ulozit. Ak pozicia odpoveda skutocnej pozicii zlozitost METHOD je O(1), inak je zlozitost O(LOG(N)). PARAMETERS od 2. PARAMETER su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION. METHOD vracia ITERATOR na poziciu do ktorej bol ITEM vlozeny.
74. METHOD [void push_front(const TType&)] pridava ITEM na zaciatok COLLECTION pomocou COPY SEMANTICS.
75. METHOD [void push_front(TType&&)] pridava ITEM na zaciatok COLLECTION pomocou MOVE SEMANTICS.
76. METHOD [void emplace_front(ARGUMENTS)] pridava ITEM na zaciatok COLLECTION pomocou PLACEMENT NEW. PARAMETERS su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION.
77. METHOD [void push_back(const TType&)] pridava ITEM na koniec COLLECTION pomocou COPY SEMANTICS.
78. METHOD [void push_back(TType&&)] pridava ITEM na koniec COLLECTION pomocou MOVE SEMANTICS.
79. METHOD [void emplace_back(ARGUMENTS)] pridava ITEM na koniec COLLECTION pomocou PLACEMENT NEW. PARAMETERS su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION.
80. METHOD [size_type erase(const TType&)] odstranuje vsetky ITEMS z COLLECTION, ktorych hodnota je rovna hodnote zadanej v PARAMETER. METHOD vracia pocet odstranenych ITEMS.
81. METHOD [iterator erase(const_iterator)] odstranuje 1 ITEM na POSITION stanovenej ITERATOR. METHOD vracia ITERATOR na ITEM, ktory nasleduje za ITEM, ktory bol odstraneny.
82. METHOD [iterator erase(TInputIterator,TInputIterator)] odstranuje ITEMS urcene parom ITERATORS. METHOD vracia ITERATOR na ITEM, ktory nasleduje za poslednym odstranenym ITEM.
83. METHOD [void pop_front(void)] odstranuje ITEM zo zaciatku COLLECTION.
84. METHOD [void pop_back(void)] odstranuje ITEM z konca COLLECTION.
85. METHOD [void clear(void)] odstranuje vsetky ITEMS z COLLECTION.
86. METHOD [void resize(size_type)] meni pocet ITEMS v COLLECTION. Ak je novy pocet ITEMS vacsi ako povodny, nove ITEMS su vytvorene volanim DEFAULT CONSTRUCTOR.
87. METHOD [void resize(size_type,const TType&)] meni pocet ITEMS v COLLECTION. Ak je novy pocet ITEMS vacsi ako povodny, nove ITEMS su vytvorene ako kopie ITEM zadaneho ako PARAMETER.
88. METHOD [void remove(const TType&)] odstranuje VSETKY ITEMS, ktore maju rovnaku hodnotu ako hodnota zadana v PARAMETER. Na porovnanie ITEMS sa pouziva OPERATOR==.
89. METHOD [void remove_if(TUnaryPredicate)] odstranuje VSETKY ITEMS, ktore splnaju PREDICATE zadany ako PARAMETER.
90. METHOD [void unique(void)] odstranuje za sebou nasledujuce ITEMS, ktore maju ROVNAKU VALUE. Na porovnanie ITEMS sa pouziva OPERATOR==.
91. METHOD [void unique(TBinaryPredicate)] odstranuje za sebou nasledujuce ITEMS, ktore maju ROVNAKU VALUE. Na porovnanie ITEMS sa pouziva PREDICATE zadany ako PARAMETER.
92. METHOD [void splice(const_iterator,COLLECTION&)] vybera vsetky ITEMS z COLLECTION definovanej ako 2. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana PRED poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
93. METHOD [void splice(const_iterator,COLLECTION&&)] vybera vsetky ITEMS z COLLECTION definovanej ako 2. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana PRED poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
94. METHOD [void splice(const_iterator,COLLECTION&,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEM na pozicii definovanej ako 3. PARAMETER a uklada ho do COLLECTION pre ktory bola METHOD volana PRED poziciu zadanu ITERATOR. ITEM je prenasany pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
95. METHOD [void splice(const_iterator,COLLECTION&,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEM na pozicii definovanej ako 3. PARAMETER a uklada ho do COLLECTION pre ktory bola METHOD volana PRED poziciu zadanu ITERATOR. ITEM je prenasany pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
96. METHOD [void splice(const_iterator,COLLECTION&,const_iterator,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEMS v poziciach definovanych parom ITERATORS ako 3. PARAMETER a 4. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana PRED poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
97. METHOD [void splice(const_iterator,COLLECTION&&,const_iterator,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEMS v poziciach definovanych parom ITERATORS ako 3. PARAMETER a 4. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana PRED poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
98. METHOD [void sort(void)] vykonava triedenie ITEMS. Na triedenie ITEMS sa pouziva OPERATOR<.
98. METHOD [void sort(TCompareFunction)] vykonava triedenie ITEMS. Na triedenie ITEMS sa pouziva CUSTOM PREDICATE zadany ako PARAMETER.
99. METHOD [void merge(COLLECTION&)] vybera ITEMS z COLLECTION definovanej ako PARAMETER a uklada ich do COLLECTION pre ktoru bola METHOD volana. Obe COLLECTIONS MUSIA byt SORTED. ITEMS su prenasane pomocou MOVE OPERATION, takze COLLECTION definovana ako PARAMETER je po skonceni volania METHOD PRAZDNA. ITEMS, ktore maju rovnaku hodnotu v SOURCE a DESTINATION COLLECTION su prenesene do DESTINATION COLLECTION pricom su umiestnene az za ITEMS s rovnakou hodnotou, ktore v DESTINATION COLLECTION sa uz nachadzali. Na porovnanie ITEMS sa pouziva OPERATOR<. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
100. METHOD [void merge(COLLECTION&&)] vybera ITEMS z COLLECTION definovanej ako PARAMETER a uklada ich do COLLECTION pre ktoru bola METHOD volana. Obe COLLECTIONS MUSIA byt SORTED. ITEMS su prenasane pomocou MOVE OPERATION, takze COLLECTION definovana ako PARAMETER je po skonceni volania METHOD PRAZDNA. ITEMS, ktore maju rovnaku hodnotu v SOURCE a DESTINATION COLLECTION su prenesene do DESTINATION COLLECTION pricom su umiestnene az za ITEMS s rovnakou hodnotou, ktore v DESTINATION COLLECTION sa uz nachadzali. Na porovnanie ITEMS sa pouziva OPERATOR<. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
101. METHOD [void merge(COLLECTION&,TCompareFunction)] vybera ITEMS z COLLECTION definovanej ako PARAMETER a uklada ich do COLLECTION pre ktoru bola METHOD volana. Obe COLLECTIONS MUSIA byt SORTED. ITEMS su prenasane pomocou MOVE OPERATION, takze COLLECTION definovana ako PARAMETER je po skonceni volania METHOD PRAZDNA. ITEMS, ktore maju rovnaku hodnotu v SOURCE a DESTINATION COLLECTION su prenesene do DESTINATION COLLECTION pricom su umiestnene az za ITEMS s rovnakou hodnotou, ktore v DESTINATION COLLECTION sa uz nachadzali. Na porovnanie ITEMS sa pouziva CUSTOM PREDICATE zadany ako PARAMETER. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
102. METHOD [void merge(COLLECTION&&,TCompareFunction)] vybera ITEMS z COLLECTION definovanej ako PARAMETER a uklada ich do COLLECTION pre ktoru bola METHOD volana. Obe COLLECTIONS MUSIA byt SORTED. ITEMS su prenasane pomocou MOVE OPERATION, takze COLLECTION definovana ako PARAMETER je po skonceni volania METHOD PRAZDNA. ITEMS, ktore maju rovnaku hodnotu v SOURCE a DESTINATION COLLECTION su prenesene do DESTINATION COLLECTION pricom su umiestnene az za ITEMS s rovnakou hodnotou, ktore v DESTINATION COLLECTION sa uz nachadzali. Na porovnanie ITEMS sa pouziva CUSTOM PREDICATE zadany ako PARAMETER. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
103. METHOD [void reverse(void)] obracia poradie ITEMS v COLLECTION.
104. METHOD [iterator before_begin(void)] vracia ITERATOR ukazujuci PRED PRVY ITEM COLLECTION. METHOD sa pouziva pri vkladani ITEMS na zaciatok COLLECTION. Vratene ITERATORS NESMU BYT DEREFERENCED pretoze NEUKAZUJU na ITEM a ich DEREFERENCING by sposobil RUNTIME ERROR.
105. METHOD [const_iterator before_begin(void) const] vracia CONST ITERATOR ukazujuci PRED PRVY ITEM COLLECTION. METHOD sa pouziva pri vkladani ITEMS na zaciatok COLLECTION. Vratene ITERATORS NESMU BYT DEREFERENCED pretoze NEUKAZUJU na ITEM a ich DEREFERENCING by sposobil RUNTIME ERROR.
106. METHOD [const_iterator cbefore_begin(void) const] vracia CONST ITERATOR ukazujuci PRED PRVY ITEM COLLECTION. METHOD sa pouziva pri vkladani ITEMS na zaciatok COLLECTION. Vratene ITERATORS NESMU BYT DEREFERENCED pretoze NEUKAZUJU na ITEM a ich DEREFERENCING by sposobil RUNTIME ERROR.
107. METHOD [iterator insert_after(const_iterator,const TType&)] pridava ITEM ZA POSITION urcenu ITERATOR. METHOD vracia ITERATOR na vlozeny ITEM. ITEM je vlozeny pomocou COPY SEMANTICS.
108. METHOD [iterator insert_after(const_iterator,TType&&)] pridava ITEM ZA POSITION urcenu ITERATOR. METHOD vracia ITERATOR na vlozeny ITEM. ITEM je vlozeny pomocou MOVE SEMANTICS.
109. METHOD [iterator insert_after(const_iterator,size_type,const TType&)] pridava do COLLECTION 'N' ITEMS, ktore vzniknu ako kopie ITEM zadananeho ako posledny PARAMETER. METHOD vracia ITERATOR na POSLEDNY vlozeny ITEM.
110. METHOD [iterator insert_after(const_iterator,initializer_list<TType>)] pridava VSETKY ITEMS z INITIALIZER LIST ZA POSITION urcenu ITERATOR. METHOD vracia ITERATOR na POSLEDNY vlozeny ITEM.
111. METHOD [iterator insert_after(const_iterator,TInputIterator,TInputIterator)] pridava ITEMS urcene parom ITERATORS ZA POSITION urcenu ITERATOR. METHOD vracia ITERATOR na POSLEDNY vlozeny ITEM.
112. METHOD [iterator emplace_after(const_iterator,ARGUMENTS)] pridava ITEM do COLLECTION za poziciu urcenu ITERATOR pomocou PLACEMENT NEW. PARAMETERS METHOD od 2. PARAMETER su FORWARDED do CONSTRUCTOR daneho ITEM volaneho pri pridavani ITEM do COLLECTION. METHOD vracia ITERATOR na pridany ITEM.
113. METHOD [iterator erase_after(const_iterator)] odstranuje ITEM z COLLECTION nachadzajuci sa ZA ITEM na ktory ukazuje ITERATOR. METHOD vracia ITERATOR na ITEM nachadzajuci sa ZA odstranenym ITEM.
114. METHOD [iterator erase_after(const_iterator,const_iterator)] odstranuje ITEMS z COLLECTION na ktore odkazuje par ITERATORS. METHOD vracia ITERATOR rovnajuci sa 2. PARAMETRU METHOD.
115. METHOD [void splice_after(const_iterator,COLLECTION&)] vybera vsetky ITEMS z COLLECTION definovanej ako 2. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana ZA poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
116. METHOD [void splice_after(const_iterator,COLLECTION&&)] vybera vsetky ITEMS z COLLECTION definovanej ako 2. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana ZA poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
117. METHOD [void splice_after(const_iterator,COLLECTION&,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEM na pozicii definovanej ako 3. PARAMETER a uklada ho do COLLECTION pre ktory bola METHOD volana ZA poziciu zadanu ITERATOR. ITEM je prenasany pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
118. METHOD [void splice_after(const_iterator,COLLECTION&,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEM na pozicii definovanej ako 3. PARAMETER a uklada ho do COLLECTION pre ktory bola METHOD volana ZA poziciu zadanu ITERATOR. ITEM je prenasany pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
119. METHOD [void splice_after(const_iterator,COLLECTION&,const_iterator,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEMS v poziciach definovanych parom ITERATORS ako 3. PARAMETER a 4. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana ZA poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez COPY SEMANTICS.
120. METHOD [void splice_after(const_iterator,COLLECTION&&,const_iterator,const_iterator)] vybera z COLLECTION definovanej ako 2. PARAMETER ITEMS v poziciach definovanych parom ITERATORS ako 3. PARAMETER a 4. PARAMETER a uklada ich do COLLECTION pre ktory bola METHOD volana ZA poziciu zadanu ITERATOR. ITEMS su prenasane pomocou MOVE OPERATION. COLLECTION v 2. PARAMETERI je prenasana cez MOVE SEMANTICS.
121. METHOD [size_type capacity(void) const] vracia CAPACITY urcujucu pocet ITEMS na ktory je alokovany INTERNY BUFFER COLLECTION.
122. METHOD [key_compare key_comp(void) const] vracia FUNCTION OBJECT pouzivany ako COMPARER hodnot KEYS v COLLECTION.
123. METHOD [value_compare value_comp(void) const] vracia FUNCTION OBJECT pouzivany ako COMPARER hodnot VALUES v COLLECTION.
124. METHOD [key_equal key_eq(void) const] vracia FUNCTION OBJECT, ktory sa pouziva na porovnavanie rovnosti hodnot KEYS v COLLECTION.
125. METHOD [hasher hash_function(void) const] vracia FUNCTION OBJECT pouzivany ako HASH FUNCTION na vypocet HASH CODE, ktory urcuje do ktoreho BUCKET bude ITEM v COLLECTION ulozeny.
126. METHOD [float load_factor(void) const] vracia priemerny pocet ITEMS v BUCKETS danej COLLECTION.
127. METHOD [float max_load_factor(void) const] vracia MAXIMALNY pocet ITEMS, ktore mozu byt v BUCKET ulozene predtym ako dojde k REHASHING celej COLLECTION.
128. METHOD [void max_load_factor(float)] nastavuje MAXIMALNY pocet ITEMS, ktore mozu byt v BUCKET ulozene predtym ako dojde k REHASHING celej COLLECTION.
129. METHOD [void reserve(size_type)] alokuje INTERNY BUFFER COLLECTION na zadanu CAPACITY. Ak zadana velkost je mensia, alebo rovna aktualnemu poctu ITEMS v COLLECTION, METHOD nerobi nic. METHOD moze hodit EXCEPTION [length_error], ak dojde k pokusu rezervovat vacsi pocet ITEMS ako je definovane METHOD max_size().
130. METHOD [void shrink_to_fit(void)] sa pokusi uvolnit INTERNY BUFFER danej COLLECTION, tak aby mala identicku dlzku ako realny pocet ITEMS v COLLECTION. Tato METHOD je len POZIADAVKA na vykonanie SHRINK, ktora je implementacne zavisla. To znaci, ze v zavislosti od implementacie SHRINK moze, ale aj NEMUSI VYKONAT.
131. METHOD [void rehash(size_type)] vykona REHASH celej COLLECTION, tak aby ITEMS boli rozdelene do poctu BUCKETS, ktory definuje PARAMETER.
132. METHOD [size_type bucket_count(void) const] vracia pocet BUCKETS v COLLECTION.
133. METHOD [size_type max_bucket_count(void) const] vracia maximalny pocet BUCKETS, ktore moze COLLECTION obsahovat.
134. METHOD [size_type bucket(const TType&) const] vracia INDEX na BUCKET v ktorom sa ITEM s danym KEY v COLLECTION nachadza.
135. METHOD [size_type bucket_size(size_type)] vracia pocet ITEMS v danom BUCKET s INDEXOM zadanym ako PARAMETER, ktory COLLECTION obsahuje.
136. METHOD [local_iterator begin(size_type)] vracia LOCAL ITERATOR na PRVY ITEM v danom BUCKET, ktory je identifikovany INDEXOM zadanym ako PARAMETER.
137. METHOD [const_local_iterator begin(size_type) const] vracia CONST LOCAL ITERATOR na PRVY ITEM v danom BUCKET, ktory je identifikovany INDEXOM zadanym ako PARAMETER.
138. METHOD [const_local_iterator cbegin(size_type) const] vracia CONST LOCAL ITERATOR na PRVY ITEM v danom BUCKET, ktory je identifikovany INDEXOM zadanym ako PARAMETER.
139. METHOD [local_iterator end(size_type)] vracia LOCAL ITERATOR odkazujuci jednu poziciu za POSLEDNY ITEM v danom BUCKET, ktory je identifikovany INDEXOM zadanym ako PARAMETER.
140. METHOD [const_local_iterator end(size_type) const] vracia CONST LOCAL ITERATOR odkazujuci jednu poziciu za POSLEDNY ITEM v danom BUCKET, ktory je identifikovany INDEXOM zadanym ako PARAMETER.
141. METHOD [const_local_iterator cend(size_type) const] vracia CONST LOCAL ITERATOR odkazujuci jednu poziciu za POSLEDNY ITEM v danom BUCKET, ktory je identifikovany INDEXOM zadanym ako PARAMETER.
142. METHOD [allocator_type get_allocator(void)] vracia instanciu ALLOCATOR, ktora sa pouziva pri alokovani ITEMS danej COLLECTION.
143. STL COLLECTIONS definuju nasledujuce typy CONSTRUCTORS umoznujuce definovat CUSTOM ALLOCATOR.
   A. CONSTRUCTOR [COLLECTION(const ALLOCATOR&)] vytvori EMPTY COLLECTION s CUSTOM ALLOCATOR.
   B. CONSTRUCTOR [COLLECTION(const TCompareFunction&,const ALLOCATOR&)] vytvori COLLECTION s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   C. CONSTRUCTOR [COLLECTION(size_type,const THasher&,const TKeyEqual&,const ALLOCATOR&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, CUSTOM HASH FUNCTION a CUSTOM KEY EQUAL FUNCTION. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   D. CONSTRUCTOR [COLLECTION(initializer_list<TType>,const ALLOCATOR&)] vytvori COLLECTION a naplni ju VALUES z INITIALIZER LIST. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   E. CONSTRUCTOR [COLLECTION(initializer_list<TType>,const TCompareFunction&,const ALLOCATOR&)] vytvori COLLECTION s CUSTOM COMPARE FUNCTION pre SORTING a naplni ju VALUES z INITIALIZER LIST. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   F. CONSTRUCTOR [COLLECTION(initializer_list<TType>,size_type,const THasher&,const TKeyEqual&,const ALLOCATOR&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, CUSTOM HASH FUNCTION a CUSTOM KEY EQUAL FUNCTION a naplni ju VALUES z INITIALIZER LIST. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   G. CONSTRUCTOR [COLLECTION(const COLLECTION&,const ALLOCATOR&)] predstavuje COPY CONSTRUCTOR, ktory vytvori kopiu COLLECTION obsahujucu tie iste ITEMS ako povodna COLLECTION. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   H. CONSTRUCTOR [COLLECTION(COLLECTION&&,const ALLOCATOR&)] predstavuje MOVE CONSTRUCTOR, ktory presunie ITEMS z povodnej COLLECTION do novej COLLECTION pomocou MOVE SEMANTICS. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   I. CONSTRUCTOR [COLLECTION(size_type NumberOfItems,const TType&,const ALLOCATOR&)] vytvori COLLECTION s 'N' ITEMS, ktore su vytvorene ako kopie ITEM, ktory je zaslany ako 2. PARAMETER CONSTRUCTOR. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   J. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,const ALLOCATOR&)] vytvori COLLECTION, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   K. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,const TCompareFunction&,const ALLOCATOR&)] vytvori COLLECTION s CUSTOM COMPARE FUNCTION pouzivanou pre SORTING, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
   L. CONSTRUCTOR [COLLECTION(TInputIterator,TInputIterator,size_type,const THasher&,const TKeyEqual&,const ALLOCATOR&)] vytvori COLLECTION typu HASH TABLE s aspon 'N' BUCKETS, CUSTOM HASH FUNCTION a CUSTOM KEY EQUAL FUNCTION, ktoru nainicializuje ITEMS nachadzaujucimi sa medzi parom ITERATORS. COLLECTION pri alokacii ITEMS pouziva CUSTOM ALLOCATOR.
//-------------------------------------------------------------------------------------------------------