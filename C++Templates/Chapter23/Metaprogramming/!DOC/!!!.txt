//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje METAPROGRAMMING v C++.
2. METAPROGRAMMING znamena programovanie PROGRAMU. Je to technika, ktora umoznuje zapisat CODE z ktoreho COMPILER bude generovat dalsi CODE, ktory realizuje pozadovanu funkcionalitu. Vykonavanie METAPROGRAMMING CODE sa realizuje v COMPILE TIME.
3. C++ podporuje nasledujuce typy METAPROGRAMMING.
   A. VALUE METAPROGRAMMING.
   B. TYPE METAPROGRAMMING.
   C. HYBRID METAPROGRAMMING.
4. Pre VALUE METAPROGRAMMING platia nasledujuce fakty.
   A. VALUE METAPROGRAMMING umoznuje napisat CODE, ktory v COMPILE TIME vypocita nejaku VALUE.
   B. C++ 14 podporuje CONSTREXPR FUNCTIONS, ktore mozu byt vykonane v COMPILE TIME. CONSTREXPR FUNCTIONS su C++ FUNCTIONS oznacene pomocou KEYWORD [constexpr].
5. Pre TYPE METAPROGRAMMING platia nasledujuce fakty.
   A. TYPE METAPROGRAMMING umoznuje napisat CODE, ktory v COMPILE TIME vypocita nejaky TYPE.
   B. TYPE METEPROGRAMMING v C++ sa implementuje za pomoci TEMPLATE CLASSES, alebo TEMPLATE FUNCTIONS.
   C. TYPE METEPROGRAMMING velmi casto vyuziva rekurzive volanie.
   D. Prikladom TYPE METEPROGRAMMING su TYPE TRAITS.
6. Pre HYBRID METAPROGRAMMING platia nasledujuce fakty.
   A. HYBRID METAPROGRAMMING umoznuje napisat CODE, ktory v COMPILE TIME generuje CODE, ktory ma RUN TIME EFFECT.
   B. HYBRID METAPROGRAMMING spaja COMPILE TIME COMPUTATION (napriklad pomocou RECURSIVE TEMPLATE INSTANTIATION), ktory urcuje celkovu strukturu CODE s RUN TIME COMPUTATION, ktory urcuje specificky RUN TIME EFFECT.
   C. Prikladom pouzitia HYBRID METAPROGRAMMING su CLASS [tuple<TType...>] a CLASS [variant<TType...>].
7. METAPROGRAMMING vo vseobecnosti je mozne rozdelit do nasledujucich kategorii.
   A. COMPUTATION.
   B. REFLECTION.
   C. GENERATION.
8. Pre COMPUTATION METAPROGRAMMING platia nasledujuce fakty.
   A. COMPUTATION METAPROGRAMMING vykonava COMPUTATION v COMPILE TIME.
   B. Medzi COMPUTATION METAPROGRAMMING patri patri VALUE METAPROGRAMMING, TYPE METAPROGRAMMING a HYBRID METAPROGRAMMING, ktore C++ podporuje.
9. Pre REFLECTION METAPROGRAMMING platia nasledujuce fakty.
   A. REFLECTION METAPROGRAMMING umoznuje ziskavat o TYPES rozlicne informacie.
   B. Aktualne C++ podporuje iba limitovane REFLECTION METAPROGRAMMING pomocou TYPE TRAITS.
   C. Niektore TYPE TRAITS je mozne implementovat pomocou TEMPLATES, no ine vyzaduju explicitnu podporu COMPILERS.
   !!! D. C++ aktualne NEPODPORUJE REFLECTION METAPROGRAMMING, ktore by napriklad umoznovalo zistit zoznam TYPES ci pre kazdy TYPE zistit ake MEMBERS obsahuje.
10. Pre GENERATION METAPROGRAMMING platia nasledujuce fakty.
   A. GENERATION METAPROGRAMMING umoznuje dynamicky generovat novy CODE pre dany PROGRAM.
   !!! B. C++ aktualne NEPODPORUJE GENERATION METAPROGRAMMING, aj ked pouzitie TEMPLATES je mozne povazovat za limitovanu podporu GENERATION METAPROGRAMMING.
11. RECURSION pouzita v METAPROGRAMMING je narocna na RESOURCES pricom COMPILER nemoze tieto RESOURCES (MEMORY) uvolnit skor az kym neskonci COMPILER COMPILATION.
12. RECURSION v METAPROGRAMMING je mozne redukovat napriklad tym, ze sa pouzivaju TYPE ALIASES, ktore pre TEMPLATE CLASSES, ktore NESPOSOBIA aby C++ muselo vykonat TEMPLATE CLASS INSTANTIATION pre celu TEMPLATE CLASS.
!!! 13. RECURSIVE TEMPLATE ARGUMENTS je technika, ked pri METAPROGRAMMING nedochadza len k RECURSION TEMPLATE CLASS INSTANTIATION, ale aj k RECURSION TEMPLATE ARGUMENTS v TEMPLATE CLASSES. Tato technika je velmi narocna na COMPILER RESURCES a sposobuje napriklad aj generovanie velmi dlhych TEMPLATE CLASS NAMES co spomaluje COMPILATION.
14. Vo VALUE METAPROGRAMMING je VZDY preferovane pouzitie VARIABLES, ktore su INLINE a CONSTEXPR pred VARIABLES oznacene ako STATIC a CONST. Je to preto, lebo VARIABLES, ktore su INLINE a CONSTEXPR nie su posielane do FUNCTIONS ako REFERENCES. Ak je VALUE z TEMPLATE CLASS posielana ako REFERENCE, tak COMPILER vykona INSTANTIATION DEFINITION STATIC MEMBER.
//----------------------------------------------------------------------------------------------------------------------