//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include "CTupleEBCOElement.h"
#include "CTupleEBCOOperatorPrint.h"
#include "CTupleEBCOGetFast.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename... TTypes>
class CTupleEBCO;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! 1. BASE CLASS je TUPLE ELEMENT, ktory obsahuje HEAD a 2. BASE CLASS je TUPLE s TAIL ELEMENTS.
template<typename THead, typename... TTail>
class CTupleEBCO<THead,TTail...> : public CTupleEBCOElement<sizeof...(TTail),THead>, public CTupleEBCO<TTail...>
{
//----------------------------------------------------------------------------------------------------------------------
	template<size_t INDEX, typename... TTupleElements>
	friend auto TupleGetFast(CTupleEBCO<TTupleElements...>& Tuple) -> decltype(GetElementID<sizeof...(TTupleElements)-INDEX-1>(Tuple));

	private:
		using													HeadElement=CTupleEBCOElement<sizeof...(TTail),THead>;

	public:
		const THead& GetHead(void) const;
		const CTupleEBCO<TTail...>& GetTail(void) const;

	public:
		THead& GetHead(void);
		CTupleEBCO<TTail...>& GetTail(void);

	public:
		CTupleEBCO(void);
		CTupleEBCO(THead Head, TTail... TailValues);
		//virtual ~CTupleEBCO(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename THead, typename... TTail>
CTupleEBCO<THead,TTail...>::CTupleEBCO(void)
	: CTupleEBCOElement<sizeof...(TTail),THead>(), CTupleEBCO<TTail...>()
{
}
//----------------------------------------------------------------------------------------------------------------------
template<typename THead, typename... TTail>
CTupleEBCO<THead,TTail...>::CTupleEBCO(THead Head, TTail... TailValues)
	: CTupleEBCOElement<sizeof...(TTail),THead>(Head), CTupleEBCO<TTail...>(TailValues...)
{
}
//----------------------------------------------------------------------------------------------------------------------
/*
template<typename THead, typename... TTail>
CTupleEBCO<THead,TTail...>::~CTupleEBCO(void) noexcept
{
}
*/
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename THead, typename... TTail>
const THead& CTupleEBCO<THead,TTail...>::GetHead(void) const
{
	const THead&												Head=static_cast<const HeadElement*>(this)->Get();

	return(Head);
}
//----------------------------------------------------------------------------------------------------------------------
template<typename THead, typename... TTail>
const CTupleEBCO<TTail...>& CTupleEBCO<THead,TTail...>::GetTail(void) const
{
	return(*this);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename THead, typename... TTail>
THead& CTupleEBCO<THead,TTail...>::GetHead(void)
{
	THead&														Head=static_cast<HeadElement*>(this)->Get();

	return(Head);
}
//----------------------------------------------------------------------------------------------------------------------
template<typename THead, typename... TTail>
CTupleEBCO<TTail...>& CTupleEBCO<THead,TTail...>::GetTail(void)
{
	return(*this);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<>
class CTupleEBCO<>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename... TTypes>
std::wostream& operator<<(std::wostream& Stream, const CTupleEBCO<TTypes...>& Tuple)
{
	PrintTuple(Stream,Tuple,true);

	return(Stream);
}
//----------------------------------------------------------------------------------------------------------------------