//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje CONCURRENCY MODE REENTRANT.
!!!!!! 2. LOCK JE VZDY NA INSTANCII SERVICE. Teda ak mam trebars PerCall mod tak tu sa volania vykonavaju paralelne kedze mam pri kazdom volani novu instanciu.
3. Mod ConcurrencyMode.Reentrant blokuje paralelne volanie z 2 metod service.
4. Mod ConcurrencyMode.Reentrant vsak umoznuje renteranciu a to bude ako volanie callback metody, alebo potom aj siutaciu, ked service vola iny service a ten spetne zavola ten prvy.
!!! 5. Program simuluje situaciu, ked service vola callback clienta a v nom sa vola metoda service. Toto volanie PREJDE.
!!! 6. Aj proxy pri takomto volani musi byt ConcurrencyMode.Reentrant (pozor CallbackBehavior[]) - to kvoli return hodnote.
7. Volania nad dvoma objektami service su plne paralelne. Na to sa ConcurrencyMode nevztahuje.
!!!!! 8. REENTRANT MODE je realizovany tak, ze POCAS VOLANIA OPERATION je uvaleny LOCK na SERVICE OBJEKT - podobne ako pri SINGLE MODE. Rozdiel je vsak v tom, ze ked OPERATION ZAVOLA CEZ WCF CALLBACK, alebo vola INY SERVICE, tak OKAMZITE sa LOCK UVALENY na SERVICE OBJEKT UVOLNI, aby v pripade, ze by volany CALLBACK, alebo INY SERVICE chcel SPATNE volat SERVICE, NEDOSLO K DEADLOCK. Sprievodnym javom tejto situacie je to, ze ak OPERATION zavola CALLBACK, alebo INY SERVICE a teda LOCK sa UVOLNI, tak ak v CASE, ked je LOCK UVOLNENY chce pristupit k SERVICE OBJEKTU ine volanie z CLIENT, tak toto VOLANIE USPEJE, kedze LOCK bol UVOLNENY.
//-------------------------------------------------------------------------------------------------------