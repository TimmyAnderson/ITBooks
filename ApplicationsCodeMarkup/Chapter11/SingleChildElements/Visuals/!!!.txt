//------------------------------------------------------------------------------
1. Program demonstruje pouzitie Visuals na renderovanie grafiky.
!!! 2. Zakladnym objektom vo WPF, ktory umoznuje rendering je trieda Visual. Z Visual dedia nasledovne triedy.
   A. UIElement - zakladna trieda pre WPF ELEMENTS.
   B. Viewport3DVisual - WRAPPER trieda umoznujuca rendering Visual3D objektov v 2D Viewporte.
   C. ContainerVisual - kontajner pre instancie Visual objektov.
3. Trieda ContainerVisual je predkom dalsich Visual-DERIVED objektov.
   A. HostVisual - reprezenuje Visual, ktory moze byt pripojeny hocikde do VisualTree.
   B. DrawingVisual - reprezentuje Visual, ktory NIE JE ELEMENTOM, umoznujucim kreslit KOMPLEXNU 2D grafiku. Objekt DrawingVisual je RYCHLEJSI pre renderovanie komplexnej grafiky ako DrawingVisual, ktory ma pre potreby implementacie ELEMENTS dodatocnu grafiku.
!!!!! 4. Trieda Visual je vo WPF analogiou HWND vo Win32 API. Ma mnohe spolocne crty aj ked samozrejme to nie je to iste.
!!!!! 5. Visual sa LISI od ELEMENTS (tried dedenych z UIElement) v tom, ze NEIMPLEMENTUJE LAYOUTS ci RE. Podporuje iba ZAKLADNE RENDEROVACIE OPERACIE.
!!!!! 6. Trieda Visual moze obsahovat KOLEKCIU CHILD Visual objektov, ktorych pocet definujem v property VisualChildrenCount a pomocou metody GetVisualChild() k jednotivym CHILDREN mozem pristupovat.
!!!!! 7. Trieda Visual sama o sebe NEDOKAZE VRATIT DrawingContext, ktrym by som mohol renderovat grafiku, AVSAK ZDEDENA TRIEDA DrawingVisual, resp. UIElement uz MAJU METODY NA VRATENIE DrawingContext. Preto SKUTOCNY RENDERING NEVYKONAVA PRIAMO Visual, ale az jej ZDEDENE TRIEDY.
????? 8. Tym, ze trieda Visual obsahuje KOLEKCIU CHILD OBJEKTOV, tak objekt Visual je vlastne TREE NODE vo VISUAL TREE.
????? 9. VISUAL TREE LEAFS vo VISUAL TREE by (??? TIPUJEM) mali byt objekty UIElement a DrawingVisual, pretoze IBA ONI DOKAZU SKUTOCNE RENDEROVAT GRAFIKU.
!!! 10. PARENT-CHILD relaciu vo VISUAL TREE (medzi Visual objektami) definujem DVOJ UROVNOVO.
   A. Property VisualChildrenCount vracia pocet CHILD VISUALS a metoda GetVisualChild() zas VISUAL pre dany Index.
   !!! B. Ak chcem aby dany CHILD VISUAL dokazal posielat RE vo VISUAL TREE, tak musim zavolat metodu AddVisualChild().
11. Zoznam operacii, ktore Visual PODPORUJE.
   A. Rendering. Zobrazuje SERIALIZOVANE Visual objekty, ktore definuju GRAFICKE PRIMITIVY pomocou DrawingContext.
   B. Transformations. Vykonava transformacie nad CHILD VISUALS.
   C. Clipping. Vykonava clipping nad CHILD VISUALS.
   D. Hit testing. Zistuje ci dana koordinata sa vyskytuje v hraniciach nad CHILD VISULS.
   E. Bounding box calculations. Vypocitava hranice CHILD VISUALS.
!!! 12. Zoznam operacii, ktore Visual NEPODPORUJE.
   A. Event handling.
   B. Layout.
   C. Styles.
   D. Data binding.
   E. Globalization.
13. Zoznam operacii, ktore podporuje UIElement.
   A. Umoznuje renderovat CHILD ELEMENTS.
   B. Obsahuje LAYOUT - logiku pre vypocet VELKOSTI a POZICII CHILD ELEMENTS.
   C. Spracovava USER INPUT cez RE.
   D. Mozu odoslat RE, ktory traverzuje cez VISUAL TREE.
   E. Podporuje niektore aspekty animacie.
14. Zoznam operacii, ktore podporuje FrameworkElement.
   A. Rozsiruje podporu LAYOUT.
   B. Podporuje dodatocne METADATA pre ELEMENTS.
   C. Implementuje metody pre USET INPUTS.
   D. Podpora STYLES.
   E. Sirsia podpora animacii.
   F. Podpora DATA BINDING.
15. Zoznam operacii, ktore podporuje Control.
   A. Mnozstvo DP pre pracu s fontami, farbami ci border.
   B. Implementacie TEMPLATES.
//------------------------------------------------------------------------------