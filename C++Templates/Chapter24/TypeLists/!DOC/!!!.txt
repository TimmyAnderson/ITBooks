//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu TYPELISTS v C++.
2. TYPE LIST je CONTAINER TYPE, ktory obsahuje LIST TYPES.
3. TYPE LIST je READ ONLY LIST. Aj ked ma OPERATION ADD a OPERATION REMOVE, tieto OPERATIONS vzdy vytvaraju novy TYPE LIST, a nemodifikuju povodny.
4. TYPES v TYPE LIST su ulozene ako TEMPLATE PARAMETERS v TEMPLATE PARAMETER PACK.
5. OPERATIONS v TYPE LISTS nie su implementovane ako METHODS TYPE LIST CLASS, ale ako nezavisle TYPES, ktore generuju v USING novy TYPE pre TYPE LIST (pre OPERATION ADD ci OPERATION REMOVE), alebo konkretny TYPE (pre OPERATION INDEXING).
!!!!! 6. Kedze OPERATIONS v TYPE LISTS su implementovane ako osobitne TEMPLATE CLASSES, je mozne ich TEMPLATE CLASS SPECIALIZATION docielit, aby tieto OPERATIONS boli aplikovane aj na ine formy TYPE LISTS ako su VALUE LISTS ci CONS TYPE LISTS.
7. VALUE LIST je TYPE LIST, ktory namiesto beznych TYPES obsahuje TYPES, ktore maju ako TEMPLATE PARAMETER NON-TYPE PARAMETER, ktory uklada NUMERIC VALUE. Vdaka tomu je pre VALUE LISTS implementovat aj specificke ALGORITHMS pre VALUE LISTS, ktore pracuju s tymito VALUES.
8. Pouzitie EXPANSION PACK VARIADIC TEMPLATES umoznuje zjednodusit implementaciu viacerych ALGORITHMS TYPE LIST.
9. CONS TYPE LIST je variant TYPE LIST, ktory vsak namiesto VARIADIC TEMPLATES pouziva RECURSIVE DATA STRUCTURE na ukladanie TYPES.
10. CONS TYPE LISTS su menej efektivne a prehladne ako TYPE LISTS, ktore vyuzivaju RECURSION a VARIADIC TEMPLATES.
//----------------------------------------------------------------------------------------------------------------------