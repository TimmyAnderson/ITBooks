//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje kombinaciu pouzitia STATIC POLYMORPHISM a DYNAMIC POLYMORPHISM.
2. C++ umonzuje zasielat CALLBACK TYPES do FUNCTION PARAMETERS nasledujucimi sposobmi.
   A. POINTER na FUNCTION.
   B. REFERENCE na FUNCTION.
   C. LAMBDA FUNCTION.
   D. FUNCTION OBJECT s pretazenym OPERATOR [OPERATOR()].
   E. FUNCTION OBJECT s pretazenym CONVERSION OPERATOR na POINTER na FUNCTION.
   F. FUNCTION OBJECT s pretazenym CONVERSION OPERATOR na REFERENCE na FUNCTION.
!!! 3. Nevyhodou viacerych sposobom prenosu CALLBACK TYPES je, ze v pripade, ze sa taky PARAMETER posiela do TEMPLATE FUNCTION, tak C++ musi pre kazdy typ CALLBACK TYPE vykonat novu TEMPLATE INSTANTIATION co zvacsuje velkost vysledneho CODE.
4. Pouzitie CLASS [class function<R(Args...)>] znizuje potrebu pouzitia roznych typov CALLBACK TYPES a vedie ku generovaniu mensieho objemu CODE.
!!!!! 5. TYPE ERASURE PATTERN je PATTERN, ktory umoznuje implementovat TYPE podobnu CLASS [class function<R(Args...)>], ktora eleminuje nutnost TEMPLATE INSTANTIATION pre kazdy typ CALLBACK TYPE. Pre TYPE ERASURE PATTERN platia nasledujuce fakty.
   A. TYPE ERASURE PATTERN kombinuje STATIC POLYMORPHISM a DYNAMIC POLYMORPHISM.
   !!!!! B. Cielom TYPE ERASURE PATTERN je eliminovat nutnost, aby pre kazdy ERASED TYPE (napriklad CALLBACK TYPES) bola TEMPLATE CLASS, ktora implementuje TYPE ERASURE PATTERN INSTANTIATED. V pripade TEMPLATE CLASS [class function<R(Args...)>] to znamena, ze tato TEMPLATE CLASS NEBUDE INSTANTIATED pre kazdy CALLBACK TYPE ako POINTER na FUNCTION, REFERENCE na FUNCTION, LAMBDA EXPRESSION ci vsetky FUNCTION OBJECTS.
   !!! C. TEMPLATE CLASS implementujuca TYPE ERASURE PATTERN, ktora NEMA byt INSTANTIATED pre kazdy ERASED TYPE (napriklad CALLBACK TYPES) NESMIE pouzivat ako TEMPLATE PARAMETER pouzivat ERASED TYPE (napriklad CALLBACK TYPES), inak by TEMPLATE CLASS  bola INSTANTIATED pre kazdy TYPE (napriklad CALLBACK TYPES).
   !!!!! D. TEMPLATE CLASS vsetky METHODS, ktore obsahuju vsetky ERASED TYPES (napriklad CALLBACK TYPES) presunie do INTERFACE CLASS. INTERFACE CLASS obsahuje VIRTUAL METHODS, ktore generalizuju pouzitie daneho TYPE (napriklad CALLBACK TYPES), bez toho, aby samotna INTERFACE CLASS obsahovala ako TEMPLATE PARAMETER dany ERASED TYPE (napriklad CALLBACK TYPES).
   E. TEMPLATE CLASS interne pouziva POINTER na INTERFACE CLASS. Kedze INTERFACE CLASS obsahuje VIRTUAL METHODS, aplikuje INHERITANCE (DYNAMIC POLYMORPHISM).
   !!! F. INTERFACE CLASS je definovana ako BASE CLASS, ktora NEOBSAHUJE ako TEMPLATE PARAMETER ERASED TYPE (napriklad CALLBACK TYPES).  Vdaka tomu INTERFACE CLASS vykonava TYPE ERASURE, kedze neobsahuje ERASED TYPE a teda NIE JE INSTANTIATED pre kazdy ERASED TYPE (napriklad CALLBACK TYPES).
   !!!!! G. Z INTERFACE CLASS je pre kazdy ERASED TYPE (napriklad CALLBACK TYPES) definovana DERIVED CLASS. DERIVED CLASS na rozdiel od ITERFACE CLASS uz OBSAHUJE ako TEMPLATE PARAMETER ERASED TYPE (napriklad CALLBACK TYPES). To znamena, ze tato CLASS je INSTANTIATED pre kazdy ERASED TYPE (napriklad CALLBACK TYPES).
   !!!!! H. Hlavnou vyhodou TYPE ERASURE PATTERN je, ze C++ nevykonava TEMPLATE INSTANTIATION povodnej TEMPLATE CLASS pre kazdy ERASED TYPE (napriklad CALLBACK TYPES), ale vykonava sa TEMPLATE INSTANTIATION iba pre DERIVED CLASSES. DERIVED CLASSES implementujuce spravidla iba maly pocet VIRTUAL METHODS pre kazdy ERASED TYPE (napriklad CALLBACK TYPES) je daleko mensia ako povodna TEMPLATE CLASS. Vdaka tomu C++ generuje daleko menej BINARY CODE, ako keby ho generoval, ak by sa TYPE ERASURE PATTERN nepouzil.
!!! 6. Ak ma TEMPLATE CLASS VIRTUAL METHODS, tak tieto su pri TEMPLATE INSTANTIATION TEMPLATE CLASS vsetky okamzite INSTANTIATED bez ohladu na to ci sa realne pouziju, alebo nie.
//----------------------------------------------------------------------------------------------------------------------