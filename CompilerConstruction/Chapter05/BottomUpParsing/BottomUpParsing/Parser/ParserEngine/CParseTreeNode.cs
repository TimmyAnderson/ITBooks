using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
//-------------------------------------------------------------------------------------------------------
namespace BottomUpParsing
{
//-------------------------------------------------------------------------------------------------------
	public sealed class CParseTreeNode
	{
//-------------------------------------------------------------------------------------------------------
		private readonly CSymbol								MSymbol;
		private readonly CToken									MToken;
		private readonly List<CParseTreeNode>					MChildNodes;
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public CParseTreeNode(CSymbol Symbol, CToken Token)
		{
			MSymbol=Symbol;
			MToken=Token;
			MChildNodes=new List<CParseTreeNode>();
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public CSymbol											Symbol
		{
			get
			{
				return(MSymbol);
			}
		}
//-------------------------------------------------------------------------------------------------------
		public CToken											Token
		{
			get
			{
				return(MToken);
			}
		}
//-------------------------------------------------------------------------------------------------------
		public CParseTreeNode[]									ChildNodes
		{
			get
			{
				return(MChildNodes.ToArray());
			}
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		private void PrintTree(StringBuilder SB, int Offset)
		{
			SB.Append("".PadRight(Offset,' '));

			if (MToken==null)
			{
				SB.AppendLine(MSymbol.ToString());
			}
			else
			{
				SB.AppendLine(MToken.Lexema.ToString());
			}

			Offset++;

			foreach (CParseTreeNode ChildNode in MChildNodes)
			{
				ChildNode.PrintTree(SB,Offset);
			}
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public void AddChildNode(CParseTreeNode ChildNode)
		{
			MChildNodes.Add(ChildNode);
		}
//-------------------------------------------------------------------------------------------------------
		public string PrintTree()
		{
			StringBuilder			SB=new StringBuilder();

			PrintTree(SB,0);

			return(SB.ToString());
		}
//-------------------------------------------------------------------------------------------------------
		public override string ToString()
		{
			StringBuilder			SB=new StringBuilder();

			SB.AppendFormat("Symbol: [{0}]",MSymbol);

			return(SB.ToString());
		}
//-------------------------------------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------------------------