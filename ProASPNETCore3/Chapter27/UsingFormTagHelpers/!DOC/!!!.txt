//-----------------------------------------------------------------------------
1. Solution demonstruje vytvaranie a pouzitie FORM TAG HELPERS definovanych ASP.NET v ASP.NET CORE APPLICATIONS.
2. ASP.NET definuje pre HTML ELEMENT [<form>] TAG HELPER CLASS [FormTagHelper]. TAG HELPER CLASS [FormTagHelper] definuje nasledujuce HTML ATTRIBUTES, ktore su mapovane na C# PROPERTIES TAG HELPER.
   A. HTML ATTRIBUTE [asp-controller] TYPE [string] definuje CONTROLLER, ktory bude vlozeny do vygenerovanej OUTGOING URL FORM ACTION.
   B. HTML ATTRIBUTE [asp-action] TYPE [string] definuje ACTION METHOD, ktora bude vlozena do vygenerovanej OUTGOING URL FORM ACTION.
   C. HTML ATTRIBUTE [asp-route-XXX] definuje VALUE ROUTE VARIABLE 'XXX', ktora sa vlozi do vygenerovanej OUTGOING URL FORM ACTION.
   D. HTML ATTRIBUTE [asp-fragment] TYPE [string] definuje FRAGMENT, ktory bude vlozeny do vygenerovanej OUTGOING URL FORM ACTION.
   E. HTML ATTRIBUTE [asp-route] TYPE [string] umoznuje definovat speficku ROUTE, ktora sa ma pouzit pre vygenerovanie OUTGOING URL FORM ACTION.
   F. HTML ATTRIBUTE [asp-area] TYPE [string] umoznuje definovat nazov AREA, ktora sa ma pouzit pre vygenerovanie OUTGOING URL FORM ACTION.
   G. HTML ATTRIBUTE [asp-page] TYPE [string] definuje nazov RAZOR PAGE, ktora bude vlozena do vygenerovanej OUTGOING URL FORM ACTION.
   H. HTML ATTRIBUTE [asp-page-handler] TYPE [string] definuje nazov HANDLER RAZOR PAGE, ktora bude vlozena do vygenerovanej OUTGOING URL FORM ACTION. Ak HTML ATTRIBUTE [asp-page-handler] bude obsahovat VALUE 'YYY', potom RAZOR PAGE musi mat definovanu METHOD [RETURN_TYPE OnXXXYYY(PARAMETERS)], alebo METHOD [Task<RETURN_TYPE> OnXXXYYYAsync(PARAMETERS)], kde VALUE 'XXX' je nazov HTTP VERB a VALUE 'YYY' je VALUE HTML ATTRIBUTE [asp-page-handler].
   I. HTML ATTRIBUTE [asp-antiforgery] TYPE [bool?] umoznuje nastavit ci ma byt ANTI-FORGERY informacia pridana do VIEW.
!!! 3. V pripade, ze VIEW (RAZOR PAGE) obsahuje SUBMIT BUTTON, ktory sa vsak NENACHADZA ako CHILD ELEMENT v HTML ELEMENT [<form>] potom je na HTML ELEMENT [<button>] aplikovat TAG HELPER [FormActionTagHelper]. TAG HELPER CLASS [FormActionTagHelper] definuje nasledujuce HTML ATTRIBUTES, ktore su mapovane na C# PROPERTIES TAG HELPER.
   A. HTML ATTRIBUTE [asp-controller] TYPE [string] definuje CONTROLLER, ktory bude vlozeny do vygenerovanej OUTGOING URL FORM ACTION.
   B. HTML ATTRIBUTE [asp-action] TYPE [string] definuje ACTION METHOD, ktora bude vlozena do vygenerovanej OUTGOING URL FORM ACTION.
   C. HTML ATTRIBUTE [asp-route-XXX] definuje VALUE ROUTE VARIABLE 'XXX', ktora sa vlozi do vygenerovanej OUTGOING URL FORM ACTION.
   D. HTML ATTRIBUTE [asp-fragment] TYPE [string] definuje FRAGMENT, ktory bude vlozeny do vygenerovanej OUTGOING URL FORM ACTION.
   E. HTML ATTRIBUTE [asp-route] TYPE [string] umoznuje definovat speficku ROUTE, ktora sa ma pouzit pre vygenerovanie OUTGOING URL FORM ACTION.
   F. HTML ATTRIBUTE [asp-area] TYPE [string] umoznuje definovat nazov AREA, ktora sa ma pouzit pre vygenerovanie OUTGOING URL FORM ACTION.
   G. HTML ATTRIBUTE [asp-page] TYPE [string] definuje nazov RAZOR PAGE, ktora bude vlozena do vygenerovanej OUTGOING URL FORM ACTION.
   H. HTML ATTRIBUTE [asp-page-handler] TYPE [string] definuje nazov HANDLER RAZOR PAGE, ktora bude vlozena do vygenerovanej OUTGOING URL FORM ACTION. Ak HTML ATTRIBUTE [asp-page-handler] bude obsahovat VALUE 'YYY', potom RAZOR PAGE musi mat definovanu METHOD [RETURN_TYPE OnXXXYYY(PARAMETERS)], alebo METHOD [Task<RETURN_TYPE> OnXXXYYYAsync(PARAMETERS)], kde VALUE 'XXX' je nazov HTTP VERB a VALUE 'YYY' je VALUE HTML ATTRIBUTE [asp-page-handler].
4. ASP.NET definuje pre HTML ELEMENT [<input>] TAG HELPER CLASS [InputTagHelper]. TAG HELPER CLASS [InputTagHelper] definuje nasledujuce HTML ATTRIBUTES, ktore su mapovane na C# PROPERTIES TAG HELPER.
   A. HTML ATTRIBUTE [asp-for] TYPE [ModelExpression] definuje C# PROPERTY MODEL OBJECT do ktorej bude ulozeny obsah HTML ELEMENT [<input>]. HTML ATTRIBUTE [asp-for] pridava do vygenerovaneho HTML ELEMENT [<input>] HTML ATTRIBUTE [id], HTML ATTRIBUTE [name], HTML ATTRIBUTE [type] a HTML ATTRIBUTE [value]. HTML ATTRIBUTE [type] urcuje aky TYPE ma ocakavat HTML ELEMENT [<input>]. Je to iba HINT, lebo nie vsetky BROWSERS konzistentne podporuju HTML ATTRIBUTE [<input>].
   B. HTML ATTRIBUTE [asp-format] TYPE [string] definuje FORMAT VALUE, ktora bude do C# PROPERTY MODEL OBJECT ulozena.
!!! 5. Ak sa HTML ATTRIBUTE [asp-for] aplikuje na C# PROPERTY MODEL OBJECT v RAZOR PAGE, tak EXPRESSION MUSI obsahovat nazov PROPERTY, ktora obsahuje MODEL OBJECT a nasledne nazov PROPERTY daneho MODEL OBJECT. To znaci, ze sa pouzivat SYNTAX [XXX.YYY], kde VALUE 'XXX' je nazov PROPERTY, ktora obsahuje MODEL OBJECT a VALUE 'YYY' je nazov PROPERTY MODEL OBJECT.
!!! 6. Pouzitie HTML ATTRIBUTE [asp-format] ma nasledujuce obmedzenia.
   !!! A. HTML ATTRIBUTE [asp-format] NIE JE PODPOROVANY CHROME, no PODPORUJE ho IE11.
   !!! B. Standardne FORMATTED VALUE ak je v tomto stave zaslana vo FORM na SERVER SIDE, tak ten ju nemusi vediet PARSOVAT, a preto je ju treba preniest ako STRING VALUE a parsovat manualne v CODE, ktory spracovava FORM DATA.
!!! 7. FORMATTING pre MODEL OBJECT PROPERTIES je mozne vykonat aplikaciou ATTRIBUTE [DisplayFormatAttribute] na C# PROPERTIES MODEL OBJECT. ATTRIBUTE [DisplayFormatAttribute] ma nasledujuce PROPERTIES.
   A. PROPERTY [DataFormatString] obsahuje FORMAT STRING s ktorym sa bude vykonavat FORMATTING danej PROPERTY.
   B. PROPERTY [ApplyFormatInEditMode] umoznuje nastavit ci sa FORMAT STRING ma aplikovat aj pri editacii danej PROPERTY.
!!! 8. HTML ATTRIBUTE [asp-format] ma vzdy PREDNOST pred ATTRIBUTE [DisplayFormatAttribute].
9. ASP.NET definuje pre HTML ELEMENT [<label>] TAG HELPER CLASS [LabelTagHelper]. TAG HELPER CLASS [LabelTagHelper] definuje HTML ATTRIBUTE [asp-for] TYPE [ModelExpression], ktory umoznuje asociovat HTML ELEMENT [<label>] s C# PROPERTY MODEL OBJECT. Po nastaveni HTML ATTRIBUTE [asp-for] ASP.NET automaticky nastavi CONTENT HTML ELEMENT [<label>] na nazov C# PROPERTY MODEL OBJECT, a zaroven nastavi aj VALUE HTML ATTRIBUTE [for].
10. CONTENT HTML ELEMENT [<label>] moze byt nastaveny nasledujucimi sposobmi.
   A. Ak HTML ELEMENT [<label>] ma nastaveny ATTRIBUTE [asp-for], ktory mapuje HTML ELEMENT [<label>] na C# PROPERTY MODEL OBJECT, tak CONTENT HTML ELEMENT [<label>] bude obsahovat nazov C# PROPERTY MODEL OBJECT.
   B. Ak HTML ELEMENT [<label>] ma nastaveny ATTRIBUTE [asp-for], ktory mapuje HTML ELEMENT [<label>] na C# PROPERTY MODEL OBJECT a zaroven na C# PROPERTY MODEL OBJECT je aplikovany ATTRIBUTE [DisplayAttribute], tak CONTENT HTML ELEMENT [<label>] bude obsahovat nazov nastaveny v ATTRIBUTE [DisplayAttribute].
   C. Ak HTML ELEMENT [<label>] ma explicitne nastaveny CONTENT, tak tento CONTENT ma prednost pred nastavenim pomocou ATTRIBUTE [asp-for] ci ATTRIBUTE [DisplayAttribute].
11. ASP.NET definuje pre HTML ELEMENT [<select>] TAG HELPER CLASS [SelectTagHelper]. TAG HELPER CLASS [SelectTagHelper] definuje nasledujuce HTML ATTRIBUTES, ktore su mapovane na C# PROPERTIES TAG HELPER.
   A. HTML ATTRIBUTE [asp-for] TYPE [ModelExpression] definuje C# PROPERTY MODEL OBJECT do ktorej bude ulozeny obsah HTML ELEMENT [<select>]. HTML ATTRIBUTE [asp-for] pridava do vygenerovaneho HTML ELEMENT [<select>] HTML ATTRIBUTE [id] a HTML ATTRIBUTE [name].
   B. HTML ATTRIBUTE [asp-items] TYPE [IEnumerable<SelectListItem>] definuje DATA SOURCE odkial sa budu naplnat CHILD HTML ELEMENTS [<option>] definujuce jednotlive OPTIONS v HTML ELEMENT [<select>]. HTML ATTRIBUTE [asp-items] prijma COLLECTION [IEnumerable<SelectListItem>] z ktorej su generovane CHILD HTML ELEMENTS [<option>]. Ak HTML ELEMENT [<select>] uz obsahuje nejake explicitne definovane CHILD HTML ELEMENTS [<option>], tak tieto su TAG HELPER ponechane.
12. CLASS [SelectList] implementuje INTERFACE [IEnumerable<SelectListItem>] a teda je ho mozne pouzit pre naplnenie ITEMS v HTML ATTRIBUTE [asp-items] TAG HELPER CLASS [SelectTagHelper].
13. ASP.NET definuje pre HTML ELEMENT [<textarea>] TAG HELPER CLASS [TextAreaTagHelper]. TAG HELPER CLASS [TextAreaTagHelper] definuje HTML ATTRIBUTE [asp-for] TYPE [ModelExpression], ktory umoznuje asociovat HTML ELEMENT [<textarea>] s C# PROPERTY MODEL OBJECT. Po nastaveni HTML ATTRIBUTE [asp-for] ASP.NET automaticky nastavi CONTENT HTML ELEMENT [<textarea>] na nazov C# PROPERTY MODEL OBJECT, a zaroven nastavi aj VALUE HTML ATTRIBUTE [name] a VALUE HTML ATTRIBUTE [id].
14. ASP.NET definuje TAG HELPER CLASS [ValidationMessage] umoznujucu nastavit VALIDATION FEEDBACK na 1 FORM HTML ELEMENT.
15. ASP.NET definuje TAG HELPER CLASS [ValidationSummary] umoznujucu nastavit VALIDATION FEEDBACK na VSETKY FORM HTML ELEMENTS.
16. CROSS SITE REQUEST FORGERY (CRSF) je technika umoznujuca zneuzitie SESSION COOKIE na vykonanie hackerskeho utoku. CROSS SITE REQUEST FORGERY (CRSF) funguje nasledujucim sposobom.
   A. Po prihlaseni sa do WEB APPLICATION je na CLIENT SIDE ulozeny SESSION COOKIE, ktory obsahuje SESSION ID. Zasialanim SESSION COOKIE z CLIENT SIDE na SERVER SIDE moze SERVER SIDE overit, ze dany USER je LOGGED.
   B. V pripade, ze USER prejde na MALICIOUS WEB APPLICATION, pricom na povodnej APPLICATION sa nespravi LOGOUT, tak SESSION COOKIE je stale platne, az kym neexpiruje.
   C. MALICIOUS WEB APPLICATION moze zneuzit SESSION COOKIE tak, ze vykona REQUEST na povodnu APPLICATION. Kedze ju vykonava priamo BROWSER cez JAVA SCRIPT, tak WEB BROSER do REQUEST na povodnu WEB APPLICATION automaticky vlozi povodnu UNEXPIRED SESSION COOKIE. Vdaka tomu moze MALICIOUS WEB APPLICATION pristupit k citlivym data povodnej WEB APPLICATION.
17. Standardne riesenie CROSS SITE REQUEST FORGERY pozostava z nasledujucich krokov.
   A. SERVER SIDE pri generovani HTTP RESPONSE obsahujucej FORM pridava ANTIFORGERY TOKEN (UNIQUE ID), ktore ma trvanie iba do odoslania FORM spat na SERVER SIDE. Tento ANTIFORGERY TOKEN (UNIQUE ID) je ulozene v HIDDEN HTML ELEMENT [input].
   B. Ak CLIENT SIDE zasle HTTP REQUEST s naplnenym FORM, musi vo FORM DATA okrem samotnych dat z FORM zaslat aj hondotu ANTIFORGERY TOKEN (UNIQUE ID). SERVER SIDE tento HTTP REQUEST akceptuje iba ak sa hodnota ANTIFORGERY TOKEN (UNIQUE ID) zhoduje.
18. ASP.NET riesi CROSS SITE REQUEST FORGERY nasledujucim sposobom.
   A. Pri pouziti HTML ELEMENT [<form>] je mozne pomocou HTTP ATTRIBUTE [asp-antiforgery] nastavit ci sa ma do vygenerovaneho HTTP RESPONSE obsahujuceho FORM pridat ANTIFORGERY TOKEN (UNIQUE ID).
   B. HTTP ACTION METHOD, ktora spracuvava data z FORM MUSI byt oznacena pomocou ATTRIBUTE [ValidateAntiForgeryTokenAttribute], alebo ATTRIBUTE [AutoValidateAntiForgeryTokenAttribute]. Tento ATTRIBUTE prinuti ASP.NET vykona kontrolu ANTIFORGERY TOKEN (UNIQUE ID), a ak nesedi, generuje sa EXCEPTION.
19. Pre validaciu ANTIFORGERY TOKEN (UNIQUE ID) definuje ASP.NET nasledujuce ATTRIBUTES.
   A. ATTRIBUTE [AutoValidateAntiForgeryTokenAttribute] vykonava kontrolu ANTIFORGERY TOKEN (UNIQUE ID) pre vsetky UNSAFE HTTP VEBS. ATTRIBUTE moze byt aplikovany na CLASS, alebo na METHOD.
   B. ATTRIBUTE [ValidateAntiForgeryTokenAttribute] vykonava kontrolu ANTIFORGERY TOKEN (UNIQUE ID). Ak sa validny ANTIFORGERY TOKEN (UNIQUE ID) v HTTP REQUEST NENACHADZA, ACTION METHOD sa NEVYKONA a ATTRIBUTE generuje EXCEPTION. ATTRIBUTE moze byt aplikovany na CLASS, alebo na METHOD.
   C. ATTRIBUTE [IgnoreAntiforgeryTokenAttribute] zrusi kontrolu ANTIFORGERY TOKEN (UNIQUE ID). ATTRIBUTE moze byt aplikovany na CLASS, alebo na METHOD.
!!! 20. Ak v HTTP ELEMENT [<form>] sa pouzivaju HTML ATTRIBUTE [asp-controller] a HTML ATTRIBUTE [asp-action], tak ochrana voci CROSS SITE REQUEST FORGERY je AUTOMATICKY ENABLED.
!!! 21. Ak v HTTP ELEMENT [<form>] sa pouziva HTML ATTRIBUTE [action], tak ochrana voci CROSS SITE REQUEST FORGERY NIE je AUTOMATICKY ENABLED.
!!! 22. Pre RAZOR PAGES je validacia ANTIFORGERY TOKEN (UNIQUE ID) zapnuta AUTOMATICKY, no je ju mozne vypnut nasledujucim sposobom.
   A. Do HTML ELEMENT [<form>] sa nastavi HTML ATTRIBUTE [asp-antiforgery] na VALUE 'false'. Tym sa zabrani ASP.NET, aby do HTTP POST REQUEST vlozil ANTIFORGERY TOKEN (UNIQUE ID).
   B. Na RAZOR PAGE MODEL CLASS sa MUSI aplikovat ATTRIBUTE [IgnoreAntiforgeryTokenAttribute]. Tym sa zabrani kontrole ANTIFORGERY TOKEN (UNIQUE ID), ktory nebol do HTTP POST REQUEST vlozeny.
23. V pripade, ze CLIENT SIDE je SERVER SIDE WEB SERVICE, ktory nevracia HTML RESPONSE, ale iba JSON RESPONSE, tak validacia ANTIFORGERY TOKEN (UNIQUE ID) ako ochrana pred CROSS SITE REQUEST FORGERY NEFUNGUJE, pretoze ANTIFORGERY TOKEN (UNIQUE ID) prenasany v HIDDEN HTML ELEMENT [input] sa NEMA AKO preniest na CLIENT SIDE. Riesenie je nasledujuce.
   A. SERVER SIDE WEB SERVICE zasle ANTIFORGERY TOKEN (UNIQUE ID) v CUSTOM COOKIE.
   B. CLIENT SIDE musi z COOKIE vycitat ANTIFORGERY TOKEN (UNIQUE ID) a jeho VALUE vlozit do ako HEADER do HTTP REQUEST obsahujuci FORM DATA, ktore CLIENT SIDE od USER ziskal.
14. ASP.NET podporuje generovanie COOKIES s ANTIFORGERY TOKENS (UNIQUE IDs) pomocou INTERFACE [IAntiforgery].
//-----------------------------------------------------------------------------