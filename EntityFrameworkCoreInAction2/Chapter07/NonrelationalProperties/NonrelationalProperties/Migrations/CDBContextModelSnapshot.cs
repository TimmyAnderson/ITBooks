// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NonrelationalProperties;

#nullable disable

namespace NonrelationalProperties.Migrations
{
    [DbContext(typeof(CDBContext))]
    partial class CDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("NonrelationalProperties.CEntityAutoConfiguration1", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleValue")
                        .HasPrecision(9, 2)
                        .HasColumnType("REAL");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesAutoConfiguration1");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityAutoConfiguration2", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleValue")
                        .HasPrecision(10, 3)
                        .HasColumnType("REAL");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesAutoConfiguration2");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityBackingFieldsAccessModes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackingFieldField")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingFieldField");

                    b.Property<string>("BackingFieldFieldDuringConstruction")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingFieldFieldDuringConstruction");

                    b.Property<string>("BackingFieldPreferField")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingFieldPreferField");

                    b.Property<string>("BackingFieldPreferFieldDuringConstruction")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingFieldPreferFieldDuringConstruction");

                    b.Property<string>("BackingFieldPreferProperty")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingFieldPreferProperty");

                    b.Property<string>("BackingFieldProperty")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingFieldProperty");

                    b.HasKey("ID");

                    b.ToTable("EntitiesBackingFieldsAccessModes", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityBackingFieldsConventions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackingField1")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackingField2")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoBackingField")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesBackingFieldsConventions", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityBackingFieldsDataAnnotations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackingField1")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackingField2")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoBackingField")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesBackingFieldsDataAnnotations", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityBackingFieldsFluentAPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackingField1")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingField1");

                    b.Property<string>("BackingField2")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingField2");

                    b.Property<string>("MBackingField3")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_BackingField3");

                    b.Property<string>("NoBackingField")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesBackingFieldsFluentAPI", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityColumnPropertiesDataAnnotations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeWithSQLTypeDATE")
                        .HasColumnType("date");

                    b.Property<int>("IntRenamed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("My_IntRenamed");

                    b.Property<string>("StringNonNull")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StringWithMaxLength")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesColumnPropertiesDataAnnotations", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityColumnPropertiesFluentAPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeWithSQLTypeDATE")
                        .HasColumnType("date");

                    b.Property<double>("DoubleWithLimitedPrecision")
                        .HasPrecision(9, 2)
                        .HasColumnType("REAL");

                    b.Property<int>("IntRenamed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("My_IntRenamed");

                    b.Property<string>("StringNonNull")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StringNonUnicode")
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("StringWithMaxLength")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesColumnPropertiesFluentAPI", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityCustomNamesDataAnnotations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_Value");

                    b.HasKey("ID");

                    b.ToTable("My_EntityCustomNamesDataAnnotations", "My_Schema");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityCustomNamesFluentAPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_Value");

                    b.HasKey("ID");

                    b.ToTable("My_EntityCustomNamesFluentAPI", "My_Schema");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityDataForKeylessView", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesDataForKeylessView", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityDifferentConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeWithSQLTypeDATEAndIndex")
                        .HasColumnType("date");

                    b.Property<double>("DoubleWithLimitedPrecision")
                        .HasPrecision(9, 2)
                        .HasColumnType("REAL");

                    b.Property<int>("IntNonNull")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IntNull")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringNonNullWithMaxLength")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StringNonUnicodeWithMaxLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("StringWithMaxLength")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeWithSQLTypeDATEAndIndex");

                    b.ToTable("EntitiesDifferentConfigurations", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityIndexesDataAnnotations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MultiColumnIndex1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MultiColumnIndex2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleColumnIndex")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleColumnUniqueIndex")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "MultiColumnIndex1", "MultiColumnIndex2" }, "My_MultiColumnIndex_DataAnnotations")
                        .IsUnique();

                    b.HasIndex(new[] { "SingleColumnIndex" }, "My_SingleColumnIndex_DataAnnotations");

                    b.HasIndex(new[] { "SingleColumnUniqueIndex" }, "My_SingleColumnUniqueIndex_DataAnnotations")
                        .IsUnique();

                    b.ToTable("EntitiesIndexesDataAnnotations", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityIndexesFluentAPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MultiColumnIndex1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MultiColumnIndex2")
                        .HasColumnType("TEXT");

                    b.Property<int>("SingleColumnFilteredIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SingleColumnIndex")
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleColumnUniqueIndex")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SingleColumnFilteredIndex")
                        .HasDatabaseName("My_SingleColumnFilteredIndex_FluentAPI")
                        .HasFilter("SingleColumnFilteredIndex>1");

                    b.HasIndex("SingleColumnIndex")
                        .HasDatabaseName("My_SingleColumnIndex_FluentAPI");

                    b.HasIndex("SingleColumnUniqueIndex")
                        .IsUnique()
                        .HasDatabaseName("My_SingleColumnUniqueIndex_FluentAPI");

                    b.HasIndex("MultiColumnIndex1", "MultiColumnIndex2")
                        .IsUnique()
                        .HasDatabaseName("My_MultiColumnIndex_FluentAPI");

                    b.ToTable("EntitiesIndexesFluentAPI", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityKeylessDataAnnotations", b =>
                {
                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MyInt");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("MyString");

                    b.ToView("View_Keyless1");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityKeylessFluentAPI", b =>
                {
                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MyInt");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("MyString");

                    b.ToView("View_Keyless2");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityNotExcluded", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesNotExcluded", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityNotMappedDataAnnotations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotExcludedClassValueID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("NotExcludedClassValueID");

                    b.ToTable("EntitiesNotMappedDataAnnotations", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityNotMappedFluentAPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotExcludedClassValueID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("NotExcludedClassValueID");

                    b.ToTable("EntitiesNotMappedFluentAPI", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityPrimaryKeyConventions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EntitiesPrimaryKeyConventions", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityPrimaryKeyDataAnnotations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesPrimaryKeyDataAnnotations", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityPrimaryKeyFluentAPI", b =>
                {
                    b.Property<int>("ID1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID2")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID1", "ID2");

                    b.ToTable("EntitiesPrimaryKeyFluentAPI", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityQueryFilter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("EntitiesQueryFilter", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityShadowProperties", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NonShadowProperty")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShadowPropertyInt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("My_ShadowPropertyInt");

                    b.Property<string>("ShadowPropertyString")
                        .HasColumnType("TEXT")
                        .HasColumnName("My_ShadowPropertyString");

                    b.HasKey("ID");

                    b.ToTable("EntitiesShadowProperties", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityUsingValueConversions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnumTypeNoConversion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnumTypeWithConversion1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnumTypeWithConversion2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesUsingValueConversions", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CTestEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("TestEntities", (string)null);
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityNotMappedDataAnnotations", b =>
                {
                    b.HasOne("NonrelationalProperties.CEntityNotExcluded", "NotExcludedClassValue")
                        .WithMany()
                        .HasForeignKey("NotExcludedClassValueID");

                    b.Navigation("NotExcludedClassValue");
                });

            modelBuilder.Entity("NonrelationalProperties.CEntityNotMappedFluentAPI", b =>
                {
                    b.HasOne("NonrelationalProperties.CEntityNotExcluded", "NotExcludedClassValue")
                        .WithMany()
                        .HasForeignKey("NotExcludedClassValueID");

                    b.Navigation("NotExcludedClassValue");
                });
#pragma warning restore 612, 618
        }
    }
}
