//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje vytvaranie CLASSES v C++.
2. CLASS reprezentuje NOVY TYP, ktory moze mat FIELDS, METHODS, OPERATORS, CONSTRUCTORS a DESTRUCTOR.
3. CLASS moze byt definovana v C++ pomocou 2 KEYWORDS 'class' a 'struct'. Jediny rozdiel medzi nimi je v tom, ze DEFAULT ACCESS MODIFIER pri CLASS je 'private', zatial co pri 'struct' je to 'public'.
4. CLASSES mozu mat 3 typy ACCESS MODIFIERS.
   A. PRIVATE - MEMBERS su pristupne iba z inych MEMBERS danej CLASS.
   B. PROTECTED - MEMBERS su pristupne z inych MEMBERS danej CLASS a vsetkych DERIVED CLASSES.
   C. PUBLIC - MEMBERS su pristupne z lubovolnej casti kodu.
5. CONSTRUCTOR je specialna METODA danej CLASS, ktora sluzi na inicializaciu objektu. CLASS moze mat viacero pretazenych CONSTRUCTORS.
!!! 6. STATIC FIELD je FIELD, ktory je vytvoreny iba RAZ v PAMATI a je spolocny pre VSETKY OBJEKTY danej CLASS. STATIC FIELDS musia byt DEKLAROVANE a DEFINOVANE. DEFINICIA sa realizuje v .CPP subore, kde sa danej STATIC MEMBER prideli pamat.
7. STATIC METHOD je metoda, ktora MOZE pristupovat IBA k STATIC MEMBERS a nemoze pristupovat k NON-STATIC MEMBERS danej CLASS.
!!! 8. Ak vykonam priradenie v INICIALIZACII PREMENEJ tak zavisi ci dana trieda ma, alebo nema COPY CONSTRUCTOR.
   A. Ak CLASS MA COPY CONSTRUCTOR, tak za zavola tento.
   B. Ak CLASS NEMA COPY CONSTRUCTOR, tak sa kopiruju VSETKY FIELD.
!!!!! 9. Pri PRIDADENI PREMENNEJ sa NIKDY NEVOLA COPY CONSTRUCTOR, ale vola sa bud OPERATOR PRIDADENIA, alebo ak tento NIE JE DEFINOVANY, tak sa KOPIRUJU VSETKY FIELDS.
10. Metody mozu byt oznacene pomocou KEYWORD 'const', ktory udava, ze telo metody NEMENI ziadnu MEMBER VARIABLE, ani nevola ine NON-CONST metody.
!!!!! 11. Ak mam 2 METODY s ROVNAKYMI PARAMETRAMI, tak STACI ak sa LISIA v tom, ze jedna z nich je oznacena ako 'const' a OPERATOR tieto 2 METODY, aj ked maju ROVNAKY PROTOTYP povazuje za ROZDIELNE.
!!! 12. CONST objekty mozu volat IBA CONST METODY. NON-CONST metody NEMOZU byt volane CONST objektami.
13. KEYWORD 'this' sluzi v METODACH na referovanie na OBJEKT SAMOTNY. Jeho typ zavysi od typu METODY.
   A. V CONST metode triedy XXX je [this=const XXX*].
   B. V NON-CONST metode triedy XXX je [this=XXX*].
!!! 14. METHOD CHAINING je technika, kde metody, ktore NORMALNE NEMAJU RETURN VALUE vracaju RETURN VALUE hodnotu '*this' typu [const XXX&] v CONST metodach, alebo v [XXX&] NON-CONST metodach. Toto umoznuje CHAINING METOD [XXX.Method1().Method2().Method3()].
!!!!! 15. CONST objekty mozu byt v niektorych implementaciach C++ kvoli optimalizacii ulozene v READ-ONLY pamati.
!!!!! 16. KEYWORD 'mutable' sluzi na oznacenie FIELD, ktory sa MOZE MENIT i v CONST objekte. Oznacenie FIELD za MUTABLE predstavuje HINT pre KOMPILATOR, aby dany FIELD NEOPTIMALIZOVAT, napriklad ulozenim do READ-ONLY pamate. K MUTABLE FIELDS je mozne pristupovat a menit ich a z CONST metod.
17. Metody mozu byt oznacene KEYWORD 'inline'. Tento KEYWORD udava, ze TELO metody MUSI byt definovane v .H subore, aby mohlo byt pristupne zo vsetkych CPP suborov a KOMPILATOR mohol NAHRADIT TELO METODY za jej KOD.
!!!!! 18. INLINE metody NEMOZU byt definovane v CPP subore, pretoze ak by .H subor s CLASS obsahujucu INLINE metody pouzil INY CPP subor, tak kompilator by NEMAL k DISPOZICII KOD INLINE metody a NEMOHOL by ho NAHRADIT za VOLANIE INLINE METODY.
19. CLASSES mozu mat pretazene ako MEMBER METODY OPERATORS. Pretazeny OPERATOR ma vzdy o 1 ARGUMENT MENEJ, kedze 1. ARGUMENT je objekt samotny - teda 'this'.
20. DESTRUCTOR je metoda, ktora sa vola PRED ODSTRANENIM objektu z PAMATE. Umoznuje odstranit alokovane RESOURCES, ako napriklad dynamicku pamat, ci FILE HANDLERS.
21. CONSTRUCTOR, ktory NEMA PARAMETRE je DEFAULT CONSTRUCTOR. Ak CLASS nema definovany ZIADEN CONSTRUCTOR, C++ generuje DEFUALT CONSTRUCTOR, ktory vola BASE CONSTRUCTORS, ako i CONSTRUCTORS vsetkych FIELDS, ktore maju definovany CONSTRUCTOR.
!!! 22. PRIMITIVNE TYPE NEMAJU definovany DEFAULT CONSTRUCTOR kvoli zvyseniu efektivnosti.
!!! 23. Ak CLASS ma ako FIELD definovane STATICKY ALOKOVANE POLE, tak je pre KAZDY JEHO ITEM volany DEFAULT CONSTURCTOR i DESTRUCTOR.
!!! 24. Pri LOCAL VARIABLES su CONSTRUCTORS a DESTRUCTORS volane v OPACNOM PORADI.
!!! 25. Pri operacii INICIALIZACIE (priradenie pri vytvarani objektu) a PRIRADENI sa KOPIA VSETKYCH FIELDS. Ak tento DEFAULT BEHAVIOR nie je vhodny, tak je mozne pretazit COPY CONSTRUCTOR a OPERATOR= a poskytnut CUSTOM implementaciu.
!!!!! 26. Ak vsak CLASS obsahuje CONST, alebo REFERENCE FIELDS, tak NEMOZE byt pouzita DEFAULT KOPIA cez kopirovanie VSETKYCH FIELDS a MUSI BYT DEKLAROVANY COPY CONSTRUCTOR a OPERATOR= s CUSTOM implementaciou.
!!! 27. CONSTRUCTORS pre FIELDS daneho objektu su volane PRED TELOM CLASS CONSTRUCTOR a v poradi v akom su definovane v CLASS, NEZAVISLE od toho v AKOM PORADI su DEFINOVANE ich INITIALIZERS v CONSTRUCTOR.
!!! 28. DESTRUCTORS pre FIELDS su volane v OPACNOM PORADI v akom su DEKLAROVANE v CLASS a AZ PO ZAVOLANI TELA DESTRUCTOR danej CLASS.
29. CONST FIELDS je mozne initializovat nasledujucimi sposobmi.
   A. NON-STATIC FIELDS MUSIA byt initializovane cez INITIALIZES v CONSTRUCTORS.
   B. STATIC NON-INTEGER CONST FIELDS su initializovane EXPLICITNE v .CPP subore MIMO CONSTRUCTOR.
   C. STATIC INTEGER CONST FIELDS su INICIALIZOVANE priamo v .H subore spolu s DEKLARACIOU.
!!!!! 30. STATIC premenne a je jedno ci su CONST, alebo NON-CONST sa volaju pri STARTE PROGRAMU a NIE PRI PRVOM POUZITI. Ich DESTRUKTORY sa volaju pri UKONCENI programu.
!!!!! 31. Operator 'delete[]' sa pouziva na vymazavanie POLI. Tento operator vola DESTRUCTOR pre KAZDY ITEM POLA. Aj ked TEORETICKY by bolo mozne implementovat C++ i bez tohto operatora, vyzadovalo by si to drzat informaciu o tom ci POINTER reprezentuje ARRAY, alebo iba OBJECT. Kvoli PERFORMANCE sa radsej zvolil pristup existencie operatora 'delete[]'.
!!! 32. Ak mam LOKALNE STATICKE PREMENNE, tak sa pre nich CONSTRUCTOR vola pri ich PRVOM POUZITI a DESTRUCTOR sa vola ich UKONCENI PROGRAMU.
!!! 33. Ak mam GLOBALNE PREMENNE, tak sa V RAMCI JEDNEHO CPP suboru volaju CONSTRUCTORS v poradi v akom su v CPP subore DEFINOVANE. DESTRUCTORS sa volaju v OPACNOM PORADI.
!!!!! 34. Ak vsak mam GLOBALNE PREMENNE v ROZLICNYCH CPP suboroch, tak poradie volania CONSTRUCTORS a DESTRUCTORS medzi CPP subromi NIE JE DEFINOVANE a moze byt LUBOVOLNE.
!!! 35. TEMPORARY objekty, ktore vznikaju napriklad pri pouziti OPERATORS, alebo mozu byt vytvorene i EXPLICITNE volanim CONSTRUCTOR, su odstranovane a je pre ne volany DESTRUCTOR na KONCI EXPRESSION.
!!! 36. C++ umoznuje PRETAZOVAT operatory NEW a DELETE. Pretazene verzie mozu mat okrem POVINNEHO PARAMETRA typu 'size_t' aj DALSIE PARAMETRE.
!!!!! 37. C++ ma pre OPERATOR NEW (nie vsak pre DELETE) SPECIALNU SYNTAX nazyvanu aj PLACEMENT EXPRESSION. Pomocou tejto syntaxe je mozne OPERATOR NEW prinutit aby alokovat pamat v CUSTOM BUFFER a nie v STANDARDNEJ HEAP. Sposob pouzitia je nasledovny.
   A. Alokuje sa BUFFER do ktoreho sa budu ukladat OBJEKTY cez PLACEMENT SYNTAX. Tento BUFFER moze byt na HEAP, ale kludne moze byt aj na STACK, samozrejme s tym, ze pri konci SCOPE sa pamat a v nej cez PLACEMENT NEW 'alokovane' objekty okamzite uvolnia.
   !!! B. V BUFFER pomocou PLACEMENT NEW [new(PointerInsideBuffer) CClass(Params)] 'alokujem' objekty. POZOR NEJEDNA sa o SKUTOCNU ALOKACIU PAMATE. PLACEMENT NEW (aspon jeho standardna verzia) NIKDY NEALOKUJE ZIADNU PAMAT. Je to iba NAMAPOVANIE vytvaraneho objektu na PAMATOVU LOKACIU, ktora sa posle ako PARAMETER PLACEMENT NEW. Teda ZIADNA NOVA PAMAT sa NEALOKUJE, iba sa vyuziva PAMAT BUFFERA alokovana v predchadzajucom bode. Samozrejme poziciu v BUFFER si musim EXPLICITNE VYRATAVAT. PLACEMENT NEROBI ZIADEN POSUN POINTERA. Vlastne NEROBI NIC INE, iba VRATI TEN ISTY POINTER, ktory som poslal ako PARAMETER do PLACEMENT NEW.
   !!!!! C. PLACEMENT NEW pri volanie AJ KED NEALOKUJE PAMAT, tak ZAVOLA PRISLUSNY CONSTRUCTOR.
   D. POINTER vrateny PLACEMENT NEW je teraz STANDARDNE INICIALIZOVANY OBJEKT na ktory bol volany CONSTRUCTOR. Jediny rozdiel je v tom, ze NIE JE ALOKOVANY na HEAP, ale na BUFFER, ktory som si SAM ALOKOVAL.
   !!!!! E. Pri odstranovani objektu alokovaneho cez PLACEMENT NEW sa NESMIE VOLAT DELETE. Je to preto, lebo PLACEMENT NEW v skutocnost NEALOKUJE ZIADNU PAMAT, iba vracia POINTER v BUFFER, ktory bol alokovany skor (a kludne mohol byt alokovany i na STACK).
   !!!!! F. Pri odstranovani objektu alokovaneho cez PLACEMENT NEW je vsak NUTNE EXPLICITNE VOLAT DESTRUCTOR daneho OBJEKTU. Kedze sa NESMIE VOLAT DELETE, ktory vola DESTRUCTOR AUTOMATICKY, tak je nutne ho zavolat MANUALNE. Teda odstranenie objektu 'alokovaneho' cez PLACEMENT NEW znamena IBA EXPLICITNE VOLANIE DESTRUCTORA OBJEKTU 'alokovaneho' cez PLACEMENT NEW.
   G. Odstranenie BUFFERA sa vykonava bud volanim DELETE (ak bol alokovany cez NEW), alebo ak bol alokovany cez STACK, tak skoncenim SCOPE.
!!!!! 38. Pre PLACEMENT NEW plati.
   A. NEALOKUJE ZIADNU PAMAT iba priradzuje UZ ALKOVANU pamat z BUFFERA, ktory sa zasiela ako PARAMETER PLACEMENT NEW.
   B. PLACEMENT NEW zavola CONSTRUCTOR.
!!! 39. Aj ked UNIONS MOZU mat METHODS, NIE je v nich mozne pouzit CLASS VARIABLES, lebo C++ by nevedelo ci je platna hodnota prave hodnota CLASS TYPU a teda ci ma pre nu volat CONSTRUCTOR a DESTRUCTOR.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
Standardna implementacia PLACEMENT NEW.

inline void *__CRTDECL operator new(size_t, void *_Where) _THROW0()
{	
	// !!! Ako je vidiet PLACEMENT NEW NEROBI ABSOLUTNE NIC.
	return(_Where);
}
//-------------------------------------------------------------------------------------------------------