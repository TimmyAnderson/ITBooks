//-------------------------------------------------------------------------------------------------------
1. Solution popisuje zakladne vlastnosti C++.
2. C++ je COMPILED LANGUAGE. To znaci, ze C++ CODE musi byt COMPILED pomocou C++ COMPILER do EXECUTABLE CODE.
3. C++ COMPILATION je vykonavana v nasledujucich krokoch.
   A. C++ SOURCE CODES su pomocou C++ COMPILER COMPILED do OBJECT FILES.
   B. OBJECT FILES su pomocou LINKER LINKED do EXECUTABLE FILE.
4. C++ je STATICALLY TYPED LANGUAGE. To znaci, ze vsetky TYPES MUSIA byt zname v COMPILE TIME, pricom TYPE urcuje zoznam OPERATION, ktore je nad danym TYPE mozne vykonat.
5. ENTRY POINT kazdeho C++ PROGRAM je FUNCTION main(). Pre FUNCTION main() platia nasledujuce fakty.
   A. FUNCTION main() moze byt BEZPARAMETRICKA, alebo ma 2 a viac PARAMETERS, ktorymi prijma data z prostredia.
   B. Ak ma FUNCTION main() PARAMETERS, tak ich musi mat aspon 2, kde 1. PARAMETER obsahuje pocet PARAMETERS a 2. PARAMETER obsahuje jednotlive PARAMETERS vo forme ARRAY na TYPE [char*]. Pocet ELEMENTS v tomto ARRAY urcuje 1. PARAMETER FUNCTION main().
   C. C++ umoznuje, aby FUNCTION main() mala aj viacero PARAMETERS ako su 2. Tieto PARAMETERS su IMPLEMENTATION SPECIFIC PARAMETERS.
   D. FUNCTION main() vracia ako RETURN TYPE [int]. Tato RETURN VALUE je po vykonani PROGRAMU posunuta do okoliteho prostredia, ktore PROGRAM spusilo, pricom moze indikovat ci PROGRAM prebehol uspesne, alebo zlyhal.
   E. C++ STANDARD NEVYZADUJE, aby na konci FUNCTION main() bol pouzity STATEMENT [return()]. Ak sa nepouzije, C++ automaticky vrati VALUE 0 ako RETURN VALUE.
6. DECLARATION je C++ STATEMENT ktory definuje TYPE pre dany NAME.
7. TYPE definuje mnozinu VALUES, a OPERATIONS, ktore je nad OBJECTS daneho TYPE mozne vykonavat.
8. OBJECT je MEMORY, ktora obsahuje VALUE daneho TYPE.
9. VALUE je mnozina BITS, ktore su interpretovane na zakladne TYPE danej VALUE.
10. VARIABLE je pomenovany OBJECT.
11. V C++ PRIMITIVE TYPES, ktore definuje COMPILER NEMAJU presne definovanu DLZKU. Ta je IMPLEMENTATION SPECIFIC a je ju mozne zistit volanim OPERATOR [sizeof()].
12. Nad PRIMITIVE TYPES je mozne aplikovat ARITHMETIC OPERATORS. Aj CUSTOM TYPES umoznuju definovat CUSTOM OPERATORS, ktore je potom mozne pouzit nad VARIABLES daneho CUSTOM TYPE.
13. VARIABLES je mozne inicializovat bud pomocou OPERATOR=, OPERATOR(), alebo UNIFORM INITIALIZATION.
14. C++ definuje nasledujuce typy CONSTANTS.
   A. COMPILE TIME CONSTANT je CONSTANT oznacena KEYWORD [const], ktorej hodnota je zadana ako CONST VALUE. COMPILE TIME CONSTANTS NEMOZU byt pouzite na definiciu ARRAY SIZES.
   B. RUN TIME CONSTANT je CONSTANT oznacena KEYWORD [const], ktorej hodnota je zadana ako VALUE, ktora NEMUSI byt CONST, ale napriklad moze to byt VALUE inej VARIABLE, ktorej VALUE je znama az v RUNTIME. RUNTIME CONSTANTS NEMOZU byt pouzite na definiciu ARRAY SIZES.
   C. CONSTANT EXPRESSION je CONSTANT oznacena KEYWORD [constexpr], ktorej VALUE sa vypocitava v COMPILE TIME. Pri vypocte VALUE je mozne volat FUNCTIONS oznacene KEYWORD [constexpr].
15. STATEMENT [if (CONDITION) STATEMENT_1 else STATEMENT_2] vykona 'STATEMENT_1' ak 'CONDITION' je TRUE a 'STATEMENT_2' ak 'CONDITION' je FALSE.
16. STATEMENT [switch (VALUE) case CONSTANT_1: STATEMENT_1 break; ... case CONSTANT_N: STATEMENT_N break; default: STATEMENT_X;] vykona 'STATEMENT_1' ak 'VALUE' je rovny 'CONSTANT_1',  vykona 'STATEMENT_N' ak 'VALUE' je rovny 'CONSTANT_2', alebo vykona 'STATEMENT_X' ak 'VALUE' nie je rovny ziadne z VALUES {CONSTANT_1,...,CONSTANT_N}.
17. STATEMENT [for(DEFINITIONS;CONDITION;EXPRESSION) STATEMENT] opakovane vykonava 'STATEMENT', pokial 'CONDITION' je TRUE, pricom po kazdej iteracii sa vola 'EXPRESSION'. Cast DEFINITIONS sluzi na DEFINITION VARIABLES, ktore mozu byt pouzite v ostatnych castiach STATEMENT [for].
18. STATEMENT [while(CONDITION) STATEMENT] opakovane vykonava 'STATEMENT' pokym je 'CONDITION' je TRUE. Plati, ze 'STATEMENT' sa nemusi vykonat ANI RAZ, ak 'CONDITION' je hned na zaciatku FALSE.
19. STATEMENT [do STATEMENT while(CONDITION);] opakovane vykonava 'STATEMENT' pokym je 'CONDITION' je TRUE. Plati, ze 'STATEMENT' sa VZDY vykona ASPON RAZ.
20. SYNTAX [TYPE*] definuje POINTER na VARIABLE TYPE 'TYPE'. Pre POINTERS platia nasledujuce pravidla.
   A. POINTER reprezentuje MEMORY ADDRESS na ktorej sa nachadza VARIABLE na ktoru POINTER odkazuje.
   B. Na POINTERS je mozne aplikovat ARITHMETIC OPERATORS, ktorymi je mozne menit poziciu v MEMORY na ktoru POINTER odkazuje.
   C. Adresu na VARIABLE, ktoru je mozne ulozit do POINTER je mozne ziskat pomocou [OPERATOR&].
   D. K VALUE na ktory POINTERS odkazuju sa je mozne odkazat pomocou [OPERATOR*].
   E. Ak VALUE na ktory POINTER odkazuje je STRUCTURE, k jednotlivym MEMBERS je mozne sa odkazat pomocou [OPERATOR->].
   F. Ak POINTER neodkazuje na ziadnu VARIABLE, obsahuje VALUE [nullptr].
   G. Pomocou [OPERATOR-] je mozne odcitat adresy dvoch POINTERS. Vratena VALUE obsahuje pocet OBJECTS (nie BYTES), ktore sa nachadzaju medzi 2 POINTERS.
   H. POINTER TYPE [void*] moze odkazovat na OBJECT lubovolneho TYPE.
21. SYNTAX [TYPE&] definuje REFERENCE na VARIABLE TYPE 'TYPE'. Pre REFERENCES platia nasledujuce pravidla.
   A. REFERENCE reprezentuje MEMORY ADDRESS na ktorej sa nachadza VARIABLE na ktoru REFERENCE odkazuje.
   !!! B. Pri REFERENCES NIE JE mozne menit MEMORY ADDRESS na ktoru REFERENCES odkazuju.
   C. REFERENCES MUSIA byt VZDY INITIALIZOVANE na MEMORY ADDRESS a teda NEMOZU odkazovat na NEEXISTUJUCU MEMORY ADDRESS ako v pripade POINTERS (nullptr).
   D. K VALUE na ktoru REFERENCE odkazuju sa je mozne odkazat pomocou [OPERATOR.].
22. SYNTAX [TYPE [SIZE]] definuje ARRAY OBJECTS TYPE 'TYPE' dlzky 'SIZE'. Pre ARRAYS platia nasledujuce pravidla.
   A. ARRAY reprezentuje pole OBJECTS TYPE 'TYPE' dlzky 'SIZE'.
   B. ARRAYS pouzivaju INDEXES v INTERVALE <0,SIZE-1>.
   C. Dlzka ARRAY MUSI byt definovana v COMPILE TIME.
   D. ARRAY logicky reprezentuje CONSTANT POINTER, ktoreho poziciu nie je mozne menit.
   E. Pristup k OBJECTS, ktore ARRAY obsahuje je mozne robit pomocou [OPERATOR[INDEX]], kde 'INDEX' urcuje poradove cislo OBJECT v ARRAY.
23. TYPES v C++ sa rozdeluju do nasledujucich kategorii.
   A. PRIMITIVE TYPES su TYPES, ktore su podporovane priamo C++ COMPILER. Sem patria TYPES ako TYPE [int], TYPE [char], alebo TYPE [double]. Za PRIMITIVE TYPES sa povazuju aj POINTERS a REFERENCES na PRIMITIVE TYPES.
   B. USER DEFINED TYPES su TYPES definovane PROGRAMOM. Sem patria STRUCTURES, CLASSES a ENUMERATIONS.
24. STRUCTURES su USER DEFINED TYPES pre ktore platia nasledujuce fakty.
   A. STRUCTURES mozu ako MEMBERS obsahovat FIELDS, METHODS, OPERATORS, CONSTRUCTORS, DESTRUCTORS, NESTED TYPES a TYPE DEFINITIONS.
   B. STRUCTURES umoznuju definovat ACCESS RIGHTS pre kazdy MEMBER.
   !!! C. DEFAULT ACCESS RIGHTS pre STRUCTURES je PUBLIC.
   D. Ak je VARIABLE TYPE STRUCTURE definovana BY-VALUE, alebo BY-REFERENCE, potom pristup k MEMBERS danej STRUCTURE sa realizuje bud pomocou [OPERATOR.].
   E. Ak je VARIABLE TYPE STRUCTURE definovana BY-POINTER, potom pristup k MEMBERS danej STRUCTURE sa realizuje bud pomocou [OPERATOR->].
   F. STRUCTURES mozu byt DERIVED z BASE STRUCTURES a mozu mat VIRTUAL METHODS na ktore sa aplikuje POLYMORPHISM.
25. CLASSES su USER DEFINED TYPES pre ktore platia nasledujuce fakty.
   A. CLASSES mozu ako MEMBERS obsahovat FIELDS, METHODS, OPERATORS, CONSTRUCTORS, DESTRUCTORS, NESTED TYPES a TYPE DEFINITIONS.
   B. CLASSES umoznuju definovat ACCESS RIGHTS pre kazdy MEMBER.
   !!! C. DEFAULT ACCESS RIGHTS pre CLASSES je PRIVATE.
   D. Ak je VARIABLE TYPE STRUCTURE definovana BY-VALUE, alebo BY-REFERENCE, potom pristup k MEMBERS danej STRUCTURE sa realizuje bud pomocou [OPERATOR.].
   E. Ak je VARIABLE TYPE STRUCTURE definovana BY-POINTER, potom pristup k MEMBERS danej STRUCTURE sa realizuje bud pomocou [OPERATOR->].
   F. CLASSES mozu byt DERIVED z BASE CLASSES a mozu mat VIRTUAL METHODS na ktore sa aplikuje POLYMORPHISM.
26. ENUMERATIONS su USER DEFINED TYPES pre ktore platia nasledujuce fakty.
   A. ENUMERATIONS mozu ako MEMBERS obsahovat IBA NAMED NUMERIC CONSTANTS.
   B. ENUMERATIONS mozu mat definovany NUMERIC TYPE urcujuci akeho TYPE su jeho NUMERIC CONSTANTS.
   C. C-ENUMERATIONS su definovane pomocou KEYWORD [enum] a plati pre ne, ze ich NUMERIC CONSTANTS aj ked su definovane v ENUMERAION su v skutocnosti sucastou GLOBAL SCOPE. Zaroven plati, ze ich NUMERIC CONSTANTS je IMPLICITNE mozne konvertovat na NUMERIC TYPE daneho C-ENUMERATION.
   D. C++-ENUMERATIONS su definovane pomocou KEYWORD [enum class] a plati pre ne, ze ich NUMERIC CONSTANTS su definovane v ENUMERAION SCOPE. Zaroven plati, ze ich NUMERIC CONSTANTS je IBA EXPLICITNE pomocou CONVERSION OPERATORS mozne konvertovat na NUMERIC TYPE daneho C++-ENUMERATION.
   E. Pristup k MEMBERS daneho ENUMERATION sa vykonava pomocou [OPERATOR::].
   F. ENUMERATIONS maju IMPLICITNE DEFINOVANy [OPERATOR=], [OPERATOR<], [OPERATOR<=], [OPERATOR>], [OPERATOR>=], [OPERATOR==] a [OPERATOR!=].
27. C++ DECLARATION sluzi na popisanie INTERFACE daneho TYPE, alebo FUNCTION.
   A. TYPE DECLARATION znamena deklaraciu vsetkych MEMBERS, ktore dany TYPE obsahuje. DECLARATION NEOBSAHUJE BODIES jednotlivych MEMBERS.
   B. FUNCTION DECLARATION znamena deklaraciu FUNCTION PROTOTYPE. DECLARATION NEOBSAHUJE BODY danej FUNCTION.
28. C++ DEFINITION definuje obsahe TYPE, alebo FUNCTION.
   A. TYPE DEFINITION obsahuje BODIES jednotlivych MEMBERS ako su METHODS, OPERATORS, CONSTRUCTORS a DESTRUCTORS.
   B. FUNCTION DEFINITION obsahuje BODY danej FUNCTION.
29. V C++ je kazdy [.CPP] FILE SEPARATNYM COMPILATION UNIT. C++ COMPILER vykonava COMPILATION kazdeho [.CPP] FILE OSOBITNE do [.OBJ] FILES, ktore su nasledne pomocou LINKER spojene do EXECUTABLE FILE.
30. SOURCE CODE v C++ je spravidla tvoreny nasledujucimi typmi FILES.
   A. FILES [.H] obsahuju DECLARATIONS danych TYPES a FUNCTIONS.
   B. FILES [.CPP] obsahuju DEFINITIONS danych TYPES a FUNCTIONS.
31. NAMESPACES umoznuju rozclenit jednotlive casti CODE do pomenovanych celkov. Pre NAMESPACES platia nasledujuce fakty.
   A. NAMESPACES su definovane pomocou KEYWORD [namespace] za ktorym nasledujuce BLOCK [{}], ktory definuje co vsetko do daneho NAMESPACE patri.
   B. Ak je ELEMENT definovany v NAMESPACE v NAMESPACE pristupuje sa k nemu pomocou [OPERATOR::].
   C. NAMESPACES mozu byt VNARANE. To znaci, ze v jednom NAMESPACE sa moze nachadzat dalsi NAMESPACE.
   D. Spristupnenie obsahuje celeho NAMESPACE (vsetkych ELEMENTS v nom) sa robi pomocou KEYWORD [using namespace].
32. C++ EXCEPTIONS je mechanizmus umoznujuci oddelit vznik ERRORS od ich osetrenia. Pre C++ EXCEPTIONS platia nasledujuce fakty.
   A. C++ EXCEPTIONS pouzivaju SYNTAX [try {CODE_TO_CHECK} catch(EXCEPTION_TYPE_1 VALUE_1) {ERROR_HANDLING_1} ... catch(EXCEPTION_TYPE_N VALUE_N) {ERROR_HANDLING_N} catch(...) {ERROR_HANDLING_X}], kde CODE 'CODE_TO_CHECK', ktory moze generovat EXCEPTIONS, TYPE 'EXCEPTION_TYPE_1' az TYPE 'EXCEPTION_TYPE_N' reprezentuju TYPES EXCEPTIONS, VARIABLES 'VALUE_1' az 'VALUE_N' obsahuju VARIABLES reprezenujuce EXCEPTION OBJECTS a 'ERROR_HANDLING_1' az 'ERROR_HANDLING_N' a 'ERROR_HANDLING_X' su CODES, ktore sa vykonaju pri vzniku prislusnej EXCEPTION.
   B. C++ EXCEPTIONS sa hadzu pomocou KEYWORD [throw(VALUE);], kde 'VALUE' reprezentuje EXCEPTION OBJECT.
   C. Pri hodeni EXCEPTION sa vola ten CATCH BLOCK, ktoreho TYPE je zhodny ako TYPE hodeneho EXCEPTION OBJECT, alebo TYPE je BASE TYPE pre TYPE daneho EXCEPTION OBJECT.
   D. CATCH BLOCKS MUSIA byt usporiadane tak, ze CATCH BLOCK pre DERIVED EXCEPTION TYPE sa VZDY nachadza PRED CATCH BLOCK BASE EXCEPTION TYPE.
   E. CATCH BLOCK [...] reprezentuje univerzalny CATCH BLOCK, ktory sa vola ak EXCEPTION TYPE ziadneho CATCH BLOCK nevyhovoval hodenemu EXCEPTION OBJECT/
   F. Pri hodeni EXCEPTION sa spracovava VZDY iba 1 CATCH BLOCK.
   G. Ak ziaden CATCH BLOCK nezachyti EXCEPTION, EXCEPTION je hodena do CALLER FUNCTION.
   H. Ak EXCEPTION NIE JE PROGRAMOM ZACHYTENA, PROGRAM je TERMINATED.
   I. Pri prechode EXCEPTION do CALLER FUNCTIONS dochadza k STACK UNWIND s volanim DESTRUCTORS pre uvolnene OBJECTS v CALLED FUNCTIONS.
33. EXPRESSION [static_assert(CONDITION,MESSAGE)] prikazuje C++ COMPILER hodit COMPILATION MESSAGE 'MESSAGE', ak 'CONDITION' je FALSE. STATIC ASSERTS sa pouzivaju najme v METAPROGRAMMING pri definicii TEMPLATES.
//-------------------------------------------------------------------------------------------------------