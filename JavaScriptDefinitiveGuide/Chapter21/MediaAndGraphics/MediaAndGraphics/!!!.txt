//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje graficke renderovanie a prehravanie audia a videa v JavaScript.
2. HTML ELEMENT <img> umoznuje v JavaScript zmenit ATTRIBUTE 'src'. Jeho zmena sposobi okamzite stiahnute IMAGE zo SERVERA a jeho zobrazenie. Toto je mozne vyuzivat na jednoduchu zmeni IMAGES napriklad pri prechode MOUSE cez plochu IMAGE.
!!! 3. HTML ELEMENT <audio> (implementovany ako OBJECT HTMLAudioElement) umoznuje prehravat AUDIO FILES v BROWSERS bez nutnosti pouzit PLUGINS ako napriklad FLASH.
!!! 4. HTML ELEMENT <video> (implementovany ako OBJECT HTMLVideoElement) umoznuje prehravat VIDEO FILES v BROWSERS bez nutnosti pouzit PLUGINS ako napriklad FLASH.
!!!!! 5. HTML ELEMENT <audio> a <video> maju nasledujuce vlastnosti.
   A. MEDIA FILES je mozne zadat 2 SPOSOBMI. Bud sa pouzije PROPERTY 'src' umoznujuca zadefinovat 1 TYPE MEDIA FILE, alebo sa ako CONTENT <audio> a <video> HTML ELEMENTS vlozia <source> ELEMENTS. VYHODOU <source> ELEMENTS je, ze ich je mozne vlozit aj VIACERO, pricom kazdy moze obsahovat INY MEDIA TYPE. To je vyhodne ak by dany BROWSER dany MEDIA TYPE NEPODPOROVAL, ma moznost pouzit iny. Samozrejme jednotlive <source> ELEMENTS by mali obsahovat ten isty OBSAH iba zakodovany v inom formate.
   B. CONTENT <audio> a <video> HTML ELEMENT sa normalne NEZOBRAZUJE. Zobrazi sa IBA VTEDY ak <audio> a <video> HTML ELEMENT NEDOKAZE PREHRAT zadany MEDIA FILE. Potom CONTENT moze obsahovat upozornujucu spravu, alebo moze pouzit alternativnu technologiu na RENDERING, ako je napriklad FLASH.
   C. ATTRIBUTE 'controls' ak je nastaveny na TRUE, zobrazi ovladaci panel <audio> alebo <video> HTML ELEMENTS. Ak 'controls' je na FALSE, tak <audio> NEZOBRAZUJE VOBEC NIC na WEB PAGE, iba prehra AUDIO FILE.
   D. METHOD canPlayType() vracia PRAVDEPODOBNU informaciu ci BROWSER je schopny dany MIME TYPE prehrat.
   E. METHOD play() SPUSTA prehravania MEDIA FILE.
   F. METHOD pause() ZASTAVUJE prehravania MEDIA FILE.
   G. PROPERTY 'currentTime' umoznuje vykonat SEEKING.
   H. PROPERTY 'playbackRate' urcuje RYCHLOST PREHRAVANIA, kde 1 znamena ormalnu rychlost, vyssie hodnoty ako 1, vyssiu rychlost, hodnotu <0,1> nizsiu rychlost a zaporne hodnoty SPATNE PREHRAVANIE.
   I. PROPERTY 'volume' urcuje hlasitost v intervale <0,1>.
   J. PROPERTY 'muted' urcuje ci bude zvuk MUTED.
   K. PROPERTY 'defaultPlaybackRate' urcuje DEFAULT PLAYBACK RATE, ktorou sa zacina PLAYBACK.
   L. ATTRIBUTE 'preload' urcuje ci sa ma vykonat vykonat nejaky PRELOAD a ak ano, tak ci sa ma vykonat PRELOAD IBA METADAT, alebo celeho MEDIA FILE.
   M. ATTRIBUTE 'loop' umoznuje nastavit opakovany PLAYBACK.
   N. ATTRIBUTE 'autoplay' AUTOMATICKY spusta PLAYBACK.
   O. PROPERTY 'duration' urcuje dlzku MEDIA FILE, alebo 'Infinite' pri STREAMS.
   P. PROPERTY 'buffered' vracia TimeRanges OBJECT, ktory obsahuje COLLECTION RANGES s casmi MEDIA FILE, ktore su uz nacitane a ulozene v BUFFER.
   Q. PROPERTY 'played' vracia TimeRanges OBJECT, ktory obsahuje COLLECTION RANGES s casmi MEDIA FILE, ktore uz boli NACITANE.
   R. PROPERTY 'seekable' vracia TimeRanges OBJECT, ktory obsahuje COLLECTION RANGES s casmi MEDIA FILE, ktore su SEEKABLE.
   S. PROPERTY 'readyState' je ENUM hodnota udavajuca aka LOGICKA cast MEDIA FILE (METADATA, cely FILE) bola stiahnuta z NETWORK.
   T. PROPERTY 'networkState' je ENUM hodnota informujuca ci v momentalne sa stahuju nejake data z NETWORK.
   U. PROPERTY 'error' je ENUM hodnota udavajuca hodnotu ERROR.
6. OBJECTS HTMLAudioElement a HTMLVideoElement definuju nasledujuce EVENTS.
   A. EVENT 'loadstart' je volany pri zaciatku nacitavania dat z NETWORK.
   B. EVENT 'progress' je volany pravidelne pri citani dat z NETWORK v periodicite niekolkych sekund.
   C. EVENT 'loadmetadata' je volany ak boli nacitane METADATA MEDIA FILE ako je jeho dlzkaci dimenzie VIDEA.
   D. EVENT 'loaddata' je volany ak boli data MEDIA FILE nacitane PRVY KRAT.
   E. EVENT 'canplay' je volany ak bolo nacitanych dost dat, aby mohol zacat PLAYBACK.
   F. EVENT 'canplaythrough' je volany ak bolo nacitanych dost dat, aby prebehol CELY PLAYBACK PRAVDEPODOBNE bez BUFFERINGU.
   G. EVENT 'suspended' je volany ak bolo nacitanych dost dat, a citanie dat z NETWORK moze byt docasne pozastavene.
   H. EVENT 'stalled' je volany ak z NETWORK NEPRICHADZAJU dalsie data, aj ked su vyzadovane.
   I. EVENT 'play' je volany pri volani METHOD play(), alebo spusteni AUTOPLAY.
   J. EVENT 'waiting' je volany ak pocas PLAYBACK v BUFFERI NIE JE DOST DAT a caka sa na docitanie dalsich.
   K. EVENT 'playing' je volany ak sa MEDIA FILE zacal prehravat.
   L. EVENT 'timeupdate' je PERIODOCKY volany mnohokrat za sekundu s informaciou o PLAYBACK TIME, ktory sa prave prehrava.
   M. EVENT 'pause' je volany ak doslo k POZASTAVENIU PLAYBACK.
   N. EVENT 'seeking' je volany ak doslo k SEEK na miesto v MEDIA FILE, ktore este nebolo BUFFERED a preto PLAYBACK musel byt docasne POZASTAVENY.
   O. EVENT 'seeked' je volany ak doslo k UKONCENIU SEEKING.
   P. EVENT 'ended' je volany ak doslo k UKONCENIU PLAYBACK.
   Q. EVENT 'durationChanged' je volany ak doslo k zmene PROPERTY 'duration'.
   R. EVENT 'volumeChanged' je volany ak doslo k zmene PROPERTY 'volume', alebo 'muted'.
   S. EVENT 'rateChanged' je volany ak doslo k zmene PROPERTY 'playbackRate', alebo 'defaultPlaybackRate'.
   T. EVENT 'abort' je volany ak doslo zastaveniu PLAYBACK zo strany pouzivatela.
   U. EVENT 'error' je volany ak doslo k nejakemu ERROR, ktory znemoznuje PLAYBACK.
   V. EVENT 'emptied' je volany ak ERROR, alebo ABORT sposobil zastavenie nacitavania dat z NETWORK.
!!! 7. JavaScript definuje Audio CONSTUCTOR pomocou, ktoreho je mozne vytvorit instanciu Audio OBJECT a prehravat FILE.
!!! 8. JavaScript NEDEFINUJE Video CONSTUCTOR.
!!!!! 9. HTML ELEMENT <video> sa NEDA TESTOVAT na WEB SERVERI asociovanom s Visual Studio pretoze NIE JE MOZNE nastavit, aby pre MEDIA FILES ako napriklad MP4 vratilo ocakavany MIME TYPE 'video/mp4'. Na testovanie je nutne pouzit nasledujuci postup.
   A. V ISS nakonfigurovat novy Virtual Directory.
   B. Do Virtual Directory nakopirovat vsetky testovacie subory.
   !!! C. NASTAVIT MIME TYPE pre dany VIDEO FILE. Napriklad pre MP4 je potrebne nastavit MIME TYPE na 'video/mp4'.
   D. Teraz je mozne sa z BROWSER pripojit k ISS a VIDEO by sa MALO PREHRAVAT.
10. SCALABLE VECTOR GRAPHICS (SVG) je XML GRAMATIKA, ktora umoznuje definovat VEKTOROVU GRAFIKU v HTML. SVG renderuje grafiku PRIDAVANIM SVG ELEMENTS do DOM.
!!! 11. IE9 podporuje HTML ELEMENT <svg> do ktoreho je mozne vkladat SVG ELEMENTS.
!!!!! 12. IE9 podporuje .SVG FILES. V tomto pripade vsak IIS MUSI pre .SVG FILES vracia SPRAVNY MIME TYPE [image/svg+xml]. Postup je IDENTICKY (uvedeny vyssie) ako pre VIDEO MIME TYPES.
!!! 13. SVG podporuje DOM MODEL a teda SVG grafiku je mozne vytvarani SVG ELEMENTS generovat pomocou JavaScript.
!!!!! 14. Pri vytvarani SVG ELEMENTS v JavaScript je potrebne pouzivat METHOD Document.createElementNS() NAMIESTO createElement().
15. HTML ELEMENT <canvas> umoznuje volanim METHODS v JavaScript vykonavat rendering grafiky.
!!! 16. Medzi SVG a <canvas> existuje ZASADNY ROZDIEL v tom, ze SVG renderuje grafiku PRIDAVANIM SVG ELEMENTS do DOM modelu, zatial co <canvas> renderuje grafiku volanim METHODS.
!!! 17. HTML ELEMENT <canvas> obsahuje METHOD getContext(). Tato METHOD prijma STRING urcujuci aky CONTEXT chcem ziskat. Hodnota '2d' vracia OBJECT typu CanvasRenderingContext2D. V sucastnosti prebieha i implementacia 3D CONTEXT na platforme OpenGL.
18. Zakladne vlastnosti HTML ELEMENT <canvas>.
   A. Graficke utvary su vytvarane kreslenim a vyplnovanim PATHS.
   B. PATH je tvorena 1-N SUBPATHS. PATH sa vytvara pomocou METHOD CanvasRenderingContext2D.beginPath().
   C. SUBPATH je tvorena 1-N POINTS, ktore su spojene pomocou LINES, alebo CURVES. PATH sa vytvara pomocou METHOD CanvasRenderingContext2D.moveTo().
   D. Vykreslovanie STROKES sa robi pomocou METHOD CanvasRenderingContext2D.stroke().
   E. Vyplnanie ploch sa robi pomocou METHOD CanvasRenderingContext2D.fill(). Ak je SUBPATH NEUZAVRETA, tak ju METHOD CanvasRenderingContext2D.fill() AUTOMATICKY UZAVRIE spojenim prveho a posledneho POINT a oblast vyplni. Uzavriet PATH je mozne aj pomocou METHOD CanvasRenderingContext2D.closePath(), pricom vizualne su vysledky LEPSIE ako ked sa manualne spoji prvy a posledny bod.
   !!! F. METHODS CanvasRenderingContext2D.stroke() a CanvasRenderingContext2D.fill() sa aplikuju vzdy na POSLEDNU PATH, ktora sa nakreslila.
   !!! G. Pri renderovani 2 SUBPATHS, ak jedna SUBPATH je obsiahnuta v druhej tak vnutorny region vyznaceny VNUTORNOU SUBPATH sa vykresli IBA VTEDY, ak su OBE SUBPATHS renderovane ZHODNOU ORIENTACIOU (CLOCKWISE, alebo COUNTERCLOCKWISE). Ak su SUBPATHS vykreslene s OPACNOU ORIENTACIOU (napriklad VONKAJSIA je CLOCKWISE a VNUTORNA COUNTERCLOCKWISE), tak sa VNUTORNY REGION NEVYKRESLI a ostane PRAZDNY.
   !!! H. Graficke ATTRIBUTES ako napriklad velkost LINE, FONT, STROKE COLOR ci FILL COLOR su sucastou GRAPHICS STATE. METHOD CanvasRenderingContext2D pri renderingu vyuzivaju GRAPHICS STATE na RENDEROVANIE grafiky. GRAPHICS STATE sa da ulozit do STACK volanim METHOD CanvasRenderingContext2D.save() a vybrat zo STACK volanim METHOD CanvasRenderingContext2D.restore().
   I. PROPERTIES Canvas.width a Canvas.height urcuje sirku a vysku CANVAS. Velkost je urcena v CSS PIXELS, ktore su zvycajne (ale nie vzdy) mapovane na HW PIXELS.
   J. PROPERTIES 'strokeFill' a 'fillStyle' okrem toho, ze mozu byt nastavene na COLOR, je do nich mozne priradit aj OBJECTS CanvasPattern a CanvasGradient na vytvaranie PATTERNS (FILL sa robim nahradenim CUSTOM IMAGE) a GRADIENTS. COLORS mozu byt definovane pomocou textovych konstant, alebo ciselne v RGB, RGBA, HSL alebo HSLA.
   K. Pomocou PROPERTY 'globalCompositeOperation' je ako sa budu PIXELS pri prekreslovani RENDEROVAT.
!!! 19. GRADIENTS sa definuju v nasledujucich krokoch.
   1. Pomocou METHODS CanvasRenderingContext2D.createLinearGradient(), alebo CanvasRenderingContext2D.createRadialGradient() sa vytvori OBJECT CanvasGradient.
   2. Pomocou METHOD CanvasGradient.addColorStop() sa prida COLOR, ktora sa ma INTERPOLOVAT v definovanom bode. Hodnota bodu sa udava v intervale <0,1>.
20. METHOD Canvas.toDataURL() umoznuje ulozit obsah CANVAS do IMAGE, ktoreho URL je vratene ako RETURN VALUE. Ako OPTIONAL PARAMETER je mozne definovat MIME TYPE urcujuci TYPE vytvoreneho IMAGE.
//-------------------------------------------------------------------------------------------------------
Zoznam METHODS OBJECT CanvasRenderingContext2D.

1. METHOD CanvasRenderingContext2D.beginPath() zacina DEFINICIU PATH.
2. METHOD CanvasRenderingContext2D.moveTo() definuje zaciatocny bod SUBPATH.
3. METHOD CanvasRenderingContext2D.closePath() uzatvara SUBPATH spojenim PRVEHO a POSLEDNEHO POINT. Pouzitie tejto METHOD ma LEPSI VIZUALNY EFEKT ako spojenie PRVEHO a POSLEDNEHO POINT pomocou METHOD CanvasRenderingContext2D.lineTo().
4. METHOD CanvasRenderingContext2D.stroke() vykresluje STROKE (ciaru) na POSLEDNEJ definovanej PATH.
5. METHOD CanvasRenderingContext2D.fill() vyplnuje POSLEDNU definovanu PATH. Ak PATH NIE JE UZAVRETA, tak ju AUTOMATICKY UZAVRIE spojenim PRVEHO a POSLEDNEHO POINT.
6. METHOD CanvasRenderingContext2D.save() uklada GRAPHICS STATE (obsahuje napriklad LINE, FONT, STROKE COLOR ci FILL COLOR) do STACK.
7. METHOD CanvasRenderingContext2D.restore() vybera GRAPHICS STATE (obsahuje napriklad LINE, FONT, STROKE COLOR ci FILL COLOR) zo STACK.
8. METHOD CanvasRenderingContext2D.setTransform() aplikuje TRANSFORMATION MATRIX nastaviac NOVU TRANSFORMATION MATIX, NEZAVISLE na aktualnej hodnote TRANSFORMATION MATIX.
9. METHOD CanvasRenderingContext2D.transform() aplikuje TRANSFORMATION MATRIX modifikujuc aktualnu TRANSFORMATION MATIX.
10. METHOD CanvasRenderingContext2D.translate() aplikuje TRANSLATION na aktualnu TRANSFORMATION MATIX.
11. METHOD CanvasRenderingContext2D.rotate() aplikuje ROTATION na aktualnu TRANSFORMATION MATIX.
12. METHOD CanvasRenderingContext2D.scale() aplikuje SCALING na aktualnu TRANSFORMATION MATIX.
13. METHOD CanvasRenderingContext2D.arc() renderuje ARC. METHOD ma 6 PARAMETERS.
14. METHOD CanvasRenderingContext2D.arcTo() renderuje ARC. METHOD ma 5 PARAMETERS.
15. METHOD CanvasRenderingContext2D.bezierCurveTo() renderuje CUBIC BEZIER CURVE.
16. METHOD CanvasRenderingContext2D.quadraticCurveTo() renderuje QUADRATIC BEZIER CURVE.
17. METHOD CanvasRenderingContext2D.rect() prida RECTANGLE do aktualnej SUBPATH.
18. METHOD CanvasRenderingContext2D.fillRect() vykresli RECTANGLE aktualnymi farbami.
19. METHOD CanvasRenderingContext2D.clearRect() zmaze plochu, ktoru pokryva RECTANGLE.
20. METHOD CanvasRenderingContext2D.strokeRect() vykrasli STROKE okolo RECTANGLE.
21. METHOD CanvasRenderingContext2D.createPattern() vytvara OBJECT CanvasPattern pomocou, ktoreho je mozne definovat IMAGE, ktorym sa bude realizovat operacia FILL.
22. METHOD CanvasRenderingContext2D.createLinearGradient() vytvara OBJECT CanvasGradient pomocou, ktoreho je mozne definovat LINEAR GRADIENT, ktorym sa bude realizovat operacia FILL.
23. METHOD CanvasRenderingContext2D.createRadialGradient() vytvara OBJECT CanvasGradient pomocou, ktoreho je mozne definovat RADIAL GRADIENT, ktorym sa bude realizovat operacia FILL.
24. METHOD CanvasRenderingContext2D.fillText() vykresli PLNY TEXT na zadanych suradniciach.
25. METHOD CanvasRenderingContext2D.strokeText() vykresli OBRYSY TEXTU na zadanych suradniciach.
26. METHOD CanvasRenderingContext2D.measureText() vracia OBJECT TextMetrics, ktory obsahuje PROPERTY 'width' udavajucu dlzku TEXTU.
27. METHOD CanvasRenderingContext2D.clip() vytvara z aktualnej PATH CLIPING REGION. Mimo CLIPING REGION sa nic nevykresluje.
28. METHOD CanvasRenderingContext2D.drawImage() umoznuje vykreslit IMAGE do <canvas>. Ako 1. PARAMETER je IMAGE SOURCE co moze byt Image OBJECT, <img> HTML ELEMENT, <source> HTML ELEMENT, alebo <video> HTML ELEMENT. Dalsie PARAMETERS urcuju SOURCE a DESTINATION RECTANGLE, z ktoreho a do ktoreho sa bude IMAGE renderovat.
29. METHOD CanvasRenderingContext2D.createImageData() vytvara RAW RGBA BITMAP (ImageData OBJECT), ktoru je mozne programovo renderovat.
30. METHOD CanvasRenderingContext2D.getImageData() vracia RAW RGBA BITMAP (ImageData OBJECT) z CANVAS.
31. METHOD CanvasRenderingContext2D.putImageData() zapisuje RAW RGBA BITMAP (ImageData OBJECT) do CANVAS.
32. METHOD CanvasRenderingContext2D.inPointInPath() vracia informaciu ci dany POINT je na ACTUAL PATH.
//-------------------------------------------------------------------------------------------------------
Zoznam PROPERTIES OBJECT CanvasRenderingContext2D.

1. PROPERTY CanvasRenderingContext2D.strokeStyle urcuje farbu STROKE.
2. PROPERTY CanvasRenderingContext2D.fillStyle urcuje farbu FILL.
3. PROPERTY CanvasRenderingContext2D.font urcuje CSS FONT pre TEXT.
4. PROPERTY CanvasRenderingContext2D.globalAlpha urcuje uroven TRANSPARENCY.
5. PROPERTY CanvasRenderingContext2D.globalCompositeOperation urcuje sposob ako sa budu kombinovat PIXELS pri vzajomnom prekreslovani.
6. PROPERTY CanvasRenderingContext2D.lineCap urcuje ako sa bude koniec LINE renderovat.
7. PROPERTY CanvasRenderingContext2D.lineCap urcuje ako sa budu LINES spajat.
8. PROPERTY CanvasRenderingContext2D.lineWidth urcuje sirku LINES. Hodnota moze byt aj <1, kedy sa LINES stavaju PRIESVITNE.
9. PROPERTY CanvasRenderingContext2D.miterLimit uurcuje maximalny pocet MITER PIXELS.
10. PROPERTY CanvasRenderingContext2D.textAlign urcuje HORIZONTALNE zarovnanie.
11. PROPERTY CanvasRenderingContext2D.textBaseLine urcuje VERTIKALNE zarovnanie.
12. PROPERTY CanvasRenderingContext2D.shadowBlurn urcuje BLURING daneho SHADOW.
13. PROPERTY CanvasRenderingContext2D.shadowColor urcuje COLOR daneho SHADOW.
14. PROPERTY CanvasRenderingContext2D.shadowOffsetX urcuje HORIZONTALNY OFFSET daneho SHADOW.
15. PROPERTY CanvasRenderingContext2D.shadowOffsetY urcuje VERTIKALNY OFFSET daneho SHADOW.
//-------------------------------------------------------------------------------------------------------