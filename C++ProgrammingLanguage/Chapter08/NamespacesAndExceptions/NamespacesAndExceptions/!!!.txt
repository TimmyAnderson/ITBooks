//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie NAMESPACES a EXCEPTIONS.
2. NAMESPACE definuje SCOPE v ramci ktoreho je mozne definovat VARIABLES, CLASSES, FUNCTIONS, ktore budu mat VLASTNY SCOPE.
3. Mimo NAMESPACE sa na konstrukt definovany v NAMESPACE odkazuje pomocou operatora '::'. Meno konstruktu v ktorom je pouzity operator '::' sa nazvyva PLNE KVALIFIKOVANE MENO.
!!! 3. Ak definujem nejaky konstrukt (napriklad FUNCTION) v NAMESPACE, tak jeho implementaciu je mozne definovat MIMO NAMESPACE pouzitim operatora '::'.
!!!!! 4. Pomocou operatora '::' NIE JE MOZNE definovat do NAMESPACE NOVY konstrukt (napriklad FUNCTION), ak predtym NEBOL DEFINOVANY aj PRIAMO v NAMESPACE. Pomocou operatora '::' je MIMO NAMESPACE mozne definovat iba konstrukty, ktore su v NAMESPACE uz DEKLAROVANE.
!!! 5. KEYWORD 'using' umoznuje v SCOPE v ktorom je DEKLAROVANE (CLASS, FUNCTION, MODULE - CPP file) pouzit KONSTRUKT z NAMESPACE BEZ PLNE KVALIFIKOVANEHO MENA obsahujuceho operator '::'.
!!!!! 6. KEYWORD 'using' je mozne pouzit v 2 ODLISNYCH VYZNAMOCH.
   A. USING DECLARATION - Syntax [using NamespaceName::ConstructName], kde 'ConstructName' je lubovolny KONSTRUKT umoznuje pouzit v SCOPE kde je 'using' deklarovany (FUNCTION, CLASS, MODULE) pouzit 'ConstructName' BEZ nutnosti pouzit operator '::'.
   B. USING DIRECTIVE - Syntax [using namespace NamespaceName] umoznuje pouzit LUBOVOLNY KONSTRUKT z NAMESPACE 'NamespaceName' pouzit v SCOPE kde je 'using' deklarovany (FUNCTION, CLASS, MODULE) BEZ nutnosti pouzit operator '::'.
!!! 7. UNNAMED NAMESPACES su NAMESPACES, ktore nemaju meno. C++ pre ne generuje SKRYTE MENO, ktore je vzdy UNIKATNE pre 1 MODULE (CPP subor). Zaroven do daneho MODULE generuje i prikaz 'using' s tymto UNIKATNYM MENOM, takze v RAMCI MODULU su VSETKY KONSTRUKTY UNNAMED NAMESPACE PRISTUPNE, zatial co z INYCH MODULE NIE SU PRISTUPNE VOBEC.
8. Pomocou KEYWORD 'namespace' je mozne definovat ALIAS na NAMESPACE. ALIAS potom je mozne pouzivat namiesto POVODNEHO mena NAMESPACE.
9. NAMESPACES je mozne do seba vnarat.
!!! 10. Ak NAMESPACE 'MyNamespace' obsahuje PRETAZENE funkcie MyFunction(), tak zapis [namespace MyNamespace::MyFunction] IMPORTUJE do SCOPE deklaracie VSETKY PRETAZENYCH VERZII funkcii MyFunction().
11. Ten ISTY NAMESPACE je mozne deklarovat v kode i na viacerkych miestach a kompilator si vsetky vyskyty daneho NAMESPACE spoji do jedneho NAMESPACE.
12. Pomocou KEYWORDS 'try' a 'catch' je v C++ mozne realizovat EXCEPTIONS.
13. EXCEPTION mozu byt reprezentovane LUBOVOLNYM TYPOM, vratane PRIMITIVNYCH TYPOV. V realnom pouziti EXCEPTIONS je vyhodne pre KAZDY TYP EXCEPTION definovat VLASTNU TRIEDU.
!!!!! 14. Jedna z BIZARNYCH vlastnosti C++ je, ze ak mam v NAMESPACE CLASS 'XXX' a zaroven i metodu, ktora ma ASPON 1 PARAMETER typu 'XXX', tak tato GLOBALNA FUNKCIA, AJ KED JE DEFINOVANA v NAMESPACE, tak je VIDITELNA i BEZ NUTNOSTI ZADAT PLNE KVALIFIKOVANE MENO. Toto je vlastnost C++, co bolo potvrdene i na fore MSDN.
//-------------------------------------------------------------------------------------------------------