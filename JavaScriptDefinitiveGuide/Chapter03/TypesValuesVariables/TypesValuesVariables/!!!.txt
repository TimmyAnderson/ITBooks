//-------------------------------------------------------------------------------------------------------
1. Soulution demonstruje pouzitie TYPES, VALUES a VARIABLES v JavaScript.
2. JavaScript rozlisuje 2 rozne typy.
   A. PRIMITIVNE TYPES su reprezentovane CISLAMI, BOOLEANS, STRINGS a a konstantami 'null' a 'undefined'.
   B. OBJECT TYPES pozostavaju z UNORDERED COLLECTION PROPERTIES (je to obdoba FIELDS v C++), kde kazda PROPERTY ma NAME a VALUE. ARRAY ci FUNCTION su tiez OBJECT TYPES.
!!!!! 3. ARRAY je v JavaScript TIEZ OBJECT TYPE, ktory vsak pozostava z ORDERED COLLECTION PROPERTIES, kde NAMES tychto PROPERTIES je ARRAY INDEX.
!!!!! 4. FUNCTION je JavaScript TIEZ OBJECT TYPE, ktory z NAME a CODE danej FUNCTION. V JavaScript je v FUNCTION, kedze je OBJECT, mozne pracovat ako s inymi OBJECTS.
!!!!! 5. JavaScript obsahuje GARBAGE COLLECTOR.
!!! 6. Zatial co OBJECTS a ARRAYS su MUTABLE, tak STRINGS su IMMUTABLE.
!!! 7. JavaScript vykonava mnozstvo KONVERZII AUTOMATICKY. Napriklad konverzia INT na STRING sa vykonava AUTOMATICKY.
!!! 8. VARIABLES su podobne ako v inych DYNAMIC LANGUAGES UNTYPED, takze priradenim novej hodnoty do VARIABLE, ktora ma INY TYPE ako povodna sa MENI TYPE danej VARIABLE.
!!!!! 9. JavaScript NEPOZNA INT hodnoty. VSETKY cisla su reprezentovat ako DOUBLE hodnoty.
!!! 10. JavaScript v STANDARDE ECMAScript NEPODPORUJE OCTAL NUMBERS. Niektore implementacie ich vsak PODPORUJU. Vysledkom toho je, ze ak zacinam cislo znakom '0', tak sa moze stat, ze NIEKTORE implementacie JavaScript toto cislo budu povazovat sa DECIMAL a niektore za OCTAL cislo.
!!!!! 11. JScript PODPORUJE OCTAL NUMBERS.
12. CLASS Math obsahuje skupinu zakladnych matematickych operacii ako su mocniny, odmocniny, trigonometricke funkcie, min, max, random ci logaritmus.
!!! 13. JavaScript NEHODI EXCEPTION pri UNDERFLOW, OVERFLOW ci pri DIVISION by ZERO. Namiesto toho vracia specialne hodnoty 'Infinity', 'Infinity' a 'NaN'.
14. CLASS Number obsahuje KONSTANTY ako POSITIVE_INFINITY, NEGATIVE_INFINITY, MAX_VALUE, MIN_VALUE ci NaN. Obsahuje i dalsie MEMBERS.
   A. Metoda toFixed() konvertuje FLOAT HODNOTU, tak aby mala 'N' CISLIC sa DESATINNOU CIARKOU.
   B. Metody toExponention() konvertuje FLOAT HODNOTU do EXPONENTIAL tvaru.
   C. Metoda toPrecision() konvertuje FLOAT HODNOTU, tak aby mala DOHROMADY 'N' CISLIC.
   D. Metoda toString() umoznuje vypisat hodnotu i v inej ciselnej sustave.
!!! 15. Pre INTINITY, MIN, MAX ci NaN hodnoty JavaScript obsahuje i PREMENNE. V ECMAScript v3 vsak tieto hodnoty boli WRITABLE, co sa nastastie vo verzii 5 zmenilo a su uz iba READ-ONLY.
!!!!! 16. Hodnota NaN sa NEDA KOREKTNE POROVNAT cez OPERATOR==. Ak chcem zistit ci cislo neobsahuje hodnotu NaN je treba pouzit [Value!=Value], ktora je TRUE IBA ak je [Value==NaN].
17. CLASS Date umoznuje pracovat s DATE a TIME.
   !!! A. CONSTRUCTOR nastavuje DATE a TIME, pricom MONTH je v INTERVALE <0,11>.
   B. OPERATOR- vracia rozdiel medzi 2 Date v MILISEKUNDACH.
   C. Metody getXXX() vracaju prislusnu cast DATE a TIME, kde XXX je meno PROPERTY, ktoru chcem ziskat.
   D. Metody setXXX() nastavuju prislusnu cast DATE a TIME, kde XXX je meno PROPERTY, ktoru chcem nastavit.
   E. Metody getUTCXXX() vracaju prislusnu cast DATE a TIME v UTC, kde XXX je meno PROPERTY, ktoru chcem ziskat.
   F. Metody setUTCXXX() nastavuju prislusnu cast DATE a TIME v UTC, kde XXX je meno PROPERTY, ktoru chcem nastavit.
18. CLASS String reprezentuje IMMUTABLE STRING.
   A. OPERATOR+ spaja 2 STRINGS.
   !!! B. OPERATOR[] vracia STRING obsahujuci CHAR na danej pozicii. STRINGS su indexovane od 0.
   C. PROPERTY length vracia pocet CHARS v STRING.
   D. Metody ako toLowerCase() ci toUpperCase() vracaju vzdy NOVE VERZIE String OBJEKTOV, kedze String je IMMUTABLE.
!!! 19. JavaScript NEPODPORUJE typ CHAR. CHARS su STRINGS s dlzkou 1.
20. STRINGS su v JavaScript reprezentovane ako COLLECTION UNICODE-16 CHARS.
21. STRING LITERALS su uvazane bud ako ["String."], alebo ['String.']. JavaScript umoznuje vkladat medzi [""] znak ['] a medzi [''] znak ["].
22. STRING podpoduju ESCAPE SEQUENCES pomocou syntaxe [\X], kde X je ESCAPE SEQUENCE CHAR.
23. CLASS RegExp reprezentuje REGULAR EXPRESSION.
24. JavaScript obsahuje konstanty 'true' a 'false' na reprezentaciu BOOLEAN hodnot.
!!! 25. JavaScript AUTOMATICKY KONVERTUJE hodnoty inych typov na BOOLEAN. Napriklad ak je OBJECT NOT NULL, tak je konvertovany na TRUE. Ak je NULL, tak je konverovany na FALSE.
26. JavaScript ma na reprezentaciu NULL hodnot 2 OBJEKTY.
   A. Objekt 'null'. Je analogicky NULL hodnotam z C++ a C#.
   B. Objekt 'undefined'. Tento objekt vracia NEINICIALIZOVANA PREMENNA ako FUNCTION, ktore NEMA RETURN VALUE.
!!! 27. Pri porovnavani hodnot 'null' a 'undefined' vracia OPERATOR== TRUE. JavaScript ich teda povazuje za IDENTICKE HODNOTY.
28. JavaScript obsahuje GLOBAL objekt, ktory obsahuje mnozstvo PROPERTIES a METHODS. Objekt GLOBAL sa vytvara vzdy pri SPUSTENI HTML PAGE a hodnoty jeho PROPERTIES su nastavene na konstantne hodnoty. Obsahuje napriklad aj tieto MEMBERS.
   A. PROPERTIES 'undefined', 'Infinity' ci 'NaN' su od ECMAScript v5 KONSTANTAMI. Vo verzii 3 NEBOLI a tak bolo mozne zmenit hodnoty tychto konstant.
   B. METHODS inNaN(), parseInt() ci eval().
   !!! C. CLASSES (CONSTRUCTORS pre OBJEKTY) Date, RegExp, String a Object.
   D. OBJEKTY Math a JSON.
   E. Metody parseInt() a parseFloat() vykonavajuce PARSING INT a FLOAT CISEL. Ak retazec NEOBSAHUJE CISLO, je vratena hodnota 'NaN'.
!!!!! 29. V JavaScript CISLA, BOOLEANS a STRINGS su DATA TYPES, ktore vsak NIE SU OBJEKTMI. Avsak JavaScript pri pouzivani PROPERTIES a METHODS nad CISLAMI, BOOLEANS a STRINGS vytvori okolo nich WRAPPER OBJEKTY Number, Boolean a String. Tieto WRAPPER objekty obsahuju PROPERTIES a METHODS pre pracu s danymi DATA TYPES. WRAPPER OBJEKTY su VZDY iba TEMPORARNE a ich zivnotnost je IBA na vykonanie BINDING na prislusnu PROPERTY ci METHOD. Po vykonani BINDING su tieto WRAPPER OBJEKTY OKAMZITE LIKVIDOVANE.
30. JavaScript rozlisuje 2 typy VARIABLES.
   A. PRIMITIVE VARIABLES obsahuju PRIMITIVE DATA TYPES. Sem patria NUMBERS, STRINGS, BOOLEANS, 'null' a 'undefined'. Tieto hodnoty su VZDY porovnavane BY-VALUE.
   B. OBJECT VARIABLES obsahuju CUSTOM CLASS DATA TYPES a ARRAYS. Tieto DATA TYPES su porovnavane BY-REFERENCE.
!!! 31. VSETKY PRIMITIVNE TYPES VRATANE typu STRING su IMMUTABLE.
32. JavaScript AUTOMATICKY vykonava KONVERZIE medzi PRIMITIVE TYPES.
   A. BOOLEAN pri konverzii na NUMBER vracia 0, alebo 1.
   B. STRING pri konverzii na NUMBER vykona PARSING STRING HODNOTY. Ak sa PODARI, tak vracia parsovany NUMBER. Ak NIE, vracia hodnotu 'NaN'.
   C. Kazdy PRIMITIVE TYPE sa konvertuje na STRING.
33. Pri pouziti OPERATOR== JavaScript vykonavaju IMPLICITNE KONVERZIE nad PRIMITIVNYMI TYPMI, takze napriklad vyraz ["100"==100] vracia TRUE.
34. Pri pouzivani STRINGS, NUMBERS ci BOOLEANS sa IMPLICITNE KONVERZIE vykonavaju i pri volani OPERATOR+ ci OPERATOR!.
!!! 35. Okrem IMPLICITNEJ KONVERZIE umoznuje JavaScript aj EXPLICITNU KONVERZIU pomocou syntaxe [NewValue=ClassName(OldValue)]. Napriklad konverzia NUMBER na STRING ma syntax [StringValue=Number("100")].
36. JavaScript obsahuje 2 KONVERZNE METODY, ktore JavaScript vola pri nutnosti konverzie hodnot.
   A. Metoda toString() vykonava konverziu PRIMITIVE i OBJECT typu na STRING. Tuto metodu maju pretazene PRIMITIVNE TYPE i STANDARDNE TYPE. Napriklad ARRAY vracia zoznam vsetkych ITEMS v ARRAY. DATE vracia reprezentaciu datumu a casu. FUNCTION vracia TEXT FUNCTION. Metoda toString() vsak NEMUSI VRACAT STRING, aj ked je to obvykle, ze ho vracia.
   B. Metoda valueOf() vykonava konverziu z OBJECT TYPES na PRIMITIVE TYPES. Zvycajne tato konverzia pre OBJECT TYPES NEMA ZMYSEL a tie OBJECTS, pre ktore NEMA KONVERZIA ZMYSEL vracia samotny objekt. WRAPPER objekty okolo NUMBERS, STRINGS a BOOLEANS vracia danu hodnotu ako PRIMITIVNY TYP.
37. VARIABLES sa deklaruju pomocou KEYWORD 'var'. VARIABLES je mozne aj inicializovat. Ak NIE SU inicializovane, tak maju hodnotu 'undefined'.
!!! 38. V JavaScript moze byt ROVNAKO POMENOVANA VARIABLE DEKLAROVANA pomocou 'var' v TOM ISTOM SCOPE i VIAC KRAT. Opakovane deklaracie su IGNOROVANE a ak deklaracia obssahuje i INICIALIZACIU, tak je tato povazovana za bezne PRIRADENIE.
!!!!! 39. JavaScript umoznuje v NON-STRICT mode pouzit i VARIABLES, ktore su NEDEKLAROVANE. Z takychto VARIABLES JavaScript na pozadi vytvori PROPERTIES GLOBAL OBJECT. V STRICT mode su taketo 'VARIABLES' ZAKAZANE.
!!! 40. Ak vo INNER SCOPE deklarujem VARIABLE ROVNAKO POMENOVANU ako v OUTER SCOPE, tak VARIABLE z INNER SCOPE PREKRYJE v tomto SCOPE VARIABLE definovanu v OUTER SCOPE. Samozrejme po ukonceni daneho SCOPE je znova viditelna VARIIABLE z OUTER SCOPE.
!!! 41. JavaScript podporuje CLOSURES. Kazda FUNCTION vidi VSETKY VARIABLES deklarovane v OUTSIDE SCOPE.
!!!!! 42. V JavaScript existuje SCOPE JEDINE na urovni FUNCTIONS. Ak V RAMCI FUNCTION deklarujem VARIABLES v ROZLICNYCH SCOPES (napriklad v 'if' ci 'for'), tak VARIABLES v tychto INNER SCOPES su v SKUTOCNOSTI VIDITELNE v CELEJ FUNCTION a to dokonca este i pred realnym DEKLAROVANIM VARIABLE.
!!!!! 43. Ak sa v JavaScript deklaruje VARIABLE, ktora je v GLOBAL SCOPE, tak sa AUTOMATICKY stava PROPERTY GLOBAL OBJECT. Rozlisuju sa pritom 2 typy GLOBAL VARIABLES.
   A. VARIABLE deklarovana cez 'var'. Tato VARIABLE je zaradena ako PROPERTY do GLOBAL OBJECT, avsak takuto PROPERTY NIE JE mozne ODSTRANIT pomocou KEYWORD 'delete'.
   B. VARIABLE deklarovana BEZ 'var'. Tato VARIABLE je zaradena ako PROPERTY do GLOBAL OBJECT, z ktoreho MOZE BYT ODSTRANENA pomocou KEYWORD 'delete'.
!!!!! 44. JavaScript VSETKY VARIABLES v danom SCOPE uklada ako PROPERTIES do SCOPE OBJECT. JavaScript vykonava CHAINING SCOPE OBJECTS a tento CHAIN vyuziva pri BINDING na VARIABLES. Pre SCOPE OBJECT platia nasledujuce pravidla.
   A. SCOPE OBJECT v GLOBAL SCOPE je reprezentovny GLOBAL OBJECT.
   B. SCOPE OBJECT VARIABLES v DANOM SCOPE uklada ako svoje PROPERTIES.
   C. SCOPE OBJECTS vytvaraju CHAIN.
   D. V GLOBAL SCOPE obsahuje CHAIN iba 1 SCOPE OBJECT - GLOBAL SCOPE.
   E. Vo FUNCTIONS definovanych v GLOBAL SCOPE obsahuje CHAIN 2 SCOPE OBJECTS. Jeden je GLOBAL SCOPE a druhy je SCOPE OBJECT v ktorom su ako PROPERTIES VSETKY LOKALNE VARIABLES a VSETKY FUNCTION PARAMETERS.
   F. NESTED FUNCTIONS obsahuje 3 a VIAC SCOPE OBJECTS podla toho aka je urovne vnorenia NESTED FUNCTIONS.
   !!! G. JavaScript pouziva SCOPE OBJECT CHAIN na vykonavanie BINDINGU na VARIABLES v danom SCOPE. JavaScript pri BINDINGU VARIABLE prechadza CHAIN a v KAZDOM SCOPE OBJECT hlada PROPERTY s danmym menom. Ak sa takato PROPERTY v danom SCOPE OBJECT NENACHADZA, skusa PARENT SCOPE. Ak v ZIADNOM SCOPE OBJECT sa PROPERTY s menom VARIABLE NENAJDE, je hodena EXCEPTION.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
1. V JavaScript su VSETKY OBJECTS reprezentovane ako COLLECTION PROPERTIES, ktore je mozne do OBJECT DYNAMICKY PRIDAVAT, alebo ich pomocou KEYWORD 'delete' DYNAMICKY ODSTRANOVAT.
2. ARRAY je OBJECT, ktory ma MENA PROPERTIES pomenovane podla INDEXOV ITEMS a hodnoty su samotne ITEMS.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
Pravidla konverzie v JavaScript.

1. PRIMITIVE TYPES (NUMBER, BOOLEAN, STRING, 'null' a 'undefined') su IMPLICITNE KONVERTOVANE.
2. Pri konverzii OBJECT TYPES na STRING JavaScript uplatnuje nasledujuci algoritmus.
   A. Ak OBJECT TYPE ma implementovanu toString(), tak sa zavola. Ak vrati STRING, tak sa tento hned vrati. Ak vrati NUMBER, alebo BOOLEAN, tak sa tieto konvertuju na STRING.
   B. Ak OBJECT TYPE NEMA implementovanu toString(), alebo vracia OBJECT hodnotu, tak v pripade, ze OBJECT TYPE ma implementovanu valueOf(), tak sa zavola. Ak vrati STRING, tak sa tento hned vrati. Ak vrati NUMBER, alebo BOOLEAN, tak sa tieto konvertuju na STRING.
   C. Ak sa nesplni ani jeden bod vyssie, hodi sa EXCEPTION TypeError.
3. Pri konverzii OBJECT TYPES na NUMBER JavaScript uplatnuje nasledujuci algoritmus.
   A. Ak OBJECT TYPE ma implementovanu valueOf() vracia PRIMITIVE VALUE, tak tuto hodnotu ak nie je priamo NUMBER, tak sa konvertuje na NUMBER podla pravidiel konverzie PRIMITIVE TYPES.
   B. Ak OBJECT TYPE NEMA implementovanu valueOf(), alebo vracia OBJECT TYPE, zavola sa metoda toString(). Ak toString() vracia PRIMITIVE VALUE, tak tuto hodnotu ak nie je priamo NUMBER, tak sa konvertuje na NUMBER podla pravidiel konverzie PRIMITIVE TYPES.
   C. Ak sa nesplni ani jeden bod vyssie, hodi sa EXCEPTION TypeError.
4. ARRAY, ktory ma 0 ITEMS, tak sa IMPLICITNE KONVERTUJE na 0.
5. ARRAY, ktory ma 1 ITEM, ak je tento NUMBER sa IMPLICITNE KONVERTUJE na tento ITEM.
6. ARRAY, ktory ma VIAC ITEMS, aj ked obsahuje NUMBERS sa IMPLICITNE KONVERTUJE na hodnotu 'NaN'.
7. Pri pouzivani OPERATORS ako +,-,*,/,==,!= nad OBJECT TYPES sa IMPLICITNE vola konverzia z OBJECT na NUMBER ako je popisane vyssie.
8. Pre TYPE Date su OPERATOR+ a OPERATOR== specialne pretazene, vykonavajuc konverziu na STRING. Ostatne aritmeticke OPERATORS vykonavaju konverziu na NUMBER.
//-------------------------------------------------------------------------------------------------------