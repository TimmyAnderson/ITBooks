//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje vytvorenie CUSTOM DATA CONTRACT RESOLVER.
2. DATA CONTRACT RESOLVER je trieda zdedena z DataContractResolver, ktorej ulohou je robit RESOLVING KNOWN TYPES. Teda urcuje ci dany TYP je KNOWN TYPE, alebo nie.
!!! 3. Implementaciou CUSTOM DataContractResolver je mozne vytvorit CUSTOM RIESENIE pre KNOWN TYPES a zbavit sa tak pouzivana atributov ako [KnownType] a [ServiceKnownType], alebo definicii KNOWN TYPES v .CONFIG suboroch.
4. Implementacia CUSTOM DataContractResolver spociva v implementacii 2 metod.
   A. TryResolveType() - je volana ked sa WCF snazi vykonat SERIALIZACIU TYPU do MESSAGE.
   B. ResolveName() - je volana ked sa WCF snazi vykonat DESERIALIZACIU z MESSAGE do TYPU.
!!! 5. Ako metoda TryResolveType() tak i ResolveName() maju ako parameter objekt typu DataContractResolver co je DEFAULT IMPLEMENTACIA DataContractResolver, ktoru je mozne pouzit ako CUSTOM RESOLVER NEVIE spravit RESOLVING.
!!! 6. Ak chcem CUSTOM DataContractResolver instalovat do WCF musim vykonat nasledujuce kroky.
   A. Pre kazdu OPERATION kazdeho ENDPOINT musim najst BEHAVIOR typu DataContractSerializerOperationBehavior.
   B. Do property DataContractSerializerOperationBehavior.DataContractResolver je potrebne vlozit CUSTOM IMPLEMENTACIU DataContractResolver.
   !!! C. Toto je treba spravit ako na SERVICE, tak i na CLIENT.
!!!!! 7. Moja CUSTOM implementacia SKUTOCNE VYRIESILA problem KNOWN TYPES pre DERIVED TYPES a tie pri jeho pouziti NETREBA VOBEC DEKLAROVAT. Trieda vsak MUSI BYT OZNACENA ATRIBUTOM [DataContract].
//-------------------------------------------------------------------------------------------------------