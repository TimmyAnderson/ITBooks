//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje TEMPLATE TERMINOLOGY v C++.
2. TEMPLATE CLASSES je mozne vytvarat z nasledujucich TYPES.
   A. CLASSES.
   B. STRUCTURES.
   C. UNIONS.
3. TEMPLATE INSTANTIATION je proces pri ktorom COMPILER generuje z TEMPLATE jej TEMPLATE INSTANCE. Pri INSTANTIATION sa nahradzuju TEMPLATE PARAMETERS za TEMPLATE ARGUMENTS. TEMPLATE INSTANTIATION moze byt nasledujucich typov.
   A. IMPLICIT INSTANTIATION kedy su TYPES TEMPLATE TYPE PARAMETERS DEDUCED.
   B. EXPLICIT INSTANTIATION kedy su TYPES TEMPLATE TYPE PARAMETERS urcene explicitne v CODE.
4. TEMPLATES mozu byt SPECIALIZED. TEMPLATE SPECIALIZATION je TEMPLATE, ktora ma explicitne definovanie niektore, alebo vsetky TEMPLATE PARAMETERS za konkretne TEMPLATE ARGUMENTS. TEMPLATE SPECIALIZATION moze byt nasledujucich typov.
   A. PARTIAL TEMPLATE SPECIALIZATION.
   B. FULL TEMPLATE SPECIALIZATION.
5. PRIMARY TEMPLATE je TEMPLATE z ktorej sa vykonavaju TEMPLATE SPECIALIZATIONS.
6. Pre PARTIAL TEMPLATE SPECIALIZATION platia nasledujuce fakty.
   A. PARTIAL TEMPLATE SPECIALIZATION je TEMPLATE SPECIALIZATION, kde su nahradene iba NIEKTORE TEMPLATE PARAMETERS za TEMPLATE ARGUMENTS.
   B. PARTIAL TEMPLATE SPECIALIZATION ma teda vzdy aspon 1 TEMPLATE PARAMETER.
   !!! C. PARTIAL TEMPLATE SPECIALIZATION je mozne robit IBA pre TEMPLATE CLASSES, TEMPLATE METHODS a TEMPLATE VARIABLES.
   !!!!! D. PARTIAL TEMPLATE SPECIALIZATION NIE JE mozne robit pre TEMPLATE FUNCTIONS.
7. Pre FULL TEMPLATE SPECIALIZATION platia nasledujuce fakty.
   A. FULL TEMPLATE SPECIALIZATION je TEMPLATE SPECIALIZATION, kde su VSETKY TEMPLATE PARAMETERS nahradene za TEMPLATE ARGUMENTS.
   B. FULL TEMPLATE SPECIALIZATION je mozne robit pre VSETKY typy TEMPLATES, vratane TEMPLATE FUNCTIONS.
8. C++ rozlicuje medzi DECLARATIONS a DEFINITIONS jednotlivych C++ ELEMENTS.
   A. DECLARATION je uvedenie NAME daneho C++ ELEMENT, bez toho, aby danemu NAME bola priradena MEMORY (v pripade VARIABLES), alebo bol definovany ich BODY (v pripade FUNCTIONS a CLASSES).
   B. DEFINITION znamena, ze NAME daneho C++ ELEMENT je priradena MEMORY (v pripade VARIABLES), alebo BODY (v pripade FUNCTIONS a CLASSES).
9. DECLARATIONS jednotlivych C++ ELEMENTS sa vykonavaju nasledujucimi sposobmi.
   A. VARIABLE je DECLARED, ak je oznacena KEYWORD [extern], a zaroven NEMA priradenu DEFAULT VALUE.
   B. FUNCTION je DECLARED, ak je definovany iba jej PROTOTYPE, ale nie BODY.
   C. CLASS je DECLARED, ak je definovany iba jej NAME, ale nie BODY.
10. DEFINITIONS jednotlivych C++ ELEMENTS sa vykonavaju nasledujucimi sposobmi.
   A. VARIABLE je DEFINED, ak NIE je oznacena KEYWORD [extern], alebo ak je oznacena KEYWORD [extern] a zaroven MA priradenu DEFAULT VALUE.
   B. FUNCTION je DEFINED, ak ma definovany BODY.
   C. CLASS je DEFINED, ak ma definovany BODY.
11. C++ rozdeluje TYPES do nasledujucich kategorii.
   A. INCOMPLETE TYPES.
   B. COMPLETE TYPES.
12. Medzi INCOMPLETE TYPES patria nasledujuce TYPES.
   A. CLASS TYPES, ktore boli DECLARED, ale NEBOLI DEFINED.
   B. ENUM TYPES, ktore boli DECLARED, ale NEBOLI DEFINED.
   C. ARRAYS TYPES, ktorych SIZE nebola definovana.
   D. ARRAYS TYPES, ktorych ELEMENT TYPE je INCOMPLETE TYPE.
   E. TYPE [void].
   F. INCOMPLETE TYPE na ktory je aplikovany MODIFIER [const], alebo MODIFIER [const].
13. COMPLETE TYPES su vsetky TYPES, ktore nie su INCOMPLETE TYPES.
14. V C++ plati ONE DEFINITION RULE.
   A. NON-TEMPLATE NON-INLINE FUNCTIONS, NON-TEMPLATE NON-INLINE METHODS, FULL TEMPLATE FUNCTION SPECIALIZATIONS, FULL TEMPLATE METHOD SPECIALIZATIONS, NON-INLINE GLOBAL VARIABLES a STATIC DATA FIELDS musia byt DEFINED iba 1 v CELOM PROGRAME.
   B. CLASS TYPES, STRUCTURE TYPES, ENUM TYPES, TEMPLATE FUNCTIONS, TEMPLATE METHODS, PARTIAL TEMPLATE CLASS SPECIALIZATIONS, INLINE FUNCTIONS a INLINE GLOBAL VARIABLES musia byt DEFINED 1 krat v TRANSLATION UNIT a v kazdom TRANSLATION UNIT MUSIA byt IDENTICKE.
15. TRANSLATION UNIT je FILE [.CPP].
16. LINKABLE ENTITY je FUNCTION, METHOD, GLOBAL VARIABLE, alebo STATIC DATA FIELD, vratane tych, ktore su generovane z TEMPLATES, ktore su VISIBLE pre LINKER.
17. TEMPLATE PARAMETERS su PARAMETERS, ktore su definovane v KEYWORD [template]. Pre TEMPLATE PARAMETERS platia nasledujuce fakty.
   A. TEMPLATE PARAMETERS mozu byt TYPE PARAMETERS, alebo VALUE PARAMETERS.
   B. TEMPLATE PARAMETERS sa pouzivaju v CODE TEMPLATES na na specifikovanie TYPE, ak sa jedna o TYPE PARAMETERS, alebo VALUE, ak sa jedna o VALUE PARAMETERS.
   C. Pri TEMPLATE INSTANTIATION su TEMPLATE PARAMETERS nahradzovane TEMPLATE ARGUMENTS.
18. TEMPLATE ARGUMENTS su ARGUMENTS, ktore su zasialane do TEMPLATES, aby nahradili TEMPLATE PARAMETERS. Pre TEMPLATE ARGUMENTS platia nasledujuce fakty.
   A. Pri TEMPLATE INSTANTIATION TEMPLATE ARGUMENTS nahradzuju jednotlive TEMPLATE ARGUMENTS.
   !!! B. TEMPLATE ARGUMENTS su VZDY COMPILE TIME CONSTANTS. To znamena, ze su urcene uz v COMPILE TIME, a NIKDY NIE v RUNTIME.
19. TEMPLATE ID je nazov TEMPLATE nasledovanym TEMPLATE ARGUMENTS. TEMPLATE ID ma SYNTAX [TEMPLATE_NAME<TEMPLATE_ARGUMENT_1,...,TEMPLATE_ARGUMENT_N>].
//----------------------------------------------------------------------------------------------------------------------