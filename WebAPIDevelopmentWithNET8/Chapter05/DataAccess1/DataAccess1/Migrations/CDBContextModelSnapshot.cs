// <auto-generated />
using System;
using DataAccess1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess1.Migrations
{
    [DbContext(typeof(CDBContext))]
    partial class CDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("DataAccess1.CEntityConventionsOneToManyDependent", b =>
                {
                    b.Property<int>("CEntityConventionsOneToManyDependentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CEntityConventionsOneToManyPrincipalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.HasKey("CEntityConventionsOneToManyDependentId");

                    b.HasIndex("CEntityConventionsOneToManyPrincipalId");

                    b.ToTable("EntitiesConventionsOneToManyDependent");
                });

            modelBuilder.Entity("DataAccess1.CEntityConventionsOneToManyPrincipal", b =>
                {
                    b.Property<int>("CEntityConventionsOneToManyPrincipalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("CEntityConventionsOneToManyPrincipalId");

                    b.ToTable("EntitiesConventionsOneToManyPrincipal");
                });

            modelBuilder.Entity("DataAccess1.CEntityDataAnnotationsOneToManyDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Value");

                    b.Property<int>("ForeignKeyEntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("ForeignKeyEntityPrincipalID");

                    b.ToTable("DataAnnotationsOneToManyDependent");
                });

            modelBuilder.Entity("DataAccess1.CEntityDataAnnotationsOneToManyPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("Value");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("DataAnnotationsOneToManyPrincipal");
                });

            modelBuilder.Entity("DataAccess1.CEntityFluentAPIOneToManyDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesFluentAPIOneToManyDependent", (string)null);
                });

            modelBuilder.Entity("DataAccess1.CEntityFluentAPIOneToManyPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesFluentAPIOneToManyPrincipal", (string)null);
                });

            modelBuilder.Entity("DataAccess1.CEntityName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("NamesEntities", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Age = 12,
                            FirstName = "Timmy",
                            LastName = "Anderson",
                            Sex = 1
                        },
                        new
                        {
                            ID = 2,
                            Age = 13,
                            FirstName = "Jenny",
                            LastName = "Thompson",
                            Sex = 2
                        });
                });

            modelBuilder.Entity("DataAccess1.CEntitySeparateConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeWithSQLTypeDATEAndIndex")
                        .HasColumnType("date");

                    b.Property<double>("DoubleWithLimitedPrecision")
                        .HasPrecision(9, 2)
                        .HasColumnType("REAL");

                    b.Property<int>("IntNonNull")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IntNull")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringNonNullWithMaxLength")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StringNonUnicodeWithMaxLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("StringWithMaxLength")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeWithSQLTypeDATEAndIndex");

                    b.ToTable("EntitieSeparateConfigurations", (string)null);
                });

            modelBuilder.Entity("DataAccess1.CEntityConventionsOneToManyDependent", b =>
                {
                    b.HasOne("DataAccess1.CEntityConventionsOneToManyPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("CEntityConventionsOneToManyPrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("DataAccess1.CEntityDataAnnotationsOneToManyDependent", b =>
                {
                    b.HasOne("DataAccess1.CEntityDataAnnotationsOneToManyPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("ForeignKeyEntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("DataAccess1.CEntityFluentAPIOneToManyDependent", b =>
                {
                    b.HasOne("DataAccess1.CEntityFluentAPIOneToManyPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("DataAccess1.CEntityConventionsOneToManyPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("DataAccess1.CEntityDataAnnotationsOneToManyPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("DataAccess1.CEntityFluentAPIOneToManyPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });
#pragma warning restore 612, 618
        }
    }
}
