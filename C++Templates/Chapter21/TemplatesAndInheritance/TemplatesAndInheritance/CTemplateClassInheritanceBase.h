//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include "MyDebug.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, size_t VALUE>
class CTemplateClassInheritanceBase
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		CTemplateClassInheritanceBase(void);
		virtual ~CTemplateClassInheritanceBase(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, size_t VALUE>
CTemplateClassInheritanceBase<TType,VALUE>::CTemplateClassInheritanceBase(void)
{
	std::wcout << L"CONSTRUCTOR for TYPE [" << GetTypeInfoName<CTemplateClassInheritanceBase<TType,VALUE>>() << L"] CALLED !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType, size_t VALUE>
CTemplateClassInheritanceBase<TType,VALUE>::~CTemplateClassInheritanceBase(void) noexcept
{
	std::wcout << L"DESTRUCTOR for TYPE [" << GetTypeInfoName<CTemplateClassInheritanceBase<TType,VALUE>>() << L"] CALLED !" << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------