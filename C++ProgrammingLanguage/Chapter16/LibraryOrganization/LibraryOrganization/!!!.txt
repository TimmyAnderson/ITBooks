//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje zakladnu organizaciu STL a CLASS vector<T>.
2. Vsetky CLASSES a FUNCTIONS, ktore su sucastou STL su definovane v NAMESPACE 'std'.
3. Standardne funkcie z jazyka C su definovane v STL v HEADERS s mennou konvenciou <cXXX>, kde XXX je nazov povodneho HEADER v jazyku C. Takze napriklad pre <stdlib.h> je STL ekvivalent v HEADER <cstdlib>, pricom vsetky funkcie su definovane v NAMESPACE 'std'.
!!! 4. Standardne funkcie z jazyka C su definovane v STL v HEADERS obsahuju iba INCLUDE prislusneho C HEADER v NAMESPACE 'std'. Neobsahuje ZIADNE DALSIE FUNKCIE.
!!! 5. Niektore z STL HEADERS su NEVYHNUTNE na samotny BEH C++. Sem napriklad patri HEADER <new>, <typeinfo>, alebo <exception>.
6. CLASS vector<T> ma nasledujuce deklaracie internych TYPES.
  A. TYPE 'value_type' reprezentuje TYPE ITEMU.
  B. TYPE 'allocator_type' reprezentuje TYP ALLOCATOR. ALLOCATOR sa pouziva na alokaciu a dealokaciu pamate vector<T>.
  C. TYPE 'allocator_type::size_type' reprezentuje TYP pouzivany pri INDEXOVANI vector<T>.
  D. TYPE 'allocator_type::difference_type' reprezentuje TYP vracany pri ODCITAVANI 2 ITERATORS.
  E. TYPE 'iterator' reprezentuje zakladny TYP NON-CONST ITERATOR.
  F. TYPE 'const_iterator' reprezentuje zakladny TYP CONST ITERATOR.
  G. TYPE 'reverse_iterator' reprezentuje REVERSE TYP NON-CONST ITERATOR. Je implementovany pomocou TEMPLATE reverse_iterator<T>.
  H. TYPE 'const_reverse_iterator' reprezentuje REVERSE TYP CONST ITERATOR. Je implementovany pomocou TEMPLATE reverse_iterator<T>.
  I. TYPE 'allocator_type::pointer' reprezentuje TYP pouzivany ako POINTER pre ALLOCATOR.
  J. TYPE 'allocator_type::const_pointer' reprezentuje TYP pouzivany ako CONST POINTER pre ALLOCATOR.
  K. TYPE 'allocator_type::reference' reprezentuje TYP pouzivany ako REFERENCE pre ALLOCATOR.
  L. TYPE 'allocator_type::const_reference' reprezentuje TYP pouzivany ako CONST REFERENCE pre ALLOCATOR.
!!!!! 7. Zmyslom definicie ROVNAKO POMENOVANYCH TYPES v KAZDOM CONTAINER je umoznenie vytvorenie TEMPLATE BASED ALGORITMOV, ktore NAMIESTO REALNYCH TYPOV pouzivaju TYPES ako 'iterator', 'allocator_type::size_type' ci 'allocator_type::pointer'. Kedze KAZDA COLLECTION TAKTO POMENOVANE TYPY DEFINUJE, tak je mozne pisat GENERICKE TEMPLATAE ALGORITMY pomocou tychto typov, namiesto odkazovania sa na SKUTOCNY TYP.
8. CLASS vector<T> ma nasledujuce deklaracie METHODS a OPERATORS.
  A. Metoda begin() vracia bud CONST, alebo NON-CONST ITERATOR odkazujuci sa na ZACIATOK vector<T>.
  B. Metoda end() vracia bud CONST, alebo NON-CONST ITERATOR odkazujuci sa na (KONIEC+1) vector<T>.
  C. Metoda rbegin() vracia bud CONST, alebo NON-CONST REVERSE ITERATOR odkazujuci sa na poziciu KONIEC vector<T>.
  D. Metoda rend() vracia bud CONST, alebo NON-CONST REVERSE ITERATOR odkazujuci sa na poziciu (ZACIATOK-1) vector<T>.
  E. OPERATOR operator[]() vracia ITEM na N-tej pozicii, pricom sa NEKONTROLUJE PREKROCENIE ROZSAHU vector<T>.
  F. Metoda at() vracia ITEM na N-tej pozicii, pricom sa KONTROLUJE PREKROCENIE ROZSAHU vector<T>. V pripade PREKROCENIA ROZSAHU je hodena EXCEPTION 'out_of_range'.
  G. Metoda front() vracia REFERENCE na PRVY ITEM vector<T>.
  H. Metoda back() vracia REFERENCE na POSLEDNY ITEM vector<T>.
  I. OPERATOR operator=() vykonava kopirovanie CELEHO vector<T> do noveho vector<T>.
  J. Metoda assign() umoznuje skopirovat iba cast vector<T> do ineho vector<T>.
  K. Metoda push_back() pridava ITEM na KONIEC vector<T>.
  L. Metoda pop_back() odstranuje ITEM z KONCA vector<T>.
  M. Metoda size() vracia pocet ITEMS vo vector<T>.
  N. Metoda insert() umoznuje vkladat 1-N ITEMS PRED poziciu definovanu ITERATOROM.
  O. Metoda erase() umoznuje odstranovat 1-N ITEMS. Pri odstranovani N ITEMS su odstranovane ITEMS na poziciach <ITERATOR1,ITERATOR2-1>.
  P. Metoda clear() odstranuje vsetky ITEMS z vector<T>.
  Q. Metoda resize() sposobuje zmenu velkosti vector<T>.
  R. Metoda reserve() umoznuje menit velkost CAPACITY INTERNEHO BUFFERA.
  S. Metoda capacity() vracia velkost CAPACITY INTERNEHO BUFFERA.
  T. Metoda max_size() vracia MAXIMALNU moznu velkost vector<T>.
  U. Metoda empty() vracia informaciu ci vector<T> je PRAZDNY.
  V. Metoda swap() je SPECIALNE OPTIMALIZOVANA a to tak, ze SWAP robi NIE NA ITEMS, ale iba na PRIVATE FIELDS 2 vector<T>, cim sa dosahuje TA ISTA FUNKCIONALITA, ale OVELA RYCHLEJSIE.
  W. Metoda get_allocator() vracia ALLOCATOR asociovany s vector<T>.
9. CONSTRUCTOR vector<T> umoznuje definovat CAPACITY co je velkost INTERNEHO BUFFERA vector<T>. Je to OPTIMALIZACNA metoda umoznujuca definovat velkost BUFFERA, ktory ak sa neprekroci, tak nedojde k CASOVO NAROCNEJ operacii RESIZE.
10. CLASS vector<T> ma definovane GLOBALNE OPERATORS ==,!=,<,>,<= a >=.
!!! 11. CLASS vector<bool> je SPECIALIZACIA vector<T> umoznujuce ukladat BITY. Pre 1 BIT alokuje v pamati iba 1 BITE a NIE 1 BYTE.
//-------------------------------------------------------------------------------------------------------