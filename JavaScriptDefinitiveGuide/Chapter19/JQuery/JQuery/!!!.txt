//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie JQuery.
2. JQuery je LIBRARY napisana v JavaScripte, ktora poskytuje JEDNOTNE API na tvorbu JavaScript kodu pre ROZLICNE WEB BROWSERS.
!!! 3. JQuery je volne stiahnutelna LIBRARY, ktora sa vklada do WEB PAGE tak, ze sa vlozi <script> HTML ELEMENT, ktoreho ATTRIBUTE 'src' odkazuje na .JS FILE obsahujuci JQuery LIBRARY.
!!! 4. JQuery definuje v GLOBAL NAMESPACE iba 2 FUNCTIONS. FUNCTION jQuery() a FUNCTION $(), ktory je SYNONYMOM jQuery().
!!!!! 5. FUNCTION jQuery() (resp. $()) vracia zoznam HTML ELEMENTS, ktore zodpovedaju danej QUERY - vyhladavacim kriteriam zadanym ako PARAMETER jQuery().
!!! 6. FUNCTION jQuery() vracia OBJECT, ktory ma mnozstvo METHODS. Tieto METHODS spravidla vracaju taktiez ten isty TYP OBJECT, takze pri volanie METHODS je mozne vyzuit METHOD CHAINING.
7. FUNCTION jQuery() je mozne vytvorit 4 rozlicnymi sposobmi.
   A. FUNCTION jQuery() je mozne zavolat s 1. PARAMETROM obsahujucim CSS SELECTOR, podla ktoreho sa maju vybrat ELEMENTS. Ako OPTIONAL je 2. PARAMETER ELEMENT OBJECT, ktory bude sluzit ako ROOT od ktoreho sa budu hladat ELEMENTS. Vysledkom su vsetky ELEMENTS, ktore zodpovedaju danemu CSS SELECTOR.
   B. FUNCTION jQuery() je mozne zavolat s 1. PARAMETROM obsahujucim ELEMENT, alebo ELEMENT ARRAY. FUNCTION jQuery() spravi WRAPPER okolo tychto ELEMENTS a umoznuje volat JQUERY METHODS nad takto WRAPPED ELEMENTS.
   C. FUNCTION jQuery() je mozne zavolat s 1. PARAMETROM obsahujucim STRING s HTML kodom s ELEMENTS. Tieto ELEMENTS jQuery() VYTVORI, ale NEPRIDA ich do DOCUMENT. 2. PARAMETER moze byt bud Document OBJECT s ktorym maju byt novovytvorene ELEMENTS asociovane, alebo to moze byt CUSTOM OBJECT. Ak je to CUSTOM OBJECT, tak jeho PROPERTIES a VALUES sa pouziju na nastavenie ROVNAKO POMENOVANYCH PROPERTIES (alebo vyvolani JQUERY METHODS) v novovytvorenych ELEMENTS.
   D. FUNCTION jQuery() je mozne zavolat s 1. PARAMETROM obsahujucim FUNCTION. Tato FUNCTION sa vyvola ako reakcia na Window.load EVENT.
!!! 8. FUNCTION jQuery() vracia OBJECT, ktory ma PROPERTIES oznacene cislami <0,(N-1)>, kde N je POCET ELEMENTS, ktore boli pomocou FUNCTION jQuery() VYBRANE.
9. POPERTIES oznacene CISLAMI <0,(N-1)> vracaju Element OBJECTS s danym INDEXOM.
10. PROPERTY 'length' udava POCET ELEMENTS, ktore boli pomocou FUNCTION jQuery() VYBRANE.
11. METHOD get() vracia Element OBJECT s danym INDEXOM.
12. METHOD size() vracia POCET ELEMENTS, ktore boli pomocou FUNCTION jQuery() VYBRANE.
13. METHOD toArray() konvertuje JQUERY OBJECT na ARRAY.
14. PROPERTY 'selector' vracia CSS SELECTOR, ktorym boli vybrane ELEMENTS.
15. PROPERTY 'context' vracia 2. PARAMETER zaslany do FUNCTION jQuery().
16. PROPERTY 'jquery' sa pouziva na urcenie ci dany OBJECT je JQUERY OBJECT. Vracia STRING obsahujuci verziu JQEURY LIBRARY.
17. METHOD each() umoznuje zadat CALLBACK, ktory sa bude volat pre VSETKY Element OBJECTS. Ak CALLBACK vrati 'false' iteracia ihned SKONCI.
!!!!! 18. METHOD map() vola CALLBACK pre vsetky Element OBJECTS a ich z RETURN VALUES vytvori JQUERY OBJECT, ktory vracia map(). METHOD map() je ANALOGIOU LINQ METHOD Select().
19. METHOD index() pre PARAMETER Element OBJECT vracia INDEX s ktorym je dany Element OBJECT ulozeny v JQUERY OBJECT, alebo -1, ak sa tam nenachadza.
20. METHOD is() prijima ako PARAMETER CSS SELECTOR a vracia 'true' ak sa v JQUERY OBJECT nachadza aspon 1 Element OBJECT zodpovedajuci danemu CSS SELECTOR.
!!! 21. METHOD attr() sluzi ako GETTER, alebo SETTER ATTRIBUTES. V pripade, ze je pouzita ako GETTER (ma iba PARAMETER obsahujuci ATTRIBUTE NAME), vracia hodnotu ATTRIBUTE PRVEHO Element OBJECT. V pripade, ze ma 2 PARAMETRE, funguje ako SETTER a na KAZDOM Element OBJECT nastavim prislusnu hodnotu PROPERTY.
22. METHOD removeAttr() odstranuje ATTRIBUTE zo vsetkych Element OBJECTS.
!!! 23. METHOD css() sluzi ako GETTER, alebo SETTER CSS STYLES. Ako GETTER vracia CALCULATED VALUE danej CSS PROPERTY so zaratanim vsetkych CSS SOURCES.
24. METHOD addClass() pridava novy CLASS do vsetkych Element OBJECTS.
25. METHOD removeClass() odstranuje existujuci CLASS do vsetkych Element OBJECTS.
26. METHOD toggleClass() odstranuje existujuci CLASS z Element OBJECTS, ktore ho maju nastavene a pridavat CLASS do Element OBJECTS, ktore ho nemali nastavene.
27. METHOD hasClass() vracia informaciu ci Element OBJECT obsahuje dany CLASS.
!!! 28. METHOD val() sluzi ako GETTER, alebo SETTER 'value' PROPERTY Element OBJECTS.
!!! 29. METHOD text() sluzi ako GETTER, alebo SETTER 'innerText' PROPERTY Element OBJECTS.
!!! 30. METHOD html() sluzi ako GETTER, alebo SETTER 'innerHTML' PROPERTY Element OBJECTS.
31. METHOD offset() umoznuje zistit, alebo nastavit poziciu Element OBJECT voci DOCUMENT.
32. METHOD position() umoznuje zistit poziciu Element OBJECT voci PARENT ELEMENT.
33. METHODS width() a height() vracaju a umoznuju nastavit sirku a vysku Element OBJECT BEZ PADDING, BORDERS a MARGINS. Ak vsak do METHODS zaslem ako PARAMETER hodnotu 'true', tak sa zarata aj rozmer MARGINS.
34. METHODS innerWidth() a innerHeight() vracaju sirku a vysku Element OBJECT BEZ BORDERS a MARGINS. Ak vsak do METHODS zaslem ako PARAMETER hodnotu 'true', tak sa zarata aj rozmer MARGINS.
35. METHODS outerWidth() a outerHeight() vracaju sirku a vysku Element OBJECT BEZ MARGINS. Ak vsak do METHODS zaslem ako PARAMETER hodnotu 'true', tak sa zarata aj rozmer MARGINS.
36. METHODS scrollTop() a scrollLeft() vracaju a umoznuju nastavit poziciu SCROLLBARS Element OBJECTS.
!!! 37. METHOD attr() sluzi ako GETTER, alebo SETTER umoznujuci asociovat CUSTOM DATA s Element OBJECTS. CUSTOM DATA maju tvar KEY-VALUE a kazdy Element OBJECT moze obsahovat viacero parov KEY-VALUE.
38. METHOD removeData() odstranuje CUSTOM DATA zo vsetkych Element OBJECTS.
39. METHOD append() vklada CONTENT (moze byt zadany ako Element OBJECT, FUNCTION generujuca CONTENT, alebo HTML STRING) NA KONIEC Element OBJECTS JQUERY OBJECT.
40. METHOD prepend() vklada CONTENT (moze byt zadany ako Element OBJECT, FUNCTION generujuca CONTENT, alebo HTML STRING) NA ZACIATOK Element OBJECTS JQUERY OBJECT.
41. METHOD before() vklada CONTENT (moze byt zadany ako Element OBJECT, FUNCTION generujuca CONTENT, alebo HTML STRING) PRED Element OBJECTS JQUERY OBJECT.
42. METHOD after() vklada CONTENT (moze byt zadany ako Element OBJECT, FUNCTION generujuca CONTENT, alebo HTML STRING) ZA Element OBJECTS JQUERY OBJECT.
43. METHOD replaceWith() NAHRADI CONTENT (moze byt zadany ako Element OBJECT, FUNCTION generujuca CONTENT, alebo HTML STRING) NAMIESTO Element OBJECTS JQUERY OBJECT.
44. METHOD clone() vytvori CLONE danych Element OBJECTS. Ak sa mu ako PARAMETER da hodnota 'true' tak nove Element OBJECTS budu obsahovat aj nastavene EVENT HANDLERS.
45. METHOD wrap() obali KAZDY Element OBJECT novym WRAPPER OBJECT.
46. METHOD wrapInner() obali CONTENT KAZDEHO Element OBJECT novym WRAPPER OBJECT.
47. METHOD wrapAll() obali VSETKY Element OBJECT ako GROUP novym WRAPPER OBJECT.
48. METHOD unwrap() ZRUSI WRAPPER OBJECT okolo KAZDEHO Element OBJECT.
49. METHOD empty() vymaze vsetky CHILDREN ELEMENTS KAZDEHO Element OBJECT.
50. METHOD remove() odstrani vsetky Element OBJECTS.
51. METHOD detacg() odstrani vsetky Element OBJECTS a ZAROVEN odstrani i vsetky EVENT HANDLERS, ktore sa viazali na vymazane Element OBJECTS.
!!! 52. JQUERY obsahuje sadu METHODS sluziacich na registraciu EVENT HANDLERS pre EVENTS. Ich pomenovanie je ZHODNE s menom EVENT, takze napriklad pre EVENT 'click' ma JQUERY METHOD click(). JQUERY vsak obsahuje aj dodatocne METHODS pre registraciu emulovanych EVENTS, ktore nie su podporovane vo vsetkych BROWSERS.
!!! 52. EVENT HANDLERS zaregistrovane pomocou JQUERY METHODS maju ako parameter EVENT OBJECT, ktory EMULUJUE standardny Event OBJECT.
!!! 53. RETURN VALUE EVENT HANDLERS je VZDY DOLEZITY. Ak ma hodnotu 'false', tak EVENT PROPAGATION je ZRUSENA a takisto sa NEVYVOLA DEFAULT EVENT HANDLER.
!!!!! 54. METHOD bind() je zakladna METHOD na registraciu EVENT HANDLERS pre EVENTS v JQUERY. Ma nasledujuce vlastnosti.
   A. Ako 1. PARAMETER ma EVENT TYPE. EVENT HANDLER sa zadava bud ako 2. PARAMETER, alebo 3. PARAMETER. Ak je EVENT HANDLER ako 3. PARAMETER, tak 2. PARAMETER su CUSTOM DATA, ktore pri vyvolani EVENT HANDLER budu obsiahnute v PROPERTY 'data' JQUERY EVENT OBJECT.
   B. V 1. PARAMETRI moze byt uvedenych aj VIACERO EVENT TYPES oddelenych znakom ' '. METHOD bind() zaregistruje EVENT HANDLER pre VSETKY EVENT TYPES.
   C. Ako 1. PARAMETER je mozne dat i CUSTOM OBJECT, ktoreho PROPERTY NAMES su EVENT TYPES a VALUES su EVENT HANDLERS. METHOD bind() zaregistruje pre kazdy EVENT zadany ako PROPERTY NAME dany EVENT HANDLER obsiahnuty vo VALUE.
   D. V EVENT TYPES je mozne zadat i NAMESPACE, ktore sa pouziva na definovanie GROUPS EVENT HANDLERS.
55. METHOD one() registruje EVENT HANDLER, ktory sa pre dany EVENT zavola IBA RAZ a po vykonani sa automaticky ODREGISTRUJE.
!!! 55. METHOD unbind() vykonava odregistraciu EVENT HANDLERS pre EVENTS v JQUERY. Ma nasledujuce vlastnosti.
   A. Ako 1. PARAMETER ma EVENT TYPE. Ako OPTIONAL 2. PARAMETER je EVENT HANDLER, ktory sa ma odregistrovat.
   B. V 1. PARAMETRI moze byt uvedenych aj VIACERO EVENT TYPES oddelenych znakom ' '. METHOD unbind() odzaregistruje EVENT HANDLER pre VSETKY EVENT TYPES.
   C. Ako 1. PARAMETER je mozne dat i CUSTOM OBJECT, ktoreho PROPERTY NAMES su EVENT TYPES a VALUES su EVENT HANDLERS. METHOD unbind() odregistruje pre kazdy EVENT zadany ako PROPERTY NAME dany EVENT HANDLER obsiahnuty vo VALUE.
   D. V EVENT TYPES je mozne zadat i NAMESPACE, ktore sa pouziva na definovanie GROUPS EVENT HANDLERS.
   E. Ak sa ako 1. PARAMETER zada JQUERY EVENT OBJECT, tak sa odregistruje prisluchajuci EVENT HANDLER.
!!! 56. EVENTS je mozne vyvolavat i MANUALNE a to 2 SPOSOBMI.
   A. Volanim METHODS ako napriklad click() ci submbit(), ktore ak maju parametre, pouzivaju sa na registraciu EVENT HANDLER.
   B. Pouzitim METHOD trigger().
57. Pre MANUALNE vyvolanie EVENTS pomocou METHODS ako click() ci submbit() platia nasledujuce zasady.
    A. Normalne sa tieto METHODS pouzivaju na registraciu EVENT HANDLERS. Ak su vsak volane ako BEZPARAMETRICKE, sposobia MANUALNE VYVOLANIE EVENT.
	B. Tymto sposobom sa vyvolavaju EVENT HANDLERS zaregistrovane pomocou JQUERY METHODS ako click() ci submit(), alebo priradenim EVENT HANDLER do EVENT PROPERTY. Avsak EVENT HANDLERS zaregistrovane volanim FUNCTIONS addEventListener() a attachEvent() vyvolane NIE SU.
	C. EVENT HANDLERS su vyvolavne SYNCHORNNE a teda volanie METHODS ako click() ci submbit() NESKONCI kym neskoncia vsetky zaregistrovane EVENT HANDLERS.
	D. EVENT HANDLERS vyvolane cez click() ci submbit() vykonavaju BUBBLING.
	E. Ak niektory EVENT HANDLER vrati hodnotu 'false', tak dalsie EVENT HANDLER sa nevyvolaju.
58. Pre MANUALNE vyvolanie EVENTS pomocou METHOD trigger platia nasledujuce zasady.
   A. Ako 1. PARAMETER je EVENT TYPE. Na rozdiel od bind() ci unbind() vsak PARAMETER NEMOZE obsahovat VIAC EVENT oddelenych znakom ' '.
   B. EVENT TYPES mozu obsahovat NAMESPACES. Ak chcem vyvolat EVENT HANDLERS BEZ NAMESPACE je nutne dat za EVENT TYPE znak '!'.
   C. Ako 1. PARAMETER moze byt aj Event OBJECT (v PROPERTY 'type' musi mat nastaveny EVENT TYPE), tak sa manualne vyvolaju EVENT HANDLERS s tymto Event OBJECT. Je mozne poslat i CUSTOM OBJECT s CUSTOM PROPERTIES. JQUERY potom vytvori Event OBJECT okolo tohto CUSTOM OBJECT a prida don vsetky CUSTOM PROPERTIES.
   D. Ako 2. PARAMETER moze byt CUSTOM VALUE, ktora je prenesena do EVENT HANDLERS ako 2. PARAMETER.
59. Pomocou GLOBAL FUNCTION JQuery.event.trigger() su spustene EVENT HANDLERS daneho EVENT TYPE na VSETKYCH ELEMENTS.
60. METHOD triggerHandler() je ANALOGIOU METHOD trigger(), ale nevykonava BUBBLING, ani nevola DEFAULT EVENT HANDLERS.
!!! 61. Pomocou METHOD bind() je mozne registrovat aj CUSTOM EVENT, ktore je nasledne mozne vyvolavat pomocou triggerEvent().
!!! 62. METHOD delegate() a undelegate() registruju a odregistruju EVENT HANDLERS pre ELEMENTS, ktore su pridane DYNAMICKY do DOCUMENT. Ak NOVY ELEMENT, ktory NEMA priradene ZIADNE EVENT HANDLERS vloziom do DOCUMENT, tak sa jeho EVENT HANDLERS NEVOLAJU. Ak vsak EVENT TYPE zaregistruje cez delegate(), tak sa aj pre tieto NOVE ELEMENTS zavolaju EVENT HANDLERS. Kedze interne delegate() a undelegate() pouzivau EVENT BUBBLING, aj je EVENT BUBLING pre dany EVENT ZRUSENY, tak sa EVENT HANDLERS na NOVE ELEMENTS NEZAVOLAJU.
63. Na registraciu a odregistraciu EVENT HANDLERS sluzia aj METHODS die() a undie().
!!! 64. JQUERY podporuje vykonavanie ANIMATIONS. ANIMATIONS su definovane v casovych intervaloch. Tieto je mozne specifikovat bud v MILLISECONDS, alebo pomocou TEXTOVYCH KONSTANT. Tieto konstanty aj s hodnotami v MILLISECONDS je mozne definovat v GLOBAL OBJECT jQuery.fx.speeds vytvorenim NOVYCH PROPERTIES, kde NAME je TEXTOVA KONSTANTA a VALUE je hodnota v MILLISECONDS.
65. ANIMATIONS je mozne vypnut nastavenim PROPERTY jQuery.fx.off na 'true'.
!!!!! 66. JQUERY ANIMATION su ASYNCHRONNE. METHODS vykonavajuce ANIMATIONS OKAMZITE SKONCIA a ANIMATIONS su vykonavane v separatnom THREAD. Po skonceni ANIMATION je volany CALLBACK, ktory bol zaregistrovany ako 2. PARAMETER ANIMATION FUNCTION.
!!! 67. Ak sa zavola ANIMATION nad ELEMENT, ktory uz JE ANIMOVANY, tak sa NOVA ANIMATION ulozi do QUEUE a vykona PO SKONCENI PREDCHADZAJUCEJ.
!!!!! 68. Do ANIMATION METHODS je mozne zaslat i CUSTOM OBJECT, ktoreho PROPERTIES udavaju parametre ANIMATION. Mena PROPERTIES sa musia zhodovat s menami PROPERTIES v jQuery.fx.
69. METHOD fadeIn() animuje OPACITY az kym ELEMENT nie je KOMPLETNE VIDITELNY. 1. PARAMETER je DURATION. 2. PARAMETER je CALLBACK volany po skonceni ANIMATION.
70. METHOD fadeOut() animuje OPACITY az kym ELEMENT nie je KOMPLETNE NEVIDITELNY. 1. PARAMETER je DURATION. 2. PARAMETER je CALLBACK volany po skonceni ANIMATION.
71. METHOD fadeTo() animuje OPACITY po hodnotu 2. PARAMETRU. 1. PARAMETER je DURATION. 2. PARAMETER je cielova hodnota OPACITY do ktorej sa ma robit animacia. 3. PARAMETER je CALLBACK volany po skonceni ANIMATION.
72. METHOD show() je podobna fadeIn(), ale okrem OPACITY animuje aj HEIGHT a WIDTH az kym ELEMENT nie je KOMPLETNE VIDITELNY. 1. PARAMETER je DURATION. 2. PARAMETER je CALLBACK volany po skonceni ANIMATION.
73. METHOD hide() je podobna fadeOut(), ale okrem OPACITY animuje aj HEIGHT a WIDTH az kym ELEMENT nie je KOMPLETNE NEVIDITELNY. 1. PARAMETER je DURATION. 2. PARAMETER je CALLBACK volany po skonceni ANIMATION.
74. METHOD toggle() vykona hide() ak je ELEMENT VIDITELNY a show() ak je NEVIDITELNY.
75. METHOD slideDown() animuje HEIGHT a az kym ELEMENT nie je KOMPLETNE VIDITELNY. 1. PARAMETER je DURATION. 2. PARAMETER je CALLBACK volany po skonceni ANIMATION.
76. METHOD slideUp() animuje HEIGHT kym ELEMENT nie je KOMPLETNE NEVIDITELNY. 1. PARAMETER je DURATION. 2. PARAMETER je CALLBACK volany po skonceni ANIMATION.
77. METHOD slideToggle() vykona slideUp() ak je ELEMENT VIDITELNY a slideDown() ak je NEVIDITELNY.
!!! 78. METHOD animate() umoznuje realizovat CUSTOM ANIMATIONS. Ma nasledujuce vlastnosti.
   A. Ako 1. PARAMETER sa zadava CUSTOM OBJECT, ktoreho PROPERTIES MUSIA mat ROVNAKE MENA ako CSS PROPERTIES a VALUES su CIELOVE HODNOTY do ktorych sa ANIMATION vykonava z AKTUALNYCH HODNOT.
   B. Ako 2. PARAMETER sa zadava CUSTOM OBJECT, ktoreho PROPERTIES obsahuju ANIMATION OPTIONS. Patria sem napriklad 'duration' urcuje cas ANIMATION, 'complete' urcujuci CALLBACK FUNCTION, 'step' urcuje FUNCTION, ktora sa vola pri kazdom kroku ANIMATION a 'queued' urcuje ci ANIMATION ak prebieha ina, ma byt ulozena na QUEUE. Ak je nastavena na 'false' tak nova ANIMATION je vykonana OKAMZITE. PROPERTY 'easing' urcuje typ EASING FUNCTION a PROPERTY 'specialEasing' umoznuje definovat pre KAZDY ANIMATION INU EASING FUNCTION nastavenim CUSTOM OBJECT, kde PROPERTY NAMES urcuju CSS PROPERTY, ktora bude ANIMATED a VALUE urcuje MENO EASING FUNCION, ktora sa ma pre danu CSS PROPERTY APLIKOVAT.
   C. Alternativne je za 2., 3. a 4. PARAMETER mozne zadat DURATION, EASING FUNCTION a CALLBAC FUNCTION.
   !!! D. ANIMATIONS je mozne vykonavat IBA na CISELNE CSS PROPERTIES. Na COLORS, FONTS ci ENUMERATION PROPERTIES ich NIE JE MOZNE APLIKOVAT.
   !!! E. Relativne hodnoty (vysledna hodnota sa urci ako atualna plus/minus relativna) do ktorych sa vykonava ANIMATION sa urcuju tak, ze sa pred ciselnu hodnotu zadanu ako STRING sa vlozi STRING '+=', alebo '-='.
   F. Namiesto ciselnych hodnot je ako hodnoty do ktorych sa vykonava ANIMATION mozne vlozit i konstanty 'hide', show' a 'toggle'.
!!! 79. EASING FUNCTION je FUNCTION pouzivana na mapovanie CASU a HODNOTY ANIMATION. FUNCTION ma PARAMETER v INTERVALE <0,1> a vracia hodnoty taktiez v INTERVALE <0,1>. Pre hodnotu 0 by mala vracat hodnotu 0 a pre hodnotu 1 by mala vracat hodnotu 1. CUSTOM EASING FUNCTIONS je mozne ulozit ako PROPERTIES OBJECT jQuery.easing, kde PROPERTY NAME je MENO EASING FUNCTION a VALUE je samotna EASING FUNCTION. Taketo CUSTOM EASING FUNCTIONS je mozne pouzivat v METHOD animate().
!!! 80. METHOD STOP umoznuje ZASTAVIT ANIMATION. 1. PARAMETER urcuje ci sa ma zaroven vycistit aj QUEUE ANIMATIONS. 2. PARAMETER urcuje ci ma VALUE ANIMATED PROPERTY skoncit na KONCOVU VALUE, alebo ostat na aktualnej VALUE.
81. METHOD delay() umoznuje POZASTAVIT ANIMATION. 1. PARAMETER urcuje cas na kolko sa ma ANIMATION POZASTAVIT. 2. PARAMETER urcuje meno QUEUE na ktoru sa aplikuje.
82. JQUERY vyuziva pri realizacii ASYNCHRONNYCH operacii ako su napriklad ANIMATIONS QUEUES. QUEUES su implementovane nasledujucim sposobom.
   A. QUEUES su asociovane Element OBJECT co znamena, ze KAZDY Element OBJECT ma VLASTNU QUEUE.
   B. Do QUEUE je mozne vkladat FUNCTIONS, ktore sa SEKVENCNE avsak ASYNCHRONNE na MAIN THREAD vykonavaju.
   C. METHOD queue() uklada FUNCTION zadanu ako 1., alebo 2. PARAMETER do QUEUE. OPTIONALY ako 1. PARAMETER moze by NAZOV QUEUE.
   D. METHOD dequeue() vyberie FUNCTION z VRCHOLU QUEUE a SPUSTI jej VYKONAVANIE. Ak je QUEUE PRAZDNA, NEROBI NIC.
   !!! E. Zaregistrovana CALLBACK FUNCTION vyvolana cez QUEUE ma ako PARAMETER specialny OBJECT typu FUNCTION, ktoru MUSI CALLBACK FUNCTION na konci svojho tela VYVOLAT, aby sa vybrala dalsia CALLBACK FUNCTION z QUEUE a zacala vykonavat. Ak by sa tak NESTALO, tak by CALLBACK FUNCTION OSTALI v QUEUE NESPRACOVANE.
   F. Ak sa ako PARAMETER do queue() zasle ARRAY FUNCTIONS, tak tieto FUNCTIONS NARHADIA EXISTUJUCE FUNCTIONS v QUEUE.
   G. Ak sa queue() vola BEZ PARAMETROV, vracia ARRAY zaregistrovanych FUNCTIONS.
   H. METHOD clearQueue() vymaze QUEUE.
   !!! I. QUEUES pouzivane pre ANIMATIONS pouzivaju STRING 'fx' ako QUEUE NAME.
!!! 83. METHOD load() sluzi na odoslanie a prijem AJAX HTTP REQUEST. Platia pre nu nasledujuce fakty.
   A. Ako 1. PARAMETER je URL na ktory sa na vykonat HTTP REQUEST.
   !!! B. METHOD load() standardne vklada nacitany CONTENT ako CONTENT vsetkych Element OBJECTS v JQUERY OBJECT. Avsak ako URL obsahuje SYNTAX [URL #CSSSelector], kde ' ' je POVINNA, tak sa vyberie iba CONTENT Element OBJECTS, ktore boli vybrane 'CSSSelector'.
   C. Ako 2. PARAMETER mozu byt CUSTOM DATA, ktore sa priradia ako QUERY STRING so URL.
   D. Ako 2., alebo 3. PARAMETER moze byt CALLBACK FUNCTION, ktora sa vola po skonceni AJAX QUERY. Obsahuje 3 PARAMETRE. Ako 1. PARAMETER je AJAX RESPONSE nacitany zo SERVERA. 2. PARAMETER obsahuje JQUERY AJAX STATUS CODE obsahujuci STANDARDIZOVANY STATUS CODE. 3. PARAMETER je XMLHttpRequest, ktory AJAX REQUEST vykonal.
!!! 84. STATIC FUNCTION jQuery.getScript() pomocou AJAX stiahne .JS FILE a spusti kod v GLOBAL SCOPE. Ma nasledujuce vlastnosti.
   A. Ako 1. PARAMETER je URL na JS FILE, ktory sa ma stiahnut a vykonat.
   B. Ako 2. PARAMETER moze byt CALLBACK FUNCTION, ktora sa vola po USPESNOM skonceni AJAX QUERY a VYKONANI stiahnuteho JavaScript kodu. Obsahuje 3 PARAMETRE. Ako 1. PARAMETER je AJAX RESPONSE nacitany zo SERVERA. 2. PARAMETER obsahuje JQUERY AJAX STATUS CODE obsahujuci STANDARDIZOVANY STATUS CODE. 3. PARAMETER je XMLHttpRequest, ktory AJAX REQUEST vykonal.
   !!! C. CALLBACK je volany IBA pri USPESNOM nacitani a SPUSTENI JavaScript kodu.
   D. RETURN VALUE jQuery.getScript() je XMLHttpRequest, ktory AJAX REQUEST vykonal.
!!! 85. STATIC FUNCTION jQuery.getJSON() pomocou AJAX stiahne .JSON FILE, parsuje ho a zavola CALLBACK v ktorom je mozne JSON data spracovat. Ma nasledujuce vlastnosti.
   A. Ako 1. PARAMETER je URL na .JSON FILE, ktory sa na nacitat.
   B. Ako 2. PARAMETER mozu byt CUSTOM DATA, ktore sa priradia ako QUERY STRING do URL.
   C. Ako 2., alebo 3. PARAMETER moze byt CALLBACK FUNCTION, ktora sa vola po skonceni AJAX QUERY. Obsahuje 3 PARAMETRE. Ako 1. PARAMETER je PARSED JSON OBJECT nacitany zo SERVERA. 2. PARAMETER obsahuje JQUERY AJAX STATUS CODE obsahujuci STANDARDIZOVANY STATUS CODE. 3. PARAMETER je XMLHttpRequest, ktory AJAX REQUEST vykonal.
!!! 86. STATIC FUNCTION jQuery.get() a jQuery.post() pomocou AJAX stiahnu zadany FILE zo SERVERA a PODLA TYPU zadaneho ako PARAMETER, alebo podla MIME TYPE vrateneho zo SERVERA ho parsuje a zaslu do CALLBACK v ktorom je mozne data spracovat. Maju nasledujuce vlastnosti.
   A. STATIC FUNCTION jQuery.get() zasiela GET a STATIC FUNCTION jQuery.post() zasiela POST REQUEST na SERVER.
   B. Ako 1. PARAMETER je URL na FILE, ktory sa na nacitat, pripadne aj parsovat.
   C. Ako 2. PARAMETER mozu byt CUSTOM DATA, ktore sa priradia ako QUERY STRING do URL.
   D. Ako 2., alebo 3. PARAMETER moze byt CALLBACK FUNCTION, ktora sa vola po skonceni AJAX QUERY. Obsahuje 3 PARAMETRE. Ako 1. PARAMETER su UNPARSED, alebo PARSED DATA nacitane zo SERVERA. 2. PARAMETER obsahuje JQUERY AJAX STATUS CODE obsahujuci STANDARDIZOVANY STATUS CODE. 3. PARAMETER je XMLHttpRequest, ktory AJAX REQUEST vykonal.
   E. Ako 3., alebo 4. PARAMETER je TYPE DAT, ktore sa nacitavaju zo SERVERA. Pokial tento PARAMETER NIE JE DEFINOVANY, pouzije sa MIME TYPE vrateny z HTTP RESPONSE ako TYP DAT a ak su tieto data ZNAME, tak su PARSOVANE.
   F. STATIC FUNCTION jQuery.get() a jQuery.post() podporuju data typu 'text', 'html', 'xml', 'script', 'json' a 'jsonp'.
!!!!! 87. STATIC FUNCTION jQuery.ajax() je UNIVERZALNA FUNCTION, ktoru vsetky ostatne AJAX FUNCTIONS volaju na vykonanie AJAX REQUEST. Ma JEDINY PARAMETER typu CUSTOM OBJECT, ktoreho PROPERTIES s presne stanovenymi NAMES urcuju nastavenia AJAX REQUST ako su napriklad typ HTTP VERB, URL, DATA, CALLBACK FUNCTIONS (pri SUCCESS, ERRORS, COMPLETE a podobne) ci DATA TYPE.
!!! 88. STATIC FUNCTION jQuery.Setup() umoznuje pomocou zaslania CUSTOM OBJECT s presne pomenovanymi PROPERTIES nastavit DEFAULT OPTIONS ako su napriklad TIMEOUTS ci CACHE OPTIONS pre VSETKY AJAX REQUEST vratane tych, ktore su vyslane pomocou FUNCTIONS ako jQuery.get() ci jQuery.post().
!!! 89. JQUERY AJAX je schopny zasielat EVENTS o priebehu svoje cinnosti. Platia pre ne nasledujuce zasady.
   A. AJAX EVENTS mozu byt zaregistrovane pomocou bind(), alebo volanim SPECIALIZOVANEJ METHOD ako napriklad ajaxSuccess() ci ajaxError().
   B. EVENT TYPE 'ajaxSend' je zasielany pri odoslani AJAX REQUEST. Do EVENT HANDLER su zaslane PARAMETER XMLHttpRequest a OPTION OBJECT, ktory sa zaslal do FUNCTION jQuery.ajax().
   C. EVENT TYPE 'ajaxComplete' je zasielany pri USPESNOM doruceni AJAX RESPONSE. Do EVENT HANDLER su zaslane PARAMETER XMLHttpRequest a OPTION OBJECT, ktory sa zaslal do FUNCTION jQuery.ajax().
   D. EVENT TYPE 'ajaxError' je zasielany pri NEUSPESNOM doruceni AJAX RESPONSE. Do EVENT HANDLER su zaslane PARAMETER XMLHttpRequest, OPTION OBJECT, ktory sa zaslal do FUNCTION jQuery.ajax() a Error OBJECT s textom ERROR, ktory nastal.
   E. EVENT TYPE 'ajaxComplete' je zasielany pri ukonceni AJAX operacie. Do EVENT HANDLER su zaslane PARAMETER XMLHttpRequest a OPTION OBJECT, ktory sa zaslal do FUNCTION jQuery.ajax().
   !!! F. AJAX EVENTS su volane GLOBALNE a mozu byt naviazane na LUBOVOLNY ELEMENT.
   G. EVENT TYPES 'ajaxStart' a 'ajaxStop' su volane pri spusteni, alebo zastaveni NETWORK ACTIVITY v suvislosti s vykonavanim AJAX. Ak je v QUEUE VIACERO AJAX REQUESTS, tak tieto EVENTS su volane pre cely obsaho QUEUE IBA RAZ.
90. METHOD first() vracia JQUERY OBJECT obsahujuci PRVY ELEMENT.
91. METHOD last() vracia JQUERY OBJECT obsahujuci POSLEDNY ELEMENT.
92. METHOD eq() vracia JQUERY OBJECT obsahujuci ELEMENT na danom INDEXE. INDEX moze byt aj ZAPORNY.
93. METHOD slice() vracia JQUERY OBJECT obsahujuci ELEMENTS s INDEXAMI <M,N).
94. METHOD filter() vracia JQUERY OBJECT obsahujuci ELEMENTS, pre ktore PREDICATE vracia TRUE. Namiesto PREDICATE moze byt aj CSS SELECTOR ci iny JQUERY OBJECT s ktorym sa potom vykona INTERSECTION.
95. METHOD not() vracia JQUERY OBJECT obsahujuci ELEMENTS, pre ktore PREDICATE vracia FALSE. Namiesto PREDICATE moze byt aj CSS SELECTOR ci iny JQUERY OBJECT pricom v tomto pripade sa vracaju ELEMENTS, ktore NIE SU OBSIAHNUTE v JQUERY prenesenom ako PARAMETER.
96. METHOD has() vracia JQUERY OBJECT obsahujuci ELEMENTS, ktore obsahuju CHILD ELEMENTS zodpovedajuce danemu CSS SELECTOR.
97. METHOD add() vracia JQUERY OBJECT obsahujuci POVODNE ELEMENTS doplnene o NOVE ELEMENTS zadane ako PARAMETRE. EXISTUJUCE ELEMENTS su NAHRADENE.
98. METHOD find() vracia JQUERY OBJECT obsahujuci CHILD ELEMENTS (aj vnorene) POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
99. METHOD children() vracia JQUERY OBJECT obsahujuci PRIAME CHILD ELEMENTS POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
100. METHOD contents() vracia JQUERY OBJECT obsahujuci PRIAME CHILD ELEMENTS POVODNYCH ELEMENTS VRATANE TEXT NODES. METHOD je BEZPARAMETRICKA.
101. METHOD nextAll() vracia JQUERY OBJECT obsahujuci NASLEDUJUCE SIBLING ELEMENTS POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
102. METHOD prevAll() vracia JQUERY OBJECT obsahujuci PREDCHADZAJUCE SIBLING ELEMENTS POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
103. METHOD next() vracia JQUERY OBJECT obsahujuci NASLEDUJUCI SIBLING ELEMENT POVODNYCH ELEMENTS, ktory vyhovuju zadanemu CSS SELECTOR.
104. METHOD prev() vracia JQUERY OBJECT obsahujuci PREDCHADZAJUCI SIBLING ELEMENT POVODNYCH ELEMENTS, ktory vyhovuju zadanemu CSS SELECTOR.
105. METHOD siblings() vracia JQUERY OBJECT obsahujuci SIBLING ELEMENTS POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
106. METHOD nextUntil() vracia JQUERY OBJECT obsahujuci NASLEDUJUCE SIBLING ELEMENTS POVODNYCH ELEMENTS pokym sa nenajde ELEMENT, ktory vyhovuje zadanemu CSS SELECTOR.
107. METHOD prevUntil() vracia JQUERY OBJECT obsahujuci PREDCHADZAJUCE SIBLING ELEMENTS POVODNYCH ELEMENTS pokym sa nenajde ELEMENT, ktory vyhovuje zadanemu CSS SELECTOR.
108. METHOD parent() vracia JQUERY OBJECT obsahujuci PARENT ELEMENT POVODNYCH ELEMENTS, ktory vyhovuje zadanemu CSS SELECTOR.
109. METHOD parents() vracia JQUERY OBJECT obsahujuci PARENT ELEMENTS POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
110. METHOD parentUntil() vracia JQUERY OBJECT obsahujuci PARENT ELEMENTS POVODNYCH ELEMENTS pokym sa nenajde ELEMENT, ktory vyhovuje zadanemu CSS SELECTOR.
111. METHOD closest() vracia JQUERY OBJECT obsahujuci CURRENT, alebo PARENT ELEMENTS POVODNYCH ELEMENTS, ktore vyhovuju zadanemu CSS SELECTOR.
!!! 112. METHOD end() ZRUSI platnost poslednej FILTRACNEJ METHOD aplikovanej na JQUERY OBJECT a vrateny JQUERY OBJECT obsahuje ELEMENTS akokeby k poslednej FILTRACII NEDOSLO.
!!! 113. METHOD pushStack() je OPAKOM end() a sposobi to, ze do JQEURY vlozi NOVE ELEMENTS simulujuc akokeby tieto ELEMENTS boli vytvorene vdaka FILTRACII. Efekt pushStack() je mozne zrusit volanit end().
!!! 114. METHOD addSelf() vracia JQUERY OBJECT, ktory obsahuje AKTUALNE ELEMENTS a ELEMENTS z POSLEDNEJ FILTRACIE.
!!! 115. JQUERY poskytuje jednoduchy mechanizmus na vytvaranie PLUGINS.
   A. PLUGIN je .JS FILE, ktory sa vklada pomocou <script> ELEMENT do HTML PAGE ZA <script> ELEMENT referujuci na samotny JQUERY .JS FILE.
   B. Ak ma PLUGIN obsahovat JQUERY METHOD, je potrebne vlozit CUSTOM FUNCTION ako PROPERTY JQUERY PROTOTYPE OBJECT 'jQuery.fn'.
   C. Ak ma PLUGIN obsahovat JQUERY STATIC METHOD, je potrebne vlozit CUSTOM FUNCTION ako PROPERTY JQUERY OBJECT 'jQuery'.
   !!! D. Ak ma vlozena METHOD, alebo STATIC METHOD podporovat METHOD CHAINING musi vratit JQUERY OBJECT ako RETURN VALUE. Ak NEROBI FILTRACIU, tak zvycajne vracia 'this'.
116. JQUERY PLUGIN LIBRARY je sada JQUERY PLUGINS, ktore zjednodusuju pracu s ELEMENTS a obsahuju mnozstvo operacii nad WEB PAGE GUI.
//-------------------------------------------------------------------------------------------------------