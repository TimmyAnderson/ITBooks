//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje CLASSES a MODULES v JavaScripte.
!!! 2. V JavaScript koncept CLASS je VYRAZNE ODLISNY od toho ako su realizovane v C++. V JavaScript 2 OBJECTS patria do toho isteho CLASS (maju ten isty TYPE), ak DEDIA PROPERTIES z TOHO ISTEHO PROTOTYPE. Taketo OBJECTS maju TIE ISTE PROPERTIES a daju sa POVAZOVAT za OBJECTS tej ISTEJ CLASS.
!!! 3. V JavaScript NEEXISTUJE ziadna analogia voci KEYWORD 'class', ako je tomu v C++. CLASSES sa vytvaraju tak, ze sa definuje CONSTRUCTOR, ktory vytvori OBJECT s definovanymi PROPERTIES, ktore su potom pre kazdy OBJECT, ktory vznikne volanim tohoto CONSTRUCTOR ROVNAKE.
!!!!! 4. PROTOTYPE je v JavaScript NORMALNY OBJECT, ktory sa pouziva ako sablona pre vytvorenie noveho OBJECT. Postup pri vytvoreni JavaScript CLASS je preto nasledovny.
   A. Vytvori sa OBJECT, ktormu sa priradia PROPERTIES a METHODS, ktore maju VSETKY OBJECTS daneho CLASS DEDIT. Tento OBJECT je PROTOTYPE OBJECTOM pre danu CLASS.
   B. Pomocou METHOD Object.create() sa vytvori NOVY OBJECT, ktory DEDI z PROTOTYPE OBJECT, ktory sa zasle ako PARAMETER do METHOD Object.create().
   C. OBJECT vytvoreny pomocou Object.create() DEDI VSETKY PROPERTIES a METHODS PROTOTYPE OBJECT a preto mozeme hovorit, ze vytvoreny OBJECT je INSTANCIA CLASS (PROTOTYPE OBJECT).
!!! 5. CONSTRUCTORS v JavaScript je SPECIALNA FUNCTION umoznujuce vytvorenie INSTANCII CLASS, ktora sa vola pri volani OPERATOR new. Na vytvorenie CONSTRUCTOR je nutne vykonat nasledujuce kroky.
   A. Definuje sa PROTOTYPE OBJECT, ktory obsahuje vsetky PROPERTIES a METHODS danej CLASS (MyClass).
   !!!!! B. PROTOTYPE OBJECT sa PRIRADI do 'MyClass.prototype' PROPERTY (PROPERTY CONSTUCTOR FUNCTION 'MyClass'). KEYWORD 'prototype' JE KLUCOVE, pretoze prave nanho sa JavaScript dotazuje, aby zistil PROTOTYPE OBJECT.
   !!! C. Vytvori sa CONSTRUCTOR pre MyClass. CONSTRUCTOR je FUNCTION na zaciatku ktorej JavaScript AUTOMATICKY VYTVORI NOVY OBJECT, ktory DEDI z 'MyClass.prototype'. Teda v CONSTRUCTOR NIE JE POTREBNE pouzivat Object.create().
   D. CONSTRUCTOR moze mat PARAMETERS, ktorymi CONSTRUCTOR inicializuje PROPERTIES NOVEHO OBJECT (pomocou KEYWORD 'this'), ktory vytvoril CONSTRUCTOR AUTOMATICKY.
   E. CONSTRUCTOR NEMUSI VRACAT ZIADNU HODNOTU, lebo JavaScript AUTOMATICKY vrati NOVY OBJECT, ktory pred spustenim CONSTRUCTOR AUTOMATICKY VYTVORIL.
   F. Vytvorenie OBJECTU danej CLASS sa vykonava pouzitim OPERATOR new.
!!!!! 6. Alternativou k pouzitiu CONSTRUCTOR je pouzitie KLASICKEJ FUNCTION na vytvorenie vytvorenie INSTANCII CLASS. V tomto pripade sa postupuje nasledovne.
   A. Definuje sa PROTOTYPE OBJECT, ktory obsahuje vsetky PROPERTIES a METHODS danej CLASS.
   !!! B. Zvycajne sa PROTOTYPE OBJECT asociuje s FACTORY FUNCTION ako jej PROPERTY, ale NIE JE TO NUTNE. Kludne moze byt PROTOTYPE OBJECT ako GLOBALNY OBJECT, alebo i LOKALNY OBJECT vo FACTORY FUNCTION.
   C. Definuje sa FACTORY FUNCTION, ktorej ulohou je VYTVORIT INSTANCIU OBJECT danej CLASS.
   D. FACTORY FUNCTION MUSI vytvorit instanciu CLASS volanim Object.create(PROTOTYPE_OBJECT), kde 'PROTOTYPE_OBJECT' JE OBJECT vytvoreny v bode A. Vysledkom tohto volania je NOVY OBJECT, ktory DEDI z PROTOTYPE OBJECT a teda je INSTANCIOU danej CLASS.
   E. FACTORY FUNCTION moze mat PARAMETERS, ktorymi FACTORY FUNCTION inicializuje PROPERTIES NOVEHO OBJECT.
   F. FACTORY FUNCTION vracia NOVY OBJECT danej CLASS.
   G. Vytvorenie OBJECTU danej CLASS sa vykonava obycajnym volanim FACTORY FUNCTION BEZ pouzitia OPERATOR new.
!!! 7. V JavaScript su 2 OBJECTS su instanciami TOHO ISTEHO CLASS, ak su ZDEDENE z TOHO ISTEHO PROTOTYPE OBJECTU. Nezalezi na tom, ci su vytvorene v jednom, alebo viacerych CONSTRUCTORS. Ak maju byt instanciami tej istej CLASS, musia DEDIT z TOHO ISTEHO PROTOTYPE OBJECTU.
!!! 8. Pomocou 'OPERATOR instanceof' je mozne zistit ci dany OBJECT je daneho TYPE. SYNTAX [MyObject instanceof MyClass] vracia TRUE, ak MyObject DEDI z PROPERTY 'MyClass.prototype' - teda z PROTOTYPE OBJECTU CLASS 'MyClass'.
!!! 9. Kedze v JavaScript KAZDA FUNCTION moze fungovat ako CONSTRUCTOR, tak JavaScript AUTOMATICKY pre KAZDU DEFINOVANU FUNCTION definuje v PROPERTY 'prototype' PROTOTYPE OBJECT. Tento PROTOTYPE OBJECT standardne (ak ho nevymenim za CUSTOM ako sa to robi v CONSTRUCTOR pre CUSTOM CLASSES) obsahuje PROPERTY 'constructor'. Tato PROPERTY sa odkazuje SPAT na FUNCTION. Pri definicii CUSTOM PROTOTYPE OBJECT by tento MAL mat PROPERTY 'constructor', aby korespondoval so standardom.
!!!!! 10. V JavaScript je mozne KLASICKE C++ CLASSES simulovat nasledujucim sposobom.
   A. CONSTRUCTOR je analogiou ku C++ CLASS CONSTRUCTOR a jeho NAME je CLASS NAME.
   B. PROPERTIES asociovane s CONSTRUCTOR su analogiou k C++ STATIC FIELDS.
   C. FUNCTIONS asociovane s CONSTRUCTOR su analogiou k C++ STATIC METHODS.
   D. PROPERTIES definovane v PROTOTYPE OBJECT su analogiou k C++ MEMBER FIELDS.
   E. FUNCTIONS definovane v PROTOTYPE OBJECT su analogiou k C++ MEMBER METHODS.
!!!!! 11. DEDICNOST OBJECT z PROROTYPE OBJECT je DYNAMICKA. To znaci, ze ak PO VYTVORENI OBJECT z danej CLASS (PROTOTYPE OBJECT) PRIDAM do PROTOTYPE OBJECT PRIDAM, alebo ODSTRANIM PROPERTY (FIELD, alebo METHOD), tak sa tato zmena PREMIETNE do UZ VYTVORENEHO OBJECTU. Vdaka tejto technike je mozne do STANDARDNYCH CLASSES pridavat PROPERTIES, ktore budu viditelne vo VSETKYCH OBJECTS vytvorenych z tychto CLASSES (PROTOTYPE OBJECTS).
!!! 12. V JavaScript NIE JE MOZNE JEDNOZNACNE IDENTIFIKOVAT akeho TYPE je dany OBJECT. Da sa to spravit iba niekolkymi krokmi, ktore vsak stale NEMUSIA JEDNOZNACNE IDENTIFIKOVAT TYPE daneho OBJECT.
   A. Pomocou OPERATOR typeof je mozne zistit ci dany OBJECT je PRIMITIVNEHO TYPU, alebo sa jedna o OBJECT (zdedeny z Object).
   B. Pomocou OPERATOR instanceof je mozne OVERIT ci OBJECT (zdedeny z Object) je KONKRETNEHO TYPU.
   C. Pomocou PROPERTY 'contructor', ktoru ma VACSINA OBJECTS (ale NIE VSETKY) je mozne zistit ci OBJETT je daneho TYPU.
13. JavaScript OBJECTS mozu obsahovat STANDARDNE METHODS, ktore su vyvolavane AUTOMATICKY pri operaciach ako je CONVERSION, ci COMPARISION. CLASS moze podla potreby niektore z nich implementovat. Niektore su implementovane v CLASS Object a teda KAZDY OBJECT DEDI tuto implementaciu, ktoru samozrejme moze zmenit.
   A. METHOD toString() je volana, ak je potrebne OBJECT konvertovat na STRING. Typicky sa vola napriklad pri CONCATENATION.
   B. METHOD toLocaleString() je volana pri konverzii na lokalizovany STRING.
   C. METHOD valueOf() je volana ak je OBJECT potrebne konvertovat na NUMERIC VALUE.
   D. METHOD toJSON() je volana z METHOD JSON.stringify() pri SERIALIZACII OBJECT do JSON formatu.
   E. METHOD equals() porovnava OBJECT s INYM OBJECT by VALUE. STANDARDNE COMPARSION OPERATORS porovnavaju OBJECTS by REFERENCE, takze ak je potrebne porovnavat OBJECTS by VALUE, tak je potrebne definovat METHOD equals().
   F. METHOD compareTo() porovnava OBJECT s INYM OBJECT by VALUE a vracia RELATIVNY VYSLEDOK POROVNANIA. Ak 'this' je MENSI ako PARAMETER, tak equals() musi vratit ZAPORNE CISLO. Ak 'this' je VACSI ako PARAMETER, tak equals() musi vratit KLADNE CISLO. Ak 'this' je ROVNAKY ako PARAMETER, tak equals() musi vratit 0.
!!! 14. JavaScript NEPODPORUJE PRIVATE FIELDS. Je ich vsak pomocou CLOSURES SIMULOVAT. Nasledujuce kroky ukazuju ako je mozne v CLASS 'CName' zmenit FIELD (v JavaScript je to PROPERTY) 'FirstName' na READ-ONLY PROPERTY.
   A. Z PROTOTYPE OBJECT sa VYHODI definicia 'FirstName' PROPERTY.
   !!!!! B. Do CONSTRUCTOR sa prida (ak uz tam nie je) PARAMETER 'FirstName'. Tento PARAMETER bude sluzit ako FIELD a to aj napriek tomu, ze sa jedna o PARAMETER CONSTRUCTOR. Avsak, kedze v JavaScript si FUNCTIONS drzia SCOPE v ktorom boli volane, tak PARAMETER 'FirstName' bude PLATNA HODNOTA i po SKONCENI VOLANIA CONSTRUCTOR.
   C. CONSTRUCTOR definuje CLOSURE FUNCTION FirstName(), ktora bude vracat PARAMETER 'FirstName'.
   !!! D. Kedze OBJECT ma CLOSURE FUNCTION FirstName(), ale NEMA PROPERTY 'FirstName', tak k 'FirstName' NIE JE MOZNE PRISTUPOVAT a ani do nej mozne ZAPISOVAT. Je ju mozne IBA CITAT pomocou CLOSURE FUNCTION FirstName().
!!!!! 15. INHERITANCE v JavaScript je realizovane tak, ze PROTOTYPE OBJECT DERIVED CLASS MUSI BYT ZDEDENY z PROTOTYPE OBJECT BASE CLASS. DEDENIE sa vykonava pomocou metody Object.create().
16. JavaScript umoznuje SIMULOVAT viacero OOP FEATURES.
   A. INHERITANCE sa vykonava pomocou DEDENIA PROTOTYPE OBJECTS metodou Object.create(). Priklad [CDerivedClass.prototype=Object.create(CBaseClass.prototype)].
   B. Volanie BASE CONSTRUCTOR z DERIVED CONSTRUCTOR sa vykonava pomocou FUNCTION apply(). Priklad [CBaseClass.apply(this,arguments)].
   C. OVERRIDE METHODS sa vykonavaju NAHRADENIM PROPERTY reprezentujucej METHOD v BASE CLASS novou METHOD v DERIVED CLASS. Priklad [CDerivedClass.prototype.VirtualMethod=function(){}].
   D. Z OVERRIDE METHODS je mozne volat IMPLEMENTACIE tychto METHODS v BASE CLASS pomocou FUNCTION apply(). Priklad [CBaseClass.prototype.VirtualMethodWithCallToBaseClassImplementation.apply(this,arguments)].
   E. OVERRIDE METHODS je mozne simulovat tak, ze ABSTRACT METHOD v BASE CLASS VZDI HODI EXCEPTION a teda ju nema zmysel volat. V DERIVED CLASS potom nahradim jej telo za zmysluplnu implementaciu. Priklad [AbstractMethod: function(){throw("AbstractMethod from CBaseClass MUST NOT be CALLED !");}].
!!! 17. Pomocou METHODS Object.defineProperty() a Object.defineProperty() je mozne z PROPERTY daneho OBJECT spravit NON-ENUMERABLE, NON-CONFIGURABLE, alebo READ-ONLY PROPERTY.
18. FUNCTION Object.isExtensible() vracia BOOLEAN informaciu ci dany OBJECT je EXTENSIBLE.
19. FUNCTION Object.preventExtensions() spravi z daneho OBJECT NON-EXTENSIBLE OBJECT.
20. FUNCTION Object.seal() spravi z daneho OBJECT SEALED OBJECT. SEALED OBJECT je NON-EXTENSIBLE a VSETKY JEHO VLASTNE PROPERTIES (nie BASE) su NON-CONFIGURABLE.
21. FUNCTION Object.isSealed() vracia BOOLEAN informaciu ci dany OBJECT je SEALED.
22. FUNCTION Object.freeze() spravi z daneho OBJECT FROZEN OBJECT. FROZEN OBJECT je NON-EXTENSIBLE a VSETKY JEHO VLASTNE PROPERTIES (nie BASE) su NON-CONFIGURABLE a READ-ONLY.
23. FUNCTION Object.isFrozen() vracia BOOLEAN informaciu ci dany OBJECT je FROZEN.
!!! 24. JavaScript NEPODPORUJE priamo na urovni LANGUAGE pracu s MODULES. Za MODULE je povazovany .JS FILE, avsak JavaScript NEOBSAHUJE ZIADNU SPECIFICKU SYNTAX, ktora by umoznovala explicitne pracovat s MODULES. JavaScript vsak umoznuje MODULES ci NAMESPACES SIMULOVAT.
   A. NAMESPACES je mozne simulovat pomocou OBJECT. Kedze OBJECT moze mat PROPERTIES a METHODS, tak OBJECT vytvoreny v GLOBAL SCOPE je mozne povazovat za simulaciu NAMESPACE.
   B. PRIVATE NAMESPACES (obsahujuce PRIVATE VARIABLES) je mozne simulovat definovanim LOCAL VARIABLES vo FUNCTION.
//-------------------------------------------------------------------------------------------------------