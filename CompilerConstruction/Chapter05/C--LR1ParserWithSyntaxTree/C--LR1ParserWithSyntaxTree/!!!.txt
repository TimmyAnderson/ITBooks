//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu LR(1) a LALR(1) PARSERA pre jazyk C--.
2. Program generuje z parsovaneho kodu SYNTAX TREE.
!!! 3. NODES PARSE TREE su reprezentovane triedou CParseTreeNode.
!!! 4. NODES SYNTAX TREE su reprezentovane triedou CSyntaxTreeNode a vsetkymi z nej zdedenymi CLASSES.
!!!!! 5. Program implementuje aj ERROR RECOVERY, ba dokonca i jednoduchu kontrolu proti INFINITE LOOPS pri ERROR RECOVERY. Aj ked samozrejme ERROR RECOVERY nie je idealna, v niektorych situaciach dokaze spravit celkom solidny RECOVERY, bez zahodenia velkej casti kodu.
//-------------------------------------------------------------------------------------------------------
BNF RULES pre jazyk C--.

1. PROGRAM -> DECLARATION_LIST.
2. DECLARATION_LIST -> DECLARATION_LIST DECLARATION | DECLARATION.
3. DECLARATION -> VARIABLE_DECLARATION | FUNCTION_DECLARATION.
4. VARIABLE_DECLARATION -> TYPE_SPECIFIER id; | TYPE_SPECIFIER id[num];.
5. TYPE_SPECIFIER -> int | string | void.
6. FUNCTION_DECLARATION -> TYPE_SPECIFIER id(PARAMS) COMPOUND_STATEMENT.
7. PARAMS -> PARAM_LIST | void.
8. PARAM_LIST -> PARAM_LIST,PARAM | PARAM.
9. PARAM -> TYPE_SPECIFIER id | TYPE_SPECIFIER id[].
10. COMPOUND_STATEMENT -> {LOCAL_DECLARATIONS STATEMENT_LIST}.
11. LOCAL_DECLARATIONS -> LOCAL_DECLARATIONS VARIABLE_DECLARATION | ɛ.
12. STATEMENT_LIST -> STATEMENT_LIST STATEMENT | ɛ.
13. STATEMENT -> EXPRESSION_STATEMENT | COMPOUND_STATEMENT | SELECTION_STATEMENT | ITERATION_STATEMENT | RETURN_STATEMENT.
14. EXPRESSION_STATEMENT -> EXPRESSION; | ;.
15. SELECTION_STATEMENT -> if (EXPRESSION) STATEMENT | if (EXPRESSION) STATEMENT else STATEMENT.
16. ITERATION_STATEMENT -> while (EXPRESSION) STATEMENT.
17. RETURN_STATEMENT -> return; | return(EXPRESSION);.
18. EXPRESSION -> VARIABLE=EXPRESSION | SIMPLE_EXPRESSION.
19. VARIABLE -> id | id[EXPRESSION].
20. SIMPLE_EXPRESSION -> ADDITIVE_EXPRESSION COMPARE_OPERATION ADDITIVE_EXPRESSION | ADDITIVE_EXPRESSION.
21. COMPARE_OPERATION -> <= | < | > | >= | == | !=.
22. ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION ADD_OPERATION TERM | TERM.
23. ADD_OPERATION -> + | -.
24. TERM -> TERM MUL_OPERATION FACTOR | FACTOR.
25. MUL_OPERATION -> * | /.
26. FACTOR -> (EXPRESSION) | VARIABLE | CALL | num | string_literal.
27. CALL -> id(ARGS).
28. ARGS -> ARG_LIST | ɛ.
29. ARG_LIST -> ARG_LIST,EXPRESSION | EXPRESSION.
//-------------------------------------------------------------------------------------------------------