//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje pouzitie SPRING CONTEXT.
2. SPRING CONTEXT je MEMORY BLOCK v ktorom su ulozene SPRING OBJECTS.
3. SPRING OBJECTS su OBJECTS, ktore su spravovane SPRING FRAMEWORK a nazyvaju sa SPRING BEANS.
!!! 4. SPRING BEANS su vytvarane SPRING FRAMEWORK pomocou INVERSION OF CONTROL CONTAINER. INVERSION OF CONTROL CONTAINER je zodpoveny za vytvaranie, konfiguraciu a spravu SPIRNG BEANS.
!!!!! 5. Na to, aby JAVA OBJECT bol povazovany za SPRING BEAN, je ho nutne vytvorit pomocou INVERSION OF CONTROL CONTAINER. Tym padom je SPRING BEAN automaticky zaradeny do SPRING CONTEXT, ktory je asociovany s danym INVERSION OF CONTROL CONTAINER.
!!! 6. SPRING BEAN ma tu vyhodu oproti JAVA OBJECT, ze moze vyuzivat funkcionality SPRING FRAMEWORK.
!!! 7. Nie kazdy JAVA OBJECT musi byt zaroven aj SPRING BEAN. Iba tie, ktore maju vyuzivat functionality SPRING FRAMEWORK.
!!! 8. PROGRAM moze obsahovat aj viacero SPRING CONTEXTS, ktore vytvaraju nezavisle instancie SPRING BEANS.
9. MAVEN je najpouzivanejsi BUILD TOOL pre JAVU. MAVEN umoznuje vykonat nasledujuce veci.
   A. DOWNLOAD vsetkych DEPENDENCIES, ktore dany PROGRAM potrebuje.
   B. Spustenie TESTS.
   C. SYNTAX VALIDATION podla nastavenych RULES.
   D. Kontrola SECURITY VULNERABILITIES.
   E. Kompilacia PROGRAMU.
   F. Vytvorenie EXECUTABLE PACKAGE.
10. Pri vytvarani MAVEN PROJECT je nutne definovat nasledujuce PROPERTIES.
   A. GROUP ID urcuje nazov SOLUTION v ktorom moze byt viacero PROJECTS.
   B. ARTIFACT ID urcuje nazov PROJECT.
   C. VERSION urcuje VERSION daneho PROJECT.
11. MAVEN PROJECT ma nasledujucu strukturu.
   A. FILE [pom.xml] obsahuje konfiguraciu MAVEN PROJECT.
   B. DIRECTORY [src] obsahuje vsetky FILES, ktore su sucastou MAVEN PROJECT.
   C. DIRECTORY [src\main] obsahuje SOURCE CODE FILES a RESOURCE FILES PROGRAMU.
   D. DIRECTORY [src\main\java] obsahuje SOURCE CODE FILES PROGRAMU.
   E. DIRECTORY [src\main\resources] obsahuje RESOURCE FILES PROGRAMU.
   F. DIRECTORY [src\test] obsahuje SOURCE CODE FILES a RESOURCE FILES pre UNIT TESTS.
   G. DIRECTORY [src\test\java] obsahuje SOURCE CODE FILES pre UNIT TESTS.
   H. DIRECTORY [src\test\resources] obsahuje RESOURCE FILES pre UNIT TESTS.
12. DEPENDENCIES na EXTERNAL LIBRARIES sa pridavaju editaciou FILE [pom.xml]. DEPENDENCIES sa pridavaju nasledujucim sposobom.
   A. Do FILE [pom.xml] sa prida XML ELEMENT [dependencies].
   B. Pre kazdu DEPENDENCY sa do XML ELEMENT [dependencies] prida jeden XML ELEMENT [dependency].
   C. Pre kazdu DEPENDENCY sa do daneho XML ELEMENT [dependency] prida XML ELEMENT [groupId]. Tento XML ELEMENT obsahuje GROUP ID EXTERNAL LIBRARY.
   D. Pre kazdu DEPENDENCY sa do daneho XML ELEMENT [dependency] prida XML ELEMENT [artifactId]. Tento XML ELEMENT obsahuje ARTIFACT ID EXTERNAL LIBRARY.
   E. Pre kazdu DEPENDENCY sa do daneho XML ELEMENT [dependency] prida XML ELEMENT [version]. Tento XML ELEMENT obsahuje VERSION EXTERNAL LIBRARY.
13. SPRING BEANS je mozne pridat do SPRING CONTEXT nasledujucimi sposobmi.
   A. Pouzitim ANNOTATION [@Bean].
   B. Pouzitim STEREOTYPE ANNOTATIONS.
   C. Programovo.
14. SPRING FRAMEWORK je modularny co znamena, ze je rozdeleny na mnozstvo nezavislych MODULES. PROGRAM moze podla potreby pridat iba tie MODULES, ktore realne vyuziva.
!!! 15. SPRING FRAMEWORK MODULES maju GROUP ID [org.springframework].
16. SPRING CONTEXT je v MODULE s ARTIFACT ID [spring-context].
17. CLASS [AnnotationConfigApplicationContext] reprezentuje SPRING CONTEXT, ktory je konfigurovany pomocou ANNOTATIONS. Je to iba jedna z CLASSES, ktore implementuju SPRING CONTEXT.
18. Ak ma byt JAVA OBJECT vytvoreny ako SPRING BEAN a vyuzivat vsetky funkcionality SPRING FRAMEWORK su potrebne nasledujuce kroky.
   A. Definovanie CONFIGURATION CLASS.
   B. Pridanie FACTORY METHOD do CONFIGURATION CLASS, ktora vytvara instanciu SPRING BEAN.
   C. Vytvorenie instancie SPRING BEAN pomocou CLASS [AnnotationConfigApplicationContext].
19. CONFIGURATION CLASS je obsahuje CONFIGURATIONS SPRING BEANS OBJECTS. Platia pre nu nasledujuce fakty.
   A. CONFIGURATION CLASS obsahuje rozlicne CONFIGURATIONS BEANS OBJECTS a SPRING FRAMEWORK.
   B. CONFIGURATION CLASS je oznacena pomocou ANNOTATION [@Configuration].
   C. CONFIGURATION CLASS obsahuje FACTORY METHODS, ktore vytvaraju instancie SPRING BEANS.
20. CONFIGURATION CLASS obsahuje FACTORY METHODS, ktore vytvaraju instancie SPRING BEANS. Pre FACTORY METHODS platia nasledujuce fakty.
   A. FACTORY METHOD musi vracat TYPE SPRING BEAN CLASS.
   B. FACTORY METHOD musi byt oznacena pomocou ANNOTATION [@Bean].
21. Vytvaranie SPRING BEANS sa realizuje v nasledujucich krokoch.
   A. Vytvori sa instancia CLASS [AnnotationConfigApplicationContext], ktorej sa ako PARAMETER da TYPE CONFIGURATION CLASS.
   B. Zavola sa METHOD [<T> T AnnotationConfigApplicationContext.getBean(Class<T> RequiredType) throws BeansException], ktore ktorej sa ako PARAMETER da TYPE SPRING BEAN CLASS, ktorej instancia sa ma vytvorit. Nasledne je mozne SPRING BEAN mozne pouzivat.
   C. V pripade, ze sa instancia CLASS [AnnotationConfigApplicationContext] sa uz nepouziva, treba ju uzatvorit volanim METHOD [instancia CLASS [void AnnotationConfigApplicationContext.close()].
!!! 22. SPRING BEANS OBJECT mozu mat aj PRIMITIVE TYPES ako TYPE [Integer] ci STRING TYPE [String].
!!! 23. ANNOTATION [@Bean] umoznuje priradit CUSTOM NAME FACTORY METHOD, ktora sa pouziva na identifikaciu, ktora METHOD sa ma na vytvorenie instancie SPRING BEAN pouzit.
   A. Ak ANNOTATION [@Bean] NEOBSAHUJE CUSTOM NAME, tak za CUSTOM NAME FACTORY METHOD sa pouzije nazov FACTORY METHOD.
   B. ANNOTATION [@Bean(name="BEAN_NAME")] nastavuje CUSTOM NAME FACTORY METHOD na NAME 'BEAN_NAME'.
   C. ANNOTATION [@Bean(value="BEAN_NAME")] nastavuje CUSTOM NAME FACTORY METHOD na NAME 'BEAN_NAME'.
   D. ANNOTATION [@Bean("BEAN_NAME")] nastavuje CUSTOM NAME FACTORY METHOD na NAME 'BEAN_NAME'.
!!! 24. ANNOTATION [@Primary] umoznuje oznacit jednu z FACTORY METHODS, ktore vytvaraju ten isty SPRING BEAN TYPE 'T' ako PRIMARY FACTORY METHOD. Pre PRIMARY FACTORY METHOD platia nasledujuce fakty.
   A. Ak v CONFIGURATION CLASS existuje viacero METHODS, ktore vytvaraju ten isty SPRING BEAN TYPE 'T', je jednu z tychto METHODS mozne oznacit ako PRIMARY FACTORY METHOD pomocou ANNOTATION [@Primary].
   B. Ak sa vytvara SPRING BEAN iba na zaklade TYPE, tak sa pouzije PRIMARY FACTORY METHOD na vytvorenie instancie SPRING BEAN TYPE 'T'.
25. SPRING BEANS je mozne vytvarat nasledujucimi sposobmi.
   A. Definovanim ich TYPE.
   B. Definovanim ich NAME a TYPE.
26. Pre vytvaranie SPRING BEANS pomocou ich TYPE platia nasledujuce fakty.
   A. Nova instancia SPRING BEAN sa vytvara volanim METHOD [<T> T BeanFactory.getBean(Class<T> RequiredType) throws BeansException].
   B. Ak v CONFIGURATION CLASS existuje iba 1 METHOD, ktora vracia instanciu SPRING BEAN TYPE 'T', tak sa pouzije tato METHOD na vytvorenie instancie SPRING BEAN.
   C. Ak v CONFIGURATION CLASS existuje VIACERO METHODS, ktore vracaju instancie SPRING BEAN TYPE 'T', pricom jedna z METHODS je oznacena ANNOTATION [@Primary], tak sa pouzije tato METHOD na vytvorenie instancie SPRING BEAN.
   !!! D. Ak v CONFIGURATION CLASS existuje VIACERO METHODS, ktore vracaju instancie SPRING BEAN TYPE 'T', pricom ani jedna METHOD nie je oznacena ANNOTATION [@Primary], tak dojde k vzniku EXCEPTION.
27. Pre vytvaranie SPRING BEANS pomocou ich NAME a TYPE platia nasledujuce fakty.
   A. Nova instancia SPRING BEAN sa vytvara volanim METHOD [<T> T BeanFactory.getBean(String Name, Class<T> RequiredType) throws BeansException].
   !!! B. Ak v CONFIGURATION CLASS NEEXISTUJE METHOD, ktora by mala nakonfigurovany NAME 'Name' a vracala TYPE 'RequiredType', dojde k vzniku EXCEPTION.
28. SPRING BEANS je mozne vytvarat aj pomocou STEREOTYPE ANNOTATIONS, ako je ANNOTATION [@Component]. Pre vytvaranie SPRING BEANS pomocou STEREOTYPE ANNOTATIONS platia nasledujuce fakty.
   A. CLASS z ktorej sa maju vytarat SPRING BEANS musi byt oznacena ANNOTATION [@Component].
   B. Na CONFIGURATION CLASS musi byt aplikovany ANNOTATION [@ComponentScan(basePackages="PACKAGE_NAMES") ], ktory definuje PACKAGES 'PACKAGE_NAMES', kde sa maju SPRING BEANS oznacene pomocou STEREOTYPE ANNOTATIONS vyhladavat.
   !!!!! C. SPRING BEANS vytvorene pomocou STEREOTYPE ANNOTATIONS su VZDY SINGLETONS. To znamena, ze opakovane volanie METHOD [<T> T BeanFactory.getBean(Class<T> RequiredType) throws BeansException] pre dany SPRING CONTEXT vrati VZDY TEN ISTY SPRING BEAN. Ak je vsak METHOD volana pre rozlicne SPRING CONTEXT, tak kazdy CONTEXT ma vlastnu instanciu SPRING BEAN.
   D. Pre SPRING BEAN oznaceny pomocou STEREOTYPE ANNOTATIONS je mozne volat INITIALIZATION METHOD, ktora inicializuje SPRING BEAN. METHOD musi byt definovana v SPRING BEAN TYPE a musi mat ANNOTATION [@PostConstruct]. Takuto METHOD SPRING vola po vytvoreni instancie SPRING BEAN.
   E. Pre SPRING BEAN oznaceny pomocou STEREOTYPE ANNOTATIONS je mozne volat DESTRUCTOR METHOD, ktora inicializuje uvolni SPRING BEAN v momente ked je uzatvarany SPRING CONTEXT. METHOD musi byt definovana v SPRING BEAN TYPE a musi mat ANNOTATION [@PreDestroy]. Takuto METHOD SPRING vola pred uvolnenim instancie SPRING BEAN, ktora nastava pri uzatvoreni SPRING CONTEXT, ktory SPRING BEAN vytvoril.
!!! 29. ANNOTATION [@PostConstruct] a ANNOTATION [@PreDestroy] su ulozene v ARTIFACT [javax.annotation-api].
30. SPRING BEANS je mozne vytvarat aj programovo nasledujucim sposobom.
   A. Vytvori sa instancia SPRING BEAN TYPE ako obycajny JAVA OBJECT pomocou OPERATOR NEW.
   B. Vytvorena instancia JAVA OBJECT sa zaregistruje v SPRING CONTEXT volanim METHOD [<T> void registerBean(String BeanName, Class<T> BeanClass, Supplier<T> Supplier, BeanDefinitionCustomizer... Customizers)].
   C. Po zaregistrovani SPRING BEAN v SPRING CONTEXT je mozne ziskat instanciu tohto STRING BEAN volanime METHOD [<T> T BeanFactory.getBean(Class<T> RequiredType) throws BeansException], alebo METHOD [<T> T BeanFactory.getBean(String Name, Class<T> RequiredType) throws BeansException].
31. METHOD [<T> void GenericApplicationContext.registerBean(String BeanName, Class<T> BeanClass, Supplier<T> Supplier, BeanDefinitionCustomizer... Customizers)] ma nasledujuce PARAMETERS.
   A. PARAMETER [String BeanName] definuje nazov SPRING BEAN. Moze byt nastaveny na NULL VALUE.
   B. PARAMETER [Class<T> BeanClass] definuje TYPE SPRING BEAN.
   C. PARAMETER [Supplier<T> Supplier] definuje CALLBACK FUNCTION, ktora vytvara instanciu SPRING BEAN.
   D. PARAMETER [BeanDefinitionCustomizer... Customizers] obsahuje CUSTOMIZERS, ktorym je mozne zmenit nastavenia SPRING BEAN, ako napriklad ho nastavit, ako PRIMARY SPRING BEAN.
//----------------------------------------------------------------------------------------------------------------------