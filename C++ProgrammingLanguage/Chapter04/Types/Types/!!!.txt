//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje rozlicne TYPES v C++.
2. V C++ existuju nasledujuce TYPES.
   A. BOOLEANS.
   B. CHARACTERS.
   C. INTEGERS.
   D. FLOATIN POINT TYPES.
   E. ENUMS.
   F. VOID.
   G. POINTERS.
   H. ARRAYS.
   I. REFERENCE TYPES.
   J. DATA STRUCTURES and CLASSES.
3. BOOLEANS su reprezentovane typom 'bool', ktory pri konverzii na INTEGER sa konvertuje na 1 pri 'true' a 0 pri 'false'. Pri konverzii z INTEGER na BOOLEAN sa NON-ZERO hodnota konvertuje na 'true' a 0 sa konvertuje na 'false'. Pri vykonavani matematickych operacii sa vykona konverzia z INTEGER na BOOLEAN a nad INTEGER hodnotami sa vykonavu matematicke operacie.
4. Klucove slovo 'char' reprezentuje ASCII znak a ma dlzku 1 BYTE.
5. Klucove slovo 'wchar_t' reprezentuje UNICODE znak a jeho dlzka zavisi od IMPLEMENTACIE. Zvycajne ma velkost 2 BYTES.
!!! 6. Klucove slovo 'wchar_t' je definovane pomocou TYPEDEF. Nie je to NOVY BUILT-IN TYP.
7. UNICODE LITERAL CHARACTERS sa oznacuju syntaxou [L'ab'], pricom 'ab' predstavuju 2 CHARACTERS.
8. INTEGER LITERALS mozu mat POSFIX 'U' znamenajuci UNSIGNED hodnotu, POSTFIX 'L' znamenajuci LONG hodnotu a POSTFIX 'LL' znamenajuci LONG LONG hodnotu.
9. C++ definuje 3 FLOATING-POINT TYPES: 'float', 'double' a 'long double'. LITERAL typu 'float' je oznacovany POSTFIXOM 'F' a LITERAL typu 'long double' je oznacovany POSTFIXOM 'L'.
!!! 10. Velkost jednotlivych INTEGER TYPES a FLOATING-POINT TYPES je IMPLEMENTACNE ZAVISLA a NIE JE DEFINOVANA STANDARDOM.
!!! 11. Vo VC++ plati, ze [sizeof(int)==sizeof(long)] a [sizeof(double)==sizeof(long double)]. Skratka klucove slovo 'long' NEMENI VELKOST PREMENNEJ.
!!! 12. VC++ obsahuje je INTEGER TYPE 'long long', ktory ma dlzku 8 BYTES. Tento TYPE je sucastou standardu C++11.
13. TYPE 'void' moze byt pouzity IBA pre POINTERS a ako indikator PRAZDNEJ NAVRATOVEJ HODNOTY FUNKCIE. REFERENCIE typu 'void' NIE JE MOZNE DEKLAROVAT.
14. Vo VC++ maju ENUM 4 BYTES. V inych C++ COMPILERS to moze byt zavisle od hodnot definovanych v ENUM.
!!! 15. Pre ENUM je mozne PRETAZIT OPERATORS, ale iba ako NON-MEMBER OPERATORS definovane ako GLOBALNE OPERATORS.
16. V C++ sa pri definovani premennych a funkcii rozlisuju 2 pojmy.
   A. DEKLARACIA - je asociacia ENTITY (premennej, konstanty, funkcie, triedy) s TYPOM.
   B. DEFINICIA - je v pripade premennej ci konstanty PRIRADENIE PAMETE ENTITY a v pripade funkcie ci triedy je to DEFINOVANTIE TELA ENTITY.
17. Pre DEKLARACIE a DEFINICIE platia nasledujuce pravidla.
   A. KAZDA DEFINICIA je ZAROVEN i DEKLARACIA.
   B. NIE KAZDA DEKLARACIA MUSI obsahovat i DEFINICIU.
   !!!!! C. V celom programe (vsetkych .CPP suboroch) sa moze nachadzat LUBOVOLNY POCET DEKLARACII TEJ ISTEJ ENTITY, ktore vsak VSETKY musia byt IDENTICKEHO TYPU. Ak DEKLARACIE TEJ ISTE ENTITY su ROZDIELNE - prekladac hodi CHYBU.
   !!!!! D. V celom programe (vsetkych .CPP suboroch) sa moze nachadzat IBA 1 DEFINICIA. Ak program obsahuje VIAC ako 1 DEFINICIU TEJ ISTE ENTITY - prekladac hodi CHYBU.
   !!! E. DEKLARACIE sa spravidla umiestnuju v .H suboroch, aby ich bolo mozne vkladat pomocou #include do rozlicnych .CPP suborov.
   !!! F. DEFINICIE sa spravidla umiestnuju v .CPP suboroch, pricom ich deklaracie su v .H suboroch.
   G. DEFINICIA premennej MOZE, ale i NEMUSI obsahovat HODNOTU.
   H. DEFINICIA funkcie a triedy MUSI obsahovat HODNOTU (kod funkcie, resp. triedy).
   I. DEFINICIA konstanty MUSI obsahovat HODNOTU.
18. Priklady DEFINICII a DEKLARACII.
   A. Kod [char Char;] obsahuje DEFINICIU premennej, ktora NEOBSAHUJE HODNOTU.
   B. Kod [string S;] obsahuje DEFINICIU premennej, ktora NEOBSAHUJE HODNOTU.
   C. Kod [int Count=1;] obsahuje DEFINICIU premennej s HODNOTU.
   D. Kod [const double PI=3.14;] obsahuje DEFINICIU konstanty s HODNOTU, ktora je v pripade konstanty POVINNA.
   !!! E. Kod [extern int ErrorNumber;] obsahuje DEKLARACIU EXTERNEJ premennej. Premenna MUSI BYT DEFINOVANA na inom mieste v kode.
   F. Kod [const char* Name="Timmy";] obsahuje DEFINICIU premennej s HODNOTU.
   G. Kod [const char* Seasons[]={"Spring","Summer","Autumn","Winter"};] obsahuje DEFINICIU premennej typu pole s HODNOTU.
   H. Kod [struct Date{int Day, Month, Year;};] obsahuje DEFINICIU triedy s HODNOTU (telo triedy). HODNOTA (telo triedy) je POVINNA ak to ma byt DEFINICIA. Ak by HODNOTA (telo triedy) NEBOLA DEFINOVANA jednalo by sa o DEKLARACIU.
   I. Kod [int Day(Date* D){return(D->Day);}] obsahuje DEFINICIU funkcie s HODNOTU (telo funkcie). HODNOTA (telo funkcie) je POVINNA ak to ma byt DEFINICIA. Ak by HODNOTA (telo funkcie) NEBOLA DEFINOVANA jednalo by sa o DEKLARACIU.
   !!! J. Kod [double Sqrt(double Value);}] obsahuje DEKLARACIU funkcie, lebo NEOBSAHUJE HODNOTU (telo funkcie). Ak by OBSAHOVALO HODNOTU (telo funkcie), jednalo by sa o DEFINICIU.
   K. Kod [template<typename T> T Abs(T Value){return((Value<0) ? -Value : Value);}] obsahuje DEFINICIU TEMPLATE funkcie s HODNOTU (telo funkcie).
   !!! L. Kod [typedef complex<short> Point;] obsahuje DEKLARACIU noveho typu. TEMPLATE 'complex<T>' musi byt DEFINOVANY na inom mieste v kode.
   !!! M. Kod [struct User;] obsahuje DEKLARACIU triedy, lebo NEOBSAHUJE HODNOTU (telo triedy). Ak by OBSAHOVALO HODNOTU (telo triedy), jednalo by sa o DEFINICIU.
   N. Kod [enum Beer{Carlsberg, Tuborg, Thor};}] obsahuje DEFINICIU ENUM s HODNOTU (telo ENUM). HODNOTA (telo ENUM) je POVINNA ak to ma byt DEFINICIA. Ak by HODNOTA (telo ENUM) NEBOLA DEFINOVANA jednalo by sa o DEKLARACIU.
   O. Kod [namespace NS{int Value;}] obsahuje DEFINICIU NAMESPACE.
19. Mena ENTIT (premennych, funkcii, tried) mozu obsahovat ZNAKY, CISLICE a znak '_', pricom NESMU ZACINAT CISLICOU a nesmu reprezentovat ziaden KEYWORD.
!!! 20. Aj ked C++ povoluje aby ENTITA (premenna, funkcia, trieda) zacinala znakon '_' NEDOPORUCUJE sa taketo premenne pouzivat, kedze su rezervovane pre RUN-TIME ENVIRONMENT.
!!! 21. C++ PODPORUJE VARIABLE HIDING. To znamena, ze je mozne deklarovat vo VNORENOM BLOKU premennu s ROVNAKYM NAZVOM ako v PARENT BLOKU. Vynimkou su iba PARAMETRE FUNKCII, ktore su povazovane za premenne deklarovane na urovni FUNKCIE a teda deklarovanie premennej s ROVNAKYM NAZVOM ako nazov PARAMETRA na urovni FUNKCIE znamena, ze KOMPILATOR hodi CHYBU.
22. Pri VARIABLE HIDING je mozne pomocou operatora '::' pristupit ku SKRYTEJ GLOBALNEJ PREMENNEJ. K SKRYTYM LOKALNYM PREMENNYM vsak pristupovat NIE JE MOZNE.
!!! 23. GLOBAL a STATIC VARIABLES ak nemaju EXPLICITNY INICIALIZATOR su VZDY INICIALIZOVANE na 0. LOCAL VARIABLES maju NEDEFINOVANU HODNOTU.
24. Pomocou KEYWORD 'typedef' je mozne vytvorit ALIAS na TYPE. Pouzitie TYPE a ALIASU je volne ZAMENITELNE.
//-------------------------------------------------------------------------------------------------------