//-------------------------------------------------------------------------------------------------------
1. Solution obsahuje popis C++ STANDARD LIBRARY.
2. C++ STANDARD LIBRARY je definovana v NAMESPACE [std] a jeho SUBNAMESPACES.
3. LIBRARIES, ktorych nazov zacina PREFIXOM 'c' su WRAPPERS okolo C STANDARD LIBRARIES, pricom C STRUCTURES a F FUNCTIONS su definovane v NAMESPACE [std].
4. C++ STANDARD LIBRARY definuje pre VSETKY C STANDARD LIBRARIES verzie C++ STANDARD LIBRARIES s PREFIXOM 'c'.
5. C++ STANDARD LIBRARY obsahuje  nasledujuce LIBRARIES.
   1. LIBRARY <vector> implementuje dynamicky zvacsovatelne jednorozmerne ARRAY.
   2. LIBRARY <deque> implementuje QUEUE do ktorej mozno pridavat a odstranovat ITEM z oboch koncov.
   3. LIBRARY <forward_list> implementuje jednosmerny LIST.
   4. LIBRARY <list> implementuje dvojsmerny LIST.
   5. LIBRARY <map> implementuje SORTED DICTIONARY.
   6. LIBRARY <set> implementuje SORTED SET.
   7. LIBRARY <unordered_map> implementuje UNSORTED DICTIONARY.
   8. LIBRARY <unordered_set> implementuje UNSORTED SET.
   9. LIBRARY <queue> implementuje QUEUE.
   10. LIBRARY <stack> implementuje STACK.
   11. LIBRARY <array> implementuje jednorozmerne ARRAY o pevnej dlzke.
   12. LIBRARY <bitset> implementuje jednorozmerne ARRAY obsahujuce BOOL VALUES.
   13. LIBRARY <utility> implementuje PAIR a pomocne UTILITIES.
   14. LIBRARY <tuple> implementuje TUPLES.
   15. LIBRARY <type_traits> implementuje TYPE TRAITS pouzivane v METAPROGRAMMING.
   16. LIBRARY <typeindex> implementuje podporne UTILITIES na pouzitie CLASS [type_info] ako KEY, alebo HASH CODE.
   17. LIBRARY <functional> implementuje FUNCTION OBJECTS, ktore umoznuju ulozit CALLABLE OBJECTS ako su FUNCTIONS ci METHODS.
   18. LIBRARY <memory> implementuje SHARED POINTERS a UTILITIES na pracu s MEMORY.
   19. LIBRARY <scoped_allocator> implementuje SCOPED ALLOCATORS.
   20. LIBRARY <ratio> implementuje COMPILE-TIME aritmetiku nad racionalnymi cislami.
   21. LIBRARY <chrono> implementuje TIME UTILITY CLASSES pre pracu s relativnym casom.
   22. LIBRARY <ctime> implementuje C FUNCTIONS pre pracu s DATE a TIME.
   23. LIBRARY <iterator> implementuje ITERATORS a podpore UTILITIES pre pracu s ITERATORS.
   24. LIBRARY <algorithm> implementuje standardne ALGORITHMS.
   25. LIBRARY <cstdlib> implementuje standardne ALGORITHMS z jazyka C ako aj TERMINATION FUNCTION pre ukoncenie PROGRAMU.
   26. LIBRARY <exception> implementuje BASE EXCEPTION CLASS.
   27. LIBRARY <stdexcept> implementuje standardne EXCEPTION CLASSES.
   28. LIBRARY <stdexcept> implementuje C ASSERTS.
   29. LIBRARY <cerrno> implementuje C ERROR CODES pre spracovanie ERRORS z C FUNCTIONS.
   30. LIBRARY <system_error> implementuje UTILITIES pre spracovanie SYSTEM ERRORS.
   31. LIBRARY <string> implementuje STRING CLASS.
   32. LIBRARY <cctype> implementuje UTILITIES pre klasifikaciu CHARACTERS.
   33. LIBRARY <cwctype> implementuje UTILITIES pre klasifikaciu WIDE CHARACTERS.
   34. LIBRARY <cstring> implementuje UTILITIES pre pracu s C STRING.
   35. LIBRARY <cwchar> implementuje UTILITIES pre pracu s C WIDE STRING.
   36. LIBRARY <cstdlib> implementuje UTILITIES pre MEMORY ALLOCATION C FUNCTIONS.
   37. LIBRARY <cuchar> implementuje UTILITIES pre pracu s C MULTIBYTE CHARACTERS.
   38. LIBRARY <regex> implementuje REGULAR EXPRESSIONS.
   39. LIBRARY <iosfwd> implementuje FORWARD DECLARATIONS pre C++ STREAMS.
   40. LIBRARY <iostream> implementuje standardne C++ STREAMS a operacie nad nimi.
   41. LIBRARY <ios> implementuje BASE CLASSES pre C++ STREAMS.
   42. LIBRARY <streambuf> implementuje C++ STREAM BUFFERS.
   43. LIBRARY <istream> implementuje C++ INPUT STREAMS.
   44. LIBRARY <ostream> implementuje C++ OUTPUT STREAMS.
   45. LIBRARY <iomanip> implementuje MANIPULATORS nad C++ STREAMS.
   46. LIBRARY <sstream> implementuje C++ STREAMS nad STRINGS.
   47. LIBRARY <sstream> implementuje C++ STREAMS nad STRINGS.
   48. LIBRARY <fstream> implementuje C++ STREAMS nad FILES.
   49. LIBRARY <cstdio> implementuje C FUNCTIONS pre IO SYSTEM.
   50. LIBRARY <cwchar> implementuje WIDE CHARACTERS C FUNCTIONS pre IO SYSTEM.
   51. LIBRARY <locale> implementuje UTILITIES pre pouzivanie LOCALES.
   52. LIBRARY <clocale> implementuje C FUNCTIONS pre pouzivanie LOCALES.
   53. LIBRARY <codecvt> implementuje UTILITIES pre konverzie CHARACTERS.
   54. LIBRARY <limits> implementuje NUMERIC LIMITS.
   55. LIBRARY <climits> implementuje C MACROS pre NUMERIC LIMITS.
   56. LIBRARY <cfloat> implementuje C MACROS pre FLOAT NUMERIC LIMITS.
   57. LIBRARY <cstdint> implementuje standardizovane TYPES pre INTEGER TYPES.
   58. LIBRARY <new> implementuje DYNAMIC MEMORY MANAGEMENT vratane OPERATOR NEW a OPERATOR DELETE.
   59. LIBRARY <typeinfo> implementuje UTILITIES pre pracu s RUN TIME TYPE IDENTIFICATION.
   60. LIBRARY <initializer_list> implementuje CLASS umoznujucu inicializaciu COLLECTIONS cez SYNTAX [{}].
   61. LIBRARY <cstddef> implementuje standardne pomocne C FUNCTIONS.
   62. LIBRARY <cstdarg> implementuje C FUNCTIONS pre pracu s FUNCTIONS, ktore maju variabilny pocet PARAMETERS.
   63. LIBRARY <csetjmp> implementuje C FUNCTIONS pre STACK UNWINDING.
   64. LIBRARY <csignal> implementuje C FUNCTIONS pre SIGNAL HANDLING.
   65. LIBRARY <complex> implementuje komplexne cisla.
   66. LIBRARY <valarray> implementuje NUMERIC VALUES ARRAY nad ktorym je mozne vykonavat matematicke operacie.
   67. LIBRARY <numeric> implementuje standardizovane numericke C++ ALGORITHMS.
   68. LIBRARY <cmath> implementuje matematicke C FUNCTIONS.
   69. LIBRARY <random> implementuje C++ RANDOM GENERATORS.
   70. LIBRARY <atomic> implementuje atomicke operacie.
   71. LIBRARY <condition_variable> implementuje CONDITIONAL VARIABLES pouzivane na THREAD BLOCKING.
   72. LIBRARY <future> implementuje ASYNCHRONOUS TASKS.
   73. LIBRARY <mutex> implementuje MUTEXES pouzivane na THREAD SYNCHRONIZATION.
   74. LIBRARY <thread> implementuje THREADS.
   75. LIBRARY <cinttypes> implementuje C ALIASES pre INTEGER TYPES.
   76. LIBRARY <cstdbool> implementuje C verziu BOOL TYPE.
   77. LIBRARY <ccomplex> obsahuje INCLUDE na LIBRARY <complex>.
   78. LIBRARY <cfenv> implementuje FLOATING POINT ENVIRONMENT obsahujuci STATUS FLAGS a COMMAND MODES, ktorymi mozno ovplyvnit pracu s FLOATING POINTS.
   79. LIBRARY <cstdalign> obsahuje MACRO pre C ALIGNMENT.
   80. LIBRARY <ctgmath> obsahuje INCLUDE na LIBRARY <ccomplex> a LIBRARY <cmath>.
6. C++ STANDARD LIBRARY definuje nasledujuce LANGUAGE SUPPORT LIBRARIES.
   A. LIBRARY <new> definuje OPERATOR NEW a OPERATOR DELETE.
   B. LIBRARY <typeinfo> definuje OPERATOR typeid() a TYPE [type_info].
   C. LIBRARY <iterator> definuje RANGE-FOR SYNTAX.
   D. LIBRARY <initializer_list> definuje CLASS [initializer_list].
7. C++ 11 podporuje uniformnu inicializaciu VARIABLES pomocou SYNTAXE [{}], kde v zlozenych zatvorkach sa uvadza hodnota, alebo hodnoty, ktorymi ma byt VARIABLE inicializovana. Pomocou tejto SYNTAXE je mozne inicializovat nasledujuce typy VARIABLES.
   A. PRIMITIVE TYPE VARIABLES. Sem patria VARIABLES typu [char], [int] ci [double].
   !!! B. STRUCTURE a CLASS VARIABLES BEZ CONSTRUCTORS. Ak STRUCTURE, alebo CLASS NEMA ZIADEN CONSTRUCTOR, potom je mozne uniformnu inicializaciu pouzit na incializovanie tejto STRUCTURE, alebo CLASS.
   !!! C. STRUCTURE a CLASS VARIABLES s CONSTRUCTORS, ktore vsak nemaju PARAMETER typu [std::initializer_list<>]. Uniformnu inicializaciu je mozne pouzit IBA ak pocet ITEMS a ich TYPES v uniformnej inicializacii sa ZHODUJU s prototypom daneho CONSTRUCTOR. C++ potom takyto CONSTRUCTOR vyvola.
   D. STRUCTURE a CLASS VARIABLES, ktore maju CONSTRUCTOR s 1. PARAMETROM typu [std::initializer_list<>]. Typickym prikladom su CUSTOM CLASSES typu COLLECTION, ktore je vdaka tomuto CONSTRUCTOR mozne inicializovat pomocou uniformnej inicializacie. Sem patria aj vsetky standardne COLLECTIONS.
   E. ARRAYS. ARRAYS lubovolneho typu je mozne inicializovat pomocou uniformnej incializacie.
!!! 8. C++ 11 pri inicializacii pomocou SYNTAXE [{}] kontroluje ci nedochadza k STRATOVEJ KONVZERZII ([double] na [int]) a ak ano, tak hodi COMPILATION ERROR. Avsak konverzia [[int] na [char]], ak hodnota [int] je mozne ulozit do [char] je povolena.
!!! 9. CUSTOM CLASSES typu COLLECTION, ktore chcu maju byt inicializovane pomocou uniformnej inicializacie MUSIA definovat CONSTRUCTOR, ktory bude mat PARAMETER typu [std::initializer_list<T>] cez ktory uniformna inicializacia prenesie hodnoty, ktore je potom mozne v tomto CONSTRUCTOR pouzit na inicializovanie CLASS FIELDS.
10. C++ 11 definuje novy prikaz [for(TYPE NAME : COLLECTION)], ktory umoznuje enumerovat COLLECTION. Pre tento prikaz platia nasledujuce vlastnosti.
   A. Prikaz umoznuje enumerovat prvkami C ARRAYS.
   B. Prikaz umoznuje enumerovat CLASSES ak tieto CLASSES obsahuje definovane METHODS begin() a end(). CLASS [initializer_list] ako aj vsetky STANDARDNE COLLECTION ma tieto METHODS definovane.
   C. Prikaz umoznuje enumerovat CLASSES ak existuju definovane GLOBALNE FUNCTIONS begin() a end(), ktore maju 1. PARAMETER typu CLASS.
   !!! D. METHODS/FUNCTIONS begin() a end() MUSIA ako RETURN VALUES vracat ITERATOR. ITERATOR je ENTITA ktora ma definovany OPERATOR++. Ako ITERATORS mozu sluzit CUSTOM CLASSES, alebo POINTERS.
   !!! E. Ak prikaz ako [TYPE] definuje INY TYPE ako REFERENCIU ([TYPE&]), tak [TYPE] MUSI mat definovany NON-EXPLICIT COPY CONSTRUCTOR, inak COMPILER hodi ERROR. Definovanie OPERATOR= NESTACI. Prikaz VYZADUJE COPY CONSTRUCTOR.
!!! 11. V LIBRARY <iterator> su definovane FUNCTION begin() a FUNCTION end() pre PARAMETERS type C++ ARRAYS ako aj vsetky COLLECTIONS, ktore maju definovane FUNCTION begin() a FUNCTION end(). Tieto FUNCTIONS vykonavaju CONVERSION C++ ARRAYS a CLASSES obsahujucich FUNCTION begin() a FUNCTION end() na ITERATORS.
12. V C++ sa ERRORS v C++ STANDARD LIBRARY indikuju rozlicnymi sposobmi.
   A. Viacere C FUNCTIONS indikuju ERRORS nastavenim GLOBAL VARIABLE [errno].
   B. ALGORITHMS vyhladavajuce ITEMS v sekvencii v pripade nenajdenia ITEM vracaju neplatny ITERATOR, ktory ukazuje 1 poziciu za poslednym ITEM v sekvencii.
   C. IO STREAMS indikuju ERROR nastavenim interneho FIELD, alebo alternativne dokazu na vyziadanie indikovat ERRORS hodenim EXCEPTION.
   D. Niektore C++ STANDARD LIBRARY COMPONENTS ako napriklad CLASS [vector], CLASS [string] ci CLASS [bitset] v pripade indikacie ERRORS hadzu EXCEPTIONS.
13. C++ STANDARD LIBRARY definuje nasledujuce EXCEPTIONS.
   A. CLASS [exception] je BASE CLASS pre VSETKY EXCEPTIONS okrem EXCEPTION [nested_exception].
   B. CLASS [nested_exception] umoznuje EXCEPTION NESTING.
   C. CLASS [logic_error] je DERIVED z CLASS [exception] a predstavuje BASE CLASS pre vsetky LOGIC ERROR EXCEPTIONS.
   D. CLASS [runtime_error] je DERIVED z CLASS [exception] a predstavuje BASE CLASS pre vsetky RUNTIME ERROR EXCEPTIONS.
   E. CLASS [bad_cast] je DERIVED z CLASS [exception] a je hodena pri zlom CASTING. Napriklad ju hadze OPERATOR [dynamic_cast<>].
   F. CLASS [bad_typeid] je DERIVED z CLASS [exception] a je hodena OPERATOR [typeid] napriklad pri pokuse o ziskanie TYPE z NULL POINTER.
   G. CLASS [bad_exception] je DERIVED z CLASS [exception] a je hodena pri pokuse hodi INU EXCEPTION, aku definuje EXCEPTION SPECIFICATION. Kedze vsak EXCEPTION SPECIFICATIONS su DEPRECATED, tato EXCEPTION by sa uz nemala zjavovat.
   H. CLASS [bad_alloc] je DERIVED z CLASS [exception] a je hodena pri nedostatku MEMORY.
   I. CLASS [bad_weak_ptr] je DERIVED z CLASS [exception] a je hodena ak dojde k chybe pri pokuse o vytvorenie WEAK POINTER zo SHARED POINTER.
   J. CLASS [bad_function_call] je DERIVED z CLASS [exception] a je hodena pri pokuse vyvolat FUNCTION WRAPPER OBJECT, ktory nema nastaveny TARGET.
   I. CLASS [bad_array_new_length] je DERIVED z CLASS [bad_alloc] a je hodena pri pokuse o alokaciu ARRAY so zapornou velkostou, alebo velkostou pressahujucou IMPLEMENTATION LIMIT pre alokaciu ARRAYS.
   K. CLASS [domain_error] je DERIVED z CLASS [logic_error] a je hodena pri reportovani DOMAIN ERROR.
   L. CLASS [invalid_argument] je DERIVED z CLASS [logic_error] a je hodena pri detekcii nespravneho ARGUMENT.
   M. CLASS [length_error] je DERIVED z CLASS [logic_error] a je hodena pri detekcii nespravnej dlzky, napriklad pri pridavani CHARACTERS do STRING.
   N. CLASS [out_of_range] je DERIVED z CLASS [logic_error] a je hodena pri detekcii nespravneho rozsahu, napriklad pri praci s ARRAYS.
   O. CLASS [future_error] je DERIVED z CLASS [logic_error] a je hodena pri vzniku logickej chyby pri ASYNCHRONOUS SYSTEM CALL.
   P. CLASS [system_error] je DERIVED z CLASS [runtime_error] a je hodena pri vzniku chyby na urovni OPERATION SYSTEM.
   Q. CLASS [range_error] je DERIVED z CLASS [runtime_error] a je hodena pri prekroceni stanoveneho rozsahu pri realizacii internych vypoctov C++ STANDARD LIBRARY.
   R. CLASS [overflow_error] je DERIVED z CLASS [runtime_error] a je hodena pri detekcii OVERFLOW ERROR pocas matematickej operacii.
   S. CLASS [underflow_error] je DERIVED z CLASS [runtime_error] a je hodena pri detekcii UNDERFLOW ERROR pocas matematickej operacii.
   T. CLASS [ios_base::failure] je DERIVED z CLASS [system_error] a je BASE EXCEPTION pre IO OPERATIONS poskytovane C++ STANDARD LIBRARY.
14. Aj ked to C++ umoznuje, NEMALI by sa hadzat EXCEPTIONS z PRIMITIVE TYPES a namiesto toho je vzdy vhodnejsie definovat CUSTOM TYPE, ktora sluzi ako EXCEPTION TYPE.
15. CLASS [exception] predstavuje BASE EXCEPTION CLASS pre vsetky EXCEPTION, ktore generuje C++ STANDARD LIBRARY. Ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [exception].
   B. DESTRUCTOR uvolnuje RESOURCES alokovane instanciou CLASS [exception].
   C. OPERATOR= umoznuje priradit jednu instanciu CLASS [exception] do inej.
   !!! D. VIRTUAL METHOD what() vracia POINTER na CHAR obsahujuci popis EXCEPTION. POINTER je validny IBA v CATCH CLAUSE, v ktorej bol EXCEPTION zachyteny.
!!! 16. CLASS [exception_ptr] je IMPLEMENTATION DEPENDENT CLASS umoznujuca ulozenie EXCEPTIONS (CLASSES DERIVED z CLASS [exception] ale aj CUSTOM EXCEPTIONS) aj mimo kontext CATCH BLOCKS. CLASS [exception_ptr] sa pouziva napriklad na prenos EXCEPTIONS do inych FUNCTIONS ci THREADS, kde moze byt znova RETHROWN.
17. S CLASS [exception_ptr] je mozne pracovat pomocou nasledujucich FUNCTIONS.
   !!! A. FUNCTION current_exception() vracia instanciu CLASS [exception_ptr]. Tuto FUNCTION je mozne volat v CATCH BLOCKS. Ak sa vola mimo CATCH BLOCKS vracia prazdnu instanciu CLASS [exception_ptr].
   B. FUNCTION rethrow_exception() vykonava RETHROW EXCEPTION pre instanciu CLASS [exception_ptr].
   C. FUNCTION make_exception_ptr() sluzi na vytvorenie instancie CLASS [exception_ptr].
!!!!! 18. V CLASS [exception_ptr] je mozne ulozit aj CUSTOM EXCEPTION CLASSES, nie iba CLASSES zdedene z CLASS [exception].
19. CLASS [nested_exception] umoznuje EXCEPTION NESTING, kedy je EXCEPTION ulozena v inej EXCEPTION. Pre CLASS [nested_exception] platia nasledujuce zasady.
   A. CLASS [nested_exception] obaluje instanciu CLASS [exception_ptr].
   B. CONSTRUCTOR CLASS [nested_exception] vytvara instanciu volanim FUNCTION current_exception().
   !!! C. FUNCTION throw_with_nested<TException>() vytvori instanciu UNSPECIFIED CLASS, ktora je DERIVED z CLASS 'TException' a CLASS [nested_exception]. FUNCTION throw_with_nested<TException>() sa pouziva na vytvorenie NESTED EXCEPTION.
   !!! D. FUNCTION rethrow_if_nested<TException>() hodi EXCEPTION type 'TException' v pripade, ze OBJECT zaslany ako PARAMETER je DERIVED z CLASS 'TException' a ZAROVEN je DERIVED z CLASS [nested_exception], potom FUNCTION rethrow_if_nested<TException>() zavola METHOD nested_exception.rethrow_nested(). V pripade, ze TYPE 'TException' NIE JE DERIVED z CLASS 'TException' a CLASS [nested_exception], potom FUNCTION rethrow_if_nested<TException>() nic nerobi. FUNCTION rethrow_if_nested<TException>() sa pouziva pri detekcii aku EXCEPTION instancia CLASS [nested_exception] obaluje.
20. CLASS [nested_exception] sluzi na ulozenie instancie CLASS [exception_ptr] ziskany volanim FUNCTION current_exception(). CLASS [nested_exception] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu CLASS [nested_exception] pouzitim FUNCTION current_exception().
   B. COPY CONSTRUCTOR vytvara kopiu instancie CLASS [nested_exception].
   C. DESTRUCTOR uvolnuje instanciu CLASS [nested_exception].
   D. OPERATOR= priradzuje instanciu CLASS [nested_exception] do inej instancie CLASS [nested_exception].
   E. METHOD nested_exception.rethrow_nested() vykonat RETHROW EXCEPTION, ktoru instancia CLASS [nested_exception] obaluje. V pripade, ze ziadnu EXCEPTION neobaluje, je volana FUNCTION terminate().
   F. METHOD nested_exception.nested_ptr() vracia instanciu CLASS [nested_ptr], ktoru instancia CLASS [nested_exception] obaluje.
21. CLASS [nested_exception] sa pouziva nasledujucim sposobom.
   A. Ak je hodena EXCEPTION, ktora ma byt WRAPPED, tak v CATCH BLOCK sa zavola FUNCTION throw_with_nested<TException>(). FUNCTION throw_with_nested<TException>() vytvori instanciu UNSPECIFIED TYPE, ktora je DERIVED z TYPE 'TException' a CLASS [nested_exception].
   B. EXCEPTION WRAPPING je mozne robit aj rekurzivne a tym padom do instancie CLASS [nested_exception] moze byt znova WRAPPED a tak je mozne vytvorit cely EXCEPTION CHAIN.
   C. Ak PROGRAM chce detekovat ake EXCEPTIONS instancia CLASS [nested_exception] (resp. vnorene instancie CLASS [nested_exception] obsahuju), v TRY BLOCK PROGRAM REKURZIVNE vola FUNCTION rethrow_if_nested<TException>(). Ta v pripade, ze OBJECT 'TException' je DERIVED z CLASS [nested_exception], tak ju hodi a v CATCH BLOCK a PROGRAM ju moze spracovat.
22. C++ STANDARD LIBRARY definuje sadu FUNCTIONS, ktore umoznuju vykonat PROGRAM TERMINATION.
   A. FUNCTION set_terminate() nastavuje HANDLER, ktory sa zavola pri PROGRAM TERMINATION. Ten nastava pri UNHANDLED EXCEPTION, alebo pri zavolani FUNCTION terminate().
   B. FUNCTION get_terminate() vracia HANDLER, ktory sa zavola pri PROGRAM TERMINATION.
   C. FUNCTION terminate() vykonava zavola HANDLER zaregistrovany FUNCTION set_terminate() a vykona PROGRAM TERMINATION.
   !!! D. FUNCTION uncaught_exception() vracia informaciu ci PROGRAM je momentalne v EXCEPTION STACK UNWIND pricom EXCEPTION este NEBOLA ZACHYTENA v CATCH BLOCK. FUNCTION uncaught_exception() ma zmysel volat IBA v DESTRUCTORS, ktore sa pri STACK UNWIND automaticky volaju.
   !!! E. FUNCTION uncaught_exceptions() vracia pocet EXCEPTIONS, ktore este NEBOLI ZACHYTENE v CATCH BLOCK. FUNCTION uncaught_exceptions() ma zmysel volat IBA v DESTRUCTORS, ktore sa pri STACK UNWIND automaticky volaju.
23. KEYWORD static_assert(Condition,Message) v COMPILE TIME vykonava EVALUATION 'Condition' a ak CONDITION 'Condition' vrati FALSE, potom COMPILER vypise MESSAGE 'Message' a UKONCI COMPILATION.
24. MACRO assert(Condition) definovane v LIBRARY <cassert> ak NIE JE NASTAVENE MACRO 'NDBUG' tak v RUNTIME vykona EVALUATION 'Condition' a ak CONDITION 'Condition' vrati FALSE, potom zapise ERROR MESSAGE na instanciu CLASS [cerr] a zaroven zavola FUNCTION abort(), ktora PROGRAM ukonci.
25. C++ EXCEPTIONS SYSTEM definuje dvojicu pomocnych CLASSES zapuzdrujucich ERROR VALUES, ktore umoznuju rozlisovat ERROR VALUES medzi PORTABLE a SYSTEM SPECIFIC.
   A. CLASS [error_code] zapuzdruje ERROR CODES. ERROR CODES reprezentuju SYSTEM SPEFICIC ERROR VALUES, ktore NIE su prenositelne medzi rozlicnymi PLATFORMS. Instanciu CLASS [error_code] je mozne ziskat volanim METHOD system_exception.code().
   B. CLASS [error_condition] zapuzdruje ERROR CONDITIONS. ERROR CONDITIONS reprezentuju PORTABLE ERROR VALUES, ktore su prenositelne medzi rozlicnymi PLATFORMS. Instanciu CLASS [error_condition] je mozne ziskat volanim METHOD system_exception.code().default_error_condition().
26. Instancie CLASS [error_code] je mozne vytvorit pomocou FUNCTION make_error_code(). C++ definuje 3 OVERLOADED VERZIE, ktore prijmamu niektory z PARAMETER CLASS [errc], CLASS [io_errc] a CLASS [future_errc].
27. Instancie CLASS [error_condition] je mozne vytvorit pomocou FUNCTION make_error_condition().  C++ definuje 3 OVERLOADED VERZIE, ktore prijmamu niektory z PARAMETER CLASS [errc], CLASS [io_errc] a CLASS [future_errc].
28. C++ EXCEPTIONS SYSTEM definuje CLASS [error_category], ktora sluzi na kategorizovanie EXCEPTIONS. CLASS [error_category] sluzi ako BASE CLASS z ktorej je mozne definovat CUSTOM CLASSES na definovanie CUSTOM EXCEPTION CATEGORIES.
!!!!! 29. CLASS [error_category] je DOLEZITA, pretoze sluzi ako IDENTIFIKATOR, ktore definuje vyznam ERROR CODE, alebo ERROR CONDITION. Hodnoty ERROR CODES a ERROR CONDITIONS mozu byt pre rozlicne ERROR CATEGORIES ROVNAKE a prave instancia CLASS [error_category] sluzi na rozlisenie o aky ERROR CODE, alebo ERROR CONDITION sa v skutocnosti jedna. Je to prave CLASS [error_category], ktora obsahuje STRINGS pre jednotlive ERROR CODES, alebo ERROR CONDITIONS, ktore reprezentuju MESSAGE STRING.
!!! 30. Instancia CLASS [error_code] VZDY obsahuje okrem samotneho ERROR CODE aj ERROR CATEGORY, cim umoznuje previazanie ERROR CODES a ERROR CATEGORIES. Interne je ERROR CATEGORY ulozena ako POINTER na OBJECT DERIVED z CLASS [error_category].
31. CLASS [error_code] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [error_code].
   B. OPERATOR= umoznuje priradit jednu instanciu CLASS [error_code] do inej.
   C. OPERATOR BOOL() vracia TRUE, ak hodnota vratena METHOD value() je rozna od 0, inak vrati FALSE.
   !!! D. METHOD value() vracia hodnotu ERROR CODE, ktoru instancia CLASS [error_code] zapuzdruje.
   E. METHOD message() vracia instanciu CLASS [string] obsahujucu popis ERROR CODE.
   F. METHOD assign() priradzuje instancii CLASS [error_code] novu hodnotu ERROR CODE a zaroven umoznuje nastavit aj ERROR CATEGORY.
   G. METHOD clear() resetuje instanciu CLASS [error_code], aby neobsahovala ziaden ERROR CODE.
   !!! H. METHOD default_error_condition() vracia instanciu CLASS [error_condition], ktora reprezentuje ERROR CONDITION asociovanu s ERROR CODE, ktory zapuzdruje instancia CLASS [error_code].
   I. METHOD category() vracia instanciu CLASS [error_category], ktora reprezentuje ERROR CATEGORY asociovanu s ERROR CODE, ktory zapuzdruje instancia CLASS [error_code].
32. CLASS [error_condition] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [error_condition].
   B. OPERATOR= umoznuje priradit jednu instanciu CLASS [error_condition] do inej.
   C. OPERATOR BOOL() vracia TRUE, ak hodnota vratena METHOD value() je rozna od 0, inak vrati FALSE.
   !!! D. METHOD value() vracia hodnotu ERROR CONDITION, ktoru instancia CLASS [error_condition] zapuzdruje.
   E. METHOD message() vracia instanciu CLASS [string] obsahujucu popis ERROR CONDITION.
   F. METHOD assign() priradzuje instancii CLASS [error_condition] novu hodnotu ERROR CONDITION a zaroven umoznuje nastavit aj ERROR CATEGORY.
   G. METHOD clear() resetuje instanciu CLASS [error_condition], aby neobsahovala ziadnu ERROR CONDITION.
   H. METHOD category() vracia instanciu CLASS [error_category], ktora reprezentuje ERROR CATEGORY asociovanu s ERROR CONDITION, ktoru zapuzdruje instancia CLASS [error_condition].
33. CLASS [error_category] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR umoznuje vytvorit instanciu CLASS [error_category].
   B. DESTRUCTOR uvolnuje RESOURCES alokovane instanciou CLASS [error_category].
   C. OPERATOR== umoznuje porovnat 2 instancie CLASS [error_category] na rovnost.
   D. OPERATOR== umoznuje porovnat 2 instancie CLASS [error_category] na roznost.
   E. OPERATOR== umoznuje porovnat 2 instancie CLASS [error_category] na to ci je jedna mensia ako druha.
   F. METHOD name() vracia POINTER na CHAR obsahujuci nazov ERROR CATEGORY.
   !!! G. METHOD equivalent() testuje ci ERROR CODE je ekvivalentny danej ERROR CONDITION.
   H. METHOD message() vracia instanciu CLASS [string] obsahujucu popis ERROR CATEGORY.
   !!! I. METHOD default_error_condition() vracia instanciu CLASS [error_condition] pre danu ERROR CATEGORY, ktora je ekvivalentna zadanemu ERROR CODE.
34. Z CLASS [error_category] su DERIVED nasledujuce CLASSES.
   A. CLASS [generic_category].
   B. CLASS [system_category].
   C. CLASS [iostream_category].
   D. CLASS [future_category].
!!! 35. CLASS [system_error] je DERIVED z CLASS [runtime_error]. Reprezentuje ERROR na urovni OPERATION SYSTEM. Obsahuje nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu CLASS [system_error]. Umoznuje specifikovat ciselnu hodnotu ERROR CODE ako aj MESSAGE.
   B. DESTRUCTOR je DERIVED z CLASS [system_error].
   C. METHOD system_error::code() vracia instanciu CLASS [error_code] reprezentujucu ERROR CODE danej EXCEPTION.
   D. METHOD system_error::what() je DERIVED z CLASS [exception] a vracia STRING popisujuci ERROR CODE.
36. Definovanie CUSTOM ERROR CODES a CUSTOM ERROR CONDITIONS pozostava z nasledujucich krokov.
   A. Definuje sa CUSTOM ENUM, ktory reprezentuje CUSTOM ERROR CODE.
   B. Definuje sa CUSTOM ENUM, ktory reprezentuje CUSTOM ERROR CONDITION.
   C. Definuje sa CUSTOM CLASS, ktora je DERIVED z CLASS [error_category]. Tato CUSTOM CLASS reprezentuje CUSTOM ERROR CATEGORY, ktora sluzi na identifikaciu CUSTOM ERROR CODES. CUSTOM ERROR CATEGORY zaroven obsahuje STRINGS popisujuce vyznam jednotlivych ERRORS.
   D. Definuje sa CUSTOM FUNCTION make_error_code(), ktora vytvara instanciu CLASS [error_code] pre hodnotu CUSTOM ERROR CODE.
   E. Definuje sa CUSTOM SPECIALIZATION z TEMPLATE STRUCTURE [is_error_code_enum<TEnum>], kde 'TEnum' je CUSTOM ERROR CODE. Tato EMPTY STRUCTURE MUSI byt DERIVED zo STRUCTURE [true_type]. CUSTOM STRUCTURE umoznuje CONSTRUCTOR CLASS [error_code] urcit ci ERROR CODE TYPE je validny ERROR CODE TYPE.
   F. Definuje sa CUSTOM FUNCTION make_error_condition(), ktora vytvara instanciu CLASS [error_condition] pre hodnotu CUSTOM ERROR CONDITION.
   G. Definuje sa CUSTOM SPECIALIZATION z TEMPLATE STRUCTURE [is_error_condition_enum<TEnum>], kde 'TEnum' je CUSTOM ERROR CONDITION. Tato EMPTY STRUCTURE MUSI byt DERIVED zo STRUCTURE [true_type]. CUSTOM STRUCTURE umoznuje CONSTRUCTOR CLASS [error_code] urcit ci ERROR CONDITION TYPE je validny ERROR CONDITION TYPE.
!!! 37. SCOPED ENUM [errc] obsahuje ERROR CONDITIONS, ktore zodpovedaju ERROR VALUES v LIBRARY [<cerrno>].
38. SCOPED ENUM [io_errc] obsahuje ERROR CODE (iba jeden) pre EXCEPTION CLASS [ios_base::failure].
39. SCOPED ENUM [future_errc] obsahuje ERROR CODES pre EXCEPTION CLASS [future_error], ktore hadze CONCURRENCY LIBRARY.
//-------------------------------------------------------------------------------------------------------