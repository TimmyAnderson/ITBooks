// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UsingGraphQL;

#nullable disable

namespace UsingGraphQL.Migrations
{
    [DbContext(typeof(CDBContext))]
    [Migration("20250418105215_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderBatchDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityDependentValue2")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesDataLoaderBatchDependent", (string)null);

                    b.HasData(
                        new
                        {
                            EntityDependentID = 1,
                            EntityDependentValue1 = "DEPENDENT A 111",
                            EntityDependentValue2 = "DEPENDENT B 111",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 2,
                            EntityDependentValue1 = "DEPENDENT A 222",
                            EntityDependentValue2 = "DEPENDENT B 222",
                            EntityPrincipalID = 2
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderBatchPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityPrincipalValue2")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesDataLoaderBatchPrincipal", (string)null);

                    b.HasData(
                        new
                        {
                            EntityPrincipalID = 1,
                            EntityPrincipalValue1 = "PRINCIPAL A 111",
                            EntityPrincipalValue2 = "PRINCIPAL B 111"
                        },
                        new
                        {
                            EntityPrincipalID = 2,
                            EntityPrincipalValue1 = "PRINCIPAL A 222",
                            EntityPrincipalValue2 = "PRINCIPAL B 222"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderGroupDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityDependentValue2")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesDataLoaderGroupDependent", (string)null);

                    b.HasData(
                        new
                        {
                            EntityDependentID = 1,
                            EntityDependentValue1 = "DEPENDENT A 111",
                            EntityDependentValue2 = "DEPENDENT B 111",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 2,
                            EntityDependentValue1 = "DEPENDENT A 222",
                            EntityDependentValue2 = "DEPENDENT B 222",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 3,
                            EntityDependentValue1 = "DEPENDENT A 333",
                            EntityDependentValue2 = "DEPENDENT B 333",
                            EntityPrincipalID = 2
                        },
                        new
                        {
                            EntityDependentID = 4,
                            EntityDependentValue1 = "DEPENDENT A 444",
                            EntityDependentValue2 = "DEPENDENT B 444",
                            EntityPrincipalID = 2
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderGroupPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityPrincipalValue2")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesDataLoaderGroupPrincipal", (string)null);

                    b.HasData(
                        new
                        {
                            EntityPrincipalID = 1,
                            EntityPrincipalValue1 = "PRINCIPAL A 111",
                            EntityPrincipalValue2 = "PRINCIPAL B 111"
                        },
                        new
                        {
                            EntityPrincipalID = 2,
                            EntityPrincipalValue1 = "PRINCIPAL A 222",
                            EntityPrincipalValue2 = "PRINCIPAL B 222"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityFilteringByConvention", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("REAL");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesFilteringByConvention", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DoubleValue = 111.111,
                            IntValue = 101,
                            LongValue = 1001L,
                            StringValue = "AAA 1"
                        },
                        new
                        {
                            ID = 2,
                            DoubleValue = 222.22200000000001,
                            IntValue = 102,
                            LongValue = 1002L,
                            StringValue = "AAA 2"
                        },
                        new
                        {
                            ID = 3,
                            DoubleValue = 333.33300000000003,
                            IntValue = 103,
                            LongValue = 1003L,
                            StringValue = "BBB 1"
                        },
                        new
                        {
                            ID = 4,
                            DoubleValue = 444.44400000000002,
                            IntValue = 104,
                            LongValue = 1004L,
                            StringValue = "BBB 2"
                        },
                        new
                        {
                            ID = 5,
                            DoubleValue = 555.55499999999995,
                            IntValue = 105,
                            LongValue = 1005L,
                            StringValue = "CCC 1"
                        },
                        new
                        {
                            ID = 6,
                            DoubleValue = 666.66600000000005,
                            IntValue = 106,
                            LongValue = 1006L,
                            StringValue = "CCC 2"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityFilteringByFluentAPIExplicit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("REAL");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesFilteringByFluentAPIExplicit", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DoubleValue = 111.111,
                            IntValue = 101,
                            LongValue = 1001L,
                            StringValue = "AAA 1"
                        },
                        new
                        {
                            ID = 2,
                            DoubleValue = 222.22200000000001,
                            IntValue = 102,
                            LongValue = 1002L,
                            StringValue = "AAA 2"
                        },
                        new
                        {
                            ID = 3,
                            DoubleValue = 333.33300000000003,
                            IntValue = 103,
                            LongValue = 1003L,
                            StringValue = "BBB 1"
                        },
                        new
                        {
                            ID = 4,
                            DoubleValue = 444.44400000000002,
                            IntValue = 104,
                            LongValue = 1004L,
                            StringValue = "BBB 2"
                        },
                        new
                        {
                            ID = 5,
                            DoubleValue = 555.55499999999995,
                            IntValue = 105,
                            LongValue = 1005L,
                            StringValue = "CCC 1"
                        },
                        new
                        {
                            ID = 6,
                            DoubleValue = 666.66600000000005,
                            IntValue = 106,
                            LongValue = 1006L,
                            StringValue = "CCC 2"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityFilteringByFluentAPIImplicit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("REAL");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LongValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesFilteringByFluentAPIImplicit", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DoubleValue = 111.111,
                            IntValue = 101,
                            LongValue = 1001L,
                            StringValue = "AAA 1"
                        },
                        new
                        {
                            ID = 2,
                            DoubleValue = 222.22200000000001,
                            IntValue = 102,
                            LongValue = 1002L,
                            StringValue = "AAA 2"
                        },
                        new
                        {
                            ID = 3,
                            DoubleValue = 333.33300000000003,
                            IntValue = 103,
                            LongValue = 1003L,
                            StringValue = "BBB 1"
                        },
                        new
                        {
                            ID = 4,
                            DoubleValue = 444.44400000000002,
                            IntValue = 104,
                            LongValue = 1004L,
                            StringValue = "BBB 2"
                        },
                        new
                        {
                            ID = 5,
                            DoubleValue = 555.55499999999995,
                            IntValue = 105,
                            LongValue = 1005L,
                            StringValue = "CCC 1"
                        },
                        new
                        {
                            ID = 6,
                            DoubleValue = 666.66600000000005,
                            IntValue = 106,
                            LongValue = 1006L,
                            StringValue = "CCC 2"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityFilteringManually", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesFilteringManually", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IntValue = 101,
                            StringValue = "AAA 1"
                        },
                        new
                        {
                            ID = 2,
                            IntValue = 102,
                            StringValue = "AAA 2"
                        },
                        new
                        {
                            ID = 3,
                            IntValue = 103,
                            StringValue = "BBB 1"
                        },
                        new
                        {
                            ID = 4,
                            IntValue = 104,
                            StringValue = "BBB 2"
                        },
                        new
                        {
                            ID = 5,
                            IntValue = 105,
                            StringValue = "CCC 1"
                        },
                        new
                        {
                            ID = 6,
                            IntValue = 106,
                            StringValue = "CCC 2"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityInterfacesMyInterface1", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class1Value1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Class1Value2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue2")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesInterfacesMyInterface1", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Class1Value1 = "CLASS 1 VALUE 1 AAA",
                            Class1Value2 = "CLASS 1 VALUE 2 AAA",
                            SharedValue1 = "CLASS 1 SHARED 1 AAA",
                            SharedValue2 = "CLASS 1 SHARED 2 AAA"
                        },
                        new
                        {
                            ID = 2,
                            Class1Value1 = "CLASS 1 VALUE 1 BBB",
                            Class1Value2 = "CLASS 1 VALUE 2 BBB",
                            SharedValue1 = "CLASS 1 SHARED 1 BBB",
                            SharedValue2 = "CLASS 1 SHARED 2 BBB"
                        },
                        new
                        {
                            ID = 3,
                            Class1Value1 = "CLASS 1 VALUE 1 CCC",
                            Class1Value2 = "CLASS 1 VALUE 2 CCC",
                            SharedValue1 = "CLASS 1 SHARED 1 CCC",
                            SharedValue2 = "CLASS 1 SHARED 2 CCC"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityInterfacesMyInterface2", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class2Value1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Class2Value2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue2")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesInterfacesMyInterface2", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Class2Value1 = "CLASS 2 VALUE 1 AAA",
                            Class2Value2 = "CLASS 2 VALUE 2 AAA",
                            SharedValue1 = "CLASS 2 SHARED 1 AAA",
                            SharedValue2 = "CLASS 2 SHARED 2 AAA"
                        },
                        new
                        {
                            ID = 2,
                            Class2Value1 = "CLASS 2 VALUE 1 BBB",
                            Class2Value2 = "CLASS 2 VALUE 2 BBB",
                            SharedValue1 = "CLASS 2 SHARED 1 BBB",
                            SharedValue2 = "CLASS 2 SHARED 2 BBB"
                        },
                        new
                        {
                            ID = 3,
                            Class2Value1 = "CLASS 2 VALUE 1 CCC",
                            Class2Value2 = "CLASS 2 VALUE 2 CCC",
                            SharedValue1 = "CLASS 2 SHARED 1 CCC",
                            SharedValue2 = "CLASS 2 SHARED 2 CCC"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("NamesEntities", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Age = 12,
                            FirstName = "Timmy",
                            LastName = "Anderson",
                            Sex = 1
                        },
                        new
                        {
                            ID = 2,
                            Age = 13,
                            FirstName = "Jenny",
                            LastName = "Thompson",
                            Sex = 2
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToManyDependent", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyDependent", (string)null);

                    b.HasData(
                        new
                        {
                            EntityDependentID = 1,
                            EntityDependentValue = "DEPENDENT 111",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 2,
                            EntityDependentValue = "DEPENDENT 222",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 3,
                            EntityDependentValue = "DEPENDENT 333",
                            EntityPrincipalID = 2
                        },
                        new
                        {
                            EntityDependentID = 4,
                            EntityDependentValue = "DEPENDENT 444",
                            EntityPrincipalID = 2
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToManyPrincipal", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToManyPrincipal", (string)null);

                    b.HasData(
                        new
                        {
                            EntityPrincipalID = 1,
                            EntityPrincipalValue = "PRINCIPAL 111"
                        },
                        new
                        {
                            EntityPrincipalID = 2,
                            EntityPrincipalValue = "PRINCIPAL 222"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOneDependent1", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesOneToOneDependent1", (string)null);

                    b.HasData(
                        new
                        {
                            EntityDependentID = 1,
                            EntityDependentValue = "DEPENDENT 111",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 2,
                            EntityDependentValue = "DEPENDENT 222",
                            EntityPrincipalID = 2
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOneDependent2", b =>
                {
                    b.Property<int>("EntityDependentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityDependentValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityPrincipalID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityDependentID");

                    b.HasIndex("EntityPrincipalID")
                        .IsUnique();

                    b.ToTable("EntitiesOneToOneDependent2", (string)null);

                    b.HasData(
                        new
                        {
                            EntityDependentID = 1,
                            EntityDependentValue = "DEPENDENT 111",
                            EntityPrincipalID = 1
                        },
                        new
                        {
                            EntityDependentID = 2,
                            EntityDependentValue = "DEPENDENT 222",
                            EntityPrincipalID = 2
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOnePrincipal1", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOnePrincipal1", (string)null);

                    b.HasData(
                        new
                        {
                            EntityPrincipalID = 1,
                            EntityPrincipalValue = "PRINCIPAL 111"
                        },
                        new
                        {
                            EntityPrincipalID = 2,
                            EntityPrincipalValue = "PRINCIPAL 222"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOnePrincipal2", b =>
                {
                    b.Property<int>("EntityPrincipalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityPrincipalValue")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityPrincipalID");

                    b.ToTable("EntitiesOneToOnePrincipal2", (string)null);

                    b.HasData(
                        new
                        {
                            EntityPrincipalID = 1,
                            EntityPrincipalValue = "PRINCIPAL 111"
                        },
                        new
                        {
                            EntityPrincipalID = 2,
                            EntityPrincipalValue = "PRINCIPAL 222"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityPaginationCursorBased", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value2")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("EntitiesPaginationCursorBased", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Value1 = 101,
                            Value2 = 1001
                        },
                        new
                        {
                            ID = 2,
                            Value1 = 102,
                            Value2 = 1002
                        },
                        new
                        {
                            ID = 3,
                            Value1 = 103,
                            Value2 = 1003
                        },
                        new
                        {
                            ID = 4,
                            Value1 = 104,
                            Value2 = 1004
                        },
                        new
                        {
                            ID = 5,
                            Value1 = 105,
                            Value2 = 1005
                        },
                        new
                        {
                            ID = 6,
                            Value1 = 106,
                            Value2 = 1006
                        },
                        new
                        {
                            ID = 7,
                            Value1 = 107,
                            Value2 = 1007
                        },
                        new
                        {
                            ID = 8,
                            Value1 = 108,
                            Value2 = 1008
                        },
                        new
                        {
                            ID = 9,
                            Value1 = 109,
                            Value2 = 1009
                        },
                        new
                        {
                            ID = 10,
                            Value1 = 110,
                            Value2 = 1010
                        },
                        new
                        {
                            ID = 11,
                            Value1 = 111,
                            Value2 = 1011
                        },
                        new
                        {
                            ID = 12,
                            Value1 = 112,
                            Value2 = 1012
                        },
                        new
                        {
                            ID = 13,
                            Value1 = 113,
                            Value2 = 1013
                        },
                        new
                        {
                            ID = 14,
                            Value1 = 114,
                            Value2 = 1014
                        },
                        new
                        {
                            ID = 15,
                            Value1 = 115,
                            Value2 = 1015
                        },
                        new
                        {
                            ID = 16,
                            Value1 = 116,
                            Value2 = 1016
                        },
                        new
                        {
                            ID = 17,
                            Value1 = 117,
                            Value2 = 1017
                        },
                        new
                        {
                            ID = 18,
                            Value1 = 118,
                            Value2 = 1018
                        },
                        new
                        {
                            ID = 19,
                            Value1 = 119,
                            Value2 = 1019
                        },
                        new
                        {
                            ID = 20,
                            Value1 = 120,
                            Value2 = 1020
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityPaginationOffsetBased", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value2")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("EntitiesPaginationOffsetBased", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Value1 = 101,
                            Value2 = 1001
                        },
                        new
                        {
                            ID = 2,
                            Value1 = 102,
                            Value2 = 1002
                        },
                        new
                        {
                            ID = 3,
                            Value1 = 103,
                            Value2 = 1003
                        },
                        new
                        {
                            ID = 4,
                            Value1 = 104,
                            Value2 = 1004
                        },
                        new
                        {
                            ID = 5,
                            Value1 = 105,
                            Value2 = 1005
                        },
                        new
                        {
                            ID = 6,
                            Value1 = 106,
                            Value2 = 1006
                        },
                        new
                        {
                            ID = 7,
                            Value1 = 107,
                            Value2 = 1007
                        },
                        new
                        {
                            ID = 8,
                            Value1 = 108,
                            Value2 = 1008
                        },
                        new
                        {
                            ID = 9,
                            Value1 = 109,
                            Value2 = 1009
                        },
                        new
                        {
                            ID = 10,
                            Value1 = 110,
                            Value2 = 1010
                        },
                        new
                        {
                            ID = 11,
                            Value1 = 111,
                            Value2 = 1011
                        },
                        new
                        {
                            ID = 12,
                            Value1 = 112,
                            Value2 = 1012
                        },
                        new
                        {
                            ID = 13,
                            Value1 = 113,
                            Value2 = 1013
                        },
                        new
                        {
                            ID = 14,
                            Value1 = 114,
                            Value2 = 1014
                        },
                        new
                        {
                            ID = 15,
                            Value1 = 115,
                            Value2 = 1015
                        },
                        new
                        {
                            ID = 16,
                            Value1 = 116,
                            Value2 = 1016
                        },
                        new
                        {
                            ID = 17,
                            Value1 = 117,
                            Value2 = 1017
                        },
                        new
                        {
                            ID = 18,
                            Value1 = 118,
                            Value2 = 1018
                        },
                        new
                        {
                            ID = 19,
                            Value1 = 119,
                            Value2 = 1019
                        },
                        new
                        {
                            ID = 20,
                            Value1 = 120,
                            Value2 = 1020
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntitySortingByConvention", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValueInt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueString")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesSortingByConvention", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ValueInt = 8,
                            ValueString = "VALUE 111"
                        },
                        new
                        {
                            ID = 2,
                            ValueInt = 7,
                            ValueString = "VALUE 222"
                        },
                        new
                        {
                            ID = 3,
                            ValueInt = 6,
                            ValueString = "VALUE 333"
                        },
                        new
                        {
                            ID = 4,
                            ValueInt = 5,
                            ValueString = "VALUE 444"
                        },
                        new
                        {
                            ID = 5,
                            ValueInt = 4,
                            ValueString = "VALUE 111"
                        },
                        new
                        {
                            ID = 6,
                            ValueInt = 3,
                            ValueString = "VALUE 222"
                        },
                        new
                        {
                            ID = 7,
                            ValueInt = 2,
                            ValueString = "VALUE 333"
                        },
                        new
                        {
                            ID = 8,
                            ValueInt = 1,
                            ValueString = "VALUE 444"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntitySortingByFluentAPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValueInt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueString")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesSortingByFluentAPI", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ValueInt = 8,
                            ValueString = "VALUE 111"
                        },
                        new
                        {
                            ID = 2,
                            ValueInt = 7,
                            ValueString = "VALUE 222"
                        },
                        new
                        {
                            ID = 3,
                            ValueInt = 6,
                            ValueString = "VALUE 333"
                        },
                        new
                        {
                            ID = 4,
                            ValueInt = 5,
                            ValueString = "VALUE 444"
                        },
                        new
                        {
                            ID = 5,
                            ValueInt = 4,
                            ValueString = "VALUE 111"
                        },
                        new
                        {
                            ID = 6,
                            ValueInt = 3,
                            ValueString = "VALUE 222"
                        },
                        new
                        {
                            ID = 7,
                            ValueInt = 2,
                            ValueString = "VALUE 333"
                        },
                        new
                        {
                            ID = 8,
                            ValueInt = 1,
                            ValueString = "VALUE 444"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntitySortingManually", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValueInt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueString")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesSortingManually", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ValueInt = 8,
                            ValueString = "VALUE 111"
                        },
                        new
                        {
                            ID = 2,
                            ValueInt = 7,
                            ValueString = "VALUE 222"
                        },
                        new
                        {
                            ID = 3,
                            ValueInt = 6,
                            ValueString = "VALUE 333"
                        },
                        new
                        {
                            ID = 4,
                            ValueInt = 5,
                            ValueString = "VALUE 444"
                        },
                        new
                        {
                            ID = 5,
                            ValueInt = 4,
                            ValueString = "VALUE 111"
                        },
                        new
                        {
                            ID = 6,
                            ValueInt = 3,
                            ValueString = "VALUE 222"
                        },
                        new
                        {
                            ID = 7,
                            ValueInt = 2,
                            ValueString = "VALUE 333"
                        },
                        new
                        {
                            ID = 8,
                            ValueInt = 1,
                            ValueString = "VALUE 444"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityUnionsMyClass1", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class1Value1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Class1Value2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue2")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesUnionsMyClass1", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Class1Value1 = "CLASS 1 VALUE 1 AAA",
                            Class1Value2 = "CLASS 1 VALUE 2 AAA",
                            SharedValue1 = "CLASS 1 SHARED 1 AAA",
                            SharedValue2 = "CLASS 1 SHARED 2 AAA"
                        },
                        new
                        {
                            ID = 2,
                            Class1Value1 = "CLASS 1 VALUE 1 BBB",
                            Class1Value2 = "CLASS 1 VALUE 2 BBB",
                            SharedValue1 = "CLASS 1 SHARED 1 BBB",
                            SharedValue2 = "CLASS 1 SHARED 2 BBB"
                        },
                        new
                        {
                            ID = 3,
                            Class1Value1 = "CLASS 1 VALUE 1 CCC",
                            Class1Value2 = "CLASS 1 VALUE 2 CCC",
                            SharedValue1 = "CLASS 1 SHARED 1 CCC",
                            SharedValue2 = "CLASS 1 SHARED 2 CCC"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityUnionsMyClass2", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class2Value1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class2Value2")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SharedValue1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedValue2")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EntitiesUnionsMyClass2", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Class2Value1 = 110,
                            Class2Value2 = 120,
                            SharedValue1 = "CLASS 1 SHARED 1 AAA",
                            SharedValue2 = "CLASS 1 SHARED 2 AAA"
                        },
                        new
                        {
                            ID = 2,
                            Class2Value1 = 210,
                            Class2Value2 = 220,
                            SharedValue1 = "CLASS 1 SHARED 1 BBB",
                            SharedValue2 = "CLASS 1 SHARED 2 BBB"
                        },
                        new
                        {
                            ID = 3,
                            Class2Value1 = 310,
                            Class2Value2 = 320,
                            SharedValue1 = "CLASS 1 SHARED 1 CCC",
                            SharedValue2 = "CLASS 1 SHARED 2 CCC"
                        });
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderBatchDependent", b =>
                {
                    b.HasOne("UsingGraphQL.CEntityDataLoaderBatchPrincipal", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("UsingGraphQL.CEntityDataLoaderBatchDependent", "EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderGroupDependent", b =>
                {
                    b.HasOne("UsingGraphQL.CEntityDataLoaderGroupPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToManyDependent", b =>
                {
                    b.HasOne("UsingGraphQL.CEntityOneToManyPrincipal", "EntityPrincipal")
                        .WithMany("EntitiesDependent")
                        .HasForeignKey("EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOneDependent1", b =>
                {
                    b.HasOne("UsingGraphQL.CEntityOneToOnePrincipal1", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("UsingGraphQL.CEntityOneToOneDependent1", "EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOneDependent2", b =>
                {
                    b.HasOne("UsingGraphQL.CEntityOneToOnePrincipal2", "EntityPrincipal")
                        .WithOne("EntityDependent")
                        .HasForeignKey("UsingGraphQL.CEntityOneToOneDependent2", "EntityPrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityPrincipal");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderBatchPrincipal", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityDataLoaderGroupPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToManyPrincipal", b =>
                {
                    b.Navigation("EntitiesDependent");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOnePrincipal1", b =>
                {
                    b.Navigation("EntityDependent");
                });

            modelBuilder.Entity("UsingGraphQL.CEntityOneToOnePrincipal2", b =>
                {
                    b.Navigation("EntityDependent");
                });
#pragma warning restore 612, 618
        }
    }
}
