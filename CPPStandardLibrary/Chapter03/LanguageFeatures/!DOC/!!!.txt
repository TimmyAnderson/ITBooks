//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie C++ LANGUAGE FEATURES, ktore boli pridane v C++ 11.
2. C++ 11 nevyzaduje, aby po deklaracii TEMPLATE bola medzi znakmi '>' medzera. Takze napriklad zapis [vector<list<int>>] je korektny.
3. C++ 11 definuje novy KEYWORD [nullptr], ktory reprezentuje NULL VALUE z klasickeho C/C++. Pre KEYWORD [nullptr] platia nasledujuce pravidla.
   A. KEYWORD [nullptr] je hodnota TYPE [std::nullptr_t], ktory nema ZIADNE MEMBERS.
   B. Vdaka pouzitiu KEYWORD [nullptr] C++ dokaze odlisit OVERLOADED FUNCTIONS, ak maju PARAMTER typu [int] a [XXX*]. Pri pouziti ARGUMENTU [nullptr] sa zavola FUNCTION s PARAMETER [XXX*].
   C. TYPE [std::nullptr_t] je dokonca mozne (aj ked nema to ziaden vyznam) deklarovat ako FUNCTION PARAMTER.
   D. Hodnota [nullptr] sa pri numerickom vyjadreni konvertuje na hodnotu 0.
   E. KEYWORD [nullptr] NIE JE MOZNE pri volani FUNCTION konvertovat na TYPE [int]. Preto ak ma FUNCTION PARAMTER typu [int], tak ako ARGUMMENT NIE JE MOZNE pouzit hodnotu [nullptr].
4. KEYWORD [auto] ma v C++ 11 ZMENENY VYZNAM. Pouziva sa na definovanie VARIABLE, ktorej TYPE si COMPILER AUTOMATICKY odvodi.
!!! 5. Na to aby KEYWORD [auto] fungovalo je NEVYHNUTNE, aby deklarovana VARIABLE bola v deklaracii zaroven aj INICIALIZOVANA, inak C++ hodi ERROR.
6. KEYWORD [auto] NIE JE mozne pouzit ako FUNCTION PARAMETERS ci RETURN VALUES a to ani pri PARAMETERS pre ktore je definovana DEFAULT VALUE.
7. C++ 11 podporuje uniformnu inicializaciu VARIABLES pomocou SYNTAXE [{}], kde v zlozenych zatvorkach sa uvadza hodnota, alebo hodnoty, ktorymi ma byt VARIABLE inicializovana. Pomocou tejto SYNTAXE je mozne inicializovat nasledujuce typy VARIABLES.
   A. PRIMITIVE TYPE VARIABLES. Sem patria VARIABLES typu [char], [int] ci [double].
  !!! B. STRUCTURE a CLASS VARIABLES BEZ CONSTRUCTORS. Ak STRUCTURE, alebo CLASS NEMA ZIADEN CONSTRUCTOR, potom je mozne uniformnu inicializaciu pouzit na incializovanie tejto STRUCTURE, alebo CLASS.
  !!! C. STRUCTURE a CLASS VARIABLES s CONSTRUCTORS, ktore vsak nemaju PARAMETER typu [std::initializer_list<>]. Uniformnu inicializaciu je mozne pouzit IBA ak pocet ITEMS a ich TYPES v uniformnej inicializacii sa ZHODUJU s prototypom daneho CONSTRUCTOR. C++ potom takyto CONSTRUCTOR vyvola.
   D. STRUCTURE a CLASS VARIABLES, ktore maju CONSTRUCTOR s 1. PARAMETROM typu [std::initializer_list<>]. Typickym prikladom su CUSTOM CLASSES typu COLLECTION, ktore je vdaka tomuto CONSTRUCTOR mozne inicializovat pomocou uniformnej inicializacie. Sem patria aj vsetky standardne COLLECTIONS.
   E. ARRAYS. ARRAYS lubovolneho typu je mozne inicializovat pomocou uniformnej incializacie.
!!! 8. C++ 11 pri inicializacii pomocou SYNTAXE [{}] kontroluje ci nedochadza k STRATOVEJ KONVZERZII ([double] na [int]) a ak ano, tak hodi COMPILATION ERROR. Avsak konverzia [[int] na [char]], ak hodnota [int] je mozne ulozit do [char] je povolena.
!!! 9. CUSTOM CLASSES typu COLLECTION, ktore chcu maju byt inicializovane pomocou uniformnej inicializacie MUSIA definovat CONSTRUCTOR, ktory bude mat PARAMETER typu [std::initializer_list<T>] cez ktory uniformna inicializacia prenesie hodnoty, ktore je potom mozne v tomto CONSTRUCTOR pouzit na inicializovanie CLASS FIELDS.
10. C++ 11 definuje novy prikaz [for(TYPE NAME : COLLECTION)], ktory umoznuje enumerovat COLLECTION. Pre tento prikaz platia nasledujuce vlastnosti.
   A. Prikaz umoznuje enumerovat prvkami C ARRAYS.
   B. Prikaz umoznuje enumerovat CLASSES ak tieto CLASSES obsahuje definovane METHODS begin() a end(). CLASS [initializer_list] ako aj vsetky STANDARDNE COLLECTION ma tieto METHODS definovane.
   C. Prikaz umoznuje enumerovat CLASSES ak existuju definovane GLOBALNE FUNCTIONS begin() a end(), ktore maju 1. PARAMETER typu CLASS.
  !!! D. METHODS/FUNCTIONS begin() a end() MUSIA ako RETURN VALUES vracat ITERATOR. ITERATOR je ENTITA ktora ma definovany OPERATOR++. Ako ITERATORS mozu sluzit CUSTOM CLASSES, alebo POINTERS.
  !!! E. Ak prikaz ako [TYPE] definuje INY TYPE ako REFERENCIU ([TYPE&]), tak [TYPE] MUSI mat definovany NON-EXPLICIT COPY CONSTRUCTOR, inak COMPILER hodi ERROR. Definovanie OPERATOR= NESTACI. Prikaz VYZADUJE COPY CONSTRUCTOR.
!!! 11. V LIBRARY <iterator> su definovane FUNCTION begin() a FUNCTION end() pre PARAMETERS type C++ ARRAYS ako aj vsetky COLLECTIONS, ktore maju definovane FUNCTION begin() a FUNCTION end(). Tieto FUNCTIONS vykonavaju CONVERSION C++ ARRAYS a CLASSES obsahujucich FUNCTION begin() a FUNCTION end() na ITERATORS.
12. C++ 11 definuje koncept RVALUES. V C++ 11 sa KAZDA C++ EXPRESSION rozlisuje na 2 typy.
   A. LVALUE je EXPRESSION, ktorej vysledok je ulozeny v MEMORY, ktorej platnost trva za hranicu danej EXPRESSION. Typickym prikladom je EXPRESSION [X=Y;]. Kedze [Y] je VARIABLE, ktorej platnost trva az za hranice EXPRESSION [X=Y;], takze [Y] je v tejto EXPRESSION povazovana za LVALUE. VARIABLE [X] je tiez LVALUE.
   B. RVALUE je EXPRESSION, ktorej vysledok je ulozeny v TEMPORARY VARIABLE, ktorej platnost konci s platnostou danej EXPRESSION. Typickym prikladom je EXPRESSION [X=Y+2;]. Aj ked [Y] je VARIABLE, tak EXPRESSION [Y+2] sa pred priradenim do [X] musi ulozit do TEMPORARY VARIABLE, ktorej platnost trva iba v ramci trvania EXPRESSION [X=Y+2]. Hned potom je TEMPORARY VARIABLE uvolnena. Pretoze TEMPORARY VARIABLE ma platnost obmedzenu iba v hraniciach EXPRESSION, je povazovana za RVALUE. VARIABLE [X] je LVALUE, pretoze jej platnost trva za hranice EXPRESSION [X=Y+2].
!!! 13. Pre LVALUES platia nasledujuce fakty.
   A. LVALUES sa mozu nachadzat na LAVEJ aj PRAVEJ strane EXPRESSION.
   B. Z LVALUES je mozne ziskat ich ADRESU.
   C. Do LVALUES je mozne ulozit vysledok priradenia.
!!! 14. Pre RVALUES platia nasledujuce fakty.
   A. RVALUES sa mozu (tak ako LVALUES) nachadzat na LAVEJ aj PRAVEJ strane EXPRESSION.
   B. Z LVALUES NIE JE mozne ziskat ich ADRESU.
   C. Do RVALUES NIE JE mozne ulozit vysledok priradenia.
!!! 15. C++ 11 definuje SPECIALNY TYPE RVALUE REFERENCE, ktoreho SYNTAX je [TYPE&&], kde TYPE je lubovolny TYPE.
!!! 16. RVALUE REFERENCE je standardnym typom na zaklade ktoreho je mozne pretazovat METHODS ci FUNCTIONS, deklarovat VARIABLES typu RVALUE REFERENCE ci vykonavat konverzie na RVALUE REFERENCE TYPES.
!!!!! 17. RVALUE REFERENCE TYPES umoznuju implementovat MOVE SEMANTICS, kedy je mozne presunut obsah RVALUE bez toho, aby doslo k neefektivnemu KOPIROVANIU MEMORY.
!!! 18. MOVE SEMANTICS, ktora zamedzuje aby pri priradzovani RVALUES dochadzalo ku kopirovaniu MEMORY sa implementuje nasledujucim sposobom.
   A. CUSTOM TYPE implementuje MOVE CONSTRUCTOR, ktory ma PROTOTYPE [TYPE(TYPE&& PARAMETER)].
   B. CUSTOM TYPE implementuje MOVE OPERATOR=, ktory ma PROTOTYPE [TYPE& OPERATOR=(TYPE&& PARAMETER)].
!!!!! 19. Ak TYPE implementuje MOVE SEMANTICS, potom sa SILNE DOPORUCUJE, aby MOVE CONSTRUCTOR a MOVE OPERATOR= boli oznacene KEYWORD [noexcept] a NEHADZALI EXCEPTION. Ak to TYPE NEDODRZI, potom C++ pri realokacii STANDARD COLLECTIONS tieto MOVE CONSTRUCTOR a MOVE OPERATOR= NEZAVOLA. Je to bezpecnostna vlastnost C++, aby sa zabranilo vyvolaniu EXCEPTIONS pri realokacii, ktora sa deje na zaklade internych pravidiel STANDARD COLLECTIONS.
20. MOVE CONSTRUCTOR by mal byt implementovany nasledujucim sposobom.
   A. MOVE CONSTRUCTOR by mal byt oznaceny KEYWORD [noexcept].
   B. MOVE CONSTRUCTOR musi vybrat hodnoty INTERNYCH FIELD zo SOURCE OBJECT a ulozit ich do FIELDS CURRENT OBJECT. Tym CONSTRUCTOR vyrobi SHALLOW COPY SOURCE OBJECT. To znaci, ze ak napriklad TYPE deklaruje POINTER na BUFFER, tak tento sa nakopiruje do FIELD CURRENT OBJECT BEZ toho, aby sa alokovala MEMORY.
  !!! C. MOVE CONSTRUCTOR MUSI vykonat RESET INTERNYCH FIELD SOURCE OBJECT. V pripade FIELDS typu POINTER to napriklad znamena nastavit ich hodnoty na [nullptr].
21. MOVE OPERATOR= by mal byt implementovany nasledujucim sposobom.
   A. MOVE OPERATOR= by mal byt oznaceny KEYWORD [noexcept].
   B. MOVE OPERATOR= musi vykonat RESET FIELDS CURRENT OBJECT. FIELDS typu POINTER, ak odkazuju na dynamicky alokovane BUFFERS musia byt uvolnene.
   C. MOVE OPERATOR= musi vybrat hodnoty INTERNYCH FIELD zo SOURCE OBJECT a ulozit ich do FIELDS CURRENT OBJECT. Tym CONSTRUCTOR vyrobi SHALLOW COPY SOURCE OBJECT. To znaci, ze ak napriklad TYPE deklaruje POINTER na BUFFER, tak tento sa nakopiruje do FIELD CURRENT OBJECT BEZ toho, aby sa alokovala MEMORY.
  !!! D. MOVE OPERATOR= MUSI vykonat RESET INTERNYCH FIELD SOURCE OBJECT. V pripade FIELDS typu POINTER to napriklad znamena nastavit ich hodnoty na [nullptr].
22. Aj ked C++ 11 umoznuje konverziu na RVALUE REFERENCE TYPES, definuje specialnu TEMPLATE std::move(), ktora taktiez vykonava tuto konverziu. CODE pouzivajuci TEMPLATE std::move() je citatelnejsi.
23. Pre konverziu LVAUES na RVALUES C++ definuje nasledujuce TEMPLATES FUNCTION.
   A. TEMPLATE FUNCTION move<T>() vykonava konverziu z LVALUE REFERENCE na RVALUE REFERENCE. Ak TYPE 'T' NEMA definovany MOVE CONTSTRUCTOR, tak TEMPLATE FUNCTION move<T>() vracia LVALUE REFERENCE.
   B. TEMPLATE FUNCTION move_if_noexcept<T>() vykonava konverziu z LVALUE na RVALUE REFERENCE v pripade, ze TYPE 'T' ma definovany MOVE CONSTRUCTOR, ktory je oznaceny ako NOEXCEPT, alebo ak NAME definovany COPY CONSTRUCTOR. Ak MOVE CONSTRUCTOR s NOEXCEPT TYPE 'T' NEMA definovany, tak TEMPLATE FUNCTION move_if_noexcept<T>() vracia LVALUE REFERENCE.
   C. TEMPLATE FUNCTION forward<T>() vykonava konverziu z REFERENCE na RVALUE REFERENCE pokial REFERENCE NIE JE LVALUE REFERENCE. Ak TYPE 'T' je LVALUE REFERENCE, tak TEMPLATE FUNCTION forward<T>() vracia LVALUE REFERENCE.
!!! 24. C++ pre REFERENCES definuje REFERENCE COLLAPSING RULES, ktore definuju ako C++ modifujue REFERENCES na REFERENCES.
   A. COPY REFERENCE na COPY REFERENCE je C++ modifikovana na COPY REFERENCE.
   B. COPY REFERENCE na MOVE REFERENCE je C++ modifikovana na COPY REFERENCE.
   C. MOVE REFERENCE na COPY REFERENCE je C++ modifikovana na COPY REFERENCE.
  !!! D. MOVE REFERENCE na MOVE REFERENCE je C++ modifikovana na MOVE REFERENCE.
25. RVALUE REFERENCE TYPES mozu sluzit aj na realizaciu FUNCTION OVERLOADING. Pre FUNCTION OVERLOADING RVALUE REFERENCE TYPES platia nasledujuce fakty.
   A. Ak je definovana FUNCTION, ktora ma ako PARAMETER REFERENCE TYPE, tato FUNCTION moze byt volana pre LVALUES, ale NIE pre RVALUES.
   B. Ak je definovana FUNCTION, ktora ma ako PARAMETER CONST REFERENCE TYPE, tato FUNCTION moze byt volana pre LVALUES aj RVALUES. Pre RVALUES sa vsak DOCHADZA k aplikacii COPY a nie MOVE SEMANTICS, pretoze PARAMETER typu CONST REFERENCE TYPE MOVE SEMANTICS nepodporuje.
   C. Ak je definovana FUNCTION, ktora ma ako PARAMETER RVALUE REFERENCE TYPE, tato FUNCTION moze byt volana pre RVALUES ale NIE pre LVALUES. Pre RVALUES sa vsak DOCHADZA k aplikacii MOVE SEMANTICS, pretoze PARAMETER typu RVALUE REFERENCE TYPE MOVE SEMANTICS podporuje.
   D. Ak je definovana FUNCTION, ktora ma ako PARAMETER RVALUE CONST REFERENCE TYPE, tato FUNCTION moze byt volana pre RVALUES ale NIE pre LVALUES. Pre RVALUES sa vsak DOCHADZA k aplikacii MOVE SEMANTICS, pretoze PARAMETER typu RVALUE CONST REFERENCE TYPE MOVE SEMANTICS podporuje.
   E. Ak su definovane 2 FUNCTIONS, kde jedna ma ako PARAMETER REFERENCE TYPE (resp. CONST REFERENCE TYPE) a druha ma ako PARAMETER RVALUE REFERENCE TYPE, COMPILER pre LVALUES vola FUNCTION s PARAMETER REFERENCE TYPE a pre RVALUES vola FUNCTION s PARAMETER RVALUE REFERENCE TYPE. Pre RVALUES FUNCTION aplikuje MOVE SEMANTICS, vdaka comu nedochadza k casovo narocnemu vytvaraniu DEEP COPY.
!!! 26. RVALUE REFERENCE TYPES je mozne pouzit aj ako RETURN VALUES. Platia vsak pri tom nasledujuce obmedzenia.
   A. RETURN VALUE NESMIE odkazovat na LOCAL VARIABLE, pretoze jej platnost s ukoncenim FUNCTION konci.
  !!! B. MOVE SEMANTICS ako hlavna vyhoda RVALUE REFERENCE TYPES je spravidla ZBYTOCNA, pretoze C++ uz pred verziou C++ 11 dokazal RETURN VALUES OPTIMALIZOVAT. Optimalizacia spociva v tom, ze VARIABLE, ktora sa pouzije ako RETURN VALUE sa umiestni PRIAMO na MIESTO, ktore na STACKU sluzi na predavanie RETURN VALUES z FUNCTIONS do CALLER. Tym padom MOVE SEMANTICS nie je potrebna.
!!! 27. MOVE SEMANTICS ma nasledujuce vyhody.
   A. Umoznuje predavat si RVALUES (CONSTANTS, TEMPORARY VARIABLES) ako FUNCTION PARAMETERS, bez toho, aby sa vytvarala DEEP COPY volanim COPY CONSTRUCTOR, ale pouzije sa efektivnejsi MOVE CONSTRUCTOR vytvarajuci SHALLOW COPY.
   B. Umoznuje do STANDARD COLLECTIONS ukladat OBJECTS BY-VALUE, pretoze COLLECTIONS ak potrebuju vykonat RESIZE, nebudu vytvarat DEEP COPY objektov pomocou COPY CONSTRUCTORS, ale iba SHALLOW COPIES pomocou MOVE CONSTRUCTORS. Prirodzene vsak, praca s POINTERS, je RYCHLEJSIA, kedze pri RESIZE COLLECTION sa ziadne CONSTRUCTORS NEVOLAJU.
28. C++ 11 umoznuje definovat RAW STRING LITERALS, ktory umoznuje definovat STRING aj so znakmi ako [\] ci ["] bez toho, aby bolo nutne pouzit ESCAPE SEQUENCE [\]. RAW STRING LITERALS existuju v 2 variantach.
   A. SYNTAX [R"(STRING)"] (resp. [LR"(STRING)"] pre WIDE-STRINGS) umoznuje definovat "STRING", ktory moze obsahovat aj znaky [\] ci ["] bez toho, aby bolo nutne pouzit ESCAPE SEQUENCE [\].
   B. SYNTAX [R"DELIMITER(STRING)DELIMITER"] (resp. [LR"DELIMITER(STRING)DELIMITER"] pre WIDE-STRINGS) umoznuje definovat "STRING", ktory moze obsahovat aj znaky [\] ci ["] bez toho, aby bolo nutne pouzit ESCAPE CHAR [\]. Retazec "DELIMITER" je maximalne 16 LUBOVOLNYCH CHARACTERS, ktore definuju ZNACKU, ktorou sa oznacuje zaciatok 'DELIMITER(' a koniec 'DELIMITER)' STRING. Ak napriklad [DELIMIER=XXX], potom v retazci ["XXX(SOME_STRING)XXX"] moze hodnota "SOME_STRING" obsahovat aj sekvenciu znakov [)"], bez toho, aby si ju COMPILER pomylil za koniec STRING.
29. C++ 11 definuje nasledujuce LITERAL ENCODING PREFIXES, ktorymi je mozne definovat kodovanie STRING LITERALS.
   A. PREFIX [L] definuje WIDE-CHARACTER STRING, ktory je tvoreny CHARACTERS typu [wchar_t].
   B. PREFIX [u8] definuje UTF8 STRING, ktory je tvoreny CHARACTERS typu [const char].
   C. PREFIX [u] definuje UTF16 STRING, ktory je tvoreny CHARACTERS typu [char16_t].
   D. PREFIX [U] definuje UTF32 STRING, ktory je tvoreny CHARACTERS typu [char32_t].
30. V UNICODE STRINGS je mozne pouzit ESCAPE SEQUENCE [\uXXXX] na definovanie UTF16 CHARACTER a ESCAPE SEQUENCE [\UXXXXXXXX] na definovanie UTF32 CHARACTER.
!!! 31. C++ 11 definuje KEYWORD [noexcept], ktore je mozne aplikovat na FUNCTIONS a METHODS. Aplikaciou tohto KEYWORD FUNCTIONS a METHODS sa deklaruje, ze dana FUNCTION ci METHOD NESMIE hodit EXCEPTION. Ak takato FUNCTION ci METHOD EXCEPTION hodi, potom sa zavola FUNCTION std::terminate(), ktora pomocou FUNCTION std::abort() ukonci PROCESS.
32. KEYWORD [noexcept] nahradzuje KEYWORD [throw(XXX)], ktory sa tak stal DEPRECATED.
33. Vyhodou KEYWORD [noexcept] oproti KEYWORD [throw(XXX)] je fakt, ze KEYWORD [noexcept] NEVYZADUJE ZIADNE RUNTIME CHECKS, cim sa CODE stava rychlejsim.
!!! 34. C++ 11 umoznuje v KEYWORD [noexcept] definovat COMPILE TIME CONDITION pre ktoru plati, ze FUNCTION, alebo METHOD nehodi EXCEPTION. Podmienky v KEYWORD [noexcept] je mozno specifikovat dvoma sposobom.
   A. Definovat klasicku BOOLEAN CONDITION. COMPLIER v COMPILE TIME vyhodnoti tuto CONDITION, pricom ak nadobudne hodnotu TRUE, tak FUNCTION/METHOD NEHODI EXCEPTION, a naopak ak nadobudne hodnotu FALSE, tak FUNCTION/METHOD moze hodit EXCEPTION.
   B. BOOLEAN CONDITION v ktorej sa nachadza KEYWORD [noexcept]. Tento KEYWORD v COMPILE TIME vyhodnocuje ci dana EXPRESSION (volanie FUNCTION/METHOD) moze je oznacena KEYWORD [noexcept]. Ak ano, potom FUNCTION/METHOD nemoze hodit EXCEPTION. Ak nie, FUNCTION/METHOD moze hodit EXCEPTION.
!!!!! 35. Pre BOOLEAN CONDITIONS v KEYWORD [noexcept] platia nasledujuce pravidla.
   A. CONDITIONS NESMU obsahovat referenciu na svoje PARAMETERS, ani LOCAL VARIABLES, ak sa v CONDITION nepouzije OPERATOR [noexcept()].
   B. CONDITIONS ako obsahuju VARIABLES, tieto MUSIA byt CONSTANTS.
   C. CONDITIONS mozu obsahovat aj VYSLEDOK volania FUNCTIONS, no tieto musia byt oznacene pomocou KEYWORD [constexpr].
  !!! D. CONDITIONS mozu obsahovat referenciu na svoje PARAMETERS, ale IBA ak sa v CONDITION pouzije OPERATOR [noexcept()].
!!!!! 36. Ak FUNCTION oznacena pomocou KEYWORD [noexcept] zavola FUNCTION, ktora NIE JE oznacena KEYWORD [noexcept] a ta hodi EXCEPTION, tak PROGRAM bude TERMINATED.
37. C++ 11 definuje novy KEYWORD [constexpr], ktory moze byt aplikovany na nasledujuce konstrukty.
   A. VARIABLE.
   B. FUNCTION.
   C. NON-VIRTUAL METHOD.
   D. CONSTRUCTOR.
!!! 38. Pre KEYWORD [constexpr] platia nasledujuce fakty.
   A. Konstrukt oznaceny pomocou KEYWORD [constexpr] je mozny pouzit v CONSTANT EXPRESSIONS. Typickym prikladom je deklaracia velkosti ARRAY, v ktorom je mozne pouzit Konstrukt oznaceny pomocou KEYWORD [constexpr].
  !!! B. FUNCTIONS NESMU mat ziaden iny CODE, iba RETURN STATEMENT. Mozu este obsahovat USING a TYPEDEF STATEMENTS, ale ZIADEN INY CODE.
  !!!!! C. C++ 14 vyrazne rozsirilo moznosti FUNCTIONS s KEYWORD [constexpr], ktore tak mozu obsahovat aj cykly, podmienky ci EXCEPTION HANDLING. V C++ 11 to vsak nie je mozne.
39. VARIADIC TEMPLATES su TEMPLATE CLASSES, TEMPLATE FUNCTIONS, alebo TEMPLATE METHODS, ktore mozu mat variabilny pocet TEMPLATE PARAMETERS.
40. C++ podporuje definicie VARIADIC TEMPLATE CLASSES, VARIADIC TEMPLATE STRUCTURES, VARIADIC TEMPLATE METHODS a VARIADIC TEMPLATE FUNCTIONS.
!!! 41. VARIADIC TEMPLATES sa v C++ spracovavaju pomocou RECURSION. Ta vyzaduje definovanie nasledujucich elementov.
   A. Definovanie ELEMENTU (CLASS, STRUCTURE, METHOD, FUNCTION), ktory spracovava RECURSION FINAL STEP.
   B. Definovanie ELEMENTU (CLASS, STRUCTURE, METHOD, FUNCTION), ktory spracovava RECURSION RECURSIVE STEP.
  !!! C. Z ELEMENTU, ktory spracovava RECURSION RECURSIVE STEP je nutne REKURZIVNE volat ELEMENT, az kym nebude zavolany ELEMENT pre RECURSION FINAL STEP.
  !!!!! D. Pocas vykonavania REKURZIE je postupne ODSTRANOVANY VZDY 1. TYPE PARAMETER, pricom ELEMENT (CLASS, STRUCTURE, METHOD, FUNCTION) tento TYPE PARAMETER spracuje pred vykonanim dalsej REKURZIE.
   E. Proces pri ktorom sa v REKURZII odstranuje vzdy 1. TYPE PARAMETER sa nazyva TYPE PARAMETER PEEL OFF.
!!! 42. VARIADIC TEMPLATES sa deklaruju pomocou KEYWORD [...]. KEYWORD [...] ma vo VARIADIC TEMPLATES 2 vyznamy.
   A. Ak sa KEYWORD [...] nachadza NALAVO od TYPE PARAMETER NAME, tak reprezentuje DEKLARACIU TYPE PARAMETER PACK. TYPE PARAMETER PACK reprezentuje VARIABILNY POCET TYPE PARAMETERS danej VARIADIC TEMPLATE, ktore su zbalene do JEDNEHO NAME.
   B. Ak sa KEYWORD [...] nachadza NAPRAVO od TYPE PARAMETER NAME, tak C++ TYPE PARAMETER PACK ROZBALI na jednotlive TYPE PARAMETERS do EXPRESSION [TYPE_PARAMETER_1,TYPE_PARAMETER_2,...,TYPE_PARAMETER_N], kde hodnoty 'TYPE_PARAMETER_X' su hodnotami TYPE PARAMETERS.
43. Jednoduche rozbalenie TYPE PARAMETER PACK funguje nasledujucim sposobom.
   A. Definuje sa VARIADIC TEMPLATE FUNCTION [template<typename...TItems> void XXX(TItems... Items)].
   B. Definuje sa VARIADIC TEMPLATE FUNCTION [template<typename...TItems> void YYY(TItems... Items)].
   C. FUNCTION XXX() obsahuje CODE [YYY(Items...)], ktorym sa vola FUNCTION YYY().
  !!!!! D. Ak TYPE PARAMETER PACK [Items] obsahuje hodnoty (true,100,L"ABC"), C++ volanie FUNCTION YYY() zmeni na CODE [YYY<bool,int,wstring>(true,100,wstring(L"ABC"))].
!!! 44. TYPE PARAMETER PACKS je mozne rozbalit AJ KED SU SUCASTOU EXPRESSIONS.
   A. Definuje sa VARIADIC TEMPLATE FUNCTION [template<typename...TItems> void XXX(TItems... Items)].
   B. Definuje sa VARIADIC TEMPLATE FUNCTION [template<typename...TItems> void YYY(TItems... Items)].
  !!! C. FUNCTION XXX() obsahuje CODE [YYY((Items++)...)], ktorym sa vola FUNCTION YYY(), pricom sa jednotlive TYPE PARAMETER v TYPE PARAMETER PACK INKREMENTUJU.
  !!!!! D. Ak TYPE PARAMETER PACK [Items] obsahuje hodnoty (10,20.2,30.4), C++ volanie FUNCTION YYY() zmeni na CODE [YYY<int,double,double>(11,21.2,31.4)].
  !!!!! E. Z uvedeneho vyplyva, ze ak k rozbaleniu TYPE PARAMETER PACK dochadza v EXPRESSION, tak C++ VYKONA danu EXPRESSION pre KAZDY TYPE PARAMETER z TYPE PARAMETER PACK. To znaci, ze EXPRESSION [SOME_EXPRESSION(Items...)] C++ zmeni na CODE [SOME_EXPRESSION(TYPE_PARAMETER_1),SOME_EXPRESSION(TYPE_PARAMETER_2),...,SOME_EXPRESSION(TYPE_PARAMETER_N)].
  !!!!! F. Ak sa v EXPRESSION pouzije aj nazov TYPE PARAMETER PACK, tak C++ ho rozbali na jednotlive TYPES, ktore TYPE PARAMETER PACK obsahuje. Napriklad EXPRESSION [(TTypeParameters) Items...] C++ zmeni na CODE [(TYPE_1) TYPE_PARAMETER_1,(TYPE_2) TYPE_PARAMETER_2,...,(TYPE_N) TYPE_PARAMETER_N].
!!!!! 45. TYPE PARAMETER PACK je mozne rozbalit IBA v CODE, ktory umoznuje spracovat 'N' PARAMETERS. Nasledujuci zoznam uvadza priklady, kedy je rozbalenie TYPE PARAMETER PACK mozne vykonat.
   A. FUNCTION ARGUMENT LIST.
   B. TEMPLATE ARGUMENT LIST.
   C. BASE SPECIFIER LIST.
   D. BASE, alebo MEMBER INITIALIZER LIST.
   E. INITIALIZER LIST.
   F. OPERATOR [sizeof...]. OPERATOR [sizeof...] vracia pocet ITEMS v TYPE PARAMETER PACK.
!!!!! 46. TYPE PARAMETER PACK NIE JE mozne rozbalit vzdy. Nasledujuci zoznam uvadza priklady, kedy je rozbalenie TYPE PARAMETER PACK NIE JE mozne vykonat.
   A. Pri definicii VARIABLIES. Kedze TYPE PARAMETER PACK reprezentuje viacero VALUES, definovanie VARIABLE typu TYPE PARAMETER PACK by znamenalo vznik VIACERYCH VARIABLES, a preto to C++ nepovoluje.
   B. Pri definicii FIELDS. Kedze TYPE PARAMETER PACK reprezentuje viacero VALUES, definovanie FIELD typu TYPE PARAMETER PACK by znamenalo vznik VIACERYCH FIELDS, a preto to C++ nepovoluje.
   C. V RETURN VALUES. Kedze TYPE PARAMETER PACK reprezentuje viacero VALUES, definovanie RETURN VALUE typu TYPE PARAMETER PACK by znamenalo, ze FUNCTION ci METHOD by musela vratia VIACERO VALUES, co vsak v C++ NIE JE MOZNE.
!!! 47. TYPE PARAMETER PACKS (napriklad [TTypes]) je aj bez ROZBALENIA mozne pouzit napriklad v nasledujucich situaciach.
  !!! A. Na definiciu TYPE PARAMETERS TEMPLATES, ktore VARIADIC TEMPLATE vola. Napriklad CODE [SomeTemplateFunction<TTypes>(TypeParameters...)] C++ transformuje na CODE [SomeTemplateFunction<TYPE_1,TYPE_2,...,TYPE_N>(TYPE_PARAMETER_1,TYPE_PARAMETER_2,...,TYPE_PARAMETER_N)].
  !!!!! B. Pri vykonavani CASTING. Napriklad CODE [SomeTemplateFunction((TTypes) TypeParameters)] C++ transformuje na CODE [SomeTemplateFunction((TYPE_1) TypeParameter_1,(TYPE_2) TypeParameter_2,...,(TYPE_N) TypeParameter_N)]. To znaci, ze KAZDY TYPE PARAMETER z TYPE PARAMETER je pretypovany na SVOJ VLASTNY TYPE (co samozrejme nie je potrebne) a nasledne je zavolana VARIADIC TEMPLATE FUNCTION SomeTemplateFunction().
48. Standardna implementacia VARIADIC TEMPLATE FUNCTIONS/METHODS sa sklada z nasledujucich ELEMENTOV.
   A. Implementacia NON-TEMPLATE FUNCTION/METHOD, ktora nema TYPE PARAMETERS. Tato NON-TEMPLATE FUNCTION/METHOD reprezentuje RECURSION FINAL STEP.
   B. Implementacia VARIADIC TEMPLATE FUNCTION/METHOD, ktora ma 1 TYPE PARAMETER a 1 TYPE PARAMETER PACK. TYPE PARAMETER reprezentuje rozbaleny TYPE PARAMETER, ktory bol PEELED OFF, zatial co TYPE PARAMETER PACK reprezentuje ostatne TYPE PARAMETERS, ktore este neboli rozbalene.
  !!! C. VARIADIC TEMPLATE FUNCTION/METHOD musi vo svojom CODE REKURZIVNE volat samu seba, az kym nie je zavolana NON-TEMPLATE FUNCTION/METHOD, ktora REUKURZIU ukonci.
49. Standardna implementacia VARIADIC TEMPLATE CLASS/STRUCTURES sa sklada z nasledujucich ELEMENTOV.
   A. Implementacia VARIADIC TEMPLATE CLASS/STRUCTURE, ktora TYPE PARAMETER PACK. Tato TEMPLATE CLASS/STRUCTURE okrem definicie samotnej VARIADIC TEMPLATE reprezentuje aj RECURSION FINAL STEP.
  !!! B. Implementacia VARIADIC TEMPLATE CLASS/STRUCTURE SPECIALIZATION, ktora ma ma 1 TYPE PARAMETER a 1 TYPE PARAMETER PACK. TYPE PARAMETER reprezentuje rozbaleny TYPE PARAMETER, ktory bol PEELED OFF, zatial co TYPE PARAMETER PACK reprezentuje ostatne TYPE PARAMETERS, ktore este neboli rozbalene.
  !!!!! C. VARIADIC TEMPLATE CLASS/STRUCTURE SPECIALIZATION by zaroven MUSI BYT DERIVED z VARIADIC TEMPLATE CLASS/STRUCTURE definovanej v 1. kroku. To umozni METHODS tejto SPECIALIZATION spracovat jednotlive TYPE PARAMETERS z TYPE PARAMETER PACK.
  !!!!! D. VARIADIC TEMPLATE CLASS/STRUCTURE SPECIALIZATION by zaroven MALA MAT FIELD typu TYPE PARAMETER. Tento FIELD sluzi na ulozenie uz rozbaleneho TYPE PARAMETER z TYPE PARAMETER PACK. BASE CLASSES/STRUCTURES potom budu obsahovat ostatne TYPE PARAMETERS z TYPE PARAMETER PACK.
!!! 50. Ak METHOD vo VARIADIC CLASS/STRUCTURE chce spracovat vsetky TYPE PARAMETERS z TYPE PARAMETER PACK, musi vykonat nasledujuce kroky.
   A. Vo VARIADIC TEMPLATE CLASS/STRUCTURE je nutne definovat tuto METHOD, ktora spracovava RECURSION FINAL STEP.
  !!! B. Vo VARIADIC TEMPLATE CLASS/STRUCTURE SPECIALIZATION je nutne definovat tuto METHOD, ktora spracovava rozbaleny TYPE PARAMETER a REKURZIVNE vola SAMU SEBA pre svoje BASE CLASSES/STRUCTURES.
  !!! C. Postupnym volanim METHOD pre vsetky BASE CLASSES/STRUCTURES moze METHOD spracovat VSETKY rozbalene TYPE PARAMETERS z TYPE PARAMETER PACK.
   D. Na konci REKURZIE sa vola METHOD z VARIADIC TEMPLATE CLASS/STRUCTURE, ktora REKURZIU ukonci.
51. VARIADIC TEMPLATE FUNCTIONS je mozne vyuzit na volanie inych FUNCTIONS, ktorych pocet PARAMETERS nie je znamy. Pomocou TEMPLATE FUNCTION forward<TType>() a pouzitia MOVE SEMANTICS je mozne dosiahnut to, ze VALUES sa pri volani inych FUNCTIONS NEBUDU KOPIROVAT, ale budu MOVED.
52. C++ 11 umoznuje pomocou KEYWORD [using] deklarovat TYPE ALIASES. Pre TYPE ALIASES platia nasledujuce vlastnosti.
   A. SYNTAX TYPE ALIAS je [template<typename T1,...,typename TN> using Alias=typename TEMPLATE<T1,...,TN>].
  !!! B. TYPE ALIASES NIE su deklaraciou novych TEMPLATES, iba vytvorenim ALIAS pre TYPES generovane z existujucich TEMPLATES.
   C. TYPE ALIASES mozu byt deklarovane iba v TYPE SCOPE a GLOBAL SCOPE. Nemozu byt vsak deklarovane v telach FUNCTIONS.
53. LAMBDA EXPRESSION je FUNCTION, ktoru je mozne definovat INLINE sposobom, v ramci inej FUNCTION. LAMBDA FUNCTION ma nasledujuce atributy.
   A. OUTER SCOPE. Urcuje sa v ZLOZENYCH ZATVORKACH [] a definuje zoznam LOCAL VARIABLES a NON-STATIC FIELDS, ktore LAMBDA EXPRESSION prebera z miesta DEFINICIE.
   B. PARAMETERS. Urcuju sa v OBYCAJNYCH ZATVOREKACH () a definuju zoznam PARAMETERS danej LAMBDA EXPRESSION.
   C. KEYWORD [mutable]. Umoznuje LAMBDA EXPRESSION modifikovat PARAMETERS prenesene BY-VALUE sposobom a takisto volanie NON-CONST MEMBERS pre OBJECTS. Zmeny vykonane na PARAMETERS prenesenych BY-VALUE sposobom sa NEPRENESU do OUTER SCOPE.
   D. EXCEPTION SPECIFIER. Umoznuje definovat informaciu o tom ci a za akych podmienok moze LABMDA EXPRESSION generovat EXCEPTIONS.
   E. RETURN TYPE. Definuje za za OPERATOR-> a urcuje RETURN TYPE danej EXPRESSION. Ak nie je definovany, tak C++ dokaze RETURN TYPE indikovat v RETURN STATEMENT.
   F. BODY. Obsahuje CODE LAMBDA EXPRESSION.
!!! 54. C++ NEPODPORUJE LAMBDA EXPRESSION TEMPLATES. LAMBDA EXPRESSIONS MUSIA mat VZDY definovane konkretne TYPES.
!!! 55. LAMBDA EXPRESSIONS umoznuje definovat OUTER SCOPE, ktory obsahuje LOCAL VARIABLES a NON-STATIC FIELDS, ktore sa maju z OUTER SCOPE v ktorom je LAMBDA EXPRESSION definovana preniest do LAMBDA EXPRESSION. C++ umonzuje 2 sposoby prenosu LOCAL VARIABLES a NON-STATIC FIELDS do LAMBDA EXPRESSIONS.
   A. SYNTAX [XXX] znamena prenos VARIABLE 'XXX' BY-VALUE sposobom.
   B. SYNTAX [&XXX] znamena prenos VARIABLE 'XXX' BY-REFERENCE sposobom.
   C. SYNTAX [=] znamena prenos VSETKYCH LOCAL VARIABLES BY-VALUE sposobom.
   D. SYNTAX [&] znamena prenos VSETKYCH LOCAL VARIABLES BY-REFERENCE sposobom.
   E. SYNTAX [this] znamena prenos LOCAL VARIABLE [this] BY-VALUE sposobom. Do FIELDS daneho OBJECT je mozne zapisovat.
56. OPERATOR typeid() vracia pre LAMBDA EXPRESSIONS MANGLED NAMES, pricom aj pre dve LAMBDA EXPRESSIONS obsahujuce IDENTICKY CODE sa generuje INY NAME.
!!!!! 57. LAMBDA EXPRESSIONS je mozne konvertovat na CLASS [function].
58. KEYWORD [decltype] definuje OPERATOR [decltype], ktory pre EXPRESSION v zatvorkach () vracia TYPE danej EXPRESSION.
59. V C++ 11 je mozne RETURN VALUES pre FUNCTIONS definovat 2 sposobmi.
   A. Klasicky sposob ma SYNTAX [RETURN_TYPE FUNCTION_NAME(PARAMETER_LIST)].
   B. Novy sposob zavedeny v C++ ma SYNTAX [auto FUNCTION_NAME(PARAMETER_LIST) -> RETURN_TYPE.
!!! 60. Novy sposob definovania RETURN VALUE umoznuje RETURN_TYPE definovat pomocou noveho OPERATOR decltype(EXPRESSION), kde EXPRESSION je LUBOVOLNA EXPRESSION, ktora je VZDY vyhodnocovana v COMPILE TIME a jej vysledkom je TYPE, ktory nasledne COMPILER pouzije ako RETURN TYPE danej FUNCTION.
!!!!! 61. Dovodom pre ktory bol novy sposob zavedeny je, ze pri definicii RETURN_TYPE pomocou OPERATOR decltype(EXPRESSION) sa v EXPRESSION mozu nachadzat PARAMETERS z PARAMETER_LIST. Je to preto, lebo definicia RETURN_TYPE sa FYZICKY v CODE nachadza AZ ZA DEKLARACIOU PARAMETERS a teda C++ COMPILER teda v dobe prekladu RETURN_TYPE uz POZNA MENA PARAMETERS z PARAMETER_LIST.
!!!!! 62. OBROVSKOU VYHODOU je fakt, ze RETURN_TYPE obsahujuci OPERATOR decltype(EXPRESSION) je SUCASTOU FUNCTION PROTOTYPE a teda COMPILER pri hladani vhodnej verzie OVERLOADED TEMPLATE FUNCTION vykona 'EXPRESSION' z OPERATOR decltype(EXPRESSION) v COMPILE TIME. Ak pocas vykonania EXPRESSION dojde ku COMPILER ERROR, tak aplikujuc mechanizmus SFINAE COMPILER NEVRATI COMPILATION ERROR, ale pokracuje vo vyhladavani vhodnej verzie OVERLOADED TEMPLATE FUNCTION skusanim ostatnych OVERLOADED TEMPLATE FUNCTIONS.
!!!!! 63. SCOPED ENUMERATIONS je specialne typy ENUMERATIONS, ktore maju VYRAZNE VYLEPSENIA oproti standardnym ENUMERATIONS.
   A. SCOPED ENUMERATIONS sa deklaruju pomocou KEYWORDS [enum class].
  !!! B. SCOPED ENUMERATIONS NIE JE mozne IMPLICITNE konverovat na INTEGER TYPES.
  !!!!! C. VALUES SCOPED ENUMERATIONS NIE SU sucastou GLOBAL NAMESPACE, ale su sucastou NAMESPACE definovaneho danym SCOPED ENUMERATION. To znaci, ze pri pristupe k VALUES SCOPED ENUMERATIONS je nutne pouzit SYNTAX [SCOPED_ENUMERATION::VALUE].
  !!! D. SCOPED ENUMERATIONS umoznuju definovat UNDERLYING TYPES. Ak UNDERLYING TYPE nie je definovany, tak ako DEFUALT je vybrany type [int].
   E. SCOPED ENUMERATIONS umoznuju FORWARD DECLARATIONS, vdaka ktorym je mozne deklarovat SCOPED ENUMERATION TYPES bez definovania SCOPED ENUMERATION VALUES.
   F. CLASS [underlying_type<TScopedEnum>] v ALIAS [underlying_type<TScopedEnum>::type] vracia UNDERLYING TYPE daneho SCOPED ENUMERATION.
64. C++ 11 definuje nasledujuce nove TYPES.
   A. TYPE [char16_t].
   B. TYPE [char32_t].
   C. TYPE [long long].
   D. TYPE [unsigned long long].
   E. TYPE [nullptr_t].
65. TEMPLATES okrem TYPE PARAMETERS mozu definovat aj INTEGER PARAMETERS. Tie, kedze su konstanty je mozne pouzit napriklad pri definicii ARRAYS ako specifikacia ARRAY SIZE.
66. TEMPLATES mozu mat definovane DEFAULT PARAMETERS. Pri definovani DEFAULT PARAMETERS, nie je nutne definovat vsetky TEMPLATE PARAMETERS. Tie, ktore nie su definovane su nahradene DEFAULT PARAMETERS.
67. KEYWORD [typename] je v C++ mozne pouzit v 2 kontextov.
   A. Pri deklaracii TEMPLATE na definovanie TYPE PARAMETER.
   B. Pri pouziti TYPE ALIAS TEMPLATE CLASS, alebo TEMPLATE STRUCTURE v TEMPLATES. Ak TEMPLATE CLASS, alebo TEMPLATE STRUCTURE definuje TYPE ALIAS, potom pri jeho pouziti v TEMPLATES je NUTNE pouzit ako PREFIX KEYWORD [typename], aby C++ dokazal rozlisit, ze sa jedna o TYPE.
68. C++ umoznuje definovat TEMPLATE METHODS.
!!! 69. TEMPLATE METHODS NEMOZU byt VIRTUAL.
70. C++ umoznuje definovat TEMPLATE CONSTRUCTORS.
71. C++ umoznuje definovat NESTED TEMPLATE CLASSES a NESTED TEMPLATE STRUCTURES.
72. Pomocou SYNTAXE [VARIABLE()] a [VARIABLE{}] je mozne inicializovat PRIMITIVE TYPES na DEFUALT VALUES. To je mozne vyuzit v TEMPLATES, ak je nutne TYPE PARAMETERS inicializovat na DEFAULT VALUES.
73. C++ definuje iba 2 validne PROTOTYPES MAIN FUNCTION.
   A. MAIN FUNCTION [int main(void)].
   B. MAIN FUNCTION [int main(int ARGC, char* ARGV[])].
74. Ak MAIN FUNCTION vracia hodnotu 0, je volanie PROGRAMU povazovane za uspesne. Ak vrati hodnotu ROZNU od 0, je vratena hodnota povazovana za ERROR CODE.
!!! 75. C++ umoznuje, aby MAIN FUNCTION NEBOLA ukoncena STATEMENT [return]. V takom pripade C++ AUTOMATICKY vlozi na koniec MAIN FUNCTION STATEMENT [return(0)].
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
Priklady LVALUES a RVALUES.

A. Priradenie VARIABLES.

	int															A;
	int															B=10;

	// !!! V tejto EXPRESSION su [A] aj [B] LVALUES, pretoze ich platnost trva za hranice tejto EXPRESSION.
	A=B;

B. Binarny operator.

	int															A=10;
	int															B=20;
	int															C;

	// !!! V tejto EXPRESSION je [C] LVALUE, pretoze jej platnost trva za hranice tejto EXPRESSION.
	// !!!!! V tejto EXPRESSION je [A+B] RVALUE, pretoze je vysledok je ulozeny do TEMPORARY VARIABLE, ktorej platnost trva iba do skoncenia tejto EXPRESSION.
	C=A+B;

C. Binarny operator.

	int															A=10;
	int															B;

	// !!! V tejto EXPRESSION je [B] LVALUE, pretoze jej platnost trva za hranice tejto EXPRESSION.
	// !!!!! V tejto EXPRESSION je [A+2] RVALUE, pretoze je vysledok je ulozeny do TEMPORARY VARIABLE, ktorej platnost trva iba do skoncenia tejto EXPRESSION.
	B=A+2;

D. Priradenie konstanty.

	int															A;

	// !!! V tejto EXPRESSION je [A] LVALUE, pretoze jej platnost trva za hranice tejto EXPRESSION.
	// !!! V tejto EXPRESSION je [2] RVALUE pretoze jeho platnost trva iba do skoncenia tejto EXPRESSION.
	A=2;

E. Priradenie do REFERENCE.

	int& SomeFunction(int& Variable)
	{
		return(Variable);
	}

	int															A;

	// !!! EXPRESSION [A] je LVALUE, pretoze jej platnost trva za hranice tejto EXPRESSION.
	// !!! EXPRESSION [B] je RVALUE, pretoze jej platnost trva iba do skoncenia tejto EXPRESSION.
	// !!!!! EXPRESSION [SomeFunction(A)] je LVALUE, pretoze FUNCTION SomeFunction() vracia REFERENCE do ktorej je mozne priradit hodnotu.
	SomeFunction(A)=10;
//-------------------------------------------------------------------------------------------------------