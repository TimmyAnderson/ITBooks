//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje UNIT TESTING ASP.NET CORE PROJECTS.
2. UNIT TEST je test individualnej komponenty, ktorej testovanie je abstrahovane od ostatnych komponent. Pri UNIT TESTING sa testuje iba vybrana komponenta nezavisle na ostatnych komponentach.
3. VISUAL STUDIO umoznuje pouzitie rozlicnych UNIT TEST FRAMEWORKS, ktore je mozne stiahnut ako NUGET PACKAGES.
4. UNIT TESTS sa implementuju v specializovanych VISUAL STUDIO PROJECTS. Pouzitie VISUAL STUDIO PROJECTS umoznuje separovat UNIT TEST CODE od WEB APPLICATIONS CODE.
5. XUNIT je UNIT TEST FRAMEWORK, ktory je podporovany priamo VISUAL STUDIO 2019.
6. XUNIT UNIT TEST PROJECT sa vytvara pomocou VISUAL STUDIO, alebo pomocou COMMAND LINE COMMAND.
   A. Pridanie XUNIT UNIT TEST PROJECT pomocou VISUAL STUDIO robi vykonanim COMMAND [FILE->NEW->PROJECT->XUNIT TEST PROJECT .NET CORE].
   B. Pridanie XUNIT UNIT TEST PROJECT pomocou COMMAND LINE sa robi vykonanim COMMAND LINE COMMAND [dotnet new xunit -o PROJECT_NAME], kde VALUE 'PROJECT_NAME' je nazov PROJECT.
7. Podla konvencie je nazov UNIT TEST PROJECT [PROJECT_NAME.Tests], kde 'PROJECT_NAME' je nazov WEB APPLICATION PROJECT, ktory ma UNIT TEST pokryt. Nasledne je nutne do VISUAL STUDIO PROJECTS pridat REFERENCE na PROJECT, ktory ma byt testovany.
8. METHODS vykonavajuce UNIT TESTS sa v XUNIT oznacuju pomocou ATTRIBUTES. XUNIT podporuje nasledujuce ATTRIBUTES.
   A. ATTRIBUTE [FactAttribute] oznacuje UNIT TESTS, ktore musia skoncit VZDY USPESNE.
   B. ATTRIBUTE [TheoryAttribute] oznacuje UNIT TESTS, ktore skoncia USPESNE v zavislosti od testujucich dat.
9. UNIT TESTS sa logicky skladaju z nasledujucich casti.
   A. ARRANGE. Tato faza pripravi vykonanie UNIT TEST vytvorenim instancii OBJECTS, ktore maju byt testovane a pripravou dat pre destovanie.
   B. ACT. Tato faza vykona UNIT TEST zavolanim METHODS, ktore ma test vyskusat.
   C. ASSERT. Tato faza skontroluje vysledky UNIT TEST.
10. CLASS [Xunit.Assert] umoznuje vykonat ASSERT fazu UNIT TEST. Ak TEST zlyha METHODS CLASS [Xunit.Assert] hodia EXCEPTION. CLASS [Xunit.Assert] ma nasleldujuce METHODS.
   A. METHOD [void Equal<TType>(TType Expected, TType Actual)] zistuje ci vysledok testu je ROVNY ocakavanej VALUE.
   B. METHOD [void Equal<TType>(TType Expected, TType Actual, IEqualityComparer<TType> Comparer)] zistuje ci vysledok testu NIE je ROVNY ocakavanej VALUE. METHOD definuje CUSTOM COMPARER, ktory musi implementovat INTERFACE [IEqualityComparer<TType>].
   C. METHOD [void Equal(double Expected, double Actual, int Precision)] umoznuje porovnat FLOATING VALUES ci su ROVNE do pozadovanej PRECISION.
   D. METHOD [void NotEqual<TType>(TType Expected, TType Actual)] zistuje ci vysledok testu je ROVNY ocakavanej VALUE.
   E. METHOD [void NotEqual<TType>(TType Expected, TType Actual, IEqualityComparer<TType> Comparer)] zistuje ci vysledok testu NIE je ROVNY ocakavanej VALUE. METHOD definuje CUSTOM COMPARER, ktory musi implementovat INTERFACE [IEqualityComparer<TType>].
   F. METHOD [void NotEqual(double Expected, double Actual, int Precision)] umoznuje porovnat FLOATING VALUES ci su ROZDIELNE do pozadovanej PRECISION.
   G. METHOD [void Range<TType>(TType Actual, TType Low, TType High)] zistuje ci vysledok testu je v INTERVALE <Low,High>.
   H. METHOD [void Range<TType>(TType Actual, TType Low, TType High, IEqualityComparer<TType> Comparer)] zistuje ci vysledok testu je v INTERVALE <Low,High>. METHOD definuje CUSTOM COMPARER, ktory musi implementovat INTERFACE [IEqualityComparer<TType>].
   I. METHOD [void NotInRange<TType>(TType Actual, TType Low, TType High)] zistuje ci vysledok testu NIE JE v INTERVALE <Low,High>.
   J. METHOD [void NotInRange<TType>(TType Actual, TType Low, TType High, IEqualityComparer<TType> Comparer)] zistuje ci vysledok testu NIE JE v INTERVALE <Low,High>. METHOD definuje CUSTOM COMPARER, ktory musi implementovat INTERFACE [IEqualityComparer<TType>].
   K. METHOD [TType IsType<TType>(object Object)] zistuje ci vysledok testu je ocakavany TYPE.
   L. METHOD [TType IsNotType<TType>(object Object)] zistuje ci vysledok testu NIE je ocakavany TYPE.
   M. METHOD [void Null(object Object)] zistuje ci vysledok testu je NULL.
   N. METHOD [void NotNull(object Object)] zistuje ci vysledok testu NIE je NULL.
   O. METHOD [void True(bool Condition)] zistuje ci vysledok testu je TRUE.
   P. METHOD [void False(bool Condition)] zistuje ci vysledok testu je FALSE.
   Q. METHOD [Exception Throws(Type ExceptionType, Action TestCode)] zistuje ci TEST METHOD nehodila danu EXCEPTION.
   R. METHOD [TType ThrowsAny<TType>(Action TestCode)] zistuje ci TEST METHOD nehodila EXCEPTION, alebo hodila INU ako ocakavanu EXCEPTION.
   S. METHOD [Task<Exception> ThrowsAsync(Type ExceptionType, Func<Task> TestCode)] asynchronne zistuje ci TEST METHOD nehodila danu EXCEPTION.
   T. METHOD [Task<TType> ThrowsAnyAsync<TType>(Func<Task> TestCode)] zistuje ci TEST METHOD nehodila EXCEPTION, alebo hodila INU ako ocakavanu EXCEPTION.
11. Spustanie TESTS sa robi pomocou TEST EXPLORER, ktory sa spusta cez MENU COMMAND [Test->Windows->Test Explorer].
12. TEST EXPLORER umoznuje spustat TEST v DEBUGGING MODE, kedy je mozne nastavovat BREAKPOINTS v TEST METHODS.
13. Spustenie UNIT TESTS je mozne aj pomocou COMMAND LINE COMMAND [dotnet test].
14. UNIT TESTS vyuzivaju DEPENDENCY INJECTION, kde sa COMPONENTS, ktore su zavisle na externych systemoch ako napriklad DB su nahrazdane za C# CLASSES, ktore implementuju stanoveny INTERFACE.
15. MOCKING FRAMEWORK je FRAMEWORK, ktory umoznuje automaticke generovanie MOCK OBJECTS.
16. VISUAL STUDIO vo forme NUGET PACKAGE podporuje MOCKING FRAMEWORK MOQ. Ten sa pridava do TEST PROJECT pridanim NUGET PACKAGE [Moq].
17. Vytvarania MOCK OBJECTS pomocou NUGET PACKAGE [Moq] sa realizuje nasledujucim sposobom.
   A. Vytvori sa instancia CLASS [Mock<TYPE>], kde 'TYPE' je TYPE, ktory ma MOQ vytvorit.
   B. Pre instanciu CLASS [Mock<TYPE>] je mozne zavolat METHOD [Mock<TYPE>.SetupGet(LAMBDA)], ktora vytvori PROPERTY GETTER s nazvom, ktory vrati LAMBDA EXPRESSION 'LAMBDA'.
   C. Nasledne je mozne zavolat METHOD [Mock<TYPE>.SetupGet(LAMBDA).Return(DATA)], ktora pre vytvoreny PROPERTY GETTER vrati DATA 'DATA', ktore vrati METHOD [Return(DATA)].
   D. Pre takto pripraveny MOCK FACTORY OBJECT sa zavola PROPERTY [Mock<TYPE>.Object], ktora vrati MOCK OBJECT implementujuci TYPE 'TYPE' a majuci nastavene PROPERTIES.
//----------------------------------------------------------------------------------------------------------------------