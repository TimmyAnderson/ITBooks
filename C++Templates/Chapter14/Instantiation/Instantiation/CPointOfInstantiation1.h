//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
class CPointOfInstantiation1 final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		int														MValue;

	public:
		int GetValue(void) const noexcept;

	public:
		CPointOfInstantiation1(int Value);
		virtual ~CPointOfInstantiation1(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
CPointOfInstantiation1::CPointOfInstantiation1(int Value)
	: MValue(Value)
{
}
//----------------------------------------------------------------------------------------------------------------------
CPointOfInstantiation1::~CPointOfInstantiation1(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
int CPointOfInstantiation1::GetValue(void) const noexcept
{
	return(MValue);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
CPointOfInstantiation1 operator-(const CPointOfInstantiation1& Value)
{
	CPointOfInstantiation1										Result(Value.GetValue());

	return(Result);
}
//----------------------------------------------------------------------------------------------------------------------
bool operator>(const CPointOfInstantiation1& Value1, const CPointOfInstantiation1& Value2)
{
	bool														Result=(Value1.GetValue()>Value2.GetValue());

	return(Result);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
using															PointOfInstantiationType=CPointOfInstantiation1;
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void PointOfInstantiation1Test1A(TType Value)
{
	// !!!!! Vola sa FUNCTION, ktora je definovana v CODE az za tymto miestom.
	// !!!!! Pre USING TYPE [PointOfInstantiationType] C++ najde FUNCTION [void PointOfInstantiation1Test1B(const CPointOfInstantiation1& Value)], pretoze C++ vykonava ARGUMENT DEPENDENT LOOKUP a pre USING TYPES sa beru do uvahy vsetky FUNCTIONS na NAMESPACE SCOPE.
	if (Value>0)
	{
		PointOfInstantiation1Test1B(Value);
	}
	else
	{
		PointOfInstantiation1Test1B(-Value);
	}
}
//----------------------------------------------------------------------------------------------------------------------
inline void PointOfInstantiation1Test1B(const CPointOfInstantiation1& Value)
{
	std::wcout << L"CPointOfInstantiation1 - TEST 1 - VALUE [" << Value.GetValue() << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
inline void PointOfInstantiation1Test1(void)
{
	PointOfInstantiation1Test1A<PointOfInstantiationType>(-100);
}
//----------------------------------------------------------------------------------------------------------------------
// !!!!! Az tu sa nachadza POINT OF INSTANTIATION pre TEMPLATE [PointOfInstantiation1Test1A<PointOfInstantiationType>].
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
/*
template<typename TType>
void PointOfInstantiation1Test2A(TType Value)
{
	// !!!!! Vola sa FUNCTION, ktora je definovana v CODE az za tymto miestom.
	// !!!!! Pre BUILT-IN TYPE [int] C++ NENAJDE FUNCTION [void PointOfInstantiation1Test2B(int Value)], pretoze C++ vykonava ARGUMENT DEPENDENT LOOKUP a pre BUILT-IN TYPES sa ARGUMENT DEPENDENT LOOKUP sa NEROBI.
	if (Value>0)
	{
		PointOfInstantiation1Test2B(Value);
	}
	else
	{
		PointOfInstantiation1Test2B(-Value);
	}
}
//----------------------------------------------------------------------------------------------------------------------
inline void PointOfInstantiation1Test2B(int Value)
{
	std::wcout << L"CPointOfInstantiation1 - TEST 2 - VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
inline void PointOfInstantiation1Test2(void)
{
	PointOfInstantiation1Test2A<int>(-100);
}
*/
//----------------------------------------------------------------------------------------------------------------------
// !!!!! Az tu sa nachadza POINT OF INSTANTIATION pre TEMPLATE [PointOfInstantiation1Test2A<int>].
//----------------------------------------------------------------------------------------------------------------------