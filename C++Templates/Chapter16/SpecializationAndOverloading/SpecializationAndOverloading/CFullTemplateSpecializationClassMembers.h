//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include "CString.h"
#include "MyDebug.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! Toto je PRIMARY TEMPLATE CLASS.
template<typename TTypeOutside>
class CFullTemplateSpecializationClassMembersOutside final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		template<typename TTypeInside>
		class CFullTemplateSpecializationClassMembersInside final
		{
//----------------------------------------------------------------------------------------------------------------------
			public:
				void PrintPrimaryTemplateInside(TTypeInside Value) const;
//----------------------------------------------------------------------------------------------------------------------
		};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
		public:
			void PrintPrimaryTemplateOutside(TTypeOutside Value) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeOutside>
void CFullTemplateSpecializationClassMembersOutside<TTypeOutside>::PrintPrimaryTemplateOutside(TTypeOutside Value) const
{
	std::wcout << L"OUTSIDE - PRIMARY TEMPLATE - TYPE [" << GetTypeInfoName<decltype(Value)>() << L"] VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TTypeOutside>
template<typename TTypeInside>
void CFullTemplateSpecializationClassMembersOutside<TTypeOutside>::CFullTemplateSpecializationClassMembersInside<TTypeInside>::PrintPrimaryTemplateInside(TTypeInside Value) const
{
	std::wcout << L"INSIDE - PRIMARY TEMPLATE - TYPE [" << GetTypeInfoName<decltype(Value)>() << L"] VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!! Toto je TEMPLATE CLASS SPECIALIZATION.
template<>
class CFullTemplateSpecializationClassMembersOutside<CString> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		// !!!!! INNER CLASS v TEMPLATE SPECIALIZATION je UPLNE NEZAVISLA na INNER CLASS v PRIMARY TEMPLATE.
		template<typename TTypeInside>
		class CFullTemplateSpecializationClassMembersInside final
		{
//----------------------------------------------------------------------------------------------------------------------
			public:
				void PrintTemplateSpecializationInside(TTypeInside Value) const;
//----------------------------------------------------------------------------------------------------------------------
		};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	public:
		void PrintTemplateSpecializationOutside(const CString& Value) const;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! KEYWORD [template<>] sa NESMIE pouzit pre TEMPLATE MEMBERS TEMPLATE CLASS SPECIALIZATIONS, ktore maju DEFINITION OUT OF CLASS.
//template<>
template<typename TTypeInside>
void CFullTemplateSpecializationClassMembersOutside<CString>::CFullTemplateSpecializationClassMembersInside<TTypeInside>::PrintTemplateSpecializationInside(TTypeInside Value) const
{
	std::wcout << L"INSIDE - TEMPLATE SPECIALIZATION - TYPE [" << GetTypeInfoName<decltype(Value)>() << L"] VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------