//-----------------------------------------------------------------------------
1. Solution demonstruje OPERATOR OVERLOADING v C++.
2. C++ pre CUSTOM TYPES umoznuje definovat CUSTOM OPERATORS. Pre CUSTOM OPERATORS plati nasledujuce fakty.
   A. C++ umoznuje definovat CUSTOM OPERATORS iba pre EXISTUJUCE TOKENS. C++ NEUMOZNUJE pridavat NOVE TOKENS, ktore C++ nepozna.
   B. C++ NEUMOZNUJE menit ARITU OPERATORS. Pocet PARAMETERS kazdeho OPERATOR musi byt identicky s pocetom PARAMETERS v STANDARD OPERATORS.
   C. C++ umoznuje pouzit iba tie CUSTOM OPERATORS, ktore su DEFINOVANE. Napriklad ak pre dany TYPE sa definuje OPERATOR= a OPERATOR+, NEZNAMENA to, ze OPERATOR+= je tym definovany, pretoze logicky jeho cinnost pozostava z vykonania OPERATOR+ a OPERATOR=. Ak pre dany TYPE ma byt OPERATOR+= pouzity, potom MUSI byt EXPLICITNE DEFINOVANY.
3. C++ definuje nasledujuce STANDARD OPERATORS.
   1. OPERATOR [a=b] reprezentuje OPERATION priradenia.
   2. OPERATOR [a+b] reprezentuje OPERATION scitania.
   3. OPERATOR [a-b] reprezentuje OPERATION odcitania.
   4. OPERATOR [a*b] reprezentuje OPERATION nasobenia.
   5. OPERATOR [a/b] reprezentuje OPERATION delenia.
   6. OPERATOR [a%b] reprezentuje OPERATION zvysku po deleni (MODULO).
   7. OPERATOR [++a] reprezentuje OPERATION PREFIX inkrementacie.
   8. OPERATOR [a++] reprezentuje OPERATION POSTFIX inkrementacie.
   9. OPERATOR [--a] reprezentuje OPERATION PREFIX dekrementacie.
   10. OPERATOR [a--] reprezentuje OPERATION POSTFIX dekrementacie.
   11. OPERATOR [+a] reprezentuje OPERATION UNARY plus.
   12. OPERATOR [-b] reprezentuje OPERATION UNARY minus.
   13. OPERATOR [a==b] reprezentuje OPERATION porovnania na rovnost.
   14. OPERATOR [a!=b] reprezentuje OPERATION porovnania na nerovnost.
   15. OPERATOR [a>b] reprezentuje OPERATION porovnania ci OBJECT 1 je VACSI ako OBJECT 2.
   16. OPERATOR [a<b] reprezentuje OPERATION porovnania ci OBJECT 1 je MENSI ako OBJECT 2.
   17. OPERATOR [a>=b] reprezentuje OPERATION porovnania ci OBJECT 1 je VACSI, alebo ROVNY ako OBJECT 2.
   18. OPERATOR [a<=b] reprezentuje OPERATION porovnania ci OBJECT 1 je MENSI, alebo ROVNY ako OBJECT 2.
   19. OPERATOR [!a] reprezentuje OPERATION LOGICAL NOT.
   20. OPERATOR [a&&b] reprezentuje OPERATION LOGICAL AND.
   21. OPERATOR [a||b] reprezentuje OPERATION LOGICAL OR.
   22. OPERATOR [~a] reprezentuje OPERATION BITWISE NOT.
   23. OPERATOR [a&b] reprezentuje OPERATION BITWISE AND.
   24. OPERATOR [a|b] reprezentuje OPERATION BITWISE OR.
   25. OPERATOR [a^b] reprezentuje OPERATION BITWISE XOR.
   26. OPERATOR [a<<b] reprezentuje OPERATION BITWISE LEFT SHIFT.
   27. OPERATOR [a>>b] reprezentuje OPERATION BITWISE RIGHT SHIFT.
   28. OPERATOR [a+=b] reprezentuje OPERATION scitania a priradenia.
   29. OPERATOR [a-=b] reprezentuje OPERATION odcitania a priradenia.
   30. OPERATOR [a*=b] reprezentuje OPERATION nasobenia a priradenia.
   31. OPERATOR [a/=b] reprezentuje OPERATION delenia a priradenia.
   32. OPERATOR [a%=b] reprezentuje OPERATION zvysku po deleni (MODULO) a priradenia.
   33. OPERATOR [a&=b] reprezentuje OPERATION BITWISE AND a priradenia.
   34. OPERATOR [a|=b] reprezentuje OPERATION BITWISE OR a priradenia.
   35. OPERATOR [a^=b] reprezentuje OPERATION BITWISE XOR a priradenia.
   36. OPERATOR [a<<=b] reprezentuje OPERATION BITWISE LEFT SHIFT a priradenia.
   37. OPERATOR [a>>=b] reprezentuje OPERATION BITWISE RIGHT SHIFT a priradenia.
   38. OPERATOR [a[b]] reprezentuje OPERATION pristupu k OBJECTS daneho pola.
   39. OPERATOR [*a] reprezentuje OPERATION ziskania hodnoty, na ktory ukazuje POINTER.
   40. OPERATOR [&a] reprezentuje OPERATION ziskania adresy daneho OBJECT.
   41. OPERATOR [a.b] reprezentuje OPERATION pristupu k MEMBER.
   42. OPERATOR [a->b] reprezentuje OPERATION pristupu k cez POINTER.
   43. OPERATOR [a.*b] reprezentuje OPERATION pristupu k POINTER na MEMBER.
   44. OPERATOR [a->*b] reprezentuje OPERATION pristupu k POINTER na MEMBER cez POINTER. OPERATOR NIE JE mozne PRETAZIT.
   45. OPERATOR [a(p1,p2...,pn)] reprezentuje OPERATION volania METHOD.
   46. OPERATOR [a,b] reprezentuje OPERATION vykonania dvoch nezavislych EXPRESSIONS.
   47. OPERATOR [a?b:c] reprezentuje OPERATION podmieneneho vyrazu. OPERATOR NIE JE mozne PRETAZIT.
   48. OPERATOR [a::b] reprezentuje OPERATION SCOPE RESOLUTION. OPERATOR NIE JE mozne PRETAZIT.
   49. OPERATOR [sizeof(a)], [sizeof(TYPE)] reprezentuje OPERATION zistenia velkosti OBJECT, alebo EXPRESSION. OPERATOR NIE JE mozne PRETAZIT.
   50. OPERATOR [sizeof...(PARAMETERS)] reprezentuje OPERATION ziskania poctu PARAMETERS v PARAMETER PACK. OPERATOR NIE JE mozne PRETAZIT.
   51. OPERATOR [typeid(a)], [typeid(TYPE)] reprezentuje OPERATION dynamickeho urcenia TYPU daneho OBJECT, alebo EXPRESSION. OPERATOR NIE JE mozne PRETAZIT.
   52. OPERATOR [alignof(TYPE)] reprezentuje OPERATION ziskania ALGINMENT daneho TYPE. OPERATOR NIE JE mozne PRETAZIT.
   53. OPERATOR [(TYPE)a], [TYPE(a)] reprezentuje OPERATION pretypovania OBJECT.
   54. OPERATOR [const_cast<TYPE>(a)] reprezentuje OPERATION CONST pretypovania OBJECT.
   55. OPERATOR [static_cast<TYPE>(a)] reprezentuje OPERATION STATIC pretypovania OBJECT.
   56. OPERATOR [dynamic_cast<TYPE>(a)] reprezentuje OPERATION DYNAMIC pretypovania OBJECT.
   57. OPERATOR [reinterpret_cast<TYPE>(a)] reprezentuje OPERATION REINTERPRET pretypovania OBJECT.
   58. OPERATOR [new TYPE] reprezentuje OPERATION dynamickej alokacie OBJECT.
   59. OPERATOR [new TYPE[a]] reprezentuje OPERATION dynamickej alokacie pola OBJECTS.
   60. OPERATOR [delete a] reprezentuje OPERATION dynamickej dealokacie OBJECT.
   61. OPERATOR [delete[] a] reprezentuje OPERATION dynamickej dealokacie pola OBJECTS.
   62. OPERATOR ["a"_b] reprezentuje OPERATION USER DEFINED LITERALS.
   63. OPERATOR [noexcept(a)] reprezentuje OPERATION EXCEPTION CHECK. OPERATOR NIE JE mozne PRETAZIT.
4. KEYWORD [operator] po ktorom nasleduje samotny OPERATOR sa pouziva na definovanie OVERLOADED OPERATORS.
!!!!! 5. Pouzitie TOKENS pre CUSTOM OPERATORS je iba SKRATENA SYNTAX, ktoru je mozne nahradit syntaxou ANALOGICKOU s FUNCTION CALL.
!!! 6. FUNCTION CALL SYNTAX pre PRIMITIVE TYPES NIE JE mozne pouzit.
7. CUSTOM OPERATORS mozu byt definovane na 2 urovniach.
   A. Ako GLOBAL FUNCTIONS. Pocet PARAMETERS je rovny ARITE OPERATORA.
   B. Ako NON-STATIC METHODS. Pocet PARAMETERS je o 1 NIZSI ako ARITA OPERATORA. Je to preto, lebo LEFT PARAMETER je vzdy 'this' OBJECT.
!!! 8. OPERATORS ako STATIC METHODS NIE JE MOZNE v C++ PRETAZOVAT.
!!!!! 9. STANDARD OPERATORS [&&], [||] maju v C++ specialnu OPTIMALIZATION, ktora zabezpecuje, ze RIGHT PARAMETER uz NEMUSI byt vykonany, ak vysledok LEFT PARAMETER bol FALSE (pri OPERATOR [&&]), resp. TRUE (pri OPERATOR [||]). C++ pre CUSTOM OPERATORS tuto OPTIMALIZATION NEPODPORUJE a VZDY su vykonane ako LEFT OPERATOR, tak aj RIGHT OPERATOR.
!!!!! 10. CUSTOM TYPES ak nechcu definovat CUSTOM OPERATOR, a zaroven chcu zabranit, aby sa STANDARD VERSION daneho OPERATOR pouzila, moze pouzit KEYWORD [delete]. V takom pripade NEBUDE MOZNE STANDARD OPERATOR POUZIT.
11. CUSTOM OPERATOR moze byt definovany ako MEMBER METHOD, alebo ako NON-MEMBER FUNCTION.
   A. Ak je CUSTOM OPERATOR definovany ako MEMBER METHOD tak 1. PARAMETER CUSTOM OPERATOR je THIS OBJECT, pricom pocet PARAMETERS je znizeny o 1 voci ARITE OPERATOR.
   B. Ak je CUSTOM OPERATOR definovany ako NON-MEMBER FUNCTION musi mat pocet PARAMETERS rovny ARITE OPERATORA.
!!! 12. CUSTOM OPERATOR MUSI mat ako aspon 1 PARAMETER USER DEFINED TYPE.
13. CUSTOM OPERATORS mozu byt definovane pre ENUM TYPES.
14. CUSTOM OPERATORS pouzivaju nasledujuce typy PARAMETERS.
   A. BY-VALUE PARAMETERS sa pouzivaju ak prenasany OBJECT ma malu velkost.
   B. BY-REFERENCE PARAMETERS sa pouzivaju ak prenasany OBJECT ma velku velkost.
   !!! C. BY-POINTER PARAMETERS sa pouzivaju pri CUSTOM OPERATORS iba ZRIEDKAVO, pretoze vedu k obskurnej SYNTAXY. Zaroven plati, ze C++ NEUMOZNUJE, aby VSETKY PARAMETERS CUSTOM OPERATORS boli prenasane BY-POINTER.
15. CUSTOM OPERATORS pouzivaju nasledujuce typy RETURN VALUES.
   A. BY-VALUE RETURN VALUES sa pouzivaju najcastejsie. C++ pri ich prenose moze vyuzit MOVE SEMANTICS, ak je definovany MOVE OPERATOR, alebo RETURN VALUE OPTIMALIZATION, cim sa znizuju naroky na presun RETURN VALUE.
   B. BY-REFERENCE RETURN VALUES sa pouzivaju v pripade, ze CUSTOM OPERATOR je definovany ako MEMBER METHOD, alebo ak OPERATOR vracia niektorych zo svojich PARAMETERS.
   !!! C. BY-POINTER RETURN VALUES by sa NEMALI POUZIVAT, pretoze vedu k obskurnej SYNTAXY.
!!! 16. CUSTOM OPERATORS su DERIVED z BASE CLASSED do DERIVED CLASSES a mozu byt aj OVERRIDEN.
17. C++ vykonava NAME RESOLVING pri hladani vhodneho CUSTOM OPERATOR. CODE [x@y], kde VARIABLE 'x' je TYPE 'X' a VARIABLE 'y' je TYPE 'Y' je RESOLVED nasledujucim sposobom.
   A. C++ sa pozrie do CLASS 'X' a zisti ci ma definovany OPERATOR& s PARAMETER TYPE 'Y'. Ak sa takyto OPERATOR najde, NAME RESOLVING konci.
   B. Ak CLASS 'X' je definovana v NAMESPACE 'XXX', tak C++ hlada ci sa v NAMESPACE 'XXX' nenachadza GLOBAL OPERATOR& s 1. PARAMETER TYPE 'X' a 2. PARAMETER TYPE 'Y'. Ak sa takyto OPERATOR najde, NAME RESOLVING konci.
   C. Ak CLASS 'Y' je definovana v NAMESPACE 'YYY', tak C++ hlada ci sa v NAMESPACE 'YYY' nenachadza GLOBAL OPERATOR& s 1. PARAMETER TYPE 'X' a 2. PARAMETER TYPE 'Y'. Ak sa takyto OPERATOR najde, NAME RESOLVING konci.
   D. Ak sa ziaden OPERATOR nenasiel, COMPILER hodi COMPILATION ERROR.
!!! 18. C++ pre CUSTOM OPERATORS NEVYKONAVA OPERATOR HIDING medzi OPERATOR METHODS a OPERATOR FUNCTIONS. Je to rozdiel oproti METHODS a FUNCTIONS, ktore su HIDDEN.
19. C++ umoznuje pristupovat k FIELDS jednotlivym OBJECTS pomocou OPERATORS pristupu k MEMBERS OPERATOR.* a OPERATOR->*.
20. POINTERS na MEMBER FIELDS sa pouzivaju nasledujucim sposobom.
   A. Vytvori sa VARIABLE na MEMBER FIELD pomocou SYNTAXE [TYPE CLASS_NAME::*VARIABLE_NAME].
   B. Do VARIABLE na MEMBER FIELD sa priradi POINTER na MEMBER FIELD pomocou SYNTAXE [VARIABLE=&CLASS_NAME::FIELD_NAME].
   C. Pristup k MEMBER FIELD pre dany OBJECT sa realizuje cez OPERATOR.* pomocou SYNTAXE [OBJECT.*VARIABLE].
   D. Pristup k MEMBER FIELD pre dany POINTER na OBJECT sa realizuje cez OPERATOR->* pomocou SYNTAXE [POINTER_TO_OBJECT->*VARIABLE].
21. POINTERS na MEMBER METHODS sa pouzivaju nasledujucim sposobom.
   A. Vytvori sa VARIABLE na MEMBER METHOD pomocou SYNTAXE [RETURN_TYPE (CLASS_NAME::*METHOD_NAME)(PARAMETERS)].
   B. Do VARIABLE na MEMBER METHOD sa priradi POINTER na MEMBER METHOD pomocou SYNTAXE [VARIABLE=&CLASS_NAME::METHOD_NAME].
   C. Pristup k MEMBER METHOD pre dany OBJECT sa realizuje cez OPERATOR.* pomocou SYNTAXE [(OBJECT.*VARIABLE)(PARAMETERS)].
   D. Pristup k MEMBER METHOD pre dany POINTER na OBJECT sa realizuje cez OPERATOR->* pomocou SYNTAXE [(POINTER_TO_OBJECT->*VARIABLE)(PARAMETERS)].
!!!!! 22. OPERATOR->* pristupu k MEMBER METHODS moze byt definovany ako CUSTOM OPERATOR. Pre CUSTOM OPERATOR->* platia nasledujuce fakty.
   A. CUSTOM OPERATOR->* moze byt definovany bud ako MEMBER METHOD, alebo NON-MEMBER FUNCTION.
   !!! B. CUSTOM OPERATOR->* NEVYKONAVA PRISTUP k MEMBER FIELDS a MEMBER METHODS ako STANDARD OPERATOR->*.
   !!!!! C. CUSTOM OPERATOR->* NEMA ZIADEN SPECIALNY VYZNAM. Moze mat LUBOVOLNU RETURN VALUE a LUBOVOLNE TYPES svojich PARAMETERS.
23. C++ umoznuje konvertovat TYPES nasledujucimi sposobmi.
   A. Ak TYPE 'XXX' definuje CONSTRUCTOR, ktory ma PARAMETER TYPE 'YYY', potom tento CONSTRUCTOR je pouzity na konverziu VALUE TYPE 'YYY' na VALUE TYPE 'XXX'.
   B. Ak TYPE 'XXX' definuje CONVERSION OPERATOR TYPE 'YYY', potom tento CONVESION OPERATOR je pouzity na konverziu VALUE TYPE 'XXX' na na VALUE TYPE 'YYY'.
24. Pre CONVERSION OPERATORS platia nasledujuce fakty.
   A. CONVERSION OPERATORS su VZDY definovane ako MEMBER OPERATORS.
   B. CONVERSION OPERATORS NEMAJU definovanu RETURN VALUE, pretoze ta je IDENTICKA s TYPE CONVERSION OPERATOR, a preto NIE JE EXPLICITNE definovana.
   C. CONVERSION OPERATORS mozu byt definovane ako EXPLICIT, ak su oznacene pomocou KEYWORD [explicit].
!!! 25. TYPES by NEMALI definovat CONVERSION CONSTRUCTORS a CONVERSION OPERATORS SUCASNE, inak hrozi, ze dojde k AMBIGUITIES kedy COMPILER nebude vediet rozhodnut aky typ CONVERSION ma pouzit a hodi COMPILATION ERROR.
26. CONVERSION medzi TYPES mozu byt IMPLICIT, alebo EXPLICIT.
   A. Pri IMPLICIT CONVERSION je CONVERSION vykonana AUTOMATICKY pomocou COMPILER, ktory najde vhodny CONVERSION CONSTRUCTOR, alebo CONVERSION OPERATOR.
   B. Pri EXPLICIT CONVERSION je CONVERSION vykonana IBA ak je v CODE pouzity CONVERSION OPERATOR ako [(TYPE) EXPRESSION], [TYPE(EXPRESSION)], alebo [static_cast<TYPE>(EXPRESSION)].
27. IMPLICIT a EXPLICIT CONVERSIONS sa definuju nasledujucim sposobom.
   A. IMPLICIT CONVERSION CONSTRUCTOR je bezny CONVERSION CONSTRUCTOR.
   B. IMPLICIT CONVERSION OPERATOR je bezny CONVERSION OPERATOR.
   C. EXPLICIT CONVERSION CONSTRUCTOR je CONVERSION CONSTRUCTOR, ktory je oznaceny KEYWORD [explicit].
   D. EXPLICIT CONVERSION OPERATOR je CONVERSION OPERATOR, ktory je oznaceny KEYWORD [explicit].
28. C++ definuje nasledujuce pravidla pre aplikaciu USER DEFINED CONVERSION CONSTRUCTORS a USER DEFINED CONVERSION OPERATORS.
   A. Konverzia OBJECT TYPE 'A' na OBJECT TYPE 'B' je mozna iba ak je definovany CUSTOM OPERATOR= [B::OPERATOR=(C)], pricom plati, ze [A=C], alebo existuje UNIKATNA CONVERSION z TYPE 'A' na TYPE 'C'.
   B. COMPILER pri hladani CONVERSION CONSTRUCTORS a CONVERSION OPERATORS VZDY berie do uvahy iba 1 VOLANIE IMPLICIT CONVERSION CONSTRUCTOR, alebo IMPLICIT CONVERSION OPERATOR. Ak je nutne opakovane volanie CONVERSION CONSTRUCTORS a CONVERSION OPERATORS je nutne volat ich EXPLICITNE.
   C. USER DEFINED CONVERSION CONSTRUCTORS a USER DEFINED CONVERSION OPERATORS su volane IBA AK NEEXISTUJE STANDARD CONVERSION medzi danymi TYPES.
   D. TYPE RETURN VALUE NIE JE brana do uvahy pro hladani vhodnych USER DEFINED CONVERSION CONSTRUCTORS a USER DEFINED CONVERSION OPERATORS.
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Popis OPERATORS.

1. Pre OPERATOR ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a=b].
   B. OPERATOR MOZE byt OVERLOADED, ale IBA ako METHOD.
   C. METHOD PROTOTYPE [R& A::operator=(B b)].
2. Pre OPERATOR ADDITION platia nasledujuce fakty.
   A. SYNTAX [a+b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator+(B b)].
   D. FUNCTION PROTOTYPE [R operator+(A a, B b)].
3. Pre OPERATOR SUBTRACTION platia nasledujuce fakty.
   A. SYNTAX [a-b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator-(B b)].
   D. FUNCTION PROTOTYPE [R operator-(A a, B b)].
4. Pre OPERATOR MULTIPLICATION platia nasledujuce fakty.
   A. SYNTAX [a*b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator*(B b)].
   D. FUNCTION PROTOTYPE [R operator*(A a, B b)].
5. Pre OPERATOR DIVISION platia nasledujuce fakty.
   A. SYNTAX [a/b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator/(B b)].
   D. FUNCTION PROTOTYPE [R operator/(A a, B b)].
6. Pre OPERATOR MODULO platia nasledujuce fakty.
   A. SYNTAX [a%b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator%(B b)].
   D. FUNCTION PROTOTYPE [R operator%(A a, B b)].
7. Pre OPERATOR UNARY PLUS platia nasledujuce fakty.
   A. SYNTAX [+a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator+(void)].
   D. FUNCTION PROTOTYPE [R operator+(A a)].
8. Pre OPERATOR UNARY MINUS platia nasledujuce fakty.
   A. SYNTAX [-a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator-(void)].
   D. FUNCTION PROTOTYPE [R operator-(A a)].
9. Pre OPERATOR PREFIX INCREMENT platia nasledujuce fakty.
   A. SYNTAX [++a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator++(void)].
   D. FUNCTION PROTOTYPE [R& operator++(A& a)].
10. Pre OPERATOR POSTFIX INCREMENT platia nasledujuce fakty.
   A. SYNTAX [a++].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator++(int)].
   D. FUNCTION PROTOTYPE [R operator++(A& a, int)].
11. Pre OPERATOR PREFIX DEREMENT platia nasledujuce fakty.
   A. SYNTAX [--a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator--(void)].
   D. FUNCTION PROTOTYPE [R& operator--(A& a)].
12. Pre OPERATOR POSTFIX DECREMENT platia nasledujuce fakty.
   A. SYNTAX [a--].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator--(int)].
   D. FUNCTION PROTOTYPE [R operator--(A& a, int)].
13. Pre OPERATOR EQUAL TO platia nasledujuce fakty.
   A. SYNTAX [a==b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator==(const B& b)].
   D. FUNCTION PROTOTYPE [bool operator==(const A& a, const B& b)].
14. Pre OPERATOR NOT EQUAL TO platia nasledujuce fakty.
   A. SYNTAX [a!=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator!=(const B& b)].
   D. FUNCTION PROTOTYPE [bool operator!=(const A& a, const B& b)].
15. Pre OPERATOR GREATER THAN platia nasledujuce fakty.
   A. SYNTAX [a>b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator>(const B& b)].
   D. FUNCTION PROTOTYPE [bool operator>(const A& a, const B& b)].
16. Pre OPERATOR LESS THAN platia nasledujuce fakty.
   A. SYNTAX [a<b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator<(const B& b)].
   D. FUNCTION PROTOTYPE [bool operator<(const A& a, const B& b)].
17. Pre OPERATOR GREATER THAN OR EQUAL TO platia nasledujuce fakty.
   A. SYNTAX [a>=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator>=(const B& b)].
   D. FUNCTION PROTOTYPE [bool operator>=(const A& a, const B& b)].
18. Pre OPERATOR LESS THAN OR EQUAL TO platia nasledujuce fakty.
   A. SYNTAX [a<b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator<=(const B& b)].
   D. FUNCTION PROTOTYPE [bool operator<=(const A& a, const B& b)].
19. Pre OPERATOR LOGICAL NEGATION platia nasledujuce fakty.
   A. SYNTAX [!a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator!(void)].
   D. FUNCTION PROTOTYPE [bool operator!(A a)].
20. Pre OPERATOR LOGICAL AND platia nasledujuce fakty.
   A. SYNTAX [a&&b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator&&(B b)].
   D. FUNCTION PROTOTYPE [bool operator&&(A a, B b)].
21. Pre OPERATOR LOGICAL OR platia nasledujuce fakty.
   A. SYNTAX [a||b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [bool A::operator||(B b)].
   D. FUNCTION PROTOTYPE [bool operator||(A a, B b)].
22. Pre OPERATOR BITWISE NOT platia nasledujuce fakty.
   A. SYNTAX [~a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator~(void)].
   D. FUNCTION PROTOTYPE [R operator~(A a)].
23. Pre OPERATOR BITWISE AND platia nasledujuce fakty.
   A. SYNTAX [a&b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator&(B b)].
   D. FUNCTION PROTOTYPE [R operator&(A a, B b)].
24. Pre OPERATOR BITWISE OR platia nasledujuce fakty.
   A. SYNTAX [a|b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator|(B b)].
   D. FUNCTION PROTOTYPE [R operator|(A a, B b)].
25. Pre OPERATOR BITWISE XOR platia nasledujuce fakty.
   A. SYNTAX [a^b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator^(B b)].
   D. FUNCTION PROTOTYPE [R operator^(A a, B b)].
26. Pre OPERATOR BITWISE LEFT SHIFT platia nasledujuce fakty.
   A. SYNTAX [a<<b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator<<(B b)].
   D. FUNCTION PROTOTYPE [R operator<<(A a, B b)].
27. Pre OPERATOR BITWISE RIGHT SHIFT platia nasledujuce fakty.
   A. SYNTAX [a>>b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator>>(B b)].
   D. FUNCTION PROTOTYPE [R operator>>(A a, B b)].
28. Pre OPERATOR ADDITION ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a+=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator+=(B b)].
   D. FUNCTION PROTOTYPE [R& operator+=(A& a, B b)].
29. Pre OPERATOR SUBTRACTION ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a-=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator-=(B b)].
   D. FUNCTION PROTOTYPE [R& operator-=(A& a, B b)].
30. Pre OPERATOR MULTIPLICATION ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a*=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator*=(B b)].
   D. FUNCTION PROTOTYPE [R& operator*=(A& a, B b)].
31. Pre OPERATOR DIVISION ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a/=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator/=(B b)].
   D. FUNCTION PROTOTYPE [R& operator/=(A& a, B b)].
32. Pre OPERATOR MODULO ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a%=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator%=(B b)].
   D. FUNCTION PROTOTYPE [R& operator%=(A& a, B b)].
33. Pre OPERATOR BITWISE AND ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a&=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator&=(B b)].
   D. FUNCTION PROTOTYPE [R& operator&=(A& a, B b)].
34. Pre OPERATOR BITWISE OR ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a|=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator|=(B b)].
   D. FUNCTION PROTOTYPE [R& operator|=(A& a, B b)].
35. Pre OPERATOR BITWISE XOR ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a^=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator^=(B b)].
   D. FUNCTION PROTOTYPE [R& operator^=(A& a, B b)].
36. Pre OPERATOR BITWISE LEFT SHIFT ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a<<=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator<<=(B b)].
   D. FUNCTION PROTOTYPE [R& operator<<=(A& a, B b)].
37. Pre OPERATOR BITWISE RIGHT SHIFT ASSIGNMENT platia nasledujuce fakty.
   A. SYNTAX [a>>=b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator>>=(B b)].
   D. FUNCTION PROTOTYPE [R& operator>>=(A& a, B b)].
38. Pre OPERATOR SUBSCRIPT platia nasledujuce fakty.
   A. SYNTAX [a[b]].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator[](B b)].
39. Pre OPERATOR INDIRECTION platia nasledujuce fakty.
   A. SYNTAX [*a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator*(void)].
   D. FUNCTION PROTOTYPE [R& operator*(B b)].
40. Pre OPERATOR ADDRESS OF platia nasledujuce fakty.
   A. SYNTAX [&a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R* A::operator&(void)].
   D. FUNCTION PROTOTYPE [R* operator&(B b)].
41. Pre OPERATOR STRUCTURE REFERENCE BY POINTER platia nasledujuce fakty.
   A. SYNTAX [a->b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R* A::operator->(void)].
42. Pre OPERATOR STRUCTURE REFERENCE BY VALUE platia nasledujuce fakty.
   A. SYNTAX [a.b].
   B. OPERATOR NEMOZE byt OVERLOADED.
43. Pre OPERATOR MEMBER SELECTED BY POINTER TO MEMBER BY POINTER platia nasledujuce fakty.
   A. SYNTAX [a->*b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R& A::operator->*(B b)].
   D. FUNCTION PROTOTYPE [R& operator->*(A& a, B b)].
44. Pre OPERATOR MEMBER SELECTED BY POINTER TO MEMBER BY VALUE platia nasledujuce fakty.
   A. SYNTAX [a.*b].
   B. OPERATOR NEMOZE byt OVERLOADED.
45. Pre OPERATOR FUNCTION CALL platia nasledujuce fakty.
   A. SYNTAX [a(a1,...,aN)].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator()(A1 a1,...,AN aN)].
46. Pre OPERATOR COMMA platia nasledujuce fakty.
   A. SYNTAX [a,b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [R A::operator,(B b)].
   D. FUNCTION PROTOTYPE [R operator,(A a, B b)].
47. Pre OPERATOR TERNARY CONDITION platia nasledujuce fakty.
   A. SYNTAX [a?b:c].
   B. OPERATOR NEMOZE byt OVERLOADED.
48. Pre OPERATOR SCOPE RESOLUTION platia nasledujuce fakty.
   A. SYNTAX [a::b].
   B. OPERATOR NEMOZE byt OVERLOADED.
49. Pre OPERATOR USER DEFINED LITERALS platia nasledujuce fakty.
   A. SYNTAX ["a"_b].
   B. OPERATOR MOZE byt OVERLOADED.
   C. FUNCTION PROTOTYPE [R operator""_b(B b)].
50. Pre OPERATOR SIZE OF platia nasledujuce fakty.
   A. SYNTAX [sizeof(a)], alebo SYNTAX [sizeof(TYPE)].
   B. OPERATOR NEMOZE byt OVERLOADED.
51. Pre OPERATOR SIZE OF PARAMETER PACK platia nasledujuce fakty.
   A. SYNTAX [sizeof...(a1,...,aN)].
   B. OPERATOR NEMOZE byt OVERLOADED.
52. Pre OPERATOR ALIGN OF platia nasledujuce fakty.
   A. SYNTAX [align(TYPE)].
   B. OPERATOR NEMOZE byt OVERLOADED.
53. Pre OPERATOR ALIGN OF platia nasledujuce fakty.
   A. SYNTAX [alignof(a)], alebo SYNTAX [alignof(TYPE)].
   B. OPERATOR NEMOZE byt OVERLOADED.
54. Pre OPERATOR C-CONVERSION platia nasledujuce fakty.
   A. SYNTAX [(TYPE)a].
   B. OPERATOR NEMOZE byt OVERLOADED.
55. Pre OPERATOR CONVERSION platia nasledujuce fakty.
   A. SYNTAX [TYPE(a)].
   B. OPERATOR NEMOZE byt OVERLOADED.
56. Pre OPERATOR STATIC CAST platia nasledujuce fakty.
   A. SYNTAX [static_cast<TYPE>(a)].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [A::operator B(void)], alebo METHOD PROTOTYPE [explicit A::operator B(void)].
57. Pre OPERATOR DYNAMIC CAST platia nasledujuce fakty.
   A. SYNTAX [dynamic_cast<TYPE>(a)].
   B. OPERATOR NEMOZE byt OVERLOADED.
58. Pre OPERATOR CONST CAST platia nasledujuce fakty.
   A. SYNTAX [const_cast<TYPE>(a)].
   B. OPERATOR NEMOZE byt OVERLOADED.
59. Pre OPERATOR CONST CAST platia nasledujuce fakty.
   A. SYNTAX [reinterpret_cast<TYPE>(a)].
   B. OPERATOR NEMOZE byt OVERLOADED.
60. Pre OPERATOR ALLOCATE STORAGE platia nasledujuce fakty.
   A. SYNTAX [new TYPE].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [void* A::operator new(size_t a)].
   D. FUNCTION PROTOTYPE [void* operator new(size_t a)].
61. Pre OPERATOR ALLOCATE STORAGE ARRAY platia nasledujuce fakty.
   A. SYNTAX [new TYPE[a]].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [void* A::operator new[](size_t a)].
   D. FUNCTION PROTOTYPE [void* operator new[](size_t a)].
62. Pre OPERATOR DEALLOCATE STORAGE platia nasledujuce fakty.
   A. SYNTAX [delete a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [void A::operator delete(void* a)].
   D. FUNCTION PROTOTYPE [void operator delete(void* a)].
63. Pre OPERATOR DEALLOCATE STORAGE ARRAY platia nasledujuce fakty.
   A. SYNTAX [delete[] a].
   B. OPERATOR MOZE byt OVERLOADED.
   C. METHOD PROTOTYPE [void A::operator delete[](void* a)].
   D. FUNCTION PROTOTYPE [void operator delete[](void* a)].
64. Pre OPERATOR EXCEPTION CHECK platia nasledujuce fakty.
   A. SYNTAX [noexcept(a)].
   B. OPERATOR NEMOZE byt OVERLOADED.
//-----------------------------------------------------------------------------