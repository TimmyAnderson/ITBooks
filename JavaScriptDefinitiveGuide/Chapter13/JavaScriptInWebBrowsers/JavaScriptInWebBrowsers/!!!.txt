//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie JavaScript vo WEB BROWSERS.
2. ZAKLADNY OBJECT pri pouzivani JavaScript vo WEB BROWSERS je OBJECT 'Window'. OBJECT 'Window' reprezentuje BROWSER WINDOW, alebo BROWSER FRAME. K jeho PROPERTIES a METHODS je mozne pristupovat 2 roznymi sposobmi.
   A. Kedze OBJECT 'Window' je GLOBAL OBJECT, tak je mozne pristupovat k jeho PROPERTIES a METHODS PRIAMO zapisom PROPERTY, alebo volanim METHOD.
   B. OBJECT 'Window' ma PROPERTY 'window', ktora odkazuje na SAMU SEBA. Pomocou tejto PROPERTY sa je mozne odkazovat na PROPERTIES a METHODS 'Window' OBJECT.
!!! 3. PROPERTY Window.document vracia 'Document' OBJECT, ktory reprezentuje HTML obsah WEB PAGE. Ma KLUCOVU METODU getElementById(), ktora vracia 'Element' OBJECT reprezentujuci HTML ELEMENT.
!!! 4. JavaScript Element OBJECTS umoznuju vyvolavat EVENTS pri vyskyte nejakej udalosti. JavaScript EVENTS su JavaScript FUNCTIONS.
!!!!! 5. Ak chcem zavesit nejaku FUNCTION na EVENT Element OBJECT, je treba pouzit SYNTAX VOLANIA FUNCTION a NIE PRIRADENIA FUNCTION. Prikaz [onclick="MyCallback"] je CHYBNA a NESPRAVI NIC. Avsak prikaz [onclick="MyCallback();"] korektne VYVOLA FUNCTION MyCallback().
6. JavaScript kod moze byt do HTML PAGE vlozeny nasledujucimi sposobmi.
   A. JavaScript kod je mozne vlozit medzi <script> a </script> TAGS.
   B. JavaScript kod je mozne vlozit do SEPARATNEHO FILE na ktory je nutne spravit odkaz v ELEMENT 'src' TAGU <script>. Toto je NAJPOUZIVANEJSI SPOSOB.
   C. JavaScript kod je mozne vlozit priamo do ATTRIBUTE EVENTU. Napriklad [onclick="MyClick();"]. V ATTRIBUTE EVENT moze byt aj VIACERO JavaScript STATEMENTS oddelenych znakom ';'. Tieto si BROWSER obali do FUNCTION a tuto FUNCTION spusti pri vyskyte EVENT.
   D. JavaScript kod je mozne vlozi do URL s PREFIX 'javascript:'. Takyto 'URL' moze obsahovat JavaScript kod, ktory sa pri kliknuti na linku vykona. VALUE tohto SCRIPT sa potom zobrazi ako NOVY PAGE v BROWSERI.
7. Pri pouzivani JavaScript v <script> TAG je nutne specifikovat v ATTRIBUTE 'type' MIME TYPE. Ten ma pre JavaScript hodnotu 'text/javascript'.
!!! 8. JavaScript kod v <script> TAG je vykonany VZDY IBA RAZ. Avsak kod vlozeny do EVENT ATTRIBUTE je vykonany VZDY pri vzniku daneho EVENT.
!!!!! 9. Pri pouzivanie JavaScript kodu v URL s PREFIX 'javascript:' ak KOD VRATI INU HODNOTU ako 'undefined', tak ju BROWSER zobrazi ako HTML kod NOVEJ PAGE. Nevyhoda tohto chovania je pri volani FUNCTION, ktoru chcem cez URL vykonat, ale NECHCEM, aby RETURN VALUE tejto FUNCTION (ak je ina ako 'undefined') bola zobrazena v BROWSER namiesto povodnej PAGE. Riesenim je pouzit OPERATOR 'void'.
!!! 10. Na jednej WEB PAGE VSETKY kusy JavaScript kodu ZDIELAJU TEN ISTY GLOBAL SCOPE (globalne VARIABLES a FUNCTIONS).
!!! 11. Ak WEB PAGE obsahuje <iframe>, tak KAZDY <iframe> ma VLASTNY NEZAVISLY GLOBAL SCOPE, ktory nie je zdielany s inymi, ani s GLOBAL SCOPE WEB PAGE.
!!!!! 12. JavaScript kod vo WEB PAGE je vykonavany v 2 fazach.
   A. V LOAD PHASE sa nacitaju a vykonaju vsetky <script> TAGS. Kod v tychto TAGS sa vykonava ZHORA NADOL, aj ked PORADIE VYKONAVANIA jednotlivych <script> TAGS NIE JE DEFINOVANE. Standardne su vykonavane v poradi v akom su uvedene vo WEB PAGE. VYNIMKOU su ASYNCHRONOUS a DEFERRED SCRIPTS, ktore su vykonavane ASYNCHRONNE.
   B. V EVENT PHASE sa vykonavaju casti JavaScript kodu zaregistrovaneho ako EVENTS. Ako PRVY EVENT je volany EVENT 'window.onload'.
!!!!! 13. JavaScript pri vykonavani EVENTS v EVENT PHASE pouziva SINGLE-THREAD MODEL. To znamena, ze EVENTS su vykonavane SEKVENCNE a ZIADEN PARALELIZMUS pri ich vykonavani sa NEREALIZUJE.
!!! 14. LOAD PHASE su <script> TAG HTML PARSEROM nacitavane a VYKONAVANE 3 roznymi sposobmi.
   !!! A. TAG <script> je vykonavany HTML PARSER OKAMZITE v poradi v akom je uvedeny na WEB PAGE (ZHORA NADOL). Ak HTML PARSER narazi na takyto <script> TAG, POZASTAVI RENDERING WEB PAGE, az kym <script> NIE JE DOKONCENY. Az po vykonani <script> HTML PARSER pokracuje v RENDERINGU dalsich casti WEB PAGE.
   B. TAG <script defer="defer" scr="File.js"> (ATTRIBUTE 'src' je POVINNY) je vykonavany HTML PARSER AZ po tom co je CELA WEB PAGE HTML PARSEROM NACITANA. Taketo <script defer="defer" scr="File.js"> TAGS by NEMALI OBSAHOVAT volanie metody document.write(), kde HTML PARSER uz skoncil svoju cinnost. Poradie vykonavania <script defer="defer" scr="File.js"> je dane umiestnenim vo WEB PAGE (vyssie umiestneny SCRIPT je vykonany SKOR ako NIZSIE UMIESTNENY).
   C. TAG <script async scr="File.js"> (ATTRIBUTE 'src' je POVINNY) je vykonavany HTML PARSER hned ako je to mozne (hned ako sa nacita .JS FILE), avsak BEZ TOHO, aby spustenie takehoto SCRIPT BLOKOVALO HTML PARSER v PARSINGU zbytku WEB PAGE. Taketo <script scr="File.js"> TAGS by NEMALI OBSAHOVAT volanie metody document.write(), kde HTML PARSER uz skoncil svoju cinnost. Poradie vykonavania <script async scr="File.js"> NIE JE DEFINOVANE.
15. JavaScript EVENTS HANDLERS pre HTML ELEMENTS EVENTS je mozne registrovat viacerymi sposobmi.
   A. Do EVENT ATTRIBUTE (napriklad 'onclick') PRIAMO v HTML PAGE sa zapise JavaScript kod. Tento sposob je dnes uz povazovany za OBSOLETE.
   B. JavaScript REGISTRUJE EVENT HANDLER priradenim EVENT HANDLER FUNCTION do EVENT PROPERTY daneho OBJECT, ktory reprezentuje HTML ELEMENT. Toto je NAJPOUZIVANEJSI SPOSOB registracie EVENT HANDLERS.
   C. EVENT HANDLERS je mozne registrovat aj volanim METHOD addEventListener() volanej nad OBJECTS reprezentujucimi HTML ELEMENTS. Vyhodou tejto techniky je, ze je mozne na jeden EVENT zavesit aj VIAC EVENT HANDLERS. Ako 1. PARAMETER je MENO EVENT BEZ PREFIXU 'on'.
   D. EVENT HANDLERS je mozne registrovat aj volanim METHOD attachEvent() volanej nad OBJECTS reprezentujucimi HTML ELEMENTS. Vyhodou tejto techniky je, ze je mozne na jeden EVENT zavesit aj VIAC EVENT HANDLERS. Ako 1. PARAMETER je MENO EVENT S PREFIXOM 'on'.
16. EVENT HANDLERS spravidla maju ako PARAMETER OBJECT, ktory blizsie popisuje EVENT. RETURN VALUE u niektorych EVENT HANDLERS je pouzivana na indikaciu ci EVENT bol dany EVENT HANDLER spracovany, alebo nie.
!!! 17. EVENTS podporuju BUBBLING. To znaci, ze ak pre EVENT NIE JE ZAREGISTROVANY EVENT HANDLER v HTML ELEMENT, ktory ho vyvolal, tak sa prechadzaju PARENT HTML ELEMENTS a ak tieto maju zaregistrovany EVENT HANDLER pre tento EVENT, tak je vyvolany.
18. WEB BROWSER pri nacitavani a PARSINGU HTML WEB PAGE pri ktorej dochadza i k nacitaniu a spusteniu JavaScript kodu vykonava nasledujuci algoritmus.
   A. WEB BROWSER vytvori Document OBJECT a zacne s PARSINGOM WEB PAGE vytvarajuc Element OBJECTS a Text NODES. Hodnota document.readyState je 'loading'.
   B. Ked HTML PARSER narazi na ELEMENT <script>, ktory NEMA nastaveny 'defer', ani 'async' ATTRIBUTE, SCRIPT je NACIATNY a IHNED SPUSTENY (PARSING dalsich HTML ELEMENTS je pozastaveny do vykonania SCRIPT). Tento SCRIPT MOZE pouzivat metodu document.write() pricom vygenerovany HTML kod sa IHNED prida do WEB PAGE. SCRIPT MOZE pristupovat k HTML ELEMENTS, ktore uz BOLI NACITANE - teda HTML ELEMENTS, ktore su v kode HTML PAGE PRED (ZHORA NADOL) <script> TAG.
   C. Ked HTML PARSER narazi na ELEMENT <script>, ktory MA nastaveny 'async' ATTRIBUTE, SCRIPT zacne byt nacitavany ASYNCHRONNE, pricom HTML PARSER pokracuje DALEJ v PARSINGU HTML PAGE. Ak nacitavanie SCRIPT FILE SKONCI, tak SCRIPT je OKAMZITE VYKONANY. Tento SCRIPT NESMIE pouzivat document.write() a moze BEZPECNE pristupovat IBA k HTML ELEMENTS, ktore uz BOLI URCITE NACITANE - teda HTML ELEMENTS, ktore su v kode HTML PAGE PRED (ZHORA NADOL) <script> TAG.
   D. Po ukonceni PARSINGU celej HTML PAGE je hodnota document.readyState nastavena na 'interactive'.
   E. Vykonaju sa vsetky <script> ELEMENTS, ktore maju nastaveny 'defer' ATTRIBUTE. Tu sa mozu vykonat aj tie <script> ELEMENTS s 'async' ATTRIBUTE, ktore pocas PARSINGU WEB PAGE este neboli nacitane. Tento SCRIPT NESMIE pouzivat document.write() a moze pristupovat k VSETKYM HTML ELEMENTS, kdeze PARSING HTML PAGE bol UKONCENY.
   F. Zavola sa EVENT DOMContentLoaded, ktory znamena prechod z LOAD PHASE do EVENT PHASE. Zaroven vsak sa este vzdy mozu vykonat <script> ELEMENTS s 'async' ATTRIBUTE, ktore pocas PARSINGU WEB PAGE neboli nacitane.
   !!! G. Ak este niektore FILES ako napriklad obrazky neboli stiahnute, tak sa pocka na ich dotiahnutie. V tejto faze sa este este vzdy mozu vykonat <script> ELEMENTS s 'async' ATTRIBUTE, ktore pocas PARSINGU WEB PAGE neboli nacitane. Po nacitani VSETKYCH FILES a spusteni VSETKY <script> ELEMENTS s 'async' ATTRIBUTE je hodnota document.readyState nastavena na 'complete'.
   H. Je zavolany EVENT 'window.load'.
   I. WEB PAGE je nacitana a spustena a prechadza do EVENT PHASE, kedy je JavaScript kod volany ako reakcia na EVENTS.
!!! 19. Vzhladom na VELKE ODCHYLKY jednotlivych BROWSERS od JavaScript STANDARDU, existuju kniznice ako JQuery, ktore vytvara ABSTRACT LAYER nad JavaScript, ktory je KOMPATIBILNY pre VSETKY BROWSERS.
!!! 20. Jedna zo zakladnych crt SECURITY v JavaScript je princip SAME ORIGIN POLICY. Tento princip hovori, ze SCRIPT moze pristupovat k HTML PAGE, alebo WINDOW, ktore su z TOHO ISTEHO HOST, ako HTML WEB PAGE do ktorej bol SCRIPT vlozeny.
//-------------------------------------------------------------------------------------------------------