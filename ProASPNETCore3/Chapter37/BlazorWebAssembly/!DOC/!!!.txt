//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie BLAZOR WEB ASSEMBLY.
2. SOLUTION obsahujuci BLAZOR WEB ASSEMBLY PROGRAM, ktory je HOSTED v ASP.NET CORE APPLICATION je mozne vytvorit pomocou COMMAND [dotnet new blazorwasm --hosted --no-https -o SOLUTION_NAME], kde VALUE 'SOLUTION_NAME' je nazov SOLUTION, ktory sa vytvori. SOLUTION obsahuje nasledujuce PROJECTS.
   A. PROJECT [Shared] obsahuje SHARED CLASSES medzi SERVER SIDE a CLIENT SIDE.
   B. PROJECT [Server] obsahuje ASP.NET CORE APPLICATION, ktora sluzi na distribuciu BLAZOR WEB ASSEMBLY PROGRAM na WEB BROSERS.
   C. PROJECT [Client] obsahuje BLAZOR WEB ASSEMBLY PROGRAM.
3. SOLUTION obsahuje nasledujuce PROJECTS.
   A. PROJECT [SharedClasses] obsahuje SHARED CLASSES medzi SERVER SIDE a CLIENT SIDE.
   !!! B. PROJECT [WebApplication] obsahuje WEB API, ktore uklada DATA OBJECT do DB. PROJECT NEOBSAHUJE NIC INE iba API CONTROLLER, ktory vykonava operacie nad DB. NEOBSAHUJE teda BLAZOR FRAMEWORK. PROJECT zaroven sluzi na vykonanie DEPLOYMENT PROJECT [BlazorApplication].
   C. PROJECT [BlazorApplication] obsahuje WEB ASSEMBLY BLAZOR APPLICATION, ktora bezi na WEB BROWSER.
!!! 4. BLAZOR WEB ASSEMBLY je implmentacia BLAZOR FRAMEWORK na WEB BROWSER za pomoci technologie WEB ASSEMBLY.
5. WEB ASSEMBLY je VIRTUAL MACHINE, ktora bezi vo WEB BROWSER a ma pristup k API CALLS, ktore su pristupne z JAVASCRIPT ako praca s DOM OBJECT, pouzitie CSS ci vykonavanie ASYNCHRONOUS HTTP REQUESTS.
!!! 6. WEB ASSEMBLY je UNIVERZALNA VIRTUAL MACHINE, ktora nemusi byt implementovana iba v BROWSERS, ale podobne ako .NET RUNTIME moze bezat aj priamo nad OS.
7. WEB ASSEMBLY spusta PROGRAMS, ktore su skompilovane do WEB ASSEMBLY CODE. WEB ASSEMBLY CODE je analogiou MSIL v .NET.
8. BLAZOR WEB ASSEMBLY vo WEB BROWSERS funguje vdaka tomu, ze .NET CORE RUNTIME bol skompilovany do WEB ASSEMBLY CODE a teda moze bezat vo WEB ASSEMBLY VIRTUAL MACHINE.
9. BLAZOR WEB ASSEMBLY PROGRAMS su na WEB BROWSERS vykonavane nasledovne.
   A. CODE .NET CORE RUNTIME, BLAZOR RUNTIME a ASSEMBLIES BLAZOR WEB ASSEMBLY PROJECT su stiahnute z WEB SERVER na WEB BROWSER.
   B. Kedze CODE .NET CORE RUNTIME je COMPILED do WEB ASSEMBLY CODE, WEB BROWSER ho je schopny spustit vo WEB ASSEMBLY VIRTUAL MACHINE.
   C. .NET CORE RUNTIME nasledne spusti BLAZOR RUNTIME.
   D. BLAZOR RUNTIME nasledne zacne vykonavat CODE ASSEMBLIES BLAZOR WEB ASSEMBLY PROJECT.
!!!!! 10. Na to, aby BLAZOR WEB ASSEMBLY PROJECT bol korektne spusteny z ASP.NET CORE APPLICATION je NUTNE upravit FILE [Program.cs] ASP.NET CORE APPLICATION, aby zavolala METHOD [void UseStaticWebAssets(IWebHostEnvironment Environment, IConfiguration Configuration)].
11. BLAZOR WEB ASSEMBLY PROGRAMS su tvorene BLAZOR COMPONENTS, rovnako ako v pripade BLAZOR SERVER PROGRAMS.
12. BLAZOR WEB ASSEMBLY PROGRAMS NEMOZU priamo komunikovat s DB, pretoze tato komunikacia prebieha cez PROTOCOLS a PORTS cez ktore WEB BROWSER NEUMOZNUJE komunikaciu. Riesenim je na SERVER SIDE definovat WEB SERVICE, ktory zabezpeci komunikaciu s DB a BLAZOR WEB ASSEMBLY PROGRAM vola METHODS tohto WEB SERVICE.
13. Komunikaciu BLAZOR WEB ASSEMBLY PROGRAMS s WEB SERVICE je mozne realizovat pomocou CLASS [HttpClient]. CLASS [HttpClient] ma nasledujuce MEMBERS.
   A. METHOD [Task<HttpResponseMessage> SendAsync(HttpRequestMessage Request)] ASYNCHRONNE zasiela HTTP REQUEST MESSAGE na SERVER a vracia HTTP RESPONSE MESSAGE.
   B. METHOD [Task<HttpResponseMessage> GetAsync(Uri RequestUri)] ASYNCHRONNE zasiela HTTP REQUEST MESSAGE s VERB GET na SERVER a vracia HTTP RESPONSE MESSAGE.
   C. METHOD [Task<HttpResponseMessage> PostAsync(Uri RequestUri, HttpContent Content)] ASYNCHRONNE zasiela HTTP REQUEST MESSAGE s VERB POST na SERVER a vracia HTTP RESPONSE MESSAGE.
   D. METHOD [Task<HttpResponseMessage> PutAsync(string RequestUri, HttpContent Content)] ASYNCHRONNE zasiela HTTP REQUEST MESSAGE s VERB PUT na SERVER a vracia HTTP RESPONSE MESSAGE.
   E. METHOD [Task<HttpResponseMessage> PatchAsync(Uri RequestUri, HttpContent Content)] ASYNCHRONNE zasiela HTTP REQUEST MESSAGE s VERB PATCH na SERVER a vracia HTTP RESPONSE MESSAGE.
   F. METHOD [Task<HttpResponseMessage> DeleteAsync(string RequestUri)] ASYNCHRONNE zasiela HTTP REQUEST MESSAGE s VERB DELETE na SERVER a vracia HTTP RESPONSE MESSAGE.
14. CLASS [HttpResponseMessage] obsahuje HTTP RESPONSE MESSAGE. Ma nasledujuce MEMBERS.
   A. PROPERTY [Content] TYPE [HttpContent] vracia CONTENT HTTP RESPONSE MESSAGE.
   B. PROPERTY [Headers] TYPE [HttpResponseHeaders] vracia HEADERS HTTP RESPONSE MESSAGE.
   C. PROPERTY [StatusCode] TYPE [HttpStatusCode] vracia STATUS CODE HTTP RESPONSE MESSAGE.
//----------------------------------------------------------------------------------------------------------------------