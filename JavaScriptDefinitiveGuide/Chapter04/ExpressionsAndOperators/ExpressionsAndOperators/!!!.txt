//-------------------------------------------------------------------------------------------------------
1. Soulution demonstruje pouzitie EXPRESSIONS a OPERATORS v JavaScript.
2. JavaScript ma SYTNAX EXPRESSIONS a OPERATORS zvacsa IDENTICKU s jazykmi C/C++.
3. PRIMARY EXPRESSION je EXPRESSION, ktora NEPOZOSTAVA zo ZIADNYCH INYCH SUBEXPRESSION. Patria sem EXPRESSIONS ako CONSTANTS, LITERALS, VARIABLES (aj GLOBAL VARIABLES ako 'undefined') a niektore KEYWORDS ako 'this', 'null', 'true' ci 'false'.
4. COMPLEX EXPRESSION je EXPRESSION, ktora POZOSTAVA z VIACERYCH SUBEXPRESSIONS spojenych spravidla pomocou OPERATORS.
5. OBJECT INITIALIZER ma SYNTAX [var XXX={PROPERTY1:VALUE1,PROPERTY2:VALUE2, ...,PROPERTYN:VALUEN};]. Pre OBJECT INITIALIZERS platia nasledujuce pravidla.
   A. OBJECT INITIALIZERS je mozne VNARAT.
   B. VALUES PROPERTIES NEMUSIA byt CONSTANTS, ale mozu byt i normalne VARIABLES.
   C. Ako PROPERTY NAME je mozne pouzit i STRING ["NAME"]. Tato bizarna SYNTAX ma vyuzitie, ako PROPERTY NAME je zhodne s KEYWORD.
6. ARRAY INITIALIZER ma SYNTAX [[VALUE1,VALUE2,...,VALUEN]]. Pre ARRAY  INITIALIZERS platia nasledujuce pravidla.
   A. Ak nedefinujem ani jednu VALUE, tak vysledkom je PRAZDNY ARRAY.
   !!! B. Kazda VALUE moze byt TYPU ARRAY, vdaka comu je mozne vytvarat VIACROZMERNE ARRAYS.
   C. ARRAY INITIALIZER umoznuje VYNECHAT VALUE vlozenim znaku ',' do ARRAY INITIALIZER. Dany INDEX obsahuje hodnotu 'undefined'.
   !!! D. Ak je na KONCI ARRAY INITIALIZER 1, alebo VIACERO znakov ',', tak PRVY (iba PRVY) z NICH sa IGNORUJE a ostatne INDEXES obsahuje hodnotu 'undefined'.
7. Pri pristupe k PROPERTIES OBJECT je mozne pouzit 2 rozdielne SYNTAXE.
   A. OBJECT.PROPERTY je klasicka SYNTAX. Ak OBJECT ma hodnotu 'null', alebo 'undefined' JavaScript hodi EXCEPTION.
   !!! B. OBJECT["PROPERTY"] je SYNTAX PODOBNA pristupu k ITEMS ARRAY, s tym ROZDIELOM, ze 'PROPERTY' MUSI BYT zadavana VZDY ako STRING. Ak OBJECT ma hodnotu 'null', alebo 'undefined' JavaScript hodi EXCEPTION.
!!! 8. Ak FUNCTION vracia RETURN VALUE, tak VALUE FUNCTION CALL je rovna RETURN VALUE. Ak FUNCTION nevracia RETURN VALUE, tak VALUE FUNCTION CALL je rovna 'undefined'. 
!!! 9. Na rozdiel od C++ su SUBEXPRESSIONS VZDY vykonavne Z LAVA do PRAVA. Teda v EXPRESSION [X=Y;] je SUBEXPRESSION 'X' VZDY vykonana SKOR ako SUBEXPRESSION 'Y'.
!!! 10. Pri ARITMETICKYCH OPERATORS ak niektory OPERAND ma hodnotu 'NaN', tak cely EXPRESSION ma hodnotu 'NaN'.
!!! 11. VSETKY ARITMETICKE OPERATORS pracuju nad NUMBERS, ktore reprezentuju DOUBLE TYPE.
!!! 12. Pri DELENI 0, NIE JE HODENA EXCEPTION, ale je vratena bud hodnota 'Infinity', '-Infinity', alebo 'NaN', pri deleni 0/0.
!!! 13. OPERATOR% vykonavajuci MODULO funguje v JavaScript nad NUMBERS, teda DOUBLE hodnotami.
14. OPERATOR+ (rovnako ako OPERATOR+=) v JavaScript moze vykonavat 2 rozlicne operacie.
   A. Ak ASPON 1 OPEREAND je STRING, alebo konvertovatelny na STRING, vykona sa vykona operacia STRING CONCATENATION. Pri konverzii JavaScript AUTOMATICKY vola metody toString(), alebo valueOf(), ako OPERANDY tieto METODY IMPLEMENTUJU.
   B. Ak OBE OPERANDS su NUMBERS, alebo su konvertovatelne na NUMBERS (BOOLEAN VALUES), tak sa vykona operacia SCITANIA. Pri konverzii JavaScript AUTOMATICKY vola metody toString(), alebo valueOf(), ako OPERANDY tieto METODY IMPLEMENTUJU.
!!! 15. NA ROZDIEL od OPERATOR+ ostatne ARITMETICKY OPERATORS (OPERATOR-, OPERATOR* a OPERATOR/) sa VZDY POKUSAJU konvertovat OPERANDY na NUMBERS a vykonat ARITMETICKU OPERACIU.
!!! 16. BITWISE OPERATORS v JavaScript pracuju na 32 BIT INTEGER NUMBERS a ak OPERANDY su typu DOUBLE, tak su automaticky konvertovane na 32 BIT INTEGER NUMBERS.
!!!!! 17. JavaScript ma na porovnavanie objektov 2 typy OPERATORS.
   A. OPERATOR== a OPERATOR!= pri porovnavani hodnot, ktore su ROZDIELDNYCH TYPOV vykonava STANDARDNE JavaScript KONVERZIE ako napriklad konverziu STRING ci STRING na INT, alebo konverzie OBJECT na STRING pomocou toString(), alebo valueOf().
   B. OPERATOR=== a OPERATOR!== pri porovnavani hodnot, ktore su ROZDIELDNYCH TYPOV vracaju VZDY FALSE BEZ toho, aby vykonavanie KONVERZIE.
!!! 18. Pri porovnavanie OBJECT VARIABLES JavaScript vykonava VZDY porovnavanie ich REFERENCII a nie HODNOT.
!!! 19. JavaScript COMPARISON OPERATORS pri pouziti nad STRING OPERANDS vykonava ALFANUMERICKE porovnanie. Pri vykonavani porovnania SU VYKONANE KONVERZIE, ak TYPY OPERANDS NIE SU IDENTICKE.
20. OPERATOR 'in' vracia TRUE, alebo FALSE podla toho ci PROPERTY s menom LEFT OPERAND sa nachadza v OBJECT v RIGHT OPERAND. OPERATOR vykonava standardne KONVERZIE.
!!! 21. Kedze ARRAYS su OBJECT s PROPERTIES pomenovanymi podla INDEXOV ITEMS, tak OPERATOR 'in' aplikovany na ARRAYS musi mat ako PARAMETER na LEFT SIDE INDEX ARRAY.
22. OPERATOR 'instanceof' je JavaScript ANALOGIOU k C# OPERATORU 'is'. Kontroluje ci dany PROTOTYPE OBJECT daneho OBJECT je zhodny s RIGHT OPERAND.
23. LOGICKE OPERATORS pri svoje cinnosti vykonavaju standardne JavaScript KONVERZIE.
!!! 24. LOGICKE OPERATORS && a || NEVRACAJU VZDY BOOLEAN KONSTANTY 'true' a 'false', ale hodnoty, ktore sa DAJU KONVERTOVAT na KONSTANTY 'true' a 'false'. Ak napriklad LEFT OPERAND OPERATOR&& vracia hodnotu 'null', resp. '0' (konvertovatelne na 'false'), tak vysledkom bude 'null', resp. '0'. OPERATOR! NAOPAK ROBI KONVERZIU na KONSTANTY 'true' a 'false'.
!!! 25. FUNCTION eval() umoznuje VYKONAT STRING ako JavaScript CODE. RETURN VALUE eval() je VALUE POSLEDNEJ EXPRESSION. Ak kod v eval() HODI EXCEPTION, tak tato EXCEPTION je PROPAGOVANA von z eval().
!!! 26. FUNCTION eval() je vykonana v CONTEXTE v ktorom je SPUSTENA. Teda kod v eval() moze citat a zapisovat do VARIABLES v CONTEXTE v ktorom je spustena.
!!!!! 27. Kod v eval() vsak NIE JE sucastou kodu v ktorom je spusteny a teda napriklad vykonanie kodu [eval("return;");] HODI EXCEPTION. KEYWORD 'return' by bol validny IBA ak by v STRING zaslanom do eval() bola vytvorena i FUNCTION v ktorej by sa 'return' pouzil.
28. OPERATOR 'typeof' vracia TYPE daneho EXPRESSION vo formate STRING hodnoty.
29. OPERATOR 'delete' umoznuje odstranit PROPERTY z OBJECT. Pre OPERATOR 'delete' platia nasledujuce zasady.
   A. OPERATOR 'delete' odstranuje PROPERTY z OBJECT. Po jej odstraneni PROPERTY prestava EXISTOVAT a pri pristupe k jej hodnote je vratena hodnota 'undefined'.
   !!! B. A. OPERATOR 'delete' vracia BOOLEAN hodnotu informujucu ci operacia DELETE prebehla uspesne. Bohuzial UPLNE NELOGICKY ak PROPERTY v OBJECT VOBEC NEEXISTUJE, tak i vtedy vrati OPERATOR 'delete' hodnotu 'true'.
   C. Kedze ARRAYS su iba COLLECTION PROPERTIES pomenovanych ako INDEXY ARRAY, tak je ich pomocou OPERATOR 'delete' mozne vymazat.
   !!! D. Pri pokuse o pouzitie OPERATOR 'delete' na FUNCTION ci LOCAL VARIABLE je v STRICT MODE generovana EXCEPTION. V NON-STRICT mode je OPERATOR 'delete' vracia 'false'.
!!! 30. OPERATOR 'void' vykona EXPRESSION uvedenu v OPERANDE, no namiesto hodnoty EXPRESSION vrati VZDY 'undefined'. OPERATOR 'void' sa pouziva VELMI ZRIEDKA, spravidla priamo v HTML kode.
31. OPERATOR, (ciarka) vykona OBE OPERANDS, ale vracia hodnotu iba druheho OPERANDU.
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
1. V JavaScript su VSETKY OBJECTS reprezentovane ako COLLECTION PROPERTIES, ktore je mozne do OBJECT DYNAMICKY PRIDAVAT, alebo ich pomocou KEYWORD 'delete' DYNAMICKY ODSTRANOVAT.
2. ARRAY je OBJECT, ktory ma MENA PROPERTIES pomenovane podla INDEXOV ITEMS a hodnoty su samotne ITEMS.
//-------------------------------------------------------------------------------------------------------