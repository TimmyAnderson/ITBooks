//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje sposoby akym ENTITY FRAMEWORK CORE vykonava QUERIES nad DB.
2. ENTITY FRAMEWORK CORE podporuje RELATIONAL DATABASES ako aj NON-RELATIONAL DATABASES.
3. Pre RELATIONAL DATABASES ENTITY FRAMEWORK CORE podporuje nasledujuce typy RELATIONSHIPS.
   A. ONE-TO-ONE RELATIONSHIP.
   B. ONE-TO-MANY RELATIONSHIP.
   C. MANY-TO-MANY RELATIONSHIP.
4. Pre ONE-TO-ONE RELATIONSHIP platia nasledujuce pravidla.
   A. ONE-TO-ONE RELATIONSHIP je vztah medzi 2 DB TABLES, kde pre RECORD v TABLE 'TABLE_1' existuje <0,1> RECORD v TABLE 'TABLE_2' a pre RECORD v TABLE 'TABLE_2' existuje 1 RECORD v TABLE 'TABLE_1'.
   B. Pre ONE-TO-ONE RELATIONSHIP TABLE 'TABLE_1' je reprezentovana CLASS 'CClass1'.
   C. Pre ONE-TO-ONE RELATIONSHIP TABLE 'TABLE_2' je reprezentovana CLASS 'CClass2'.
   !!!!! D. Pre ONE-TO-ONE RELATIONSHIP CLASS 'CTable2' MUSI obsahovat PROPERTY rovnakeho TYPE ako PRIMARY KEY TYPE 'CTable1'. Tato PROPERTY reprezentuje FOREIGN KEY do TABLE 'TABLE_1'.
   !!! E. Pre ONE-TO-ONE RELATIONSHIP CLASS 'CTable1' MUSI mat NAVIGATION PROPERTY TYPE 'CTable2'.
   !!! F. Pre ONE-TO-ONE RELATIONSHIP CLASS 'CTable2' MUSI mat NAVIGATION PROPERTY TYPE 'CTable1'.
   !!! G. Kedze OBE TABLES maju TYPES svojich NAVIGATION PROPERTY ako NON-COLLECTION TYPES, ENTITY FRAMEWORK CORE vytvara ONE-TO-ONE RELATIONSHIP.
   !!!!! H. V pripade, ze ENTITY FRAMEWORK CORE identifikuje ONE-TO-ONE RELATIONSHIP, tak na COLUMN TABLE 'TABLE_2' obsahujuci FOREIGN KEY aplikuje UNIQUE KEY INDEX a tym sa docieli, vznik ONE-TO-ONE RELATIONSHIP.
   !!!!! I. Pri ONE-TO-ONE RELATIONSHIP je mozne PRIMARY KEY v TABLE 'TABLE_2' zlucit s FOREIGN KEY TABLE 'TABLE_2', kedze RECORD v TABLE 'TABLE_2' existuje iba vtedy, ak existuje vazba na TABLE 'TABLE_1'.
5. Pre ONE-TO-MANY RELATIONSHIP platia nasledujuce pravidla.
   A. ONE-TO-MANY RELATIONSHIP je vztah medzi 2 DB TABLES, kde pre RECORD v TABLE 'TABLE_1' existuje <0,N> RECORDS v TABLE 'TABLE_2' a pre RECORD v TABLE 'TABLE_2' existuje 1 RECORD v TABLE 'TABLE_1'.
   B. Pre ONE-TO-MANY RELATIONSHIP TABLE 'TABLE_1' je reprezentovana CLASS 'CClass1'.
   C. Pre ONE-TO-MANY RELATIONSHIP TABLE 'TABLE_2' je reprezentovana CLASS 'CClass2'.
   !!!!! D. Pre ONE-TO-MANY RELATIONSHIP CLASS 'CTable2' MUSI obsahovat PROPERTY rovnakeho TYPE ako PRIMARY KEY TYPE 'CTable1'. Tato PROPERTY reprezentuje FOREIGN KEY do TABLE 'TABLE_1'.
   !!! E. Pre ONE-TO-MANY RELATIONSHIP CLASS 'CTable1' MUSI mat NAVIGATION PROPERTY TYPE 'ICollection<CTable2>'.
   !!! F. Pre ONE-TO-MANY RELATIONSHIP CLASS 'CTable2' MUSI mat NAVIGATION PROPERTY TYPE 'CTable1'.
   G. Kedze TABLE 'TABLE_1' ma TYPE svojej NAVIGATION PROPERTY ako COLLECTION TYPE a TABLE 'TABLE_2' ma TYPE svojej NAVIGATION PROPERTY ako NON-COLLECTION TYPE, ENTITY FRAMEWORK CORE vytvara ONE-TO-MANY RELATIONSHIP.
6. Pre MANY-TO-MANY RELATIONSHIP platia nasledujuce pravidla.
   A. MANY-TO-MANY RELATIONSHIP je vztah medzi 3 DB TABLES, kde pre RECORD v TABLE 'TABLE_1' existuje <0,M> RECORDS v TABLE 'TABLE_3' a pre RECORD v TABLE 'TABLE_2' existuje <0,N> RECORDS v TABLE 'TABLE_3'.
   B. Pre ONE-TO-MANY RELATIONSHIP TABLE 'TABLE_1' je reprezentovana CLASS 'CClass1'.
   C. Pre ONE-TO-MANY RELATIONSHIP TABLE 'TABLE_2' je reprezentovana CLASS 'CClass2'.
   D. Pre ONE-TO-MANY RELATIONSHIP TABLE 'TABLE_3' je reprezentovana CLASS 'CClass3'.
   !!! E. RELATIONSHIP DATABASES i ENTITY FRAMEWORK CORE podporuju MANY-TO-MANY RELATIONSHIP vytvorenim TABLE 'TABLE_3', ktora obsahuje FOREIGN KEYS do TABLES, ktore su v MANY-TO-MANY RELATIONSHIP.
   !!!!! F. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable3' MUSI obsahovat PROPERTY rovnakeho TYPE ako PRIMARY KEY TYPE 'CTable1'. Tato PROPERTY reprezentuje FOREIGN KEY do TABLE 'TABLE_1'.
   !!!!! G. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable3' MUSI obsahovat PROPERTY rovnakeho TYPE ako PRIMARY KEY TYPE 'CTable2'. Tato PROPERTY reprezentuje FOREIGN KEY do TABLE 'TABLE_2'.
   !!! H. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable1' MUSI mat NAVIGATION PROPERTY TYPE 'ICollection<CTable3>'.
   !!! I. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable2' MUSI mat NAVIGATION PROPERTY TYPE 'ICollection<CTable3>'.
   !!! J. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable3' MUSI obsahovat NAVIGATION PROPERTY TYPE 'CTable1'.
   !!! K. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable3' MUSI obsahovat NAVIGATION PROPERTY TYPE 'CTable2'.
   L. Pre MANY-TO-MANY RELATIONSHIP CLASS 'CTable3' moze mat okrem NAVIGATION PROPERTIES aj ine dodatocne PROPERTIES, ktore su asociovane s MANY-TO-MANY RELATIONSHIP.
   !!!!! M. V pripade, ze MANY-TO-MANY RELATIONSHIP CLASS 'CTable3' NEOBSAHUJE ZIADNE DODATOCNE PROPERTIES, ENTITY FRAMEWORK CORE dokaze automaticky vygenerovat TABLE 'TABLE_3' AUTOMATICKY aj bez existencie CLASS 'CTable3'.
7. ENTITY FRAMEWORK CORE podporuje aj nasledujuce typy RELATIONSHIPS.
   A. TABLE-PER-HIERARCHY RELATIONSHIP.
   B. TABLE-PER-TYPE RELATIONSHIP.
   C. TABLE SPLITTING.
   D. OWNED TYPE.
8. Pre TABLE-PER-HIERARCHY RELATIONSHIP platia nasledujuce pravidla.
   A. TABLE-PER-HIERARCHY sa pozuva ak viacero ENTITIES maju spolocne PROPERTIES a su DERIVED z BASE ENTITY.
   B. Pri TABLE-PER-HIERARCHY sa definuje PRINCIPAL ENTITY z ktorej su DERIVED DEPENDENT ENTITIES.
   C. Pri TABLE-PER-HIERARCHY ENTITY FRAMEWORK CORE generuje jednu velku TABLE, ktora obsahuje COLUMNS pre kazdu PROPERTY PRINCIPAL ENTITY a COLUMNS pre vsetky PROPERTIES kazdej DEPENDENT ENTITIES.
   D. Pri TABLE-PER-HIERARCHY ma TABLE zaroven DISCRIMINATOR COLUMN, ktory urcuje aku ENTITY reprezentuje dany RECORD.
9. Pre TABLE-PER-TYPE RELATIONSHIP platia nasledujuce pravidla.
   A. TABLE-PER-TYPE sa pozuva ak viacero ENTITIES, ktore maju spolocne PROPERTIES a su DERIVED z BASE ENTITY.
   B. Pri TABLE-PER-TYPE sa definuje PRINCIPAL ENTITY z ktorej su DERIVED DEPENDENT ENTITIES.
   C. Pri TABLE-PER-TYPE ENTITY FRAMEWORK CORE pre PRINCIPAL ENTITY generuje osobitnu TABLE, ktora ma COLUMNS zodpovedajuce PROPERTIES BASE ENTITY.
   D. Pri TABLE-PER-TYPE ENTITY FRAMEWORK CORE generuje pre kazdu DEPENDENT ENTITY osobitnu TABLE, ktora ma COLUMNS zodpovedajuce PROPERTIES BASE ENTITY a PROPERTIES DERIVED ENTITY.
10. Pre TABLE SPLITTING platia nasledujuce pravidla.
   A. TABLE SPLITTING je mechanizmus, ktory umoznuje mapovanie viacerych ENTITIES do tej istej TABLE.
   B. V 1 TABLE je mozne ukladat lubovolny pocet roznych ENTITIES.
   C. Jednotlive ENTITIES musia mat medzi sebou RELATIONSHIP 1:1.
   D. Vsetky ENTITIES musia mat rovnaky TYPE PRIMARY KEY.
11. Pre OWNED TYPES platia nasledujuce pravidla.
   A. OWNED TYPE je C# CLASS, ktora moze byt ulozena do DB, aj ked nema definovany PRIMARY KEY.
   B. Typickym prikladom OWNED CLASSES su napriklad CLASSES ukladajuce ADDRESS, ktore je treba pouzit vo viacerych rozlicnych ENTITIES a v kazdej maju rovnaku strukturu.
   C. OWNED TYPES mozu byt v ENTITY FRAMEWORK CORE ukladane V rovnakej TABLE na ktoru je namapovana ENTITY, ktora vyuziva OWNED TYPE, alebo V nezavislej TABLE mimo TABLE do ktorej je mapovana ENTITY, ktora vyuziva OWNED TYPE.
!!! 12. ENTITY FRAMEWORK CORE dokaze pre existujucu DB vytvorit pomocou REVERSE ENGINEERING ENTITY CLASSES a DB CONTEXT CLASS.
13. Pre DB CONTEXT platia nasledujuce fakty.
   A. DB CONTEXT je CLASS, ktora MUSI byt DERIVED z CLASS [DbContext].
   B. DB CONTEXT moze mat CONSTRUCTOR, ktory ma PARAMETER TYPE [DbContextOptions]. PARAMETER umoznuje nakonfigurovat DB ku ktorej ma DB CONTEXT pristupovat.
   C. METHOD [void OnConfiguring(DbContextOptionsBuilder OptionsBuilder)] ma PARAMETER TYPE [DbContextOptionsBuilder], ktory umoznuje nakonfigurovat DB ku ktorej ma DB CONTEXT pristupovat.
   !!! D. METHOD [void OnModelCreating(ModelBuilder ModelBuilder)] ma PARAMETER TYPE [ModelBuilder], ktory umoznuje pomocou FLUENT API definovat strukturu DB.
   !!! E. CLASS [DbContext] implementuje INTERFACE [IDisposable], a preto po skonceni pouzivania instancie CLASS [DbContext] je nutne volat METHOD [void DbContext.Dispose()].
14. ENTITY FRAMEWORK CORE umoznuje vytvarat DB z ENTITY CLASSES a DB CONTEXT CLASS. ENTITY FRAMEWORK CORE umoznuje vytvarat DB nasledujucimi sposobmi.
   A. Zavolat METODU [bool DatabaseFacade.EnsureCreated()] pristupnu cez PROPERTY [DbContext.DatabaseFacade]. Tato METHOD vytvori DB z ENTITY CLASSES a DB CONTEXT CLASS.
   B. Pouzit MIGRATIONS.
   C. Vytvorit DB SCRIPT z ENTITY CLASSES a DB CONTEXT CLASS, ktory je mozne spustit nezavisle na PROGRAME.
15. Pre MIGRATIONS platia nasledujuce fakty.
   A. MIGRATIONS je mechanizmus, ktory umoznuje vytvarat DB z ENTITY CLASSES a DB CONTEXT CLASS.
   B. MIGRATIONS umoznuju vytvarat kontinualne UPGRADES, kde kazda MIGRATION vykona UPGRADE DB z jednej verzie na dalsiu.
   C. MIGRATIONS umoznuju okrem UPGRADES robit aj DOWNGRADES, kde sa vykona DOWNGRADE z existujucej verzie DB na predchadzajucu.
   D. MIGRATIONS su vytvarene vo forme C# CLASSES, ktore su ulozene v DIRECTORY [Migrations]. Tieto CLASSES je mozne manualne modifikovat a tym vykonat CUSTOMIZATION MIGRATIONS.
   !!! E. MIGRATIONS umoznuju vykonat konverzie DB pri zachovani EXISTUJUCICH DAT.
   !!! F. MIGRATIONS mozu byt aplikovane volanim METODY [void DatabaseFacade.Migrate()], ktora je pristupna cez PROPERTY [DbContext.DatabaseFacade]. Tato METHOD by mala byt volana na zaciatku behu PROGRAMU pred vykonanim prvej DB OPERATION.
16. Na to, aby MIGRATIONS mohli fungovat je nutne pridat nasledujude NUGET PACKAGES.
   A. PACKAGE [Microsoft.EntityFrameworkCore.DB_PROVIDER_NAME], kde VALUE 'DB_PROVIDER_NAME' je nazov DB PROVIDER. Tento PACKAGE obsahuje DB PROVIDER danej DB.
   B. PACKAGE [Microsoft.EntityFrameworkCore.Tools] obsahuje TOOLS potrebne pre vytvorenie MIGRATIONS.
17. NUGET PACKAGES je mozne instalovat nasledujucimi COMMANDS.
   A. COMMAND [Install-Package PACKAGE_NAME] vykonava instalaciu NUGET PACKAGE 'PACKAGE_NAME'.
   B. COMMAND [Update-Package PACKAGE_NAME] vykonava UPDATE NUGET PACKAGE 'PACKAGE_NAME'.
18. MIGRATIONS su spravovane pomocou NUGET PACKAGE MANAGER pomocou nasledujucich COMMANDS.
   A. MIGRATION sa pridava volanim COMMAND [dotnet ef migrations add MIGRATION_NAME], kde VALUE 'MIGRATION_NAME' je nazov MIGRATION.
   B. POSLEDNE VYTVORENA MIGRATION sa odstranuje volanim COMMAND [dotnet ef migrations remove].
   C. UPDATE DB z MIGRATION sa vykonava pomocou COMMAND [dotnet ef database update].
   D. UPDATE DB z konkretnej MIGRATION sa vykonava pomocou COMMAND [dotnet ef database update MIGRATION_NAME], kde VALUE 'MIGRATION_NAME' je nazov MIGRATION, ktora sa ma aplikovat.
   E. Odstranenie existujuce DB sa vykonava pomocou COMMAND [dotnet ef database drop].
   F. Vytvorenie SCRIPTU z MIGRATION sa vykonava pomocou COMMAND [dotnet ef migrations script -o FILE_NAME], kde VALUE 'FILE_NAME' je FILENAME SCIPT FILE, ktory sa ma vygenerovat.
!!! 19. Ak PROJECT obsahuje VIACERO DB CONTEXT CLASSES, vyber ktora DB CONTEXT CLASS sa ma pouzit sa robi pomocou OPTION [--context CONTEXT_NAME], kde VALUE 'CONTEXT_NAME' je nazov DB CONTEXT CLASS.
!!! 20. Ak je DB CONTEXT CLASS definovana v inom PROJECT ako v EXECUTABLE PROJECT, nazov PROJECT v ktorom sa nechadza DB CONTEXT CLASS je mozne nastavit pomocou OPTION [--startup-project PROJECT_NAME], kde VALUE 'PROJECT_NAME' je nazov PROJECT, kde sa DB CONTEXT CLASS nachadza.
!!! 21. V pripade, ze je vyuzivany COMMAND [dotnet ef], tak ENTITY FRAMEWORK CORE vytavra instanciu pozadovaneho DB CONTEXT CLASS nasledujucimi sposobmi.
   A. V pripade, ze pre dany DB CONTEXT CLASS NIE JE definovany DESIGN TIME DB CONTEXT FACTORY CLASS [IDesignTimeDbContextFactory<TContextType>], tak sa vytvara priamo instancia DB CONTEXT CLASS volanim DEFAULT CONSTRUCTOR. V pripade, ze DB CONTEXT CLASS NEMA DEFAULT CONSTRUCTOR, tak dojde k ERROR.
   B. V pripade, ze pre dany DB CONTEXT CLASS JE definovany DESIGN TIME DB CONTEXT FACTORY CLASS [IDesignTimeDbContextFactory<TContextType>], tak sa instancia pozadovanej DB CONTEXT CLASS vytvara volanim METHOD [public TContext CreateDbContext(string[] args)]. METHOD ma ako PARAMETER COMMAND LINE PARAMETER, ktore je mozne zadat pomocou COMMAND [dotnet ef].
22. Pre DESIGN TIME DB CONTEXT FACTORY CLASSES platia nasledujuce fakty.
   A. DESIGN TIME DB CONTEXT FACTORY CLASS je CLASS, ktora implementuje INTERFACE [IDesignTimeDbContextFactory<TContextType>], pricom TYPE PARAMETER 'TContextType' je TYPE DB CONTEXT CLASS pre ktory DESIGN TIME DB CONTEXT FACTORY CLASS implementovana.
   B. DESIGN TIME DB CONTEXT FACTORY CLASS je volana z COMMAND LINE TOOL [dotnet ef], vzdy ked tento TOOL potrebuje vytvorit instanciu DB CONTEXT CLASS, ako je napriklad praca s MIGRATIONS.
   C. INTERFACE [IDesignTimeDbContextFactory<TContextType>] definuje METHOD [public TContextType CreateDbContext(string[] args)], ktora vytvara instanciu DB CONTEXT CLASS.
   !!! D. Pomocou COMMAND LINE TOOL [dotnet ef] je mozne do METHOD [public TContext CreateDbContext(string[] args)] zaslat COMMAND LINE PARAMETERS. COMMAND LINE PARAMETERS sa zadavaju pomocou SYNTAX [dotnet ef COMMANDS OPTIONS -- COMMAND_LINE_PARAMETERS]. Pomocou nich je napriklad mozne definovat aky typ DB sa ma vytvorit ci pouzit.
23. QUERIES v ENTITY FRAMEWORK CORE su tvorene nasledujucimi castami.
   A. QUERY zacina pristupom k PROPERTY TYPE [DbSet<TTableType>] DB CONTEXT, ktora reprezentuje DB TABLE.
   B. QUERY pokracuje seriou LINQ OPERATORS.
   C. QUERY konci LINQ OPERATOR, ktory spusti ENUMERATION vysledkami QUERY.
!!! 24. Ak ENTITY FRAMEWORK CORE nacitava RECORDS z DB, tak BY-DEFAULT NENACITAVA DEPENDENT RECORDS. To znaci, ze RECORDS z inych TABLES NIE SU IMPLICITNE nacitane kym o to nie je ENTITY FRAMEWORK CORE explicitne poziadany.
25. ENTITY FRAMEWORK CORE umoznuje nacitavat DEPENDENT RECORDS nasledujucimi sposobmi.
   A. EAGER LOADING.
   B. EXPLICIT LOADING.
   C. SELECT LOADING.
   D. LAZY LOADING.
26. Pre EAGER LOADING platia nasledujuce fakty.
   A. EAGER LOADING umoznuje nacitat DEPENDENT RECORDS explicitnym definovanim, ktore DEPENDENT RECORDS sa pre dany PRINCIPAL RECORD maju nacitat.
   B. EAGER LOADING sa vykonava pomocou LINQ OPERATOR [IIncludableQueryable<TEntityType,TPropertyType> Include<TEntityType,TPropertyType>(Expression<Func<TEntityType,TPropertyType>> NavigationPropertyPath)], alebo LINQ OPERATOR [IIncludableQueryable<TEntityType,TPropertyType> ThenInclude<TEntityType,TPreviousPropertyType,TPropertyType>(Expression<Func<TPreviousPropertyType,TPropertyType>> NavigationPropertyPath)].
   !!! C. Pomocou LINQ OPERATOR [Include] je mozne nacitat IBA tie DEPENDENT RECORDS, ktore maju PRIAMU VAZBU na PRINCIPAL RECORD pomcou NAVIGATION PROPERTY. Typickym prikladom je ONE-TO-ONE RELATIONSHIP a ONE-TO-MANY RELATIONSHIP.
   !!!!! D. Pomocou LINQ OPERATOR [ThenInclude] je mozne nacitat tie DEPENDENT RECORDS, ktore NEMAJU PRIAMU VAZBU na PRINCIPAL RECORD pomcou NAVIGATION PROPERTY. Typickym prikladom je MANY-TO-MANY RELATIONSHIP, kde vazba medzi PRINCIPAL RECORD a DEPENDENT RECORD je pomocou pomocnej TABLE. OPERATOR LINQ OPERATOR [IIncludableQueryable<TEntityType,TPropertyType> ThenInclude<TEntityType,TPreviousPropertyType,TPropertyType>(Expression<Func<TPreviousPropertyType,TPropertyType>> NavigationPropertyPath)] je mozne pouzit AZ PO VOLANI LINQ OPERATOR [IIncludableQueryable<TEntityType,TPropertyType> Include<TEntityType,TPropertyType>(Expression<Func<TEntityType,TPropertyType>> NavigationPropertyPath)].
   !!! E. Ak DEPENDENT TABLE NEOBSAHUJE ZIADNE DEPENDENT RECORDS je volanie LINQ OPERATOR [Include] a LINQ OPERATOR [ThenInclude] IGNOROVANE a RELATIONSHIP PROPERTY ak je TYPE OBJECT, tak je nastavena na NULL a ak je TYPE COLLECTION je nastavena na EMPTY COLLECTION.
   F. Vyhodou EAGER LOADING je minimalizacia poctu QUERIES do DB.
   G. Nevyhodou EAGER LOADING je, ze ked sa nacitavaju DEPENDENT RECORDS, tak sa nacivaju VSETKY COLUMNS DEPENDENT TABLE co moze viest k prenosu dat, ktore sa nepouziju.
!!! 27. V LINQ OPERATOR [Include] a LINQ OPERATOR [ThenInclude] je mozne aplikovat niektore LINQ OPERATORS, ktore umoznuju vykonat SORTING a FILERING DEPENDENT RECORDS na zaklade tychto LINQ OPERATORS.
   A. LINQ OPERATORS sa MUSIA pouzit V RAMCI LINQ OPERATOR [Include] a LINQ OPERATOR [ThenInclude]. To znamena, ze sa nepouzivaju za tymito LINQ OPERATORS, ale vnutri nich.
   !!! B. V LINQ OPERATOR [Include] a LINQ OPERATOR [ThenInclude] je mozne aplikovat LINQ OPERATOR [Where], LINQ OPERATOR [OrderBy], LINQ OPERATOR [OrderByDescending], LINQ OPERATOR [ThenBy], LINQ OPERATOR [ThenByDescending], LINQ OPERATOR [Skip] a LINQ OPERATOR [Take].
   !!!!! C. Pri pouziti LINQ OPERATORS v LINQ OPERATOR [Include] a LINQ OPERATOR [ThenInclude] dochadza k SORTING a FILTERING DEPENDENT ENTITIES, a nie PRINCIPAL ENTITIES. To znamena, ze ak QUERY nacitava PRINCIPAL ENTITY pricom v LINQ OPERATOR [Include] pomocou, ktorych nacitava DEPEDNENT ENTITIES sa pouziju tieto LINQ OPERATORS, tak ovplyvnuju iba DEPEDNENT ENTITIES, a NIE PRINCIPAL ENTITIES.
28. Pre EXPLICIT LOADING platia nasledujuce fakty.
   A. Pri EXPLICIT LOADING sa nacitava v osobitnej QUERY PRINCIPAL RECORD ku ktoremu sa podla potreby neskor docitavaju DEPENDENT RECORDS pomocou NAVIGATION PROPERTIES.
   B. Na vykonanie EXPLICIT LOADING je nutne pre danu instanciu PRINCIPAL ENTITY CLASS ziskat instanciu CLASS [EntityEntry<TEntryType>] volanim METHOD [EntityEntry<TEntityType> Entry<TEntityType>(TEntityType Entity)]. METHOD umoznuje pre nacitaniu instanciu PRINCIPAL ENTITY CLASS ziskat instanciu CLASS [EntityEntry<TEntryType>].
   !!!!! C. CLASS [EntityEntry<TEntryType>] obsahuje METHODS pomocou ktorych je mozne ziskat REFERENCES na NAVIGATION PROPERTIES. METHOD [CollectionEntry<TEntityType,TPropertyType> Collection<TPropertyType>(Expression<Func<TEntityType,IEnumerable<TPropertyType>>> PropertyExpression)] sa pouziva vtedy, ak NAVIGATION PROPERTY je TYPE [ICollection<TEntityType>]. METHOD ReferenceEntry<TEntityType,TPropertyType> Reference<TPropertyType>(Expression<Func<TEntityType,TPropertyType>> PropertyExpression)] vracia instanciu CLASS [ReferenceEntry<TEntityType,TPropertyType>] sa pouziva vtedy, ak NAVIGATION PROPERTY je TYPE [TEntity].
   !!! D. CLASS [CollectionEntry<TEntityType,TPropertyType>] aj CLASS [ReferenceEntry<TEntityType,TPropertyType>] su DERIVED z CLASS [NavigationEntry].
   !!!!! E. CLASS [NavigationEntry] obsahuje METHOD [void Load()], ktora vykona EXPLICIT LOADING RECORD, alebo RECORDS na ktore odkazuje dana NAVIGATION PROPERTY.
   !!! F. CLASS [NavigationEntry] obsahuje METHOD [IQueryable Query()], ktora umoznuje pre instanciu CLASS [NavigationEntry] vytvorit LINQ QUERY, ktora umoznuje pri citani DEPENDENT RECORDS vykonat QUERY s LINQ OPERATORS.
29. Pre SELECT LOADING platia nasledujuce fakty.
   A. SELECT LOADING umoznuje pomocou LINQ QUERY vybrat z danej TABLE iba SUBSET zo vsetkych COLUMNS, ktore TABLE obsahuje.
   B. SELECT LOADING sa realizuje pomocou LINQ OPERATOR [IQueryable<TResultType> Select<TSourceType,TResultType>(Expression<Func<TSourceType,TResultType>> Selector)].
   C. LINQ QUERY umoznuje v LINQ QUERY vykonat dalsie SUBQUERIES, ktore sa mozu spojit do jednej DB QUERY.
30. ENTITY FRAMEWORK CORE podporuje LAZY LOADING.
31. LAZY LOADING je ENTITY FRAMEWORK CORE podporovany nasledujucimi sposobmi.
   A. Pouzitim instancie CLASS implementujucej INTERFACE [ILazyLoader].
   B. Pouzitim PROXY CLASSES.
32. LAZY LOADING za pouzitia instancie CLASS implementujucej INTERFACE [ILazyLoader] vyzaduje vykonanie nasledujucich krokov.
   A. ENTITY CLASSES musia mat FIELD TYPE [ILazyLoader].
   B. ENTITY CLASSES musia CONSTRUCTOR s 1 PARAMETER TYPE [ILazyLoader], ktory naplni FIELD TYPE [ILazyLoader]. Tento CONSTRUCTOR vola ENTITY FRAMEWORK CORE AUTOMATICKY pri vytvarani instancie ENTITY CLASS.
   C. ENTITY CLASSES musia mat NAVIGATION PROPERTIES, ktore v GETTER MUSIA volat METHOD [TRelated ILazyLoader.Load<TRelatedType>(object Entity, ref TRelatedType NavigationField, string NavigationName)], ktora v pripade, ze FIELD NIE JE NAPLNENY, vykona QUERY voci DATA STORE. SETTER NAVIGATION PROPERTY je standardny a NEPOUZIVA FIELD [ILazyLoader].
   !!! D. V pripade, ze ENTITY CLASSES pre NAVIGATION PROPERTIES pouzivaju FIELDS, ktore maju meno 'MFIELD_NAME', kde 'FIELD_NAME' je nazov FIELD, potom je NUTNE v DB CONTEXT pomocou FLUENT API nastavit nazov tohto FIELD pomocou METHOD [void IMutablePropertyBase.SetField(string FieldName)] volanej pre PROPERTY [IMutableForeignKey.PrincipalToDependent]. Tento krok je NEVYHNUTNY, pretoze ENTITY FRAMEWORK CORE vyzaduje nastavenie nazov BACKING FIELDS pri pouzivani LAZY LOADING.
33. LAZY LOADING s pouzitim PROXY CLASSES vyzaduje vykonanie nasledujucich krokov.
   A. Do PROJECT je nutne vlozit NUGET PACKAGE [Microsoft.EntityFrameworkCore.Proxies].
   B. ENTITY CLASSES MUSIA mat NAVIGATION PROPERTIES oznacene ako VIRTUAL.
   C. V DB CONTEXT je nutne volat METHOD [DbContextOptionsBuilder DbContextOptionsBuilder.UseLazyLoadingProxies(bool UseLazyLoadingProxies)], ktora povoli pouzivanie PROXY CLASSES.
   !!! D. V pripade, ze ENTITY CLASSES pre NAVIGATION PROPERTIES pouzivaju FIELDS, ktore maju meno 'MFIELD_NAME', kde 'FIELD_NAME' je nazov FIELD, potom je NUTNE v DB CONTEXT pomocou FLUENT API nastavit nazov tohto FIELD pomocou METHOD [void IMutablePropertyBase.SetField(string FieldName)] volanej pre PROPERTY [IMutableForeignKey.PrincipalToDependent]. Tento krok je NEVYHNUTNY, pretoze ENTITY FRAMEWORK CORE vyzaduje nastavenie nazov BACKING FIELDS pri pouzivani LAZY LOADING.
   !!!!! E. ENTITY FRAMEWORK CORE pri pouzivani PROXIES vytvori pre kazdu ENTITY CLASS, ktora ma VIRTUAL NAVIGATION PROPERTIES DERIVED CLASS, ktora vykonava LAZY LOADING pri pristupe k tymto NAVIGATION PROPERTIES. ENTITY FRAMEWORK CORE pri pristupe k DB potom vyuziva namiesto ENTITY CLASSES ich PROXY OBJECTS, ktore zabezpecia v pripade nutnosti vykonanie LAZY LOADING.
!!! 34. ENTITY FRAMEWORK CORE umoznuje vykonavat cast QUERY na SERVER SIDE a cast QUERY na CLIENT SIDE. Tato FEATURE sa vola CLIENT VS. SERVER SIDE EVALUATION a platia prenho nasledujuce fakty.
   A. CLIENT VS. SERVER SIDE EVALUATION umoznuje spustit cast QUERY, ak ju nie je mozne vykonat na DB SERVERI, vykonat na CLIENT SIDE.
   B. Typickym prikladom CODE, ktory nie je mozne na SERVER SIDE je volanie CUSTOM C# METHOD v QUERY.
   !!! C. Pomocou CLIENT VS. SERVER SIDE EVALUATION je mozne spustit CODE na CLIENT SIDE, ktory je sucastou POSLEDNEJ CASTI QUERY. Typicky sa jedna o LINQ OPERATOR [Select].
   !!!!! D. V pripade, ze QUERY obsahuje CODE, ktory nie je mozne spustit na SERVER SIDE aj v INYCH CASTIACH QUERY ako v POSLEDNEJ CASTI QUERY, ENTITY FRAMEWORK CORE hodi EXCEPTION.
!!!!! 35. Ak QUERY obsahuje volanie NON-DEFAULT CONSTRUCTOR, je to vlastne volanie CUSTOM C# METHOD, kde sa aplikuju principy CLIENT VS. SERVER SIDE EVALUATION.
   A. V QUERY, ktora obsahuje volanie NON-DEFAULT CONSTRUCTOR je mozne volanie NON-DEFAULT CONSTRUCTOR pouzit IBA v POSLEDNEJ CASTI QUERY. V takom pripade sa tento CODE vykona na CLIENT SIDE.
   B. Ak by sa v QUERY, ktora obsahuje volanie NON-DEFAULT CONSTRUCTOR pouzilo volanie NON-DEFAULT CONSTRUCTOR v INEJ CASTI QUERY za ktorou by sa nachadzali dalsie LINQ OPERATORS, ktore maju byt vykonane na SERVER SIDE, ENTITY FRAMEWORK CORE by hodilo EXCEPTION, pretoze volanie NON-DEFAULT CONSTRUCTOR, co je vlastne CUSTOM C# CODE by NEDOKAZAL na SERVER SIDE prelozit do SQL.
36. SORTING sa v ENTITY FRAMEWORK CORE je mozne vykonavat na PRVEJ, alebo DALSICH urovniach.
   A. SORING na PRVEJ urovni sa vykonava pomocou LINQ OPERATOR [OrderBy], alebo LINQ OPERATOR [OrderByDescending].
   B. SORTING na PRVEJ urovni je SORING podla PRVEJ CONDITION.
   C. V pripade, ze po SORTING na PRVEJ urovni existuju RECORDS, ktore maju ROVNAKU VALUE, tieto RECORDS mozu byt SORTED pomocou SORING na DALSEJ urovni.
   D. SORING na DALSEJ urovni sa vykonava pomocou LINQ OPERATOR [ThenBy], alebo LINQ OPERATOR [ThenByDescending].
   E. SORING na DALSEJ urovni je mozne retazit, takze je mozne vykonat SORTING na 2., 3. az N. urovni.
37. SORTING sa v ENTITY FRAMEWORK CORE vykonava pomocou nasledujucich LINQ OPERATORS.
   A. LINQ OPERATOR [IOrderedQueryable<TSource> OrderBy<TSource,TKey>(this IQueryable<TSource> Source, Expression<Func<TSource,TKey>> KeySelector)] vykonava SORTING od NAJMENSEJ po NAJVACSIU VALUE.
   B. LINQ OPERATOR [IOrderedQueryable<TSource> OrderByDescending<TSource,TKey>(this IQueryable<TSource> Source, Expression<Func<TSource,TKey>> KeySelector)] vykonava SORTING od NAJVACSEJ po NAJMENSIU VALUE.
   C. LINQ OPERATOR [IOrderedQueryable<TSource> ThenBy<TSource,TKey>(this IOrderedQueryable<TSource> Source, Expression<Func<TSource,TKey>> KeySelector)] vykonava SORTING od NAJMENSEJ po NAJVACSIU VALUE. METHOD sa pouziva az PO aplikovani LINQ OPERATOR [OrderBy], alebo po LINQ OPERATOR [OrderByDescending]. Vykonava SORTING podla dalsej CONDITION u tych RECORDS, ktore maju po uvodnom SORTING ROVNAKU VALUE. Cize, jedna sa o SORTING podla dalsieho kriteria.
   D. LINQ OPERATOR [IOrderedQueryable<TSource> ThenByDescending<TSource,TKey>(this IOrderedQueryable<TSource> Source, Expression<Func<TSource,TKey>> KeySelector)] vykonava SORTING od NAJVACSEJ po NAJMENSIU VALUE. METHOD sa pouziva az PO aplikovani LINQ OPERATOR [OrderBy], alebo po LINQ OPERATOR [OrderByDescending]. Vykonava SORTING podla dalsej CONDITION u tych RECORDS, ktore maju po uvodnom SORTING ROVNAKU VALUE. Cize, jedna sa o SORTING podla dalsieho kriteria.
38. LINQ OPERATOR [IQueryable<TSourceType> Where<TSourceType>(Expression<Func<TSourceType,bool>> Predicate)] vykonava FILTERING RECORDS v DB.
39. ENTITY FRAMEWORK CORE umoznuje nasledujuce STRING METHODS konvertovat na SQL COMMANDS.
   A. METHOD [bool string.StartsWith(string Value)] umoznuje vyhladat STRING VALUES, ktore zacinaju zadanym STRING.
   B. METHOD [bool string.EndsWith(string Value)] umoznuje vyhladat STRING VALUES, ktore koncia zadanym STRING.
   C. METHOD [bool string.Contains(string Value)] umoznuje vyhladat STRING VALUES, ktore obsahuju zadany STRING.
!!! 40. ENTITY FRAMEWORK CORE definuje HELPER METHODS, ktore je je mozne pouzit v LINQ OPERATORS pricom ENTITY FRAMEWORK CORE ich dokaze transformovat na SQL COMMANDS. Pre HELPER FUNCTIONS platia nasledujuce fakty.
   A. HELPER FUNCTIONS je mozne pouzivat v LINQ OPERATORS QUERY.
   B. HELPER FUNCTIONS su transformovane na SQL COMMANDS.
   C. HELPER FUNCTIONS su definovane v CLASS [EF.Functions].
   D. HELPER FUNCTIONS zavisia od DB PROVIDER.
!!! 41. ENTITY FRAMEWORK CORE pre DB PROVIDER [Sqlite] definuje nasledujuce HELPER METHODS.
   A. HELPER METHOD [TProperty DbFunctions.Collate<TProperty>(TProperty Operand, string Collation)] sa preklada na SQL COMMAND [COLLATE()].
   B. HELPER METHOD [bool DbFunctions.Glob(string MatchExpression, string Pattern)] sa preklada na SQL COMMAND [GLOB()].
   C. HELPER METHOD [string DbFunctions.Hex(byte[] Bytes)] sa preklada na SQL COMMAND [HEX()].
   D. HELPER METHOD [bool DbFunctions.Like(string MatchExpression, string Pattern, string EscapeCharacter)] sa preklada na SQL COMMAND [LIKE()].
   E. HELPER METHOD [double DbFunctions.Random()] sa preklada na SQL COMMAND [RANDOM()].
   F. HELPER METHOD [byte[] DbFunctions.Substr(byte[] Bytes, int StartIndex, int Length)] sa preklada na SQL COMMAND [SUBSTR()].
!!! 42. LINQ OPERATOR [IQueryable<TSourceType> Skip<TSourceType>(int Count)] umoznuje v ORDERED RECORD SET preskocit prvych 'N' RECORDS. V pripade, ze QUERY je UNORDERED, tak LINQ OPERATOR hodi EXCEPTION.
!!! 43. LINQ OPERATOR [IQueryable<TSourceType> Take<TSourceType>(int Count)] umoznuje v ORDERED RECORD SET zobrat 'N' RECORDS. V pripade, ze QUERY je UNORDERED, tak LINQ OPERATOR hodi EXCEPTION.
!!! 44. LINQ OPERATOR [IQueryable<TEntityType> AsNoTracking<TEntityType>(this IQueryable<TEntity> SourceType)] umoznuje vytvorit READ ONLY QUERY, ktoreho vykonanie RYCHLEJSIE ako vykonanie WRITABLE QUERY, ktory umoznuje modifikaciu ENTITY OBJECTS. READ ONLY QUERY nevytvara TRACKING OBJECTS a preto je o nieco rychlejsi.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
Priklad pouzitia LINQ OPERATOR [IIncludableQueryable<TEntityType,TPropertyType> Include<TEntityType,TPropertyType>(Expression<Func<TEntityType,TPropertyType>> NavigationPropertyPath)].

   1. PRINCIPAL TABLE je reprezentovana ENTITY CLASS 'CBook'.
   2. DEPENDENT TABLE je reprezentovana ENTITY CLASS 'CReview'.
   3. PRINCIPAL TABLE ma NAVIGATION PROPERTY 'Reviews' TYPE [ICollection<CReview>], co znamena, ze medzi ENTITY CLASS 'CBook' a ENTITY CLASS 'CReview' je ONE-TO-MANY RELATIONSHIP.
   !!! 4. Pri vykonani QUERY [Books.Include(P => P.Reviews)] su pre kazdu instanciu ENTITY CLASS 'CBook' naplnene aj DEPENDENT instancie ENTITY CLASS 'CReview'.
//----------------------------------------------------------------------------------------------------------------------
Priklad pouzitia LINQ OPERATOR [IIncludableQueryable<TEntityType,TPropertyType> ThenInclude<TEntityType,TPreviousPropertyType,TPropertyType>(Expression<Func<TPreviousPropertyType,TPropertyType>> NavigationPropertyPath)].

   1. PRINCIPAL TABLE je reprezentovana ENTITY CLASS 'CBook'.
   2. DEPENDENT TABLE je reprezentovana ENTITY CLASS 'CAuthor'.
   3. MIDDLE TABLE je reprezentovana ENTITY CLASS 'CBookAuthor'. Tato TABLE reprezentuje MANY-TO-MANY RELATIONSHIP medzi ENTITY CLASS 'CBook' a ENTITY CLASS 'CAuthor'.
   4. PRINCIPAL TABLE ma NAVIGATION PROPERTY 'BookAuthors' TYPE [ICollection<CBookAuthor>].
   5. MIDDLE TABLE ma NAVIGATION PROPERTY 'Author' TYPE [CAuthor].
   !!! 6. Pri vykonani QUERY [Books.Include(P => P.BookAuthors).ThenInclude(P => P.Author)] su pre kazdu instanciu ENTITY CLASS 'CBook' vsetky DEPENDENT instancie ENTITY CLASS 'CAuthor' prostrednictvom instancie ENTITY CLASS 'CBookAuthor'.
   !!!!! 7. Klucove je, ze LINQ OPERATOR [ThenInclude(P => P.Author)] je mozne volat AZ po zavolani LINQ OPERATOR [Include(P => P.BookAuthors)], pretoze iba tento LINQ OPERATOR vracia instancie ENTITY CLASS 'CBookAuthor' cez ktore sa je mozne dostat k instanciam ENTITY CLASS 'CAuthor'.
//----------------------------------------------------------------------------------------------------------------------
Priklad pouzitia METHOD [void NavigationEntry.Load()].

   1. PRINCIPAL TABLE je reprezentovana ENTITY CLASS 'CBook'.
   2. DEPENDENT TABLE je reprezentovana ENTITY CLASS 'CReviews'.
   3. PRINCIPAL TABLE ma NAVIGATION PROPERTY 'Reviews' TYPE [ICollection<CReview>], co znamena, ze medzi ENTITY CLASS 'CBook' a ENTITY CLASS 'CReview' je ONE-TO-MANY RELATIONSHIP.
   4. Z DB sa nacita instancia ENTITY CLASS 'CBook'.
   5. Pre instanciu ENTITY CLASS 'CBook' sa ziska instancia CLASS [EntityEntry<CBook>] volanim METHOD [EntityEntry<CBook> Entry<TEntityType>(Book)].
   !!! 6. Volanim METHOD [CollectionEntry<CBook,CReview> Collection<CReview>(Expression<Func<CBook,IEnumerable<CReview>>> PropertyExpression)] sa ziska REFERENCE OBJECT na NAVIGATION PROPERTY 'Reviews' TYPE [ICollection<CReview>]. REFERENCE OBJECT ma TYPE [CollectionEntry<CBook,CReview>]. Kedze sa NEPOUZIL EAGER LOADING, tak VALUE PROPERTY 'Reviews' je nastavena na NULL.
   !!!!! 7. Volanim METHOD [void CollectionEntry<CBook,CReview>.Load()] dojde k nacitaniu VSETKYCH instancii ENTITY CLASS 'CReviews', ktore su DEPENDENT z PRINCIPAL RECORD.
//----------------------------------------------------------------------------------------------------------------------
Priklad pouzitia METHOD [IQueryable NavigationEntry.Query()].

   1. PRINCIPAL TABLE je reprezentovana ENTITY CLASS 'CBook'.
   2. DEPENDENT TABLE je reprezentovana ENTITY CLASS 'CReviews'.
   3. PRINCIPAL TABLE ma NAVIGATION PROPERTY 'Reviews' TYPE [ICollection<CReview>], co znamena, ze medzi ENTITY CLASS 'CBook' a ENTITY CLASS 'CReview' je ONE-TO-MANY RELATIONSHIP.
   4. Z DB sa nacita instancia ENTITY CLASS 'CBook'.
   5. Pre instanciu ENTITY CLASS 'CBook' sa ziska instancia CLASS [EntityEntry<CBook>] volanim METHOD [EntityEntry<CBook> Entry<TEntityType>(Book)].
   !!! 6. Volanim METHOD [CollectionEntry<CBook,CReview> Collection<CReview>(Expression<Func<CBook,IEnumerable<CReview>>> PropertyExpression)] sa ziska REFERENCE OBJECT na NAVIGATION PROPERTY 'Reviews' TYPE [ICollection<CReview>]. REFERENCE OBJECT ma TYPE [CollectionEntry<CBook,CReview>]. Kedze sa NEPOUZIL EAGER LOADING, tak VALUE PROPERTY 'Reviews' je nastavena na NULL.
   !!! 7. Volanim METHOD [IQueryable CollectionEntry<CBook,CReview>.Query()] sa vytvori instancia INTERFACE [IQueryable], ktora umoznuje vykonat QUERIES nad REFERENCE OBJECT.
   !!!!! 8. QUERY [CollectionEntryReviews.Query().Count()] vrati POCET REVIEWS, ktore boli napisane pre danu instanciu ENTITY CLASS 'CBook'.
//----------------------------------------------------------------------------------------------------------------------