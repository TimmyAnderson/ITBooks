using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
//-----------------------------------------------------------------------------------------------------------
namespace Trees
{
//-----------------------------------------------------------------------------------------------------------
	[DataContract]
	public abstract class CIDBase<T> where T : IEquatable<T>
	{
//-----------------------------------------------------------------------------------------------------------
		protected T												MID;
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public CIDBase(T ID)
		{
			MID=ID;
		}
//-----------------------------------------------------------------------------------------------------------
		public CIDBase(CIDBase<T> IDBase)
		{
			MID=IDBase.MID;
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		[DataMember]
		public T												ID
		{
			get
			{
				return(MID);
			}
			private set
			{
				MID=value;
			}
		}
//-----------------------------------------------------------------------------------------------------------
		public virtual string									IDAsString
		{
			get
			{
				return(MID.ToString());
			}
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public static bool operator==(CIDBase<T> ID1, CIDBase<T> ID2)
		{
			object				PID1=ID1;
			object				PID2=ID2;

			if (PID1==null && PID2==null)
				return(true);

			if (PID1==null || PID2==null)
				return(false);

			return(ID1.MID.Equals(ID2.MID));
		}
//-----------------------------------------------------------------------------------------------------------
		public static bool operator!=(CIDBase<T> ID1, CIDBase<T> ID2)
		{
			return(!(ID1==ID2));
		}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
		public override int GetHashCode()
		{
			return(MID.GetHashCode());
		}
//-----------------------------------------------------------------------------------------------------------
		public override bool Equals(object Obj)
		{
			if (Obj==null)
				return(false);

			CIDBase<T>	ID=Obj as CIDBase<T>;

			if (ID==null)
				return(false);

 			return(this==ID);
		}
//-----------------------------------------------------------------------------------------------------------
		public override string ToString()
		{
			return(MID.ToString());
		}
//-----------------------------------------------------------------------------------------------------------
	}
//-----------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------