//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje vykonavanie TESTS v SPRING.
2. TESTS je mozne rozdelit do nasledujucich kategorii.
   A. UNIT TESTS su TESTS, ktore testuju izolovanu cast CODE.
   B. INTEGRATION TESTS su TESTS, ktore testuju vicere prepojene casti CODE.
3. REGRESION TESTING je pristup, ktory vyzaduje kontinualne vykonavanie TESTS. TESTS sa spustaju pri kazdom BUILD.
4. TESTS mozu byt vykonavane AUTOMATICKY pomocou CONTINUOUS INTEGRATION TOOLS. CONTINUOUS INTEGRATION TOOLS funguju nasledujucim sposobom.
   A. Do REPOSITORY je vlozeny novy CODE COMMIT.
   B. CONTINUOUS INTEGRATION TOOL spusti vsetky nastavene TESTS.
   C. V pripade, ze niektory TEST zlyha, je o tom informovany PROGRAMMER.
5. V MAVEN PROJECTS sa TESTS realizuju nasledovne.
   A. Pre skupinu TESTS sa vytvori CUSTOM CLASS v DIRECTORY [test].
   B. Pre kazdy TEST CASE sa v CUSTOM CLASS definuje jedna METHOD, ktora vykona dany TEST.
6. UNIT TEST pozostava z nasledujucich krokov.
   A. ASSUMPTIONS. Pred vykonanim UNIT TEST je nutne vytvorit vsetky INPUTS do testovaneho CODE a vyriesit vsetky DEPENDENCIES, ktore testovany CODE vyzaduje.
   B. CALL (EXECUTION). Vykona sa testovany CODE s INPUTS a DEPENDENCIES vytvorenych v kroku ASSUMPTIONS.
   C. VALIDATIONS. Vykonaju sa samotne testy ci vysledok testovaneho CODE zodpoveda ocakavanemu vysledku.
7. DEPENDENCES v UNIT TEST sa riesia pouzivanim MOCK OBJECTS. MOCK OBJECT je OBJECT, ktory implementuje tu cast funkcionality danej DEPENDENCY, ktoru testovany CODE vola.
8. Pre TEST METHODS platia nasledujuce fakty.
   A. TEST METHODS musia byt definovat v CLASS, ktory je ulozeny v DIRECTORY [test].
   B. Na TEST METHODS MUSIA byt aplikovane ANNOTATIONS [@Test].
   C. Na TEST METHODS mozu byt aplikovane ANNOTATIONS [@DisplayName], ktore blizsie vysvetluju zmysel testu.
9. Na vykonavanie TESTS sa v JAVE pouziva LIBRARY [JUnit].
!!! 10. MOCK OBJECTS je mozne vytvarat pomocou MOCK LIBRARY [Mockito]. MOCK LIBRARY [Mockito] definuje skupinu STATIC METHODS, ktore je mozne pouzit na vytvorenie MOCK OBJECTS, definiciu ich BEHAVIORS, aj kontrolu ci METHODS MOCK OBJECTS boli pocas testovania volane s danymi PARAMETERS. MOCK LIBRARY [Mockito] definuje nasledujuce METHODS.
    A. Pomocou METHOD [<T> T Mockito.mock(Class<T> ClassToMock)] je mozne vytvarat EMTPTY MOCK OBJECTS.
    B. Pomocou METHOD [<T> BDDMockito.BDDMyOngoingStubbing<T> given(T MethodCall)] je mozne definovat ako ma MOCK OBJECT reagovat, ak sa zavola METHOD 'MethodCall' s danymi PARAMETERS.
    !!! C. Pomocou METHOD [BDDMyOngoingStubbing<T> BDDMockito.willReturn(T Value)] je mozne definovat aku VALUE ma vracat MOCK OBJECT v reakcii na volanie METHOD MOCK OBJECT. METHOD sa pouziva PO volani METHOD [<T> BDDMockito.BDDMyOngoingStubbing<T> given(T MethodCall)].
    D. Pomocou METHOD [<T> T Mockito.verify(T Mock)] sa vykona kontrola bola zavolana METHOD MOCK OBJECT so danymi PARAMETERS.
    !!! E. Pomocou METHOD [<T extends Throwable> T Assertions.assertThrows(Class<T> ExpectedType, Executable Executable)] sa zavola testovana METHOD 'Executable', pricom sa ocakava, ze METHOD hodi EXCEPTION TYPE 'ExpectedType'.
11. TESTS sa daju v ECLIPSE IDE spustat nasledujucimi sposobmi.
   A. Pomocou MAIN MENU COMMAND [Run->Coverage] sa spustia VSEKTY TESTS.
   B. Pomocou CONTEXT MENU COMMAND [Coverage As] vo WORKSPACE WINODW na konkretny TEST CLASS sa spustia vsetky TESTS v danej TEST CLASS.
   C. Pomocou CONTEXT MENU COMMAND [Coverage As] vo WORKSPACE WINODW na konkretnu TEST METHOD v TEST CLASS sa spusti dany TEST v danej TEST CLASS.
!!! 12. MOCK OBJECTS nemusia byt manualne vytvorene pomocou METHOD [<T> T Mockito.mock(Class<T> ClassToMock)], ale je ich mozne nechat vytvorit pomocou MOCK LIBRARY [Mockito]. Na vytvorenie MOCK OBJECTS je potrebne vykonat nasledujuce kroky.
   A. Na TEST CLASS sa aplikuje ANNOTATION [@ExtendWith(MockitoExtension.class)], aby MOCK LIBRARY [Mockito] vedela, ze musi vytvorit MOCK OBJECTS.
   B. V TEST CLASS sa na FIELDS do ktorych maju byt ulozene MOCK OBJECTS aplikuje ANNOTATION [@Mock], aby MOCK LIBRARY [Mockito] tieto FIELDS naplnil instanciami MOCK OBJECTS.
   C. V TEST CLASS sa na FIELDS do ktorych maju byt ulozene OBJECTS, v ktorych sa pouzivaju MOCK OBJECTS je potrebne aplikovat ANNOTATION [@InjectMocks], aby MOCK LIBRARY [Mockito] vytvoril aj s nastavenymi MOCK OBJECTS.
13. CLASS [Assertions] obsahuje HELPERS METHODS, ktore umoznuje vykonavat ASSERTIONS.
//----------------------------------------------------------------------------------------------------------------------