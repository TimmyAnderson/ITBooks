//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie TEMPLATES SPECILIZATION v C++.
2. TEMPLATES v C++ mozu mat nasledujuce typy PARAMETERS.
   A. TYPE PARAMETERS. Su to klasicke TYPES, ktore musia byt oznacene KEYWORD [typename].
   !!! B. VALUE PARAMETERS. Jedna sa o CONSTANT VALUES niektoreho z INTEGER BUILD-IN TYPES. Patria sem aj POINTERS, vratane POINTERS na FUNCTIONS. Pomocou VALUE PARAMETERS je mozne definovat napriklad velkosti ARRAYS, kedze sa jedna o COMPILE-TIME CONSTANTS.
   !!! C. TEMPLATE PARAMETERS. Su to TEMPLATES, ktore su pouzite ako TYPE PARAMETERS.
!!! 3. Pri pouzivani TYPE PARAMETERS C++ 11 umoznuje definovat OBMEDZENIA na TYPES, ktore je mozne pouzit ako TYPE PARAMETERS. Tieto obmedzenia sa definuju pomocou KEYWORD [static_assert()].
4. TYPES, ktore maju byt pouzite ako TYPE PARAMETERS musia byt pristupne v danom v SCOPE a ACCESSIBLE. To znaci, ze TYPE, ktory je definovany ako PRIVATE TYPE nejakej CLASS NIE JE MOZNE MIMO tejto CLASS pouzit ako TYPE PARAMETER, pretoze k nemu NEMA CODE ACCESSIBILITY.
5. Ako VALUE PARAMETERS sa mozu pouzit nasledujuce typy VALUES.
   A. INTEGER CONSTANT. CONSTANT moze byt vypocitana aj ako sucast EXPRESSION.
   B. POINTER, alebo REFERENCE na OBJECT, alebo na FUNCTION. OBJECTS MUSIA byt deklarovane ako GLOBAL OBJECTS. LOCAL VARIABLES NIE JE mozne pouzit ako OBJECTS.
   C. NON-OVERLOADED POINTER na MEMBER. PARAMETER sa zadava vo formate [template<MEMBER_TYPE CLASS_NAME::*MEMBER_VARIABLE_NAME>] pre VARIABLES a vo formate [template<METHOD_RETURN_TYPE (CLASS_NAME::*MEMBER_METHOD_NAME)(METHOD_PARAMETERS)>] pre METHODS.
   D. NULL POINTER.
!!! 6. C++ NEUMOZNUJE ako VALUE PARAMETERS pouzivat FLOAT CONSTANTS ako aj POINTERS na STRING LITERALS.
7. Ak sa TEMPLATE pouziva ako TEMPLATE PARAMETER, tak MUSI mat definovany POCET TYPE PARAMETERS, ktore pouziva.
!!!!! 8. FUNCTION TEMPLATES NIE JE MOZNE pouzit ako TEMPLATE PARAMETERS.
9. TEMPLATES (CLASSES, METHODS i FUNCTIONS) mozu mat definovane DEFAULT PARAMETERS. Pre DEFAULT PARAMETERS platia nasledujuce zasady.
   A. DEFAULT PARAMETERS MUSIA byt az za VSETKYMI TYPE PARAMETERS, ktore nemaju definovanu DEFAULT VALUE.
   !!! B. C++ NEROBI semanticku kontrolu pre DEFAULT PARAMETERS ak nie su pouzite. Semanticka kontrola sa robi IBA vtedy, ak je DEFAULT PARAMETER pouzity. To okrem ineho znaci, ze ak nahodou pouzitie DEFAULT PARAMETER by viedlo k ERROR v PROGRAME, tak tato ERROR NEBUDE detekovana, ak sa DEFAULT PARAMETER nepouzil.
   C. Ak pri TEMPLATE INSTANCING ma KAZDY TYPE PARAMETER definovany DEFAULT PARAMETER a tento sa pouzije, tak NIE JE NUTNE pouzit pri pouzivani TEMPLATE znaky [<>]. Toto sa tyka IBA TEMPLATE FUNCTIONS a TEMPLATE METHODS.
10. TEMPLATE SPECIALIZATION je technika, ktora umoznuje pre lubovolnu kombinaciu TYPE PARAMETERS danej TEMPLATE definovat jej CUSTOM IMPLEMENTATION. COMPILER potom pri TEMPLATE INSTANCING vykona INSTANCING tej SPECIALIZATION, ktorej TYPE PARAMETERS maju najvaciu ekvivalenciu s TYPE ARGUMENTS pouzitymi pocas TEMPLATE INSTANCING.
11. C++ pozna 2 typy TEMPLATE SPECIALIZATION.
   A. PARTIAL SPECIALIZATIONS (SYNTAX [template<TType1,...,TTypeM> class <typename TType1,...,TypeN>], kde M!=N). V tomto pripade TEMPLATE SPECIALIZATION ma iba NIEKTORE TYPE PARAMETERS substituovane za konkretne TYPES a ostatne ostavaju ako TYPE PARAMETERS, ktore treba pri TEMPLATE INSTANCING dospecifikovat.
   B. COMPLETE SPECIALIZATIONS (SYNTAX [template<> class <typename TType1,...,TypeN>]). V tomto pripade su VSETKY TYPE PARAMETERS substituovane za konkretne TYPES.
!!! 12. C++ umoznuje definovat PARTIAL SPECIALIZATIONS pre POINTERS a REFERENCES. Tieto SPECIALIZATIONS su PARTIALS SPECIALIZATIONS, pretoze TYPE PARAMETERS stale nie su plne specifikovane, no C++ ich pri TEMPLATE INSTANCING pouzije pre LUBOVOLNY POINTER, alebo REFERENCE. SYNTAX pre TYPE PARAMETER typu POINTER je [typename TType*]. SYNTAX pre TYPE PARAMETER typu POINTER je [typename TType&].
13. PRIMARY TEMPLATE je najgenerickejsia verzia TEMPLATE z ktorej je mozne vykonavat TEMPLATE SPECIALIZATIONS. Pre PRIMARY TEMPLATES platia nasledujuce pravidla.
   !!! A. PRIMARY TEMPLATE sa v CODE MUSI FYZICKY nachadzat PRED VSETKYMI TEMPLATE SPECIALIZATIONS. Na splnenie tejto podmienky staci, aby TEMPLATE DECLARATION bola pred vsetkymi SPECIALIZATIONS a TEMPLATE DEFINITION bola az za nou.
   B. Konstrukt static_assert() NESTACI, aby bol pouzity v PRIMARY TEMPLATE. Je ho nutne pouzit aj vo VSETKYCH TEMPLATE SPECIALIZATIONS, ak sa ma aplikovat.
   C. Vsetky TEMPLATE SPECIALIZATIONS by mali byt umiestnene v TOM ISTOM SCOPE.
   D. Vsetky TEMPLATE SPECIALIZATIONS MUSIA byt umiestnene v TOM ISTOM NAMESPACE.
14. C++ umoznuje aj TEMPLATE SPECIALIZATION pre TEMPLATE FUNCTIONS a TEMPLATE METHODS. SYNTAX pre definovanie TEMPLATE SPECIALIZATION pre TEMPLATE FUNCTIONS a TEMPLATE METHODS je [template<> RETURN_VALUE<Type1,...,TypeN>FUNCTION(PARAMETERS)], kde [<Type1,...,TypeN>] je mozne vynechat.
!!! 15. C++ pre TEMPLATE FUNCTIONS a TEMPLATE METHODS umoznuje definovat iba COMPLETE SPECIALIZATION. PARTIAL SPECIALIZATION pre TEMPLATE FUNCTIONS a TEMPLATE METHODS NIE JE MOZNA.
!!!!! 16. TEMPLATE SPECIALIZATION sa SYNTAKTICKY LISI od FUNCTION OVERLOADING pouzitim PREFIXU [template<>]. Ak sa tento PREFIX pouzije, tak sa jedna o TEMPLATE SPECIALIZATION. Ak nie, jedna sa o FUNCTION OVERLOADING.
!!! 17. Ak CODE definuje TEMPLATE SPECIALIZATION a zaroven pre tu istu TEMPLATE a TIE ISTE PARAMETERS aj OVERLOADED FUNCTION, tak C++ preferuje volanie OVERLOADED FUNCTION. Volanie TEMPLATE SPECIALIZATION je mozne iba ak sa pri volani FUNCTION pouzije SYNTAX [<Type1,...,TypeN>].
!!!!! 18. V G++ MUSIA byt METHOD SPECIALIZATIONS definovane VZDY v NON-CLASS SCOPE. To znaci, ze METHOD SPECIALIZATIONS MUSIA byt definovane MIMO BODY CLASS.
//-------------------------------------------------------------------------------------------------------