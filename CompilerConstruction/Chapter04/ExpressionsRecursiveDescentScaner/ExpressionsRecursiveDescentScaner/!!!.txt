//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje realizaciu RECURSIVE DESCENT PARSER.
2. RECURSIVE DESCENT PARSER realizuje PARSING matematickeho EXPRESSION.
3. SCANER rozpoznava nasledujuce typy SYMBOLS.
   A. Number.
   B. Znaky: (,),+,-,*,/.
!!! 4. Principom RECURSIVE DESCENT PARSER je ze BNF pravidla sa transformuju do EBNF, ktoreho zapis je potom PREPISANY do KODU PARSERA. KOD PARSERA je realizovany nasledujucim sposobom.
   A. Pre kazdy EBNF RULE (zvycajne s vynimkou najjednoduchsich) sa definuje NOVA METODA PARSERA.
   B. Kod kazdej metody realizuje PRAVU STRANU EBNF RULE a ma strukturu PODOBNU EBNF RULE.
   C. Ak je v EBNF NON-TERMINAL, tak v kode PARSERA je realizovany ako VOLANIE PRISLUSNEJ METODY REPREZENTUJUCEJ RULE daneho NON-TERMINAL.
   D. Ak je v EBNF TERMINAL, tak sa skontroluje ci je to TERMINAL, ktory EBNF OCAKAVA a ak ano, tak sa PARSER posunie na NASLEDUJUCI TOKEN. Ak nie, hodi sa ERROR.
!!!!! 5. Cize HLAVNOU filozofiou RECURSIVE DESCENT PARSER je vytvaranie AD-HOC KOD PARSERA, ktoreho TELA KOPIRUJE EBNF ZAPIS RULES. NEJEDNA sa o UNIVERZALNY PARSER, ale KOD PARSERA je ZAVISLA od TVARU EBNF RULES.
!!!!! 6. RECURSIVE DESCENT PARSER sa da pouzit iba pre JEDNODUCHE JAZYKY, medzi ktore vsak patri i jazyk C.
//-------------------------------------------------------------------------------------------------------
Tabulka pre DFA akceptujuce C++ komentar a WHITE CHARS.

					NUMBER				(					)					+					-					*					/					WHITE				EOF					OTHER
Start				Number				AfterOpenBracket	AfterCloseBracket	AfterPlus			AfterMinus			AfterAsterisk		AfterSlash			AfterWhiteChar		[TokenEOF]			[Error]
Number				Number				[TokenNumber]		[TokenNumber]		[TokenNumber]		[TokenNumber]		[TokenNumber]		[TokenNumber]		[TokenNumber]		[TokenNumber]		[TokenNumber]
AfterOpenBracket	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]	[TokenOpenBracket]
AfterCloseBracket	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]	[TokenCloseBracket]
AfterPlus			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]			[TokenPlus]
AfterMinus			[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]		[TokenMinus]
AfterAsterisk		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]		[TokenAsterisk]
AfterSlash			[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]		[TokenSlash]
AfterWhiteChar		[TokenWhiteChars]	[TokenWhiteChars]	[TokenWhiteChars]	[TokenWhiteChars]	[TokenWhiteChars]	[TokenWhiteChars]	[TokenWhiteChars]	AfterWhiteChar		[TokenWhiteChars]	[TokenWhiteChars]

ACCEPTING STATES:

TokenWhiteChars
TokenOpenBracket
TokenCloseBracket
TokenPlus
TokenMinus
TokenAsterisk
TokenSlash
TokenNumber
TokenEOF
//-------------------------------------------------------------------------------------------------------
EBNF pre EXPRESSION PARSER.

1. EXP -> TERM {ADD_OP TERM}.
2. ADD_OP -> '+' | '-'.
3. TERM -> FACTOR {MUL_OP FACTOR}.
4. MUL_OP -> '*' | '/'.
5. FACTOR -> '(' EXP ')' | 'NUMBER' | '-NUMBER'.
//-------------------------------------------------------------------------------------------------------