//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
class CDependentBaseClassesCaseCBase
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		enum EEnum
		{
			VALUE_1=1,
			VALUE_2=2,
			VALUE_3=3
		};

	public:
		virtual void VirtualMethod1(EEnum Value=VALUE_1);
		virtual void VirtualMethod2(const EEnum& Value);
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CDependentBaseClassesCaseCBase<TType>::VirtualMethod1(EEnum Value)
{
	std::wcout << L"CASE C - BASE - VIRTUAL METHOD 1 - TYPE [" << GetTypeInfoName<TType>() << L"] VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
void CDependentBaseClassesCaseCBase<TType>::VirtualMethod2(const EEnum& Value)
{
	std::wcout << L"CASE C - BASE - VIRTUAL METHOD 2 - TYPE [" << GetTypeInfoName<TType>() << L"] VALUE [" << Value << L"]." << std::endl;
}
//----------------------------------------------------------------------------------------------------------------------