//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie ENUMS a FLAGS.
!!! 2. ENUMS su DERIVED z TYPE Enum, ktore je DERIVED z TYPE ValueType. Z toho vyplyva, ze ENUMS su VALUE TYPES.
3. C# pri generovani ENUMS vygeneruje TYPE, ktory ma nasledujuce vlastnosti.
   A. TYPE je DERIVED z TYPE Enum a je VALUE TYPE, ktory implementuje INTERFACES IComparable, IFormattable a IConvertible.
   B. Pre kazdu hodnotu ENUM je generovany 'public const' FIELD, ktory ma nazov zhodny s polozkou ENUM a jehe TYPE je IDENTICKY ako ENUM TYPE.
   !!! C. PRIVATE FIELD 'value__', ktoreho TYPE je zhodny s UNDERLYING TYPE. Prave TENTO PRIVATE FIELD reprezentuje ENUM VALUE.
!!! 4. Tym, ze jednotlive polozky ENUM su CONSTANTS, platie pre ne TO ISTE co pre CONSTANTS. To znaci, ze ked na VALUES ENUM TYPE sa referuje INA ASSEMBLY, tak pri COMPILATION sa ziskaju VALUES ENUM TYPE a v RUNTIME sa uz k tymto VALUES (dokonca ani ASSEMBLY, ak sa nedeklaruju VARIABLES tychto ENUM TYPES) NEPRISTUPUJE. To moze sposobit problemy s verziovanim, pretoze ak by sa niektora VALUE daneho ENUM ZMENILA a nedoslo by k RECOMPILATION referovanej ASSEMBLY, ta by obsahovala STARU VALUE.
5. ENUM definuje UNDERLYING TYPE, ktory urcuje akeho TYPE bude FIELD 'value__'. Standardne je to TYPE Int32, ale C# to umoznuje zmenit na LUBOVOLNY NUMERIC TYPE ROVNAKOU SYNTAX aka sa pouziva pri dedeni (ENUM_TYPE : NUMERIC_TYPE).
6. TYPE Enum ma viacero metod, ktore je mozne pouzit pri praci s ENUMS.
   A. METHOD Enum.ToString() zobrazuje hodnotu CONSTANT (ak je aplikovany ATTRIBUTE [Flags], tak aj viacero CONSTANTS). Pretazena verzia METHOD umoznuje definovat CUSTOM formatovanie.
   B. METHOD Enum.CompareTo() porovnava 2 VALUES a urcuje, ktora je z nich vacsia, mensia, alebo ci su rovne.
   C. METHOD Enum.GetTypeCode() vracia TYPE CODE (instancia ENUM TypeCode) UNDERLYING TYPE.
   D. METHOD Enum.HasFlags() volana na ENUM, ktory ma aplikovany ATTRIBUTE [Flags] umoznuje zistit ci je dany FLAG nastaveny.
   E. STATIC METHOD Enum.GetUnderlyingType() vracia instanciu CLASS Type, urcujucu aky UNDERLYING TYPE ENUM pouziva.
   F. STATIC METHOD Enum.Format() umoznuje podobne ako pretazena verzia METHOD Enum.ToString() CUSTOM formatovanie (konverziu na STRING) hodnoty ENUM.
   G. STATIC METHODS Enum.Parse() a Enum.TryParse() umoznuju PARSING ENUM hodnot.
   H. STATIC METHOD Enum.ToObject() umoznuju konverziu ENUM hodnot na NUMBERIC hodnoty. TYPE Enum obsahuje pretazene verzie METHOD pre kazdy NUMERIC TYPE, ktory moze byt pouzity ako UNDERLYING TYPE.
   I. STATIC METHOD Enum.GetValues() vracia ARRAY VSETKYCH VALUE daneho ENUM.
   J. STATIC METHOD Enum.GetNames() vracia ARRAY VSETKYCH NAZVOV VALUES daneho ENUM.
   K. STATIC METHOD Enum.GetName() vracia pre danu ENUM VALUE zodpovedajuci NAZOV.
   L. STATIC METHOD Enum.IsDefined() vracia TRUE, ak je dana hodnota v ENUM definovana, inak vracia FALSE. Podporuje aj CASE-SENSITIVE vyhladavanie VALUES podla ich STRING reprezentacie.
!!! 7. C# povazuje ENUM za PRIMITIVE TYPES. Vdaka tomu pre ENUMS C# podporuje nasledujuce operacie.
   A. VSETKY ZAKLADNE OPERATORS (napriklad OPERATOR+, OPERATOR<, OPERATOR&, OPERATOR|, OPERATOR++, OPERATOR==, OPERATOR!=). Niektore OPERATORS ako napriklad OPERATOR+ je podporovany IBA pre NUMBERIC VALUES, ale nie pre ENUM VALUES. To znaci, ze NIE JE MOZNE SCITAT 2 ENUM VALUES, ale je mozne pricitat NUMBER k ENUM VALUE.
   B. CASTING z a do NUMERIC TYPES.
!!! 8. Ak na ENUM je aplikovany ATTRIBUTE [Enum], tak je ENUM povazovany za BIT-FLAGS strukturu, ktorej elementy su bud samotne FLAGS, alebo kombinacie FLAGS. FLAGS maju niektore METHODS specialne CUSTOMIZOVANE.
   A. METHOD Enum.ToString() je schopna vypisat KOMBINACIU FLAGS oddelenu ciarkou ak je viacero FLAGS nastavenych.
   B. METHODS Enum.Parse() a Enum.TryParse() su schopne parsovat KOMBINACIU FLAGS oddelenu ciarkou.
   !!! C. Naopak METHOD Enum.IsDefined() IGNORUJE ATTRIBUTE [Flags], a preto by pre ENUMS s aplikovanym ATTRIBUTE [Flags] by METHOD Enum.IsDefined() NEMALA byt pouzivana.
!!!!! 9. Pomocou EXTENSION METHODS je mozne doplnit do ENUM TYPES CUSTOM METODS, ktore maju SYNTAX rovnaku ako INSTANCE METHODS.
//-------------------------------------------------------------------------------------------------------