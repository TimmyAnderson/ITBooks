//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie AZURE COSMOS DATABASE.
2. AZURE COSMOS DATABASE je NO SQL AZURE DATABASE SERVICE, ktory umoznuje ukladat nestrukturovane data do DATABASE.
3. AZURE COSMOS DATABASE je distribuovana DATABASE, ktora ma regionalne repliky pre vysoku PERFORMANCE.
4. AZURE COSMOS DATABASE podporuje viacero DATA MODELS, ako su KEY-VALUE PAIRS, WIDE COLUMNS, GRAPHS, ci DOCUMENTS.
5. AZURE COSMOS DATABASE podporuje nasledujuce APIs pre pracu s AZURE COSMOS DATABASE.
   A. API [API for NoSQL].
   B. API [API for MongoDb].
   C. API [API for PostgreSQL].
   D. API [API for Apache Cassandra].
   E. API [API for Apache Gremlin].
   G. API [API for Table].
6. Pre API [API for NoSQL] platia nasledujuce fakty.
   A. API uklada data v JSON DOCUMENTS, pricom kazdy JSON DOCUMENT moze mat lubovolnu schemu. API nediktuje format JSON DOCUMENT.
   B. API podporuje PARTITIONING. JSON DOCUMENTS su PARTITIONED na zaklade definovaneho PARTITION KEY. PARTITIONING urcuje ako su JSON DOCUMENTS distribuovane medzi LOGICAL PARTITIONS v ramci AZURE COSMOS DATABASE CLUSTER.
   C. API umoznuje ziskavat DATA zasielanim SQL LIKE QUERIES.
   D. API vdaka AZURE COSMOS DATABASE podporuje AUTOMATIC SCALING pre WORKLOAD a STORAGE.
   E. API vdaka AZURE COSMOS DATABASE umoznuje replikaciu dat do viacerych REGIONS na zabezpecenie vysokej dostupnosti dat.
   F. API definuje SDK pre viacero PROGRAMMING LANGUAGES.
7. Pre API [API for MongoDb] platia nasledujuce fakty.
   A. API umoznuje integraciu s existujucimi programami beziacimi nad MONGO DATABASE.
   B. API uklada data v MONGO DATABASE, co je NO SQL DATABASE, ktora interne uklada data vo formate BSON (BINARY JSON).
   C. API podporuje sekundarne INDEXES na zvysenie QUERY PERFORMANCE.
   D. API vdaka AZURE COSMOS DATABASE umoznuje replikaciu dat do viacerych REGIONS na zabezpecenie vysokej dostupnosti dat.
   E. API vdaka AZURE COSMOS DATABASE podporuje AUTOMATIC SCALING pre WORKLOAD a STORAGE.
8. Pre API [API for Apache Gremlin] platia nasledujuce fakty.
   A. API uklada data v podobe GRAPHS. GRAPH tvori kolekcia VERTICES a EDGES.
   B. API podporuje GREMLIN QUERY LANGUAGE na vykonavanie QUERIES nad datami.
   C. API umoznuje s kazdym VERTEX a EDGE asicovat PROPERTIES.
   D. API podporuje PARTITIONING na zaklade PARTITION KEYS. PARTITIONING urcuje ako su GRAPHS distribuovane medzi LOGICAL PARTITIONS v ramci AZURE COSMOS DATABASE CLUSTER.
   E. API vdaka AZURE COSMOS DATABASE umoznuje replikaciu dat do viacerych REGIONS na zabezpecenie vysokej dostupnosti dat.
9. Pre API [API for Table] platia nasledujuce fakty.
   A. API uklada data do TABLES, kde kazda TABLE ma kolekciu ENTITIES. ENTITY je podobna TABLE ROW, kde kazda ENTITY kolekciu PROPERTIES. Kazda PROPERTY je KEY-VALUE PAIR, pricom VALUE ma definovany TYPE.
   B. API podporuje PARTITIONING a SCALING na zaklade PARTITION KEYS.
   C. API umoznuje pristup k datam primarne cez KEYS. Ale API podporuje aj jednoduchy QUERY LANGUAGE na vykonavanie QUERIES.
   D. API vdaka AZURE COSMOS DATABASE umoznuje replikaciu dat do viacerych REGIONS na zabezpecenie vysokej dostupnosti dat.
   E. API definuje SDK pre viacero PROGRAMMING LANGUAGES.
10. REQUEST UNIT v AZURE COSMOS DATABASE sluzi ako metrika pre PERFORMANCE a urcenie poplatkov za pouzivanie AZURE COSMOS DATABASE. Pre REQUEST UNIT platia nasledujuce fakty.
   A. REQUEST UNIT sluzi ako metrika pre meranie RESOURCE CONSUMPTION v AZURE COSMOS DATABASE. Tato RESOURCE CONSUMPTION sa pouziva pri urcenie poplatku za vyuzitie AZURE COSMOS DATABASE.
   B. REQUEST UNIT meria vyuzivanie CPU, MEMORY a pocet INPUT/OUTPUT OPERATIONS za sekundu.
   C. REQUEST UNIT je nezavisla na DATA MODEL (API), ktore je pouzite na ukladanie dat do AZURE COSMOS DATABASE.
   D. AZURE COSMOS DATABASE moze byt nastavena na niektory z nasledujucich MODES, ktory urcuje akym sposobom budu REQUEST UNITS pocitane.
      A. PROVISIONED THROUGHPUT MODE. V tomto MODE USER dopredu nastavuje pocet REQUEST UNITS PER SECONDS. MODE sa pouzva pri systemoch, ktore maju predikovatelnu a trvalu zataz.
      B. SERVERLESS MODE. V tomto MODE je USER spoplatneny iba za tie REQUEST UNITS, ktore realne spotrebuje. SERVERLESS MODE nema dopredu nastavene ziadne poziadavky na REQUEST UNITS a tento MODE je vhodny na systemy s nepredvidatelnou zatazou.
      C. AUTOSCALE MODE. V tomto MODE AZURE automaticky vykonava SCALING na zaklade zataze systemu.
   E. REQUEST UNITS mozu byt aplikovane na nasledujucich urovniach.
      A. Na urovni DATABASE. Toto nastavenie je automaticky aplikovane na vsetky CONTAINERS danej DATABSE.
	  B. Na urovni CONTAINER. Toto nastavenie prepisuje nastavenie na urovni DATABASE.
   F. V pripade, ze AZURE COSMOS DATABASE pouzivana vo viacerych REGIONS, tak v kazdom REGIONS je potrebne alokovat rovnaky pocet REQUEST UNITS.
11. AZURE COSMOS DATABASE definuje nasledujuce PERFORMANCE METRICS.
   A. THROUGHPUT. THROUGHPUT urcuje pocet REQUEST UNITS, ktore sa vykonavaju za sekundu.
   B. LATENCY. LATENCY je cas potrebny na vykonanie REQUEST. Cas obsahuje cas potrebny na vykonanie DATABASE OPERATION a cas kym CLIENT dostane RESPONSE.
   C. REQUEST UNIT. REQUEST UNITS vyjadruje pocet SYSTEM RESOURCES potrebnych pre vykonanie OPERATION.
12. AZURE COSMOS DATABASE podporuje nasledujuce mechanizmy pre optimalizaciu THROUGHPUT.
   A. PARTITION KEYS. PARTITION KEYS umoznuju rozdelit CONTAINER DATA do viacerych PARTITIONS. AZURE COSMOS DATABASE automaticky vykonava PARTITION na zaklade PARTITION KEYS. PARTITION KEYS definuje PROGRAMMER.
   B. CONSISTENCY LEVELS. CONSISTENCY LEVELS urcuju ako rychlo sa maju zmeny z jedneho REGION maju replikovat do inych REGIONS.
   C. INDEXING STRATEGIES. INDEXES mozu byt vytvarane pre jednotlive DOCUMENT PROPERTIES a zrychlit tak vykonavanie QUERIES a znizit pocet REQUEST UNITS potrebnych na ich vykonanie.
   D. SCALING THROUGHPUT. PROGRAMS mozu vykonavat SCALING AZURE COSMOS DATABASE na zaklade zataze.
13. AZURE COSMOS DATABASE podporuje nasledujuce mechanizmy pre optimalizaciu LATENCY.
   A. INDEXING STRATEGIES. INDEXES mozu byt vytvarane pre jednotlive DOCUMENT PROPERTIES a zrychlit tak vykonavanie QUERIES a znizit pocet REQUEST UNITS potrebnych na ich vykonanie.
   B. CONSISTENCY LEVELS. CONSISTENCY LEVELS urcuju ako rychlo sa maju zmeny z jedneho REGION maju replikovat do inych REGIONS.
   C. GLOBAL DISTRIBUTION. GLOBAL DISTRIBUTION umoznuje replikovat data do roznych REGIONS, cim su blizsie ku CUSTOMERS a tym padom LATENCY je nizsia.
14. AZURE COSMOS DATABASE podporuje nasledujuce mechanizmy pre optimalizaciu poctu REQUEST UNITS.
   A. PARTITION KEYS. PARTITION KEYS umoznuju rozdelit CONTAINER DATA do viacerych PARTITIONS. AZURE COSMOS DATABASE automaticky vykonava PARTITION na zaklade PARTITION KEYS. PARTITION KEYS definuje PROGRAMMER.
   B. CONSISTENCY LEVELS. CONSISTENCY LEVELS urcuju ako rychlo sa maju zmeny z jedneho REGION maju replikovat do inych REGIONS.
   C. INDEXING STRATEGIES. INDEXES mozu byt vytvarane pre jednotlive DOCUMENT PROPERTIES a zrychlit tak vykonavanie QUERIES a znizit pocet REQUEST UNITS potrebnych na ich vykonanie.
   D. SCALING THROUGHPUT. PROGRAMS mozu vykonavat SCALING AZURE COSMOS DATABASE na zaklade zataze.
   E. AUTOSCALING. AUTOSCALING umoznuje automaticky SCALING na zaklade THROUGHPUT.
15. Pre CONTAINERS v AZURE COSMOS DATABASE platia nasledujuce fakty.
   !!! A. V AZURE COSMOS DATABASE CONTAINERS sluzia ako LOGICAL PARTITIONS do ktorych su ukladane ITEMS. Su analogiou TABLES v RELATIONAL DATABASES.
   B. ITEMS ulozene v CONTAINERS na rozdiel od dat ulozenych v TABLES nemusia mat uniformnu strukturu.
   C. Do CONTAINERS je mozne ulozit lubovolne z podporovanych typov ITEMS ako su DOCUMENTS, KEY-VALUE PAIRS, COLUMN FAMILY DATA ci GRAPHS.
   !!! D. ITEMS ulozene v CONTAINERS maju SHARED PROPERTY nazyvanu PARTITION KEY. PARTITION KEY sa pouziva pre DISTRIBUTION a SCALABILITY ITEMS v CONTAINER. PARTITION KEY urcuje ako su data distribuovane do LOGICAL PARTITIONS v ramci COSMOS DB CLUSTER. USER NEMOZE priamo urcovat ako budu ITEMS PARTITIONED. Da sa to iba pomocou PARTITION KEY.
   E. CONTAINERS mozu byt PARTITIONED medzi viacerymi fyzickymi NODES.
   F. CONTAINERS su vytvarane v ramci DATABASE ACCOUNT, ktory je asociovany s AZURE COSMOS DATABASE.
   !!! G. CONTAINERS su organizovane spravidla na zaklade dat, ktore obsahuju. Spravidla pre kazdy typ dat je vytvoreny osobitny CONTAINER v AZURE COSMOS DATABASE.
16. Pre ITEMS v AZURE COSMOS DATABASE platia nasledujuce fakty.
   !!! A. ITEM reprezentuje jeden RECORD, ktory je ulozeny v CONTAINER. ITEM je analogiou TABLE ROW v RELATIONAL DATABASES.
   B. ITEM moze byt lubovolneho typu, ktory AZURE COSMOS DATABASE podporuje, ako su DOCUMENTS, TABLE ROW, KEY-VALUE PAIRS a dalsie.
   !!!!! C. ITEM MUSI mat PROPERTY s NAME [id] TYPE [string], ktora jednoznacne identifikuje dany ITEM.
   !!! D. Viacero ITEMS moze mat tu istu VALUE PROPERTY [id], iba ak maju odlisny PARTITION KEY.
   !!!!! E. Kazdy ITEM musi mat definovanu PARTITION KEY PROPERTY. PARTITION KEY PROPERTY umoznuje delit ITEMS v CONTAINER do jednotlivych PARTITIONS.
   !!!!! F. PARTITION KEY PROPERTY a PROPERTY [id] su 2 ODLISNE PROPERTIES. Kym PARTITION KEY PROPERTY sluzi na delenie ITEMS v CONTAINER, PROPERTY [id] jednoznacne identifikuje ITEM pre dany PARTITION KEY. Pri vyhladavani ITEMS je nutne zadat OBE PROPERTIES.
!!!!! 17. Medzi SQL DATABASE a NON-SQL DATABASE ako je AZURE COSMOS DATABASE existuju nasledujuce rozdiely.
   A. V SQL DATABASE TABLES sa ukladaju RECORDS, ktore maju ROVNAKU STRUKTURU a maju definovany IDENTIFIER, ktory jednoznacne identifikuje dany RECORD.
   !!! B. V NON-SQL DATABASE CONTAINERS sa mozu ukladat LUBOVOLNE typy RECORDS, kde kazdy RECORD ma definovany IDENTIFIER, ktory jednoznacne identifikuje dany RECORD, no zaroven ma definovany aj PARTITION KEY, ktory urcuje v ktorej logickej PARITION je dany RECORD ulozeny.
   !!!!! C. V V NON-SQL DATABASE CONTAINER je napriklad mozne ukladat vsetky mozne typy informacii o danom USER. To znamena, ze tam moze byt RECORD reprezentujuci USER NAME, RECORD reprezentujuci USER ADDRESS, RECORD reprezentujuci USER CONTACT. Vsetky tieto RECORDS mozu byt ulozene v tom istom CONTAINER.
!!! 17. V .NET je k AZURE COSMOS DATABASE pristupovat pomocou COSMOS DB SDK FOR .NET. COSMOS DB SDK FOR .NET je pristupny prostrednictvo PACKAGE [Microsoft.Azure.Cosmos].
18. Na pracu s AZURE COSMOS DATABASE v CLI MUSI byt povoleny PROVIDER [Microsoft.DocumentDB]. PROVIDER sa povoluje volanim COMMAND [az provider register --namespace "Microsoft.DocumentDB"].
19. Pre pracu s AZURE COSMOS DATABASE je nutne vytvorit AZURE COSMOS DB DATABASE ACCOUNT. S AZURE COSMOS DB DATABASE ACCOUNTS sa pracuje pomocou nasledujucich COMMANDS.
   A. Novy AZURE COSMOS DB DATABASE ACCOUNT sa vytvara pomocou COMMAND [az cosmosdb create]. Prikladom je COMMAND [az cosmosdb create --name mycosmosaccountta --resource-group Chapter08 --default-consistency-level "Session" --kind GlobalDocumentDB --locations regionName=centralus failoverPriority=0 isZoneRedundant=false --enable-free-tier true].
   B. Existujuci AZURE COSMOS DB DATABASE ACCOUNT sa odstranuje pomocou COMMAND [az cosmosdb delete]. Prikladom je COMMAND [az cosmosdb delete --name mycosmosaccountta --resource-group Chapter08].
   C. Podrobnosti o AZURE COSMOS DB DATABASE ACCOUNT vracia COMMAND [az cosmosdb show]. Prikladom je COMMAND [az cosmosdb show --name mycosmosaccountta --resource-group Chapter08].
   D. Zoznam vsetkych AZURE COSMOS DB DATABASE ACCOUNT vracia COMMAND [az cosmosdb list]. Prikladom je COMMAND [az cosmosdb list --resource-group Chapter08].
   E. AZURE COSMOS DB DATABASE ACCOUNT KEYS vracia COMMAND [az cosmosdb keys list]. Prikladom je COMMAND [az cosmosdb keys list --name mycosmosaccountta --resource-group Chapter08 --type connection-strings].
!!!!! 20. Na CRUD operacie nad AZURE COSMOS DATABASE ITEMS je nutne aby USER bol zaradeny do ROLE [Cosmos DB Built-in Data Contributor]. ROLE sa prideluje pomocou COMMAND [az cosmosdb sql role assignment create]. Prikladom je COMMAND [az cosmosdb sql role assignment create --account-name mycosmosaccountta --resource-group Chapter08 --principal-id "5138f3d7-3ec0-4d89-97f5-40a6f6000528" --role-definition-id "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/Chapter08/providers/Microsoft.DocumentDB/databaseAccounts/mycosmosaccountta/sqlRoleDefinitions/00000000-0000-0000-0000-000000000002" --scope "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/Chapter08/providers/Microsoft.DocumentDB/databaseAccounts/mycosmosaccountta"].
21. S AZURE COSMOS DATABASE ROLES sa pracuje pomocou nasledujucich COMMANDS.
   A. Nova AZURE COSMOS DATABASE ROLE sa prideluje pomocou COMMAND [az cosmosdb sql role assignment create]. Prikladom je COMMAND [az cosmosdb sql role assignment create --account-name mycosmosaccountta --resource-group Chapter08 --principal-id "5138f3d7-3ec0-4d89-97f5-40a6f6000528" --role-definition-id "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/Chapter08/providers/Microsoft.DocumentDB/databaseAccounts/mycosmosaccountta/sqlRoleDefinitions/00000000-0000-0000-0000-000000000002" --scope "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/Chapter08/providers/Microsoft.DocumentDB/databaseAccounts/mycosmosaccountta"].
   B. Existujuca AZURE COSMOS DATABASE ROLE sa odstranuje pomocou COMMAND [az cosmosdb sql role assignment delete]. Prikladom je COMMAND [az cosmosdb sql role assignment delete --account-name mycosmosaccountta --resource-group Chapter08 --role-assignment-id "/subscriptions/b5f70a84-6ba2-4485-84cd-ac0883d618c5/resourceGroups/Chapter08/providers/Microsoft.DocumentDB/databaseAccounts/mycosmosaccountta/sqlRoleAssignments/ddecfcaf-7709-47e5-b483-2905352739ce"].
   C. Zoznam AZURE COSMOS DATABASE ROLES vracia COMMAND [az cosmosdb sql role assignment list]. Prikladom je COMMAND [az cosmosdb sql role assignment list --account-name mycosmosaccountta --resource-group Chapter08].
   D. Zoznam ROLE IDS vracia COMMAND [az cosmosdb sql role definition list]. Prikladom je COMMAND [az cosmosdb sql role definition list --account-name mycosmosaccountta --resource-group Chapter08].
22. Pre pracu s AZURE COSMOS DATABASES sa pouzivaju nasledujuce COMMANDS.
   A. Nova AZURE COSMOS DB DATABASE sa vytvara pomocou COMMAND [az cosmosdb sql database create]. Prikladom je COMMAND [az cosmosdb sql database create --name mydb --account-name mycosmosaccountta --resource-group Chapter08].
   B. Existujuca AZURE COSMOS DB DATABASE sa odstranuje pomocou COMMAND [az cosmosdb sql database delete]. Prikladom je COMMAND [az cosmosdb sql database delete --name mydb --account-name mycosmosaccountta --resource-group Chapter08].
   C. Zoznam vsetkych AZURE COSMOS DB DATABASES vracia COMMAND [az cosmosdb sql database list]. Prikladom je COMMAND [az cosmosdb sql database list --account-name mycosmosaccountta --resource-group Chapter08].
23. Pre pracu s AZURE COSMOS CONTAINERS sa pouzivaju nasledujuce COMMANDS.
   A. Novy AZURE COSMOS DB CONTAINER sa vytvara pomocou COMMAND [az cosmosdb sql container create]. Prikladom je COMMAND [az cosmosdb sql container create --name names --account-name mycosmosaccountta --resource-group Chapter08 --database-name "mydb" --partition-key-path "/sex"].
   B. Existujuci AZURE COSMOS DB CONTAINER sa odstranuje pomocou COMMAND [az cosmosdb sql container delete]. Prikladom je COMMAND [az cosmosdb sql container delete --name names --account-name mycosmosaccountta --resource-group Chapter08 --database-name "mydb"].
   C. Zoznam vsetkych AZURE COSMOS DB CONTAINERS vracia COMMAND [az cosmosdb sql container list]. Prikladom je COMMAND [az cosmosdb sql container list --account-name mycosmosaccountta --resource-group Chapter08 --database-name "mydb"].
24. CLASS [CosmosClient] reprezentuje CLIENT, ktorym je mozne pristupovat k AZURE COSMOS DATABASE. CLASS implementuje INTERFACE [IDisposable]. CLASS ma nasledujuce MEMBERS.
   A. CONSTRUCTOR [CosmosClient(string AccountEndpoint, TokenCredential TokenCredential, CosmosClientOptions ClientOptions)] vytvara instanciu CLASS [CosmosClient].
   B. PROPERY [CosmosClientOptions ClientOptions] obsahuje SETTINGS CLASS [CosmosClient].
   C. PROPERY [Uri Endpoint] obsahuje ENDPOINT URI na AZURE COSMOS DATABASE.
   D. STATIC METHOD [Task<CosmosClient> CreateAndInitializeAsync(string AccountEndpoint, string AuthKeyOrResourceToken, IReadOnlyList<(string DatabaseId, string ContainerId)> Containers, CosmosClientOptions CosmosClientOptions, CancellationToken CancellationToken)] vytvara instanciu CLASS [CosmosClient] pricom ju okamzite inicializuje kontaktovanim AZURE COSMOS DB, aby sa predislo vzniku COLD START PROBLEM.
   E. METHOD [void Dispose()] uvolnuje instanciu CLASS [CosmosClient].
   F. METHOD [Task<AccountProperties> ReadAccountAsync()] vracia informacie o AZURE COSMOS DATABASE ACCOUNT.
   !!! G. METHOD [Database GetDatabase(string ID)] vracian instanciu CLASS [Database], ktora reprezentuje AZURE COSMOS DATABASE. Uspesne volanie METHOD NEGARANTUJE ze dana DATABASE existuje.
   !!! H. METHOD [Container GetContainer(string DatabaseID, string ContainerID)] vracian instanciu CLASS [Container], ktora reprezentuje AZURE COSMOS DATABASE CONTAINER. Uspesne volanie METHOD NEGARANTUJE ze dany CONTAINER existuje.
   I. METHOD [Task<DatabaseResponse> CreateDatabaseAsync(string ID, ThroughputProperties ThroughputProperties, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara novu DATABASE.
   J. METHOD [Task<DatabaseResponse> CreateDatabaseIfNotExistsAsync(string ID, ThroughputProperties ThroughputProperties, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara novu DATABASE, ak DATABASE neexistuje.
   K. METHOD [Task<ResponseMessage> CreateDatabaseStreamAsync(DatabaseProperties DatabaseProperties, int Throughput, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara novu DATABASE.
   L. METHOD [FeedIterator GetDatabaseQueryStreamIterator(QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions] vytvara QUERY nad AZURE COSMOS DATABASE s pouzitim PARAMETRIZED SQL QUERY.
   M. METHOD [FeedIterator<TType> GetDatabaseQueryIterator<TType>(QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vytvara QUERY nad AZURE COSMOS DATABASE s pouzitim PARAMETRIZED SQL QUERY.
!!!!! 25. Instanciu CLASS [CosmosClient] je mozne vytvarat nasledujucimi sposobmi.
   A. S pouzitim CONNECTION STRING, ktory sa za ziskat z AZURE PORTAL. Platia nasledujuce fakty.
      A. Pouzije sa CONSTRUCTOR [CosmosClient(string ConnectionString, CosmosClientOptions ClientOptions)].
	  B. CONNECTION STRING sa da ziskat pomocou COMMAND [az cosmosdb keys list]. Prikladom je COMMAND [az cosmosdb keys list]. Prikladom je COMMAND [az cosmosdb keys list]. Prikladom je COMMAND [az cosmosdb keys list --name mycosmosaccountta --resource-group Chapter08 --type connection-strings].
	  !!!!! C. S takto vytvorenou instanciou CLASS [CosmosClient] JE mozne vykonavat PRIVILEGED OPERATIONS ako napriklad CREATE/DELETE DATABASE, alebo CREATE/DELETE CONTAINER.
   B. S pouzitim ENTRA ID. Platia nasledujuce fakty.
      A. Pouzije sa CONSTRUCTOR [CosmosClient(string AccountEndpoint, TokenCredential TokenCredential, CosmosClientOptions ClientOptions)].
	  B. ACCOUNT ENDPOINT sa ziskava pomocou COMMAND [az cosmosdb show]. Prikladom je COMMAND [az cosmosdb show --name mycosmosaccountta --resource-group Chapter08].
	  C. Ak TOKEN CREDENTIALS je mozne pouzit pre DEVELOPMENT napriklad CLASS [DefaultAzureCredential], alebo CLASS [AzureCliCredential].
	  !!!!! D. S takto vytvorenou instanciou CLASS [CosmosClient] NIE JE mozne vykonavat PRIVILEGED OPERATIONS ako napriklad CREATE/DELETE DATABASE, alebo CREATE/DELETE CONTAINER. AZURE ODMIETNE tieto operacie vykonavane cez ENTRA ID AUTHENTICATION.
!!!!! 26. CLASS [CosmosClient] je THREAD SAFE.
27. CLASS [Database] reprezentuje DATABASE v AZURE COSMOS DATABASE. CLASS ma nasledujuce MEMBERS.
   A. PROPERY [string Id] obsahuje nazov DATABASE.
   B. PROPERY [CosmosClient Client] obsahuje instanciu CLASS [CosmosClient].
   !!! C. METHOD [Container GetContainer(string ID)] vracia instanciu na CLASS [Container]. METHOD NIJAKO NEOVERUJE ci dany CONTAINER naozaj existuje, alebo nie.
   D. METHOD [Task<ContainerResponse> CreateContainerAsync(ContainerProperties ContainerProperties, ThroughputProperties ThroughputProperties, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara CONTAINER v danej DATABASE.
   E. METHOD [Task<ResponseMessage> CreateContainerStreamAsync(ContainerProperties ContainerProperties, ThroughputProperties ThroughputProperties, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara CONTAINER v danej DATABASE.
   F. METHOD [Task<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties ContainerProperties, ThroughputProperties ThroughputProperties, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara CONTAINER v danej DATABASE, ak CONTAINER neexistuje.
   G. METHOD [Task<DatabaseResponse> DeleteAsync(RequestOptions RequestOptions, CancellationToken CancellationToken)] vykona DELETE DATABASE.
   H. METHOD [Task<DatabaseResponse> ReadAsync(RequestOptions RequestOptions, CancellationToken CancellationToken)] cita instanciu CLASS [DatabaseProperties] z DATABASE.
   I. METHOD [Task<ResponseMessage> ReadStreamAsync(RequestOptions RequestOptions, CancellationToken CancellationToken)] cita instanciu CLASS [DatabaseProperties] z DATABASE.
   J. METHOD [Task<DatabaseResponse> DeleteAsync(RequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava DELETE instancie CLASS [DatabaseProperties] v DATABASE.
   !!! K. METHOD [User GetUser(string ID)] vracia instanciu na CLASS [User]. METHOD NIJAKO NEOVERUJE ci dany USER naozaj existuje, alebo nie.
   L. METHOD [Task<UserResponse> CreateUserAsync(string ID, RequestOptions RequestOptions, CancellationToken CancellationToken)] vytvara noveho USER v DATABASE.
   M. METHOD [Task<UserResponse> UpsertUserAsync(string ID, RequestOptions RequestOptions, CancellationToken CancellationToken)] vykona INSERT noveho, alebo UPDATE existujuceho USER v DATABASE.
   N. METHOD [FeedIterator<TType> GetContainerQueryIterator<TType>(QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vykona SELECT ITEMS pomocou SQL QUERY nad danym CONTAINER a vrati ITERATOR nad RESULT SET.
   O. METHOD [FeedIterator GetContainerQueryStreamIterator(QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vykona SELECT ITEMS pomocou SQL QUERY nad danym CONTAINER a vrati ITERATOR nad RESULT SET.
28. CLASS [Container] reprezentuje CONTAINER v AZURE COSMOS DATABASE. CLASS ma nasledujuce MEMBERS.
   1. PROPERY [string Id] obsahuje nazov CONTAINER.
   2. PROPERY [Database Database] obsahuje instanciu CLASS [Database].
   3. METHOD [Task<ContainerResponse> DeleteContainerAsync(ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] vykona DELETE CONTAINER z DATABASE.
   4. METHOD [Task<ResponseMessage> DeleteContainerStreamAsync(ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] vykona DELETE CONTAINER z DATABASE.
   5. METHOD [Task<ContainerResponse> ReadContainerAsync(ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] cita instanciu CLASS [ContainerProperties] z CONTAINER.
   6. METHOD [Task<ResponseMessage> ReadContainerStreamAsync(ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] cita instanciu CLASS [ContainerProperties] z CONTAINER.
   7. METHOD [Task<ContainerResponse> ReplaceContainerAsync(ContainerProperties ContainerProperties, ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava REPLACE instancie CLASS [ContainerProperties] z CONTAINER.
   8. METHOD [Task<ResponseMessage> ReplaceContainerStreamAsync(ContainerProperties ContainerProperties, ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava REPLACE instancie CLASS [ContainerProperties] z CONTAINER.
   9. METHOD [Task<ContainerResponse> DeleteContainerAsync(ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava DELETE instancie CLASS [ContainerProperties] z CONTAINER.
   10. METHOD [Task<ResponseMessage> DeleteContainerStreamAsync(ContainerRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava DELETE instancie CLASS [ContainerProperties] z CONTAINER.
   11. METHOD [Task<ResponseMessage> CreateItemStreamAsync(Stream StreamPayload, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava INSERT ITEM do CONTAINER.
   12. METHOD [Task<ItemResponse<TType>> CreateItemAsync<TType>(TType Item, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava INSERT ITEM do CONTAINER.
   13. METHOD [Task<ResponseMessage> ReadItemStreamAsync(string ID, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava SELECT ITEMS v CONTAINER.
   14. METHOD [Task<ItemResponse<TType>> ReadItemAsync<TType>(string ID, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken cancellationToken)] vykonava SELECT ITEMS v CONTAINER.
   15. METHOD [Task<ResponseMessage> UpsertItemStreamAsync(Stream StreamPayload, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava INSERT noveho ITEM, alebo UPDATE existujuceho ITEM v CONTAINER.
   16. METHOD [Task<ItemResponse<TType>> UpsertItemAsync<TType>(TType Item, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava INSERT noveho ITEM, alebo UPDATE existujuceho ITEM v CONTAINER.
   17. METHOD [Task<ResponseMessage> ReplaceItemStreamAsync(Stream StreamPayload, string ID, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava UPDATE existujuceho ITEM v CONTAINER.
   18. METHOD [Task<ItemResponse<TType>> ReplaceItemAsync<TType>(TType Item, string ID, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava UPDATE existujuceho ITEM v CONTAINER.
   19. METHOD [Task<ItemResponse<TType>> PatchItemAsync<TType>(string ID, PartitionKey PartitionKey, IReadOnlyList<PatchOperation> PatchOperations, PatchItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava PATCH existujuceho ITEM v CONTAINER.
   20. METHOD [Task<ResponseMessage> PatchItemStreamAsync(string ID, PartitionKey PartitionKey, IReadOnlyList<PatchOperation> PatchOperations, PatchItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava PATCH existujuceho ITEM v CONTAINER.
   21. METHOD [Task<ResponseMessage> DeleteItemStreamAsync(string ID, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava DELETE existujuceho ITEM v CONTAINER.
   22. METHOD [Task<ItemResponse<TType>> DeleteItemAsync<TType>(string ID, PartitionKey PartitionKey, ItemRequestOptions RequestOptions, CancellationToken CancellationToken)] vykonava DELETE existujuceho ITEM v CONTAINER.
   23. METHOD [FeedIterator GetItemQueryStreamIterator(QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vykona SELECT ITEMS pomocou SQL QUERY nad danym CONTAINER a vrati ITERATOR nad RESULT SET.
   24. METHOD [FeedIterator<TType> GetItemQueryIterator<TType>(QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vykona SELECT ITEMS pomocou SQL QUERY nad danym CONTAINER a vrati ITERATOR nad RESULT SET.
   25. METHOD [FeedIterator GetItemQueryStreamIterator(FeedRange FeedRange, QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vykona SELECT ITEMS pomocou SQL QUERY nad danym CONTAINER a vrati ITERATOR nad RESULT SET.
   26. METHOD [FeedIterator<TType> GetItemQueryIterator<TType>(FeedRange FeedRange, QueryDefinition QueryDefinition, string ContinuationToken, QueryRequestOptions RequestOptions)] vykona SELECT ITEMS pomocou SQL QUERY nad danym CONTAINER a vrati ITERATOR nad RESULT SET.
   !!! 27. METHOD [IOrderedQueryable<TType> GetItemLinqQueryable<TType>(bool AllowSynchronousQueryExecution, string ContinuationToken, QueryRequestOptions RequestOptions, CosmosLinqSerializerOptions LinqSerializerOptions)] vytvori LINQ QUERY nad ITEMS v danom CONTAINER.
   !!! 28. METHOD [TransactionalBatch CreateTransactionalBatch(PartitionKey PartitionKey)] vytvori instanciu CLASS [TransactionalBatch], ktora umoznuje vykonavat OPERATIONS nad danym CONTAINER a PARTITION KEY transakcnym sposobom.
   29. METHOD [Task<ResponseMessage> DeleteAllItemsByPartitionKeyStreamAsync(PartitionKey PartitionKey, RequestOptions RequestOptions, CancellationToken CancellationToken)] vykona DELEETE vsetkych ITEMS v CONTAINER s danym PARTITION KEY.
   !!! 30. METHOD [ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder<TTYpe>(string ProcessorName, ChangesHandler<TTYpe> OnChangesDelegate)] vytvara BUILDER, ktory umoznuje vytvorit instanciu CHANGE FEED PROCESSOR, ktory umoznuje monitoring zmien ITEMS v CONTAINERS.
29. CLASS [ChangeFeedProcessor] reprezentuje CHANGE FEED PROCESSOR v AZURE COSMOS DATABASE. CHANGE FEED PROCESSOR umoznuje monitorovat zmeny ITEMS v CONTAINERS. CLASS ma nasledujuce MEMBERS.
   A. METHOD [Task StartAsync()] spusta monitoring zmien ITEMS v CONTAINER.
   A. METHOD [Task StopAsync()] zastavuje monitoring zmien ITEMS v CONTAINER.
30. AZURE COSMOS DATABASE podporuje rozne CONSISTENCY LEVELS. Pre CONSISTENCY LEVELS platia nasledujuce fakty.
   A. CONSISTENCY LEVEL, akym sposobom sa budu ITEMS ulozene v AZURE COSMOS DATABASE replikovat do roznych replik.
   B. CONSISTENCY LEVEL sa urcuje na urovni AZURE COSMOS DATABASE ACCOUNT, no je ho mozne zmenit v lubovolnom case.
   C. V .NET je CONSISTENCY LEVEL mozne definovat pomocou PROPERTY [ConsistencyLevel ConsistencyLevel] CLASS [CosmosClientOptions].
   D. AZURE COSMOS DATABASE podporuje nasledujuce CONSISTENCY LEVELS.
      A. CONSISTENCY LEVEL [Strong].
      B. CONSISTENCY LEVEL [BoundedStaleness].
      C. CONSISTENCY LEVEL [Session].
      D. CONSISTENCY LEVEL [ConsistentPrefix].
      E. CONSISTENCY LEVEL [Eventual].
   !!! E. Volba CONSISTENCY LEVEL zasadne ovplyvnuje PERFORMANCE.
31. Pre CONSISTENCY LEVEL [Strong] platia nasledujuce fakty.
   A. CONSISTENCY LEVEL [Strong] sa nastavuje pomocou VALUE [ConsistencyLevel.Strong].
   B. CONSISTENCY LEVEL [Strong] garantuje, ze kazda WRITE ITEM OPERATION bude okamzite replikovana na vsetky repliky a READ ITEM OPERATIONS vzdy vratia vysledok posledej WRITE ITEM OPERATION. Je to analogia distribuovanej transakcie.
   !!! C. Pri CONSISTENCY LEVEL [Strong] pri kazdej WRITE ITEM OPERATION je tato WRITE ITEM OPERATION vykonana na vsetkych replikach, pricom WRITE ITEM OPERATION skonci, az po potvrdeni uspesneho vykonania WRITE ITEM OPERATION na vsetkych replikach.
   D. CONSISTENCY LEVEL [Strong] je najpomalsi.
32. Pre CONSISTENCY LEVEL [BoundedStaleness] platia nasledujuce fakty.
   A. CONSISTENCY LEVEL [BoundedStaleness] sa nastavuje pomocou VALUE [ConsistencyLevel.BoundedStaleness].
   B. CONSISTENCY LEVEL [BoundedStaleness] garantuje, ze vysledok WRITE ITEM OPERATION sa prenesie na vsetky repliky do maximalne stanoveneho TIMEOUT. Pred uplynutim tohto TIMEOUT mozu byt repliky nekonzistentne, kedy READ ITEM OPERATIONS nemusia vratit vysledok poslednej WRITE ITEM OPERATION. No po ulynuti TIMEOUT su vsetky repliky v konzistentnom stave a READ ITEM OPERATIONS vracaju vysledok poslednej WRITE ITEM OPERATION.
   C. CONSISTENCY LEVEL [BoundedStaleness] ma vyssiu PERFORMANCE ako CONSISTENCY LEVEL [Strong], no za cenu existenciu nekonzistancii v datach pocas stanoveneho TIMEOUT.
33. Pre CONSISTENCY LEVEL [Session] platia nasledujuce fakty.
   A. CONSISTENCY LEVEL [Session] sa nastavuje pomocou VALUE [ConsistencyLevel.Session].
   !!! B. CONSISTENCY LEVEL [Session] garantuje, ze vysledok WRITE ITEM OPERATION v ramci tej istej SESSION bude bude replikovany na ostatne repliky ku ktorym je z danej SESSION pristupovane. To znamena, ze ak v SESSION sa vykona WRITE ITEM OPERATION na jednej replike a nasledne READ ITEM OPERATION na inej replike, tak READ ITEM OPERATION vrati vysledok poslednej WRITE ITEM OPERATION. No pre rozdielne SESSIONS tato garancia NEPLATI. Tie aj napriklad uspesnemu vykonaniu WRITE ITEM OPERATION mozu pri READ ITEM OPERATION z inej repliky ziskat starsie data, nie vysledok poslednej WRITE ITEM OPERATION.
   C. CONSISTENCY LEVEL [Session] sa pouziva, ak PROGRAM potrebuje v ramci jednej SESSION pristupovat k roznym replikam a potrebuje mat konzistentne data.
34. Pre CONSISTENCY LEVEL [ConsistentPrefix] platia nasledujuce fakty.
   A. CONSISTENCY LEVEL [ConsistentPrefix] sa nastavuje pomocou VALUE [ConsistencyLevel.ConsistentPrefix].
   !!! B. CONSISTENCY LEVEL [ConsistentPrefix] garantuje, ze PREFIX daneho ITEM, ktoreho dlzku je mozne nastavit, bude vzdy konzistentne replikovany na ostatne repliky. To znamena, ze v pripade WRITE ITEM OPERATION bude PREFIX daneho ITEM okamzite replikovany na ostatne repliky, takze nasledne READ ITEM OPERATIONS dostanu PREFIX daneho ITEM z poslednej WRITE ITEM OPERATIONS. No zbytok ITEM nema garantovane, ze bude aktualny.
   C. CONSISTENCY LEVEL [ConsistentPrefix] sa pouziva pri LOG PROGRAMS, kde je potrebne, aby PROGRAM mal dostupne najnovsie LOG RECORDS, ale nie je nutne okamzita replikacia celeho LOG medzi replikami.
35. Pre CONSISTENCY LEVEL [Eventual] platia nasledujuce fakty.
   A. CONSISTENCY LEVEL [Eventual] sa nastavuje pomocou VALUE [ConsistencyLevel.Eventual].
   B. CONSISTENCY LEVEL [Eventual] garantuje, ze kazda WRITE ITEM OPERATION bude v nejakom case napokon replikovana na ostatne repliky, no negarantuje kedy to bude. To znamena, ze nasledne READ ITEM OPERATIONS mozu z inych replik vycitat starsie data, ak vysledok poslednej READ ITEM OPERATION este nebol replikovany na vsetky repliky.
   C. CONSISTENCY LEVEL [Eventual] je najrychlejsi, no garancia konzistencie je najpomalsia.
36. Pre PARTITION KEYS platia nasledujuce vlastnosti.
   A. PARTITION KEY je ITEM PROPERTY, ktora urcuje do ktorej logicke PARTITION bude dany ITEM ulozeny.
   B. AZURE COSMOS DB uklada ITEMS do rozdielnych logicky PARTITIONS, na zakladne hodnoty PARTITION KEY.
   C. PARTITION KEY PROPERTY sa definuje pri vytvarani CONTAINER definovanim PATH k PARTITION KEY PROPERTY.
   !!!!! D. PARTITION KEY NIE JE TO ISTE, ako ID PROPERTY daneho ITEM. Platia nasledujuce fakty.
      A. Kazdy ITEM MUSI obsahovat ako ID PROPERTY, tak aj PARTITION KEY PROPERTY.
      !!!!! B. ID PROPERTY je unikatny identifikator ITEM v ramci danej PARTITION. To znamena, ze v danom CONAINER sa moze nachadzat aj VIACERO ITEMS s tou istou hodnotou ID PROPERTY, ak sa tieto ITEMS nachadzaju v odlisnych logickych PARTITIONS.
      !!! C. QUERY, ktora sa vykonava nad oboma ID PROPERTY a PARTITION KEY PROPERTY sa nazyva POINT READ OPERATION. POINT READ OPERATION je NAJEFEKTIVNEJSIA mozna QUERY v AZURE COSMOS DB.
   E. Maximalna velkost logickej PARTITION je stanovena na 20 GB.
   !!! F. Ak je logicka PARTITION zaplnena, tak sa do nej nedaju pridavat dalsie ITEMS, az kym niektore existujuce ITEMS nie su odstranene.
   !!! G. AZURE COSMOS DB NEVYKONAVA automaticky REPARTIONING, kde by automaticky prehadzovala items do inych PARTITIONS, ak sa existujuca PARTITION zaplni. To je nutne vykonat manualne vytvorenim noveho CONTAINER.
   H. Spravne zvoleny PARTITION KEY moze zvysit QUERY PERFORMANCE, pretoze QUERIES, ktore su vykonavane nad viacerymi PARITIONS su vykonavana PARALELNE.
   I. PARTITION KEY je v .NET reprezentovany pomocou CLASS [PartitionKey].
   !!!!! J. Priklady PARTITION KEYS.
      A. Ako PARTITION KEY pre informacie o CUSTOMERS moze byt zvolena PROPERTY [Country], ktora bude distribuovat ITEMS podla toho v ktorej COUNTRY sa dany CUSTOMER nachadza.
      B. Ako vhodny PARTITION KEY moze byt aj samotny CUSTOMER ID. To ma vyznam vtedy, ak pre daneho CUSTOMER ukladaju v CONTAINER informacie rozneho TYPU, ako napriklad NAME PARAMETER, CONTACT PARAMETER, BILLING PARAMETERS, pricom kazda informacia je definovana ako iny typ ITEM, no vsetky maju ROVNAKY CUSTOMER ID ako PARTITION KEY. V takom pripade su vsetky ITEMS o danom CUSTOMER ulozene v tej iste logickej PARTTITION.
37. AZURE COSMOS DATABASE podporuje INDEXING. Pre INDEXING platia nasledujuce fakty.
   A. INDEXES mozu byt vytvarane na jednotlive COLUMNS v AZURE COSMOS DATABASE.
   B. INDEXES zvysuju QUERIES PERFORMANCE a znizuju mnozstvo RESOURCES potrebnych na vykonanie QUERIES.
   !!! C. INDEXES spomaluju WRITE OPERATIONS nad AZURE COSMOS DATABASE.
   !!!!! D. BY-DEFAULT, AZURE COSMOS DATABASE vytvara INDEX pre kazdu PROPERTY vsetkych ITEMS, ktore su ulozene v CONTAINER.
   !!! E. Ak DEFAULT INDEXING nevyhovuje, INDEXES pre COLUMNS mozu byt CUSTOMIZED aplikovanim INDEXING POLICIES.
   F. AZURE COSMOS DATABASE podporuje nasledujuce typy indexov.
      A. RANGE INDEX.
      B. SPATIAL INDEX.
      C. COMPOSITE INDEX. INDEX je tvoreny viacerymi COLUMNS.
   G. AZURE COSMOS DATABASE podporuje nasledujuce mody indexov.
      A. CONSISTING INDEXING MODE. Pri tomto MODE su pri kazdej WRITE ITEM OPERATION vykonane UPDATES vsetkych INDEXES, skor nez je WRITE ITEM OPERATION ukoncena.
      B. LAZY INDEXING MODE. Pri tomto MODE je najprv dokoncene vykonavanie WRITE ITEM OPERATION a az neskor su nad ITEM vytvorene aj INDEXES.
38. AZURE COSMOS DATABASE podporuje monitoring zmein ITEMS v CONTAINERS pomocou CHANGE FEED PROCESSORS. Pre CHANGE FEED PROCESSORS platia nasledujuce fakty.
   A. CHANGE FEED PROCESSOR umoznuje monitoring zmien (INSERT a UPDATE) ITEMS v CONTAINERS.
   B. CHANGE FEED PROCESSOR po detekovany zmeny ITEM v CONTAINER vyvola zaregistrovany DELEGATE, kde je mozne zmenu ITEM v CONTAINER spracovat.
   C. CHANGE FEED PROCESSOR je reprezentovany CLASS [ChangeFeedProcessor].
   D. CHANGE FEED PROCESSOR sa vytvara pomocou METHOD [ChangeFeedProcessorBuilder Container.GetChangeFeedProcessorBuilder<TTYpe>(string ProcessorName, ChangesHandler<TTYpe> OnChangesDelegate)].
39. V AZURE COSMOS DATABASE sa moze vyskytnut COLD START PROBLEM. Pre COLD START PROBLEM platia nasledujuce fakty.
   A. COLD START PROBLEM sposobuje pomale vytvorenie CONNECTION medzi CLIENT a AZURE COSMOS DATABASE, ak AZURE COSMOS DATABASE nebola dlhsiu dobu pouzita. V takom pripade trva uvodne nadviazanie CONNECTION dlho.
   B. COLD START PROBLEM sposobuje komplikovana inicializacia CONNECTION, ktora zahrna nasledujuce kroky.
      A. ENDPOINT DISCOVERY. CLASS [CosmosClient] musi kontaktovat AZURE SERVERS na zistenie v ktorych LOCATIONS sa dana AZURE COSMOS DATABASE nachadza.
      B. CONNECTION ESTABLISHMENT. CLASS [CosmosClient] musi nadviadzat CONNECTION s V AZURE COSMOS DATABASE vytvorenim TCP CONNECTION ci HTTPS CONNECTION.
      C. METADATA RETRIEVAL. CLASS [CosmosClient] musi stiahnut z AZURE COSMOS DATABASE METADATA o DATABASES, CONTAINERS a CONFIGURATIONS.
      D. CACHING. CLASS [CosmosClient] po nacitani potrebnych dat ich ulozi do CACHE, aby nemusela tieto data znova nacitavat.
   C. COLD START PROBLEM je mozne riesit METHOD [Task<CosmosClient> CosmosClient.CreateAndInitializeAsync(string AccountEndpoint, string AuthKeyOrResourceToken, IReadOnlyList<(string DatabaseId, string ContainerId)> Containers, CosmosClientOptions CosmosClientOptions, CancellationToken CancellationToken)], ktora dopredu vykona celu INITIALIZATION CLASS [CosmosClient].
40. AZURE COSMOS DATABASE podporuje nasledujuce typy CONNECTION MODES.
   A. GATEWAY CONNECTION MODE.
   B. DIRECT CONNECTION MODE.
41. Pre GATEWAY CONNECTION MODE platia nasledujuce fakty.
   A. GATEWAY CONNECTION MODE je realizovana cez HTTPS PROTOCOL cez PORT 443.
   B. GATEWAY CONNECTION MODE sa pouziva vtedy, ak FIREWALL je nastaveny na blokovanie nestandardnych PORTS, a preto komunikacia musi prebiehat cez HTTPS PROTOCOL a PORT 443.
   C. GATEWAY CONNECTION MODE je pomalsia ako DIRECT CONNECTION.
   D. GATEWAY CONNECTION MODE sa nastavuje pomocou nastavenim [CosmosClientOptions.ConnectionMode] na VALUE [ConnectionMode.Gateway].
42. Pre DIRECT CONNECTION MODE platia nasledujuce fakty.
   A. DIRECT CONNECTION MODE je realizovana cez HTTPS PROTOCOL a TCP PROTOCOL.
   B. DIRECT CONNECTION MODE vyzaduje, aby boli otvorene aj nestandardne PORTS na FIREWALL.
   C. DIRECT CONNECTION MODE je rychlejsi ako GATEWAY CONNECTION MODE.
   D. DIRECT CONNECTION MODE sa nastavuje pomocou nastavenim [CosmosClientOptions.ConnectionMode] na VALUE [ConnectionMode.Direct].
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - COSMOS DB ACCOUNTS.

1. COMMAND [az cosmosdb create --name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --default-consistency-level CONSISTENCY_LEVEL --kind KIND --locations LOCATIONS_PARAMETERS --enable-free-tier USE_FREE_TIER].
   A. COMMAND vytvara novy AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--default-consistency-level CONSISTENCY_LEVEL] vo VALUE [CONSISTENCY_LEVEL] obsahuje DEFAULT CONSISTENCY LEVEL.
   E. OPTION [--kind KIND] vo VALUE [KIND] obsahuje typ AZURE COSMOS DB DATABASE ACCOUNT.
   !!! F. OPTION [--locations LOCATIONS_PARAMETERS] vo VALUE [LOCATIONS_PARAMETERS] obsahuje LOCATION PARAMETERS. LOCATION PARAMETERS ma SYNTAX [KEY_1=VALUE_1 ... KEY_N=VALUE_N]. Prikladom je VALUE [regionName=centralus failoverPriority=0 isZoneRedundant=false].
   G. OPTION [--enable-free-tier USE_FREE_TIER] vo VALUE [USE_FREE_TIER] urcuje ci sa ma pouzit FREE TIER.
2. COMMAND [az cosmosdb delete --name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND odstranuje existujuci AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
3. COMMAND [az cosmosdb show --name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND zobrazuje podrobnosti o AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
4. COMMAND [az cosmosdb list --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vracia zoznam vsetkych AZURE COSMOS DB DATABASE ACCOUNTS.
   B. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
5. COMMAND [az cosmosdb keys list --name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --type KEY_TYPE].
   A. COMMAND vracia zoznam AZURE COSMOS DB DATABASE ACCOUNT KEYS.
   B. OPTION [--name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--type KEY_TYPE] vo VALUE [KEY_TYPE] urcuje typ pozadovaneho AZURE COSMOS DB DATABASE ACCOUNT KEY. VALUE [connection-strings] vracia CONNECTION STRINGS, VALUE [keys] vracia KEYS a VALUE [read-only-keys] vracia READ ONLY KEYS.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - COSMOS DB ROLES.

1. COMMAND [az cosmosdb sql role assignment create --account-name ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --principal-id PRINCIPAL_ID --role-definition-id ROLE_DEFINITION_ID --scope SCOPE].
   A. COMMAND prideluje novu ROLE danemu AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   !!! D. OPTION [--principal-id PRINCIPAL_ID] vo VALUE [PRINCIPAL_ID] je PRINCIPAL ID daneho CREDENTIAL. Pre USER je PRINCIPAL ID mozne ziskat PARAMETER [id], ktory vracia COMMAND [az ad app list].
   !!!!! E. OPTION [--role-definition-id ROLE_DEFINITION_ID] vo VALUE [ROLE_DEFINITION_ID] ROLE ID. ROLE ID sa da zikat z PROPERTY [id], ktoru vracia COMMAND [az cosmosdb sql role definition list].
   !!! F. OPTION [--scope SCOPE] vo VALUE [SCOPE] je SCOPE pre ktory ma byt ROLE aplikovana. Ak je SCOPE samotny AZURE COSMOS DB DATABASE ACCOUNT, tak VALUE sa ziskat z PROPERTY [id], ktoru vrati COMMAND [az cosmosdb show].
2. COMMAND [az cosmosdb sql role assignment delete --account-name DB_ACCOUNT_NAME --resource-group DB_ACCOUNT_NAME --role-assignment-id ROLE_ASSIGNMENT_ID].
   A. COMMAND odstranuje existujucu ROLE z daneho AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   !!! D. OPTION [--role-assignment-id ROLE_ASSIGNMENT_ID] vo VALUE [ROLE_ASSIGNMENT_ID] obsahuje ROLE ASSIGMENT ID. ROLE ASSIGMENT ID je mozne ziskat volanim z PROPERTY [id], ktoru vracia COMMAND [az cosmosdb sql role assignment list --account-name mycosmosaccountta --resource-group Chapter08].
3. COMMAND [az cosmosdb sql role assignment list --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vracia zoznam ROLES pridelenych danemu AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
4. COMMAND [az cosmosdb sql role definition list --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vracia zoznam ROLE, ktore su podporovane pre dany AZURE COSMOS DB DATABASE ACCOUNT.
   B. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - COSMOS DB DATABASES.

1. COMMAND [az cosmosdb sql database create --name DATABASE_NAME --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vytvara novu AZURE COSMOS DB DATABASE.
   B. OPTION [--name DATABASE_NAME] vo VALUE [DATABASE_NAME] obsahuje nazov DATABASE.
   C. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
2. COMMAND [az cosmosdb sql database delete --name DATABASE_NAME --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND odstranuje existujucu AZURE COSMOS DB DATABASE.
   B. OPTION [--name DATABASE_NAME] vo VALUE [DATABASE_NAME] obsahuje nazov DATABASE.
   C. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
3. COMMAND [az cosmosdb sql database list --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME].
   A. COMMAND vracia zoznam existujucich AZURE COSMOS DB DATABASES.
   B. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
AZURE CLI COMMANDS - COSMOS DB CONTAINERS.

1. COMMAND [az cosmosdb sql container create --name CONTAINER_NAME --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --database-name DATABASE_NAME --partition-key-path PARTITION_KEY_PATH].
   A. COMMAND vytvara novy AZURE COSMOS DB CONTAINER.
   B. OPTION [--name CONTAINER_NAME] vo VALUE [CONTAINER_NAME] obsahuje nazov CONTAINER.
   C. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   E. OPTION [--database-name DATABASE_NAME] vo VALUE [DATABASE_NAME] obsahuje nazov DATABASE.
   F. OPTION [--partition-key-path PARTITION_KEY_PATH] vo VALUE [PARTITION_KEY_PATH] obsahuje PATH k PARTITION KEY.
2. COMMAND [az cosmosdb sql container delete --name CONTAINER_NAME --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --database-name DATABASE_NAME].
   A. COMMAND odstranuje existujuci AZURE COSMOS DB CONTAINER.
   B. OPTION [--name CONTAINER_NAME] vo VALUE [CONTAINER_NAME] obsahuje nazov CONTAINER.
   C. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   D. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   E. OPTION [--database-name DATABASE_NAME] vo VALUE [DATABASE_NAME] obsahuje nazov DATABASE.
3. COMMAND [az cosmosdb sql container list --account-name DB_ACCOUNT_NAME --resource-group RESOURCE_GROUP_NAME --database-name DATABASE_NAME].
   A. COMMAND vracia zoznam existujucich AZURE COSMOS DB CONTAINERS.
   B. OPTION [--account-name DB_ACCOUNT_NAME] vo VALUE [DB_ACCOUNT_NAME] obsahuje nazov AZURE COSMOS DB DATABASE ACCOUNT.
   C. OPTION [--resource-group RESOURCE_GROUP_NAME] vo VALUE [RESOURCE_GROUP_NAME] urcuje RESOURCE GROUP NAME.
   D. OPTION [--database-name DATABASE_NAME] vo VALUE [DATABASE_NAME] obsahuje nazov DATABASE.
//----------------------------------------------------------------------------------------------------------------------