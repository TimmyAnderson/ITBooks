//----------------------------------------------------------------------------------------------------------------------
1. Solution popisuje rozne typy WEB APIs.
2. WEB API je API, ktore bezi na WEBE.
3. V minulosti WEB API pouzivalo PROTOCOL SOAP postaveny nad XML. SOAP sa ale ukazal ako prilis komplikovany a narocny na mnozstvo prenesenych dat.
4. WCF interne pre HTTP komunikaciu pouzival SOAP.
5. Alternativou k SOAP je REST.
6. REST je ARCHITECTURAL STYLE ako maju byt dizajnovane WEB API. Nejedna sa o PROTOCOL. REST je NEZAVISLY na PROTOCOLE.
7. REST nazera na WEB SYSTEM ako na kolekciu RESOURCES, kde RESOURCES su identifikovane WEB ADDRESS, ktora obsahuje unikatny identifikator daneho RESOURCE. RESOURCE zaroven moze odkazovat linky na ine RESOURCES.
8. REST je zalozeny na nasledujucich pravidlach pre vyvoj REST API.
   A. REST je zalozeny na principe CLIENT SERVER.
   B. REST je STATELESS.
   C. REST umoznuje CACHEABILITY.
   D. REST je LAYERED SYSTEM, kde CLIENT a SERVER ako su vzajomne CONNECTED a cez kolko komunikacnych LAYERS komunikacia prechadza.
   E. REST umoznuje SERVERU na poziadanie odosielat CODE na CLIENTA.
   F. REST poskytuje UNIFORM INTERFACE cez jasne definovane MESSAGES.
9. Aj ked REST nie je priamo viazany na HTTP ci JSON, implementacia REST APIs najcastejsie pouziva protokoly HTTP a JSON.
10. OpenAPI je REST API SPECIFICATION, ktora umoznuje popis REST APIs. Pre OpenAPI platia nasledujuce fakty.
   A. OpenAPI umoznuje strojove spracovanie popisu REST APIs ako aj zobrazenie popisu REST API pouzivatelom.
   B. Popularna implementacia OpenAPI je SWAGGER.
11. Alternativou implementacie WEB APIs pomocou REST je implementacia WEB APIs pomocou RPC.
12. Pre RPC platia nasledujuce fakty.
   A. RPC vystavuje silne typove INTERFACES, ktore vykonavaju COUPLING medzi CLIENT a SERVER.
   B. RPC INTERFACE obsahuje zoznam OPERATIONS, ktore je mozne pomocou RPC vykonat.
   C. RPC definuje univerzalny PROTOCOL pre prenos silne typovych PARAMETERS, RETURN VALUES a ERRORS.
   D. RPC INTERFACE je popisany pomocou INTERFACE DEFINITION LANGUAGE (IDL).
   E. IDLs pre RPC obsahuje TOOLS pre generovanie CLIENT SIDE a SERVER SIDE CODE na vygenerovanie TEMPLATES pre RPC INTERFACES.
13. FRAMEWORK [gRPC] je popularna implementacia RPC cez WEB.
14. FRAMEWORK [gRPC] ma nasledujuce FEATURES.
   A. FRAMEWORK [gRPC] interne pouziva PROTOCOL BUFFER FILES na definovanie API INTERFACES. PROTOCOL BUFFER je nezavisly na LANGUAGE a PLATFORM.
   B. PROTOCOL BUFFER je BINARY FORMAT, ktory je mensi ako JSON.
   C. FRAMEWORK [gRPC] je postaveny nad HTTP/2 PROTOCOL, ktory umoznuje BIDIRECTIONAL STREAMING.
   D. Pre definovanie API INTERFACE je nutne vytvorit FILE [.proto], ktory obsahuje definiciu INTERFACE ako aj MESSAGES. Z FILE [.proto] je pomocou roznych TOOLS mozne generovat STUBS pre rozlicne PROGRAMMING LANGUAGES.
   E. FRAMEWORK [gRPC] je SECURE. Interne pouziva HTTP/2 PROTOCOL, ktory interne pouziva TRANSPORT LAYER SECURITY (TLS).
15. Vyhody FRAMEWORK [gRPC] oproti REST.
   A. FRAMEWORK [gRPC] definuje typovo bezpecne INTERFACES.
   B. FRAMEWORK [gRPC] je rychlejsi ako REST.
   !!! C. FRAMEWORK [gRPC] sa pouziva na implementaciu vysoko vykonnych MICROSERVICES, ktore su volane inymi MICROSERVICES, ale NIE su volane priamo z BROWSERS.
16. Nevyhody FRAMEWORK [gRPC] oproti REST.
   !!!!! A. FRAMEWORK [gRPC] zavisi na HTTP/2 PROTOCOL a nema nativnu podporu v BROWSERS. BROWSERS sice maju implementovany HTTP/2 PROTOCOL ale neumoznuju jeho kontrolu do takej miery, aby ju bolo mozne vyuzit na volanie gRPC INTERFACES.
   B. PROTOCOL BUFFER je BINARY PROTOCOL a tym padom nie je HUMAN READABLE.
   C. FRAMEWORK [gRPC] vykonava TIGHT COUPLING medzi CLINET a SERVER podobne ako je to pri volani beznych FUNCTIONS. Aj vymena poradia PARAMETERS sposobi, ze INTERFACE nie je COMPATIBLE.
   D. FRAMEWORK [gRPC] neumoznuje CACHING, kedze pouziva POST METHOD.
17. INTERFACES vo FRAMEWORK [gRPC] sa definuje vo FILE [.proto], ktory predstavuje INTERFACE DEFINITION LANGUAGE. FILE ma nasledujuce casti.
   A. Definiciu INTERFACE, ktora obsahuje METHODS, ktore INTERFACE vystavuje.
   B. Definiciu MESSAGES, ktore predstavuju REQUEST MESSAGES a RESPONSE MESSAGES jednotlivych METHODS. Pre MESSAGES platia nasledujuce fakty.
      A. MESSAGES obsahuju zoznam FIELDS.
	  B. Kazdy FIELDS ma definovany TYPE a poradove cislo FIELD s MESSAGE.
	  C. FIELDS mozu byt aj typu ARRAY.
18. FRAMEWORK [GraphQL] je alternativny sposob vytvarania WEB APIs. FRAMEWORK [GraphQL] riesi nasledujuce problemy.
   A. OVER-FETCHING kedy REST API vracia zbytocne data, ako napriklad PROPERTIES, ktore CLIENT nepotrebuje.
   B. UNDER-FETCHING kedy REST API nevracia vsetky data, ktore CLIENT potrebuje a CLIENT preto musi vykonat viacero REQUESTS na REST API, aby ziskal vsetky potrebne data.
19. Pre FRAMEWORK [GraphQL] platia nasledujuce fakty.
   A. FRAMEWORK [GraphQL] definuje QUERY LANGUAGE, ktory umoznuje CLIENTS vytvarat dynamicke QUERIES voci SERVERS cim riesi problem OVER-FETCHING a UNDER-FETCHING.
   B. FRAMEWORK [GraphQL] je nezavisly na pouzitom LANGUAGE a DB STORAGE ENGINE.
   C. FRAMEWORK [GraphQL] SERVICE definuje RESOURCE TYPES, ktore maju FIELDS. Kazdy FIELD ma NAME a TYPE. FRAMEWORK [GraphQL] poskytuje FUNCTIONS na ziskanie jednotlivych FIELDS definovanych RESOURCE TYPES.
   D. FRAMEWORK [GraphQL] na rozdiel od REST APIs nepouziva FIXED DATA STRUCTURES, ale ENTITY GRAPHS.
   E. FRAMEWORK [GraphQL] vystavuje pre dany SERVICE iba 1 univerzalny ENDPOINT, ktory ma vacsinou URL [graphql].
   F. FRAMEWORK [GraphQL] umoznuje dynamicky definovat ake data CLIENT od SERVER vyzaduje.
   G. FRAMEWORK [GraphQL] SERVICE vykonava validaciu zaslanych QUERIES predtym ako su vykonane.
   H. FRAMEWORK [GraphQL] vyuziva JSON ako DATA FORMAT.
20. FRAMEWORK [GraphQL] popisuje SERVICES pomocou SCHEMAS. Pre SCHEMAS platia nasledujuce fakty.
   A. SCHEMAS su definovane pomocou SCHEMA DEFINITION LANGUAGE [GraphQL SDL].
   B. SCHEMA DEFINITION LANGUAGE [GraphQL SDL] je STRONGLY TYPED.
   C. SCHEMA DEFINITION LANGUAGE [GraphQL SDL] umoznuje definovat RESOURCE TYPES.
21. SCHEMA DEFINITION LANGUAGE [GraphQL SDL] definuje LANGUAGE pre ktory platia nasledujuce fakty.
   A. LANGUAGE umoznuje definovat QUERIES na ziskanie iba tych dat, ktore su potrebne. Tym zabranuje OVER-FETCHING a UNDER-FETCHING.
   B. LANGUAGE umoznuje modifikovat DATA pomocou MUTATIONS.
!!! 22. REST API, FRAMEWORK [gRPC] aj FRAMEWORK [GraphQL] su REQUEST-RESPONSE APIs.
23. Pre REAL TIME APIs platia nasledujuce fakty.
   A. REAL TIME APIs umoznuju aby obaja CLIENT aj SERVER iniciovali komunikaciu voci opacnej strane.
   B. REAL TIME APIs umoznuje SERVERS v REAL TIME odoslat data na CLIENTS.
   C. REAL TIME APIs redukuje pocet REQUESTS, kedze CLIENTS nemusia vykonat POLLING na zistenie EVENTS zo SERVERS.
24. Medzi REAL TIME APIs platia nasledujuce APIs.
   A. API [AJAX].
   B. API [SERVER SENT EVENTS].
   C. API [WebSockets].
   D. API [gRPC STREAMING].
   E. API [SignalR].
25. Pre API [AJAX] platia nasledujuce fakty.
   A. API [AJAX] niekedy oznacovany aj ako API [Comet] vyuziva LONG POLLING na implementaciu REAL TIME API.
   B. LONG POLLING pouziva klasicky REQUEST RESPONSE PATTERN, pricom vsak CLIENT odosiela REQUEST na ktory SERVER zasiela RESPONSE az ked vznikne REAL TIME EVENT. CLIENT po spracovani RESPONSE odosiela dalsi REQUEST.
   C. LONG POLLING vyzaduje aby SERVER si dlhodobo drzal otvorenu HTTP CONNECTION na CLIENT a ukoncil ju az ked pride EVENT.
   D. LONG POLLING vyzaduje, aby nasledujuce REQUESTS v tej istej SESSION boli odosielane na ten isty HTTP SERVER co limituje SCALABILITY.
   E. LONG POLLING nedokaze jednoducho garantovat poradie EVENTS.
   F. LONG POLLING je podporovany vacsinou BROWSERS.
   G. LONG POLLING vyuzivaju casto ine technologie ako BACKUP IMPLEMENTATION. API [SignalR] pouziva LONG POLLING ako BACKUP CONNECTION, ak nie system nepodporuje API [SERVER SENT EVENTS] ani API [WebSockets].
26. Pre API [SERVER SENT EVENTS] platia nasledujuce fakty.
   A. API [SERVER SENT EVENTS] umoznuje SERVERS odosielat REAL TIME EVENTS zaregistrovanym CLIENTS.
   B. API [SERVER SENT EVENTS] je interne postaveny na API [EventSource], ktore je sucastou HTTP 5 a je podporovany vsetkymi BROWSERS.
   C. API [SERVER SENT EVENTS] funguje nasledujucim sposobom.
      A. CLIENTS sa mozu zaregistrovat na odber EVENTS vytvorenim CONNECTION, ktora na SERVER vytvori JAVA SCRIPT OBJECT [EventSource].
	  B. Po registracii si SERVER drzi vsetky otvorene CONNECTIONS na CLIENTS a v pripade vyskytu EVENTS ich zasiela na jednotlive CLIENTS.
	  C. CLIENT sa moze odregistrovat volanim FUNCTION [EventSource.close()].
	  D. V pripade vypadku komunikacie je mozny RECONNECT, kedy CLIENT zasle pri RECONNECT HEADER [Last-Event-ID] obsahujuci ID posledneho spracovaneho EVENT. SERVER nasledne moze odoslat na CLIENT chybajuce EVENTS.
   !!! D. API [SERVER SENT EVENTS] je UNIDIRECTIONAL. To znamena, ze cez toto API iba SERVER moze zasielat EVENTS na CLIENTS, ale CLIENTS nemozu odosielat MESSAGES na SERVERS.
27. Pre API [WebSockets] platia nasledujuce fakty.
   A. API [WebSockets] je alternativny PROTOCOL voci HTTP, ktory poskytuje FULL DUPLEX BIDIRECTIONAL COMMUNICATION medzi CLIENT a SERVER.
   B. API [WebSockets] podobne ako HTTP vyuziva PORT 80 pre UNSECURE COMMUNICATION a PORT 443 pre SECURE COMMUNICATION.
   !!! C. API [WebSockets] je UNIVERZALNY PROTOCOL, kde MESSAGE CONTENT prenasanych MESSAGES moze byt lubovolny, podobne ako je tomu u TCP/IP. Na zabezpecenie BIDIRECTIONAL COMMUNICATION vratane registracie a odregistracie CLIENTS musi byt v ramci API [WebSockets] MESSAGES definovany SUBPROTOCOL.
   !!! D. Pre API [WebSockets]je definovanych viacero SUBPROTOCOLS, ktore umoznuju naviazat BIDIRECTIONAL COMMUNICATION medzi CLIENT a SERVER. To, ktory SUBPROTOCOL sa pouzije urci SUBPROTOCOL NEGOTIATION, ktory prebieha pri nadvazovani COMMUNICATION medzi CLIENT a SERVER.
   E. API [WebSockets] definuje URI SCHEMA [ws] pre UNSECURE COMMUNICATION a URI SCHEMA [wss] pre SECURE COMMUNICATION.
28. Pre API [gRPC STREAMING] platia nasledujuce fakty.
   A. API [gRPC STREAMING] vyuziva HTTP/2 PROTOCOL, ktory nativne umoznuje STREAMING.
   B. HTTP/2 PROTOCOL umoznuje na komunikaciu pouzit ten isty TCP/IP SOCKET, a nie je potrebne pre kazdy REQUEST-RESPONSE vytvarat novy SOCKET, ako je to v HTTP 1.1..
   C. HTTP/2 PROTOCOL umoznuje odosielat EVENTS zo SERVER na CLIENT bez toho, aby o to CLIENT musel explicitne ziadat.
   D. HTTP/2 PROTOCOL podporuje nasledujuce typy STREAMING.
      A. UNARY. STREAMING sa nevykonava.
	  B. CLIENT TO SERVER STREAMING.
	  C. SERVER TO CLIENT STREAMING.
	  D. BIDIRECTIONAL STREAMING.
   E. API [gRPC STREAMING] pouziva PROTOCOL BUFFER FORMAT co zabezpecuje maly OVERHEAD pri REAL TIME COMMUNICATION.
   !!! F. API [gRPC STREAMING] NEMA podporu v BROWSERS, pretoze FRAMEWORK [gRPC] nie je v BROWSERS podporovany. Je teda vhodny pre SERVICE TO SERVICE COMMUNICATION.
29. Pre API [SignalR] platia nasledujuce fakty.
   A. API [SignalR] je MICROSOFT .NET implementacia REAL TIME API, ktora interne vyuziva API [WebSockets], API [SERVER SENT EVENTS] a API [AJAX] (LONG POLLING).
   B. API [SignalR] automaticky vybera pre komunikaciu najlepsie mozne API v nasledujucom poradi.
      A. API [WebSockets].
	  B. API [SERVER SENT EVENTS].
	  C. API [AJAX] (LONG POLLING).
   C. Alternativou k API [SignalR] je API [gRPC STREAMING]. Pri vybere platia nasledujuce odporucania.
      A. API [SignalR] je podporovane vsetkymi BROWSERS a teda je univerzalne. API [gRPC STREAMING] NIE je mozne pouzit v BROWSERS.
	  B. API [gRPC STREAMING] je vykonnejsie a pri SERVICE TO SERVICE COMMUNICATION je efektivnejsie.
	  C. API [SignalR] aj API [gRPC STREAMING] maju dobru podporu v ASP.NET CORE.
//----------------------------------------------------------------------------------------------------------------------