//------------------------------------------------------------------------------
Task paralelizmus

1. Task paralelizmus je dekompozicia programu na paralelne tasks rozdelenim casti programu na tasks.
2. Vyuzitie Task paralelizmu znamena casto upravu programu aby tento mohol byt rozdeleny na tasks, ktore su vzajomne nezavisle a teda mozu byt vykonane paralelne.
3. Task paralelizmus je daleko daslie ako v pripade Data paralelizmu dekomponovat na konkretny pocet CPU, pretoze je dany charakterom programu.
!!! 4. Task paralelizmus zvycajne nevedie k tak vyraznemu urychleniu programu ako pri pouziti Data paralelizmu, kedze ten je mozne lepsie dekomponovat na jednotlive CPU, ako v pripade Data paralelizmu.

Fork Join paralelizmus

1. Fork Join je metoda, pri ktorej sa rozdeli (FORK) program na VZAJOMNE NEZAVISLE TASKS, ktore su vykonane PARALELNE a po skonceni ich vykonavania dochadza k zluceniu vysledku (JOIN).
2. Na ziskanie vzajomne nezavislych tasks je casto potrebne RESTRUKTURALIZOVAT PROGRAM tak aby tasks boli ozaj vzajomne nezavisle.

Futures

1. Future je specialny objekt, ktory reprezentuju V BUDUCNOSTI VYPOCITANU HODNOTU. Predstavuje SUBSTITUCIU za hodnotu, ktora este NEBOLA VYPOCITANA, avsak ak ju bude treba vypocitat, tak BUDE K DISPOZICII.
2. Future je objektom, ktoreho hodnota, ktoru ZAPUZDUJE sa POCITA NA POZADI (v paralelnom threade). Ak tuto hodnotu hlavny program potrebuje, tak poziada Future o hodnotu. V pripade, ze UZ BOLA VYPOCITANA, tak hlavny thread OKAMZITE ZISKA TUTO HODNOTU. V pripade, ze hodnota ESTE NIE JE VYPOCITANA, je HLAVNY THREAD BLOKOVANY POKYM HODNOTA NIE JE VYPOCITANA.

Promises

1. Promise je specialny objekt podobny Future, ktory vsak ABSTRAHUJE moment VYPOCTU NOVEJ HODNOTY. NERIESI vypocet zaradenim do ThreadQueue, ale poskytuje SETTER, ktorym moze PRODUCER hodnoty nastavit hodnotu ked je ta vypocitana.
2. Promise poskytuje abstrakciu typu Producer-Consumer.
3. Promise moze ALTERNATIVNE podporovat techniku VOLANIA CALLBACK, ktoru si Producer moze zaregistrovat a je volana hned po vypocitani hodnoty Promise. Takto ziskavam PODOBNY SYSTEM ako WF.
4. Viacero Promises (ale i Futures) je mozne spajat dohromady technikou pipelining. Problem tejto techniky je, ze nie je tak intuitivna a tazsie sa debuguje.

Rekurzia

1. Rekurziu je velmi casto mozne aplikovat paralelne, kedze zvycajne (i ked nie vzdy) su jednotlive iteracie rekurzie vzajomne nezavisle.
2. Pri pouziti paralelizmu v rekurzii je nutne dbat o to, aby pocet Threadov nenarastol prilis, pretoze to by viedlo k zniceniu efektivnosti programu, ba dokonca pri pouziti Thread Queue i k moznemu DEAD-LOCK, ked by pocet tasks prekrocil MAXIMALNY pocet threads v Thread Queue.
!!! 3. Casto sa pri paralelnej implementacii rekurzie pouziva kombinacia sekvencneho a paralelneho pristupu podla hlbky vnorenia v rekurzii.

Pipelines

1. Technika pipeline vychadza z myslienky vzajomne prepojenych Producer-Consumer na VIACERYCH UROVNIACH.
2. Pri pipeline su vzdy DVE SUSEDNE UROVNE SPRACOVANIA PROGRAMU - Producer-Consumer. Pod nimi mozu byt dalsie dvojice Producer-Consumer. Ak napriklad mam 6 urovni spracovania v pipelenie tak mam urovne Producer1-Consumer1, Producer2-Consumer2, Producer3-Consumer3.
!!! 3. Pipeline podla poctu Threads dedikovanej danej urovni sa delia nasledovne.
   A. Linear pipeline - kazda uroven ma ROVANKY POCET DEDIKOVANYCH THREADS.
   A. Non-Linear pipeline - kazda uroven ma TOZNY POCET DEDIKOVANYCH THREADS.
!!!!! 4. Klasickou implementaciu PIPELINE je POUZIVANIE TRHEADS v MOJICH PROGRAMOCH, kde sa vyuziva koncept VIACVRSTVOVEHO PRODUCER-CONSUMER PIPELINE.
//------------------------------------------------------------------------------