//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje spracovavanie EVENTS z HTML ELEMENTS v JavaScript.
2. JavaScript pouziva v HTML PAGES EVENT MODEL. Po nacitani celej WEB PAGE v LOAD PHASE nasleduje EVENT PHASE, kedy reakcie na EVENTS v HTML ELEMENTS vyvolavaju JavaScript FUNCTIONS, ktore spracovavaju dany EVENT.
3. V JavaScript je pri praci s EVENT mozne definovat nasledujuce pojmy.
   A. EVENT TYPE (EVENT NAME) je TYPE daneho EVENTU. Urcuje ake PARAMETRES sa budu prenasat do EVENT HANDLER.
   B. EVENT TARGET je OBJECT pre ktory je EVENT vyvolavany. Najcastejsie su EVENTS vyvolavane na OBJECT TYEPES Window, Document a Element.
   C. EVENT HANDLER je FUNCTION, ktora sa vyvola ako reakcia na vzniknuty EVENT. EVENT HANDLER ma 1 PARAMETER typu Event (mazyvany aj EVENT OBJECT), ktory ma PROPERTY 'type' obsahujucu STRING s EVENT TYPE. V IE su EVENT HANDLERS BEZPARAMETRICKE a EVENT OBJECT je ulozeny v PROPERTY Window.event.
   !!! D. EVENT OBJECT je OBJECT, ktoreho TYPE je zavisly od EVENT TYPE. Obsahuje PROPERTY 'type' obsahujuci informacie o TYPE daneho EVENT a potom EVENT SPECIFIC PROPERTIES, ktore su pre kazdy EVENT TYPE ine. Vsetky EVENT OBJECTS dedia z CLASS Event.
   !!! E. EVENT PROPAGATION je proces pri ktorom sa urcuje, ktore EVENT HANDLERS sa budu volat. EVENTS sa mozu vyvolavat nielen na HTML ELEMENT, ktory ich generoval, ale pomocou BUBBLING sa mozu vyvolat na PARENT HTML ELEMENTS. BUBBLING je mozne zastavit nastavenim prislusnej PROPERTY, alebo volanim prislusnej METHOD na EVENT OBJECT.
   F. CAPTURING EVENT je zachytenie EVENT este PREDTYM ako sa EVENT zasle do EVENT TARGET.
   G. DEFAULT ACTION je EVENT HANDLER, ktory sa vola pre urcite typy EVENTS. Napriklad pri LINKS DEFAULT EVENT HANDLER sposobi presun WEB BROWSER na novu WEB PAGE. DEFAULT EVENT HANDLER je mozne v EVENT HANDLER POTLACIT.
4. EVENT HANDLERS v JavaScript je mozne asociovat s EVENT PROPERTIES nasledujucimi sposobmi.
   A. Priradenim EVENT HANDLER do EVENT PROPERTY v HTML.
   B. Priradenim JavaScript kodu volajuceho EVENT HANDLER (alebo iba kodom obsahujucim EVENT HANDLER) do EVENT PROPERTY v JavaScript. Kod zadany do HTML JavaScript OBALI ANONYMNOU FUNCTION, ktoru zavola pri vyskyte EVENT. EVENT, ktore patria Window OBJECT sa definuju v HTML ELEMENT <body>.
   C. Volanim METHOD Element.addEventListener(). Tato METHOD umoznuje zaregistrovat VIACERO EVENT HANDLERS pre jeden EVENT. EVENT NAME NESMIE mat PREFIX 'on'. FUNCTION Element.addEventListener() ma 3 PARAMETERS. Prvy PARAMETER urcuje EVENT NAME, druhy PARAMETER definuje EVENT HANDLER a treti PARAMETER urcuje ci EVENT HANDLER bude volany ako CAPTURING EVENT, alebo ako normalny EVENT. Ako JEDINY SPOSOB registracie EVENT HANDLERS umoznuje registrovat CAPTURING EVENT HANDLERS.
   D. Volanim IE SPECIFICKEJ METHOD Element.attachEvent(). Tato METHOD umoznuje zaregistrovat VIACERO EVENT HANDLERS pre jeden EVENT. EVENT NAME MUSI mat PREFIX 'on'.
!!! 5. METHOD Element.removeEventListener() ODSTRANUJE EVENT HANDLER zaregistrovany volanim Element.addEventListener().
!!! 6. METHOD Element.detachEventListener() ODSTRANUJE EVENT HANDLER zaregistrovany volanim Element.attachEvent().
7. Pre EVENT HANDLERS platia nasledujuce fakty.
   A. EVENT HANDLERS maju 1 PARAMETER typu Event nazyvany aj EVENT OBJECT. V IE vsak su BEZPARAMETRICKE a EVENT OBJECT je ulozeny v PROPERTY Window.event.
   B. EVENT OBJECT ma PROPERTY 'type', obsahujuci PROPERTY TYPE.
   !!! C. V EVENT HANDLER KEYWORD 'this' AK bol EVENT HANDLER ZAREGISTROVANY v priradenim FUNCTION do EVENT, alebo volanim Element.addEventListener() odkazuje na OBJECT reprezentujuci HTML ELEMENT. To znamena, ze EVENT HANDLER je volany ako METHOD Element OBJECT.
   !!! D. V EVENT HANDLER KEYWORD 'this' AK bol EVENT HANDLER ZAREGISTROVANY v HTML kode napisanim kodu EVENT HANDLER priamo do text HTML ELEMENT bude odkazovat na Window OBJECT.
   !!!!! E. Ak je EVENT HANDLER zaregistrovany PRIRADENIM EVENT HANDLER do EVENT PROPERTY v JavaScript, tak jeho RETURN VALUE ma VYZNAM. Napriklad v EVENT 'onkeypress' BOOLEAN RETURN VALUE urcuje ci sa CHAR dalej bude spracovavat - napriklad pri TEXTBOX ci sa vlozi do TEXTBOX. Ak vsak je EVENT HANDLER zaregistrovany INYM SPOSOBOM (napriklad cez Element.addEventListener()), tak RETURN VALUE sa IGNORUJE a NAMIESTO TOHO je treba zavolat METHOD preventDefault() na zablokovanie DEFUALT ACTION, alebo nastavit PROPERTY Event.returnValue na prislusnu RETURN VALUE.
8. Ak je na dany EVENT zaregistrovanych VIACERO EVENT HANDLERS poradie ich volania je nasledujuce.
   A. EVENT HANDLERS zaregistrovane priradenim do EVENT PROPERTY su volane VZDY ako PRVE.
   B. EVENT HANDLERS zaregistrovane volanim Element.addEventListener() su volane v poradi v akom boli registrovane.
   C. EVENT HANDLERS zaregistrovane volanim Element.attachEvent() su volane v NAHODNOM PORADI.
!!! 9. Vacsina EVENT HANDLERS podporuje EVENT BUBBLING. To znamena, ze po zavolani EVENT HANDLER na HTML ELEMENT, ktory EVENT sposobil su volane EVENT HANDLERS vyssie v DOM TREE smerom k ROOT.
!!! 10. Pri CAPTURING EVENT HANDLERS su tieto BUBBLED OPACNYM SMEROM od ROOT smerom k HTML ELEMENT, ktory EVENT vyvolal.
!!!!! 11. CAPTURING EVENT HANDLERS je mozne zaregistrovat JEDINE pomocou METHOD Element.addEventListener().
12. EVENT CANCELLATION je mozne vykonat nasledujucimi sposobmi.
   A. Ak EVENT HANDLER bol zaregistrovany priradenim EVENT HANDLER do EVENT v JavaScript, tak RETURN VALUE typu BOOLEAN urcuje ci DEFAULT EVENT HANDLER bude, alebo nebude volany.
   B. Ak EVENT HANDLER bol zaregistrovany INYM SPOSOBOM ako priradenim EVENT HANDLER do EVENT v JavaScript, tak volanim METHOD Event.preventDefault(), alebo v IE nastavenim PROPERTY Event.returnValue je mozne zabranit vykonaniu DEFAULT EVENT HANDLER.
13. METHOD Event.stopPropagation() zabranuje v EVENT BUBBLING. V IE existuje alternativna PROPERTY Event.cancelBubble, ktorej nastavenie na TRUE zabrani EVENT BUBBLING.
14. DOM definuje nasledujuce EVENT, ktore je mozne zachytavat pri WEB PAGE LOADING.
   A. EVENT DOMContentLoaded je volany, ked ked CELA WEB PAGE je PARSED, avsak ASYNCHRONNE OPERACIE (napriklad stahovanie IMAGES) este NEMUSI BYT DOKONCENE.
   B. EVENT Window.onload je volany, ked CELA WEB PAGE je PARSED a VSETKY ASYNCHRONNE OPERACIE (napriklad stahovanie IMAGES) je DOKONCENE.
   C. EVENT Document.onreadystatechange je volana pri KAZDEJ ZMENE PROPERTY Document.readyState.
15. DOM podporuje nasledujuce MOUSE EVENTS.
   A. EVENT Element.click je genericky EVENT, ktory je volani pri stlaceni tlacitka MOUSE.
   B. EVENT Element.contextmenu je volany pri zobrazeni CONTEXT MENU. Zvycajne je to pri stlaceni PRAVEHO tlacitka MOUSE.
   C. EVENT Element.dblclick je volany pri DOUBLE CLICK.
   D. EVENT Element.mousedown je volany pri stlaceni tlacitka.
   E. EVENT Element.mouseup je volany pri uvolneni tlacitka.
   F. EVENT Element.mouseover je volany pri vstupe MOUSE do ELEMENT.
   G. EVENT Element.mouseout je volany pri odchode MOUSE z ELEMENT.
   H. EVENT Element.mouseenter je volany pri vstupe MOUSE do ELEMENT. EVENT je NON-BUBBLING.
   I. EVENT Element.mouseleave je volany pri odchode MOUSE z ELEMENT. EVENT je NON-BUBBLING.
   J. EVENT Element.mousewheel je volany pri pootoceni MOUSE WHEEL.
16. MOUSE EVENT obsahuju EVENT OBJECT MSEventObj, ktory ma nasledujuce MEMBERS.
   A. PROPERTY clientX urcuje X poziciu MOUSE POINTER voci CONTAINING WINDOW.
   B. PROPERTY clientY urcuje Y poziciu MOUSE POINTER voci CONTAINING WINDOW.
   C. PROPERTY altKey urcuje ci bol stlaceny ALT pri vzniku MOUSE EVENT.
   D. PROPERTY ctrlKey urcuje ci bol stlaceny CONTROL pri vzniku MOUSE EVENT.
   E. PROPERTY shiftKey urcuje ci bol stlaceny SHIFT pri vzniku MOUSE EVENT.
   F. PROPERTY metaKey urcuje ci bol stlaceny META KEY pri vzniku MOUSE EVENT.
   G. PROPERTY button urcuje TYPU BUTTON POINTER, ktory bol stlaceny.
   H. PROPERTY wheelDelta, resp. wheelDeltaX a wheelDeltaY urcuju zmenu pozicie MOUSE WHEEL.
!!! 16. WEB BROWSERS STANDARDNE podporuju PRIMITIVNY DRAG and DROP. Tento DRAG and DROP sa tyka presunu SELECTED TEXT napriklad to TEXTBOX.
!!!!! 17. JavaScript podporuje aj CUSTOMIZED DRAG and DROP a to nasledujucim sposobom.
   A. Ak ma HTML ELEMENT sluzit ako DRAG SOURCE, musi mat nastavenu PROPERTY Element.draggable na 'true'.
   !!! B. Ak sa pouzivatel spusti DRAGGING a DRAG SOURCE zavola sa EVENT 'dragstart'. EVENT OBJECT MSEventObj ma PROPERTY 'dataTransfer' odkazujucu na OBJECT typu DataTransfer umoznujucu nastavit parametre DATA SOURCE prenasaneho cez DRAG and DROP.
   C. V EVENT HANDLER EVENTU Element.dragStart je NUTNE volat METHOD DataTransfer.setData() na specifikovanie dat, ktore sa budu pomocou DRAG and DROP prenasat. Ako PRVY PARAMETER je TYP DAT (napriklad 'Text') a DRUHY PARAMETER su SAMOTNE DATA prenasane cez DRAG and DROP.
   D. V EVENT HANDLER EVENTU Element.dragStart je MOZNE nastavit PROPERTY DataTransfer.effectAllowed na STRING CONSTANTS, ktore ucruju, aky TYPE DRAG and DROP OPERACIE (COPY, MOVE, LINK) sa ma vykonat.
   E. V EVENT HANDLER EVENTU Element.dragStart je MOZNE volat METHOD DataTransfer.setDragImage() na nastavenie IMAGE, ktory bude vizualnou reprezentaciou objektu prenasaneho cez DRAG and DROP.
   F. Pocas vykonavania DRAGGING je na DRAG SOURCE HTML ELEMENT volany EVENT Element.drag. Tento EVENT sa spravidla vyuziva napriklad na zmenu IMAGE reprezentujuceho DRAG OBJECT, ale v praxi sa pouziva malo.
   !!! G. Po vykonani DROP je na DRAG SOURCE HTML ELEMENT volany EVENT Element.dragend. Tento EVENT sa vyuziva napriklad pri vykonavani operacie MOVE, kedy sa po vykonani DROP musi DRAG SOURCE VYMAZAT.
   !!!!! H. Ked pocas DRAGGING vstupi MOUSE POINTER na HTML ELEMENT, je volany EVENT Element.dragenter. Ak chce HTML ELEMENT oznamit WEB BROWSER, ze MOZE SLUZIT ako DRAG TARGET (ak podporuje TYPE daneho DRAG OBJECT), MUSI vykona CANCELLATION EVENTU Element.dragenter. IBA ak je CANCELLATION VYKONANY, budu tomuto HTML ELEMENT zasielane i dalsie DRAG and DROP EVENTS.
   I. Ak MOUSE POINTER sa pohybuje po DRAG TARGET (HTML ELEMENT, ktory vykonal CANCELLATION EVENT Element.dragenter) je na TARGET ELEMENT volany EVENT Element.dragover. I tento EVENT MUSI byt CANCELED, ak ma DRAGGING pokracovat.
   J. Ak MOUSE POINTER OPUSTI DRAG TARGET (HTML ELEMENT, ktory vykonal CANCELLATION EVENT Element.dragenter), je na TARGET ELEMENT volany EVENT Element.dragleave. Tento EVENT zvycajne ZRUSI VIZUALNU SIGNALIZACIU, ak nejaku nastavil EVENT Element.dragenter.
   !!! K. Pri DROP na DROP TARGET je volany na DROP TARGET EVENT Element.drop. V EVENT HANDLER je mozne vybrat data, ktore cez DRAG and DROP boli prenasane pomocou METHOD DataTransfer.getData(). Ako PARAMETER METHHOD DataTransfer.getData() je TYP prenasanych dat.
18. EVENT Element.keypress je volany pri stlaceni klavesy reprezentujucej PRINTABLE CHARACTER. Platia prenho nasledujuce zasady.
   A. EVENT moze byt CANCELED, kedy sa POTLACI volanie DEFAULT EVENT HANDLER. Pri TEXTBOX to napriklad znamena, ze za CHARACTER NEVYPISE do TEXTBOX.
   B. EVENT OBJECT zaslany do EVENT HANDLER obsahuje PROPERTY 'keyCode', ktora obsahuje UNICODE hodnotu daneho CHARACTER. Tutu na normalny CHARACTER je mozne konvertovat volanim String.fromCharCode().
19. EVENT Element.keydown je volany pri stlaceni klavesy. Pri DRZANI klavesy je volany OPAKOVANE. EVENT OBJECT obsahuje PROPERTY 'keyCode', ktoru je treba pomocou String.fromCharCode() konverovat na normalny CHARACTER.
20. EVENT Element.keyup je volany pri uvolneni stlacenej klavesy. EVENT OBJECT obsahuje PROPERTY 'keyCode', ktoru je treba pomocou String.fromCharCode() konverovat na normalny CHARACTER.
//-------------------------------------------------------------------------------------------------------