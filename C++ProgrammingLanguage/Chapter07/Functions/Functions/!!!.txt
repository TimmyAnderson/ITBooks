//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie FUNCTIONS.
2. C++ podporuje INLINE FUNCTIONS. Tieto FUNCTIONS oznacene KEYWORD 'inline' moze C++ interpretovat ako INLINE FUNCTION, kde TELO FUNCTION je PRIAMO VLOZENE na MIESTO VOLANIA. Je to optimalizacny mechanizmus, ktory KOMPILATOR MOZE RESPEKTOVAT, ale i IGNOROVAT.
3. INLINE FUNCTIONS su reprezentovane ako BEZNE FUNCTIONS, ktore maju okrem ineho i STATIC VARIABLES a svoju ADRESU cez ktoru sa je mozne na INLINE FUNCTION REFEROVAT.
4. STATIC VARIABLES definovane na urovni FUNCTION su GLOBALNE VARIABLES, ktore su asociovane s danou FUNCTION. Su v pamati IBA RAZ pre VSETKY VOLANIA danej FUNCTION.
5. ARRAYS su v C++ VZDY prenasane BY-POINTER a teda namiesto prenasania kopie ARRAY sa prenasa vzdy iba 1. ITEM.
!!! 6. Vysledkom prenasania ARRAYS v C++ je STRATA VELKOSTI ARRAY pri prenose do FUNCTION.
!!! 7. Ak chcem preniest do FUNCTION REFERENCIU, pricom pri prenose ARGUMENTU do FUNCTION je POTREBNA KONVERZIA pri ktorej je vytvarana TEMP VARIABLE, tak C++ umozni prekomilovat kod IBA ak FUNCTION ma PARAMETER typu CONST-REFERENCE. Ak je NON-CONST REFERENCE, tak hodi CHYBU, lebo vo funkcii by sa modifikovala TEMP PREMENNA a NIE SKUTOCNY ARGUMENT, ktory som do FUNCTION chcel preniest. C++ GENERUJE CHYBU preto, kedze takato technika, aj ked nesposobi chybu pamate, tak ZNEPREHLADNUJE KOD.
8. Operacia vratenia RETURN VALUE je IDENTICKA s operaciou PRIRADENIA pri ktorej dochadza ku kontrole typov a konverzii.
!!!!! 9. Aj ked FUNCTION je typu 'VOID', tak MOZEM POUZIT [return(OtherFunction(Params))] ak OtherFunction() vracia 'VOID'. Tato trochu NELOGICKA SYNTAX je dolezita pri tvorbe TEMPLATES.
!!!!! 10. C++ umoznuje v TELE FUNCTION zapisat DEKLARACIU FUNCTION napriklad [void PrintValue(double Value);]. Toto sa moze s VYHODOU POUZIT ak chcem deklarovat, ktora VERZIA OVERLOADED FUNCTION sa ma v tele danej FUNCTION VOLAT.
11. V C++ je mozne deklarovat FUNCTION, ktora ma VARIABILNY POCET PARAMETROV pomocou TOKENU '...'. Na citanie parametrov takychto FUNCTIONS je potrebne pouzit MAKRA definovane v <cstdarg> nasledujucim sposobom.
   A. Makro 'va_list' deklaruje POMOCNU LOKALNU PREMENNU pouzivanu pocas vycitavania PARAMETROV.
   B. Pomocou makra 'va_start' ZACINAM citanie PARAMETROV. Ako 2. PARAMETER musi ma POSLEDNY POMENOVANY PARAMETER FUNCTION.
   C. Jednotlive PARAMETRE sa vyberaju pomocou makra 'va_arg', kde 2. PARAMETER musi byt TYPOM na ktory dany PARAMETER obsahuje.
   !!! D. Po ukonceni citania VARIABILNYCH PARAMETROV je NUTNE volat makro 'va_end' INAK MOZE DOJST k NARUSENIU PAMATE. Je to dosledok toho, ze makro 'va_start' MOZE MODIFIKOVAT STACK sposobom pri ktorom NEBUDE MOZNE VYKONAT RETURN z FUNCTION. Volanie makra 'va_end' vracia STACK do POVODNEJ PODOBY.
12. V C++ na FUNCTION je mozne vykonat iba operaciu VOLANIA a ZISTENIA ADRESY.
!!! 13. Zistenie adresy FUNCTION je mozne pomocou operatora '&'. Jeho pouzitie vsak NIE JE NUTNE. Staci na PRAVU STRANU vyyrazu dat meno FUNCTION a C++ AUTOMATICKY DOPLNI OPERATOR '&'.
!!! 14. Volanie FUNCTION na ktoru sa referujem adresou sa realizuje pomocou operatora '*'. Jeho pouzitie vsak NIE JE NUTNE. Ak na LAVE STRANE VYRAZU dam meno FUNCTION, tak C++ AUTOMATICKY DOPLNI OPERATOR '*'.
!!! 15. POINTER na FUNCTION musi ma PRESNE TIE ISTE PARAMETRE a RETURN VALUE ako FUNCTION, ktore adresu chcem do daneho POINTER ULOZIT.
!!! 16. POINTER na FUNCTION je mozne ziskat aj ak je dana FUNCTION OVERLOADED.
!!!!! 17. C++ NEUMOZNUJE ZIADNE KONVERZIE medzi POINTERS na FUNCTION s ROZLICNYMI PROTOTYPMI. Prototyp musi PRESNE ZODPOVEDAT POINTER na FUNCTION.
!!! 18. V C++ by sa MACRA mali pouzivat co NAJMENEJ. Obchadzaju totizto typovu kontrolu a zaroven komplikuju cinnost rozlicnych TOOLS pri interpretacii kodu obsahujuceho MACRO.
19. Pre MACRO v C++ platia nasledujuce pravidla.
   A. MACRO sa interpertuje PREPROCESSOROM, ktory NAHRADI TEXT SOURCE CODE OBSAHOM MACRO.
   B. MACRO moze ma PARAMETRE, alebo moze byt BEZPARAMETRICKE.
   C. MACRO s PARAMETRAMI NIE JE REKURZIVNE.
   D. MACRO s PARAMETRAMI NEMOZE mat OVERLOADED VERZIE.
   E. MACRO OPERATOR '##' umoznuje ZLUCIT 2 HODNOTY do 1 RETAZCA v SOURCE CODE. Ak pouzijem za HODNOTU MACRO PARAMETER tak zluci MACRO PARAMETER do 1 RETAZCA v SOURCE CODE. OPERATOR '##' je s vyhodou mozne pouzit napriklad pre vytvaranie ZLOZENYCH MIEN CLASSES, ktore su tvorene nazvami 2 MACRO PARAMETROV.
!!! 20. Direktiva #undef RUSI DEKLARACIU existujuceho MACRO. Platnost rusi v CELOM SUBORE, NIELEN od MIESTA POUZITIA DIRAKTIVY #undef.
//-------------------------------------------------------------------------------------------------------