//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
// !!!!! PRIMARY TEMPLATE CLASS pre DISABLE CASE.
template<bool, typename TType=void>
struct STypeTraitEnableIfType final
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS SPECIALIZATION pre ENABLE CASE.
template<typename TType>
struct STypeTraitEnableIfType<true,TType> final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													TYPE=TType;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS ALIAS.
// !!!!! Pre ENABLE CASE vracia TYPE [TType].
// !!!!! Pre DISABLE CASE vracia COMPILER ERROR. Ten je mozny vyuzit pri aplikacii SFINAE.
template<bool CONDITION, typename TType=void>
using															STypeTraitEnableIfAlias=typename STypeTraitEnableIfType<CONDITION,TType>::TYPE;
//----------------------------------------------------------------------------------------------------------------------