//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje STREAMS v STL.
2. STREAMS su v STL implementovane pomocou nasledujucich CLASSES.
   A. CLASS 'ios_base' je ZAKLADNY BASE CLASS celeho STREAM SUPPORT. Obsahuje napriklad podporu pre LOCALES, ci deklaraciu TYPES, ktore potom pouzivaju DERIVED CLASSES, EXCEPTION TYPES, ERRORS ci podporu formatovania. Obsahuje metody, ktore su NEZAVISLE na TYPE CHARS v ktorych sa ukladaju STREAMS a preto to NIE JE TEMPLATE CLASS.
   B. CLASS 'basic_ios<TType,TTraits>' dedi z 'ios_base' a obsahuje podporu nastavenia a citania ERROR FLAGS ci podporu formatovania.
   C. CLASS 'basic_istream<TType,TTraits>' dedi z 'basic_ios<TType,TTraits>' a obsahuje podporu INPUT OPERACII nad STREAMS.
   D. CLASS 'basic_ostream<TType,TTraits>' dedi z 'basic_ios<TType,TTraits>' a obsahuje podporu OUTPUT OPERACII nad STREAMS.
   E. CLASS 'basic_iostream<TType,TTraits>' dedi z 'basic_istream<TType,TTraits>' a 'basic_ostream<TType,TTraits>' a obsahuje podporu INPUT a OUTPUT OPERACII nad STREAMS.
   F. CLASS 'basic_ifstream<TType,TTraits>' dedi z 'basic_istream<TType,TTraits>' a obsahuje podporu INPUT OPERACII pre STREAMS nad FILES.
   G. CLASS 'basic_ofstream<TType,TTraits>' dedi z 'basic_ostream<TType,TTraits>' a obsahuje podporu OUTPUT OPERACII pre STREAMS nad FILES.
   H. CLASS 'basic_istringstream<TType,TTraits>' dedi z 'basic_istream<TType,TTraits>' a obsahuje podporu INPUT OPERACII pre STREAMS nad STRINGS.
   I. CLASS 'basic_ostringstream<TType,TTraits>' dedi z 'basic_ostream<TType,TTraits>' a obsahuje podporu OUTPUT OPERACII pre STREAMS nad STRINGS.
   J. CLASS 'basic_fstream<TType,TTraits>' dedi z 'basic_iostream<TType,TTraits>' a obsahuje podporu INPUT a OUTPUT OPERACII nad STREAMS nad FILES.
   K. CLASS 'basic_stringstream<TType,TTraits>' dedi z 'basic_iostream<TType,TTraits>' a obsahuje podporu INPUT a OUTPUT OPERACII nad STREAMS nad STRINGS.
   L. CLASS 'basic_streambuf<TType,TTraits>' je ZAKLADNY BASE CLASS pre podporu BUFFERINGU nad STREAMS.
   M. CLASS 'basic_filebuf<TType,TTraits>' dedi z 'basic_streambuf<TType,TTraits>' a obsahuje podporu BUFFERINGU nad FILES.
   N. CLASS 'basic_stringbuf<TType,TTraits>' dedi z 'basic_streambuf<TType,TTraits>' a obsahuje podporu BUFFERINGU nad STRINGS.
   O. CLASS 'cin' dedi z 'basic_istream<TType,TTraits>' a reprezentuje standardny CONSOLE INPUT STREAM.
   P. CLASS 'cout' dedi z 'basic_ostream<TType,TTraits>' a reprezentuje standardny CONSOLE OUTPUT STREAM.
   R. CLASS 'cerr' dedi z 'basic_ostream<TType,TTraits>' a reprezentuje standardny CONSOLE ERROR STREAM.
   S. CLASS 'clog' dedi z 'basic_ostream<TType,TTraits>' a reprezentuje standardny CONSOLE LOG STREAM.
!!! 3. STL obsahuje zo zakladnych STREAM CLASSES mnozstvo TYPEDEFS. Tu je priklad niektorych.
   A. TYPEDEF 'ostream' znamena [basic_ostream<char,char_traits<char>>].
   B. TYPEDEF 'istream' znamena [basic_istream<char,char_traits<char>>].
   C. TYPEDEF 'iostream' znamena [basic_iostream<char,char_traits<char>>].
   D. TYPEDEF 'wostream' znamena [basic_ostream<wchar_t,char_traits<wchar_t>>].
   E. TYPEDEF 'wistream' znamena [basic_istream<wchar_t,char_traits<wchar_t>>].
   F. TYPEDEF 'wiostream' znamena [basic_iostream<wchar_t,char_traits<wchar_t>>].
!!! 4. TYPEDEFS zo zakladnych STREAM CLASSES uz maju definovane TEMPLATE PARAMETRE. TEMPLATE PARAMETER 'TType' urcuje TYPE do ktoreho sa budu DATA v STREAMS UKLADAT.
!!! 5. Zakladnym nastrojom na READ a WRITE VALUES z a do STREAMS su GLOBALNE (NIE METHODS) PRETAZENE FUNCTION OPERATORS. Na READ zo STREAM sa pouziva OPERATOR>> a na WRITE do STREAM sa pouziva OPERATOR<<.
!!! 6. Ak chcem CUSTOM CLASS pouzit spolu so STREAMS MUSIM definovat GLOBALNE (NIE METHODS) PRETAZENE FUNCTION OPERATORS OPERATOR<< a OPERATOR>>.
!!!!! 7. Da sa povedat, ze ukladanie so STREAM je vlastne operacie SERIALIZACIE a citanie zo STREAMS je operacie DESERIALIZACIE. STREAMS v C++ teda primarne sluzia na SERIALIZACIU a DESERIALIZACIU OBJEKTOV do TEXTOVYCH STREAMS.
8. CLASS 'basic_istream<TType,TTraits>' ma nasledujuce MEMBERS.
   A. Metoda get() nacita zo STREAM 1-N znakov typu TType.
   B. Metoda read() nacita zo STREAM N znakov typu TType.
   C. Mnozina OPERATORS typu OPERATOR>>. Su pretazene pre VSETKY PRIMITIVNE TYPY.
   D. Metoda getline() cita LINE zo STREAM. V pretazenej verzii je mozne definovat TERMINATOR CHARACTER, ktory je DEFAULT nastaveny na NEW LINE.
   E. Metoda gcount() vracia POCET ZNAKOV, ktore nacitala posledna READ FUNKCIA.
   F. Metoda ignore() ignoruje 'N' ZNAKOV zo STREAM.
9. CLASS 'basic_ostream<TType,TTraits>' ma nasledujuce MEMBERS.
   A. Metoda put() zapise do STREAM 1 znak typu TType.
   B. Metoda write() zapise do STREAM N znakov typu TType.
   C. Mnozina OPERATORS typu OPERATOR<<. Su pretazene pre VSETKY PRIMITIVNE TYPY.
!!! 10. VACSINA IO METOD STREAM CLASSES NIE SU VIRTUALNE. Dovodom je PERFORMANCE. Podla mna je to KATASTROFALNY DESIGN celej STL.
!!! 11. Pri citani hodnot zo STREAMS sa standardne IGNORUJU WHITE CHARS. Toto je mozne zmenit volanim metody ios_base::unsetf(ios_base::skipws).
!!! 12. Pomocou metody ios_base::width() je mozne nastavit MAXIMALNY POCET ZNAKOV, ktore sa pri nasledujucom volani OPERATOR>> nacita zo STREAM. Volanie ios_base::width() trva IBA POCAS 1 NASLEDOVNEHO VOLANIA OPERATOR>>.
13. STREAMS si drzia interny STATE podla ktoreho je mozne identifikovat ci STREAM nie je v CHYBE. STATE je tvoreny nasledovnymi 4 FLAGS, ktore mozu byt nastavene.
   A. FLAG 'GOOD' je mozne identifikovat volanim metody basic_ios.good(). Znamena, ze POSLEDNA OPERACIA dopadla USPESNE.
   B. FLAG 'EOF' je mozne identifikovat volanim metody basic_ios.eof(). Znamena, ze POSLEDNA OPERACIA sa dostala na KONIEC STREAM.
   C. FLAG 'FAIL' je mozne identifikovat volanim metody basic_ios.fail(). Znamena, ze POSLEDNA OPERACIA ZLYHALA, ale STREAM je stale NEPOSKODENY. Prikladom je pokus o citanie zo STREAM v EOF STATE. Vtedy dojde k nastaveniu FAIL STATE.
   D. FLAG 'BAD' je mozne identifikovat volanim metody basic_ios.bad(). Znamena, ze POSLEDNA OPERACIA ZLYHALA, ale STREAM je POSKODENY.
14. STREAM STATE je mozne zistovat a menit nasledujucimi metodami CLASS 'basic_ios'.
   A. Metoda rdstate() vracia AKTUALNY STATE daneho STREAM.
   B. Metoda setstate() nastavuje AKTUALNY STATE daneho STREAM.
   C. Metoda clear() sluzi na nastavenie STATE do STATE 'GOOD'.
   D. Operator OPERATOR void*() vracia hodnotu metody fail() konvertovanu na VOID*. Teda ak fail() vrati TRUE, tak vracia NULL, inak vracia THIS POINTER.
   E. Operator OPERATOR!() vracia NEGACIU hodnoty, ktoru vracia metoda fail().
!!! 15. Pomocou metody ios_base.exceptions() je mozne NASTAVIT aj nacitat FLAGS pri ktorych vyskyte sa bude hadzat EXCEPTION typu 'ios_base::failure'. Tymto je mozne zmenit chovanie STREAMU, aby pri chybe namiesto iba zmeny STATE sa ZAROVEN aj hodila EXCEPTION.
16. Pomocou metody basic_ios.tie() je mozne zviazat INPUT a OUTPUT STREAMS. Po zviazani v pripade, ze ISTREAM je v UNDERFLOW stave (nema dost znakov pre INPUT hodnoty) je volany FLUSH pre OUTPUT. Ma to zmysel, ak chcem zadat hodnotu do 'wcin', ale predtym chcem vypisat nejaky text na 'wcout'. Kedze STREAMS pouzivaju BUFFERS, mohlo by sa stat, ze by sa vystup na 'wcout' vypisat AZ po citani vstupu z 'wcin'. Aby k tomu nedoslo, je nutne ZVIAZAT tieto STREAMS. STREAM 'wcin' a 'wcout' su takto zviazane BY DEFAULT.
17. STREAMS definuju CLASSES 'sentry'. Tieto CLASSES v CONSTRUCTORS i DESTRUCTORS rutinne cinnosti suvisiace so STREAMS ako napriklad zavolanie FLUSH nad ZVIAZANYM STREAM, ci hodenie EXCEPTIONS pri chybe.
18. STREAMS umoznuju nastavit CUSTOM FORMATTING. Na pracu s FORMATTING sa pouzivaju nasledujuce metody 'ios_base' CLASS.
   A. Metoda flags() umoznuje CITAT a NASTAVIT FORMATTING FLAGS pre dany STREAM.
   B. Metoda setf() umoznuje nastavit prislusne FORMATTING FLAGS. Verzia s 1. PARAMETROM funguje iba ak FORMATTING sa da dosiahnut nastaveni 1 FLAG. Ak je treba viac ako 1 FLAG je potrebne volat verziu s 2. PARAMETRAMI, kde 2. PARAMETER je MASKA, ktore TYPY FLAGS sa maju nastavit.
   C. Metoda unsetf() umoznuje zrusit nastavenie prislusnych FORMATTING FLAGS.
19. STREAMS podporuju nasledujuce typu FLAGS.
   A. FLAG 'ios_base::dec' sa nastavuje s MASK 'ios_base::basefield'. Sposobi, ze INT hodnoty sa budu vypisovat v DECIMAL tvare.
   B. FLAG 'ios_base::oct' sa nastavuje s MASK 'ios_base::basefield'. Sposobi, ze INT hodnoty sa budu vypisovat v OCTAL tvare.
   C. FLAG 'ios_base::hex' sa nastavuje s MASK 'ios_base::basefield'. Sposobi, ze INT hodnoty sa budu vypisovat v HEXA tvare.
   D. FLAG 'ios_base::scientific' sa nastavuje s MASK 'ios_base::floatfield'. Sposobi, ze FLOAT hodnoty sa budu vypisovat v SCIENTIFIC formate.
   E. FLAG 'ios_base::fixed' sa nastavuje s MASK 'ios_base::floatfield'. Sposobi, ze FLOAT hodnoty sa budu vypisovat v FIXED formate.
   F. FLAG 'uppercase' umoznuje nastavit UPPERCASE pri vypisovani EXPONENTU v SCIENTIFIC formate FLOAT hodnot.
   G. FLAG 'ios_base::left' sa nastavuje s MASK 'ios_base::adjustfield'. Sposobi, ze INT a FLOAT hodnoty, ktore maju MENEJ ZNAKOV ako hodnota definovana metodou width() budu zarovnane do LAVA.
   H. FLAG 'ios_base::right' sa nastavuje s MASK 'ios_base::adjustfield'. Sposobi, ze INT a FLOAT hodnoty, ktore maju MENEJ ZNAKOV ako hodnota definovana metodou width() budu zarovnane do PRAVA.
   I. FLAG 'ios_base::internal' sa nastavuje s MASK 'ios_base::adjustfield'. Sposobi, ze INT a FLOAT hodnoty, ktore maju MENEJ ZNAKOV ako hodnota definovana metodou width() vyplnovancie znaky (definuje sa metodou fill()) budu doplnene medzi ZNAMIENKO a HODNOTU.
20. Metoda iosbase::precision() umoznuje nastavit POCET ZNAKOV (celkovo, alebo za desatinnou ciarkou) pri FLOAT hodnotach vypisovanych do STREAMS.
!!! 21. Metoda iosbase::width() umoznuje nastavit MINIMALNY POCET ZNAKOV, ktore sa zapisu pri zapise INT ci FLOAT hodnot do STREAMS. Metoda ma platnost IBA pocas 1 VOLANIA OPERATORM<<.
22. Metoda iosbase::fill() umoznuje nastavit ZNAK, ktory sa pouzije na PADDING, ak pocet vypisovanych ZNAKOV je MENSI ako hodnota nastavena metodou width().
23. MANIPULATOR je mechanizmus, ktory umoznuje vykonavat operacie nad STREAMS ako napriklad nastavenie WIDTH, ci vykonanie FLUSH 'INLINE' SPOSOBOM, spolu s volaniami IO OPERATORS OPERATOR<< a OPERATOR>>. Napriklad [wcout << "XXX" << flush << "YYY"].
!!! 24. MANIPULATORS su realizovane pomocou PRETAZENYCH OPERATORS OPERATOR<< a OPERATOR>>, ktore beru ako parameter BUD POINTER to FUNCTION (v pripade BEZPARAMETRICKYCH MANIUPATORS), alebo REFERENCE to MANIPULATOR OBJECT (v pripade PARAMETRICKYCH MANIPULATORS).
!!! 25. PARAMETRICKE MANIPULATORS su definovane v <iomanip>. Bezparametricke v <istream>, <ostream> a <iostream>.
!!! 26. Definovanie CUSTOM MANIPULATORS je mozne vykonat v nasledujucich krokoch.
   A. Definujem CLASS, ktory bude drzat vsetky PROPERTIES daneho MANIPULATOR.
   B. Definujem OPERATOR<<, ktory berie ako 2. PARAMETER REFERENCIU na MANIPULATOR.
   C. V OPERATOR<< pouzijem hodnoty z MANIPULATOR na nastavenie STREAM, ktory ma OPERATOR<< ako 1. PARAMETER.
27. STL podporuje FILE a STRING STREAMS. Tieto STREAMS su INPUT-OUTPUT STREAMS a teda podporuju OPERATOR<< aj OPERATOR>>.
!!! 28. Zakladnym CLASS pre pracu s FILE STREAMS je CLASS 'basic_fstream<TType,TTraits>'. Ma nasledujuce MEMBERS.
   A. Metoda open() otvara FILE. V druhom parametri je mozne definovat ACCESS RIGHTS k FILE.
   B. Metoda close() uzatvara FILE.
   C. Metoda is_open() vracia informaciu ci FILE je otvoreny.
!!!!! 29. Ak dojde vo FILE STREAM dojde k nastaveniu FAIL, alebo BAD FLAGS, tak volanie metody close() TAKISTO SKONCI CHYBOU. V pripade povolenia EXCEPTION generuje close() EXCEPTION.
!!! 30. CLASS 'basic_fstream<TType,TTraits>' v DESTRUCTORE vola close() a teda ked OBJEKT 'basic_fstream<TType,TTraits>' je MIMO SCOPE, tak sa AUTOMATICKY uzatvori. V pripade 'wcin', 'wcout', 'wcerr' a 'wclog' su tieto STREAMS otvarane pri SPUSTENI PROCESU a uzatvarane pri UKOCENI PROCESU.
!!!!! 31. FILE STREAMS je PRISERNA BLBOST. Je to UPLNE NEPOUZITELNE.
32. CLASS 'basic_stringstream<TType,TTraits>' umoznuje pristupovat k 'string' a 'wstring' ako ku STREAMS. Pomocou metody str() je potom mozne ziskat hodnotu STRING v tvare 'string', alebo 'wstring'.
!!!!! 33. OBROVSKOU VYHODOU 'basic_stringstream<TType,TTraits>', ze sa don daju zapisovat i INT ci FLOAT hodnoty a tie potom konverovat na 'string', alebo 'wstring' bez toho, aby bolo treba alokovat PAMAT.
!!! 34. Vsetky STL STREAMS interne pouzivaju BUFFERING. Ten je implementovany pomocou CLASS 'basic_streambuf<TType,TTraits>' a zo STREAM je ho mozne ziskat volanim metody basic_ios<TType,TTraits>.rdbuf().
35. CLASS 'basic_streambuf<TType,TTraits>' pomocou metody underflow() cita ZNAKY z REALNEHO INPUT DEVICE do BUFFERA a pomocou metody overflow() zapisuje ZNAKY z BUFFERA do REALNEHO OUTPUT DEVICE.
36. CLASS 'ios_base' obsahuje metodu imbue() pomocou, ktorej je mozne zmenit LOCALE pre dany STREAM. Po zmene LOCALE bude STREAM pracovat v LOCALE, ktora mu bola pridelena. Viac informacii je v prikladoch z APPENDIX D.
!!! 37. Pomocou metody ios_base.register_callback() je mozne zaregistrovat CALLBACK, ktory sa vola pri ZMENE LOCALE, vykonany COPY FORMAT a VOLANI DESTRUCTOR nad STREAM objektom.
//-------------------------------------------------------------------------------------------------------