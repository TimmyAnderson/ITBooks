//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje SUBSETS a EXTENSIONS v JavaScripte.
2. JavaScript SUBSET je SUBSET funkcionality JavaScript. Vyuziva sa napriklad v SECURE prostrediach, kedy FEATURES JavaScript, ktore nie su povazovane za SECURE NESMU byt pouzite. V takomto pripade SUBSET definuje cast funkcionality JavaScript, ktora je SECURE a iba tu je mozne v SECURE prostrediach pouzivat.
3. EXTENSIONS su rozsirenia JavaScript, ktore NIE SU SUCASTOU STANDARDNU JavaScript a NEMUSIA byt podporovane VSETKYMI BROWSERS.
4. SUBSET 'JavaScript The Good Parts' je sada odporucani, ktore FEATURES JavaScript NEPOUZIVAT, aby bol kod CITATELNEJSI. Patri sem napriklad odporucanie NEPOUZIVAT 'with', OPERATOR== (namiesto neho pouzivat OPERATOR===), OPERATOR!= (namiesto neho pouzivat OPERATOR!==) ci odporucanie VZDY pouzivat za LOOPS ci IF prikazmi ZATVORKY {}, aj ked obsahuju iba 1 prikaz.
5. SUBSETS urcene na zvysenie SECURITY su nielen definovane, ale prislusne JavaScript prostredia vykonavaju STATICKU a DYNAMICKU kontrolu, ci RULES definovane SECURE SUBSET nie su porusovane.
6. EXTENSION 'const', ktory umoznuje definovat CONSTANT VARIABLES. JScript NEPODPORUJE tuto EXTENSION.
7. EXTENSION 'let', ktory umoznuje definovat LOKALNY SCOPE v ramci prikazov IF ci LOOPS, co STANDARDNY JavaScript NEUMOZNUJE (VARIABLE definovana v IF ci LOOP bloku je povazovana za VARIABLE definovanu na urovni CELEJ FUNCTION). JScript NEPODPORUJE tuto EXTENSION.
8. EXTENSION DESTRUCTION ASSIGNMENT, ktora je specialnym priradenim, kedy je mozne v JEDNOM ASSIGNMENT vykonat VIACERO PRIRADENI. Napriklad kod [[X,Y]=[100,200]] priradi do 'X' hodnotu 100 a do 'Y' hodnotu 200. JScript NEPODPORUJE tuto EXTENSION.
9. EXTENSION 'for-each' LOOP, ked namiesto iteracie PROPERTY NAMES (ako je to vo 'for-in') sa iteruju VALUES PROPERTIES. JScript NEPODPORUJE tuto EXTENSION.
10. EXTENSION ITERATOR podporuje ITERATORS v JavaScript. ITERATORS su OBJECTS, ktore obsahuju METHOD __iterator__(). Tato METHOD MUSI vratit OBJECT, ktory obsahuje METHOD next(). Ta vykonava ITERACIU, pricom ak je dosiahnuty POSLEDNY ITEM, tak MUSI hodit EXCEPTION StopIteration. Takyto ITERATOR je mozne pouzit v prikaze 'for-in', kde JavaScript AUTOMATICKY vola METHODS __iterator__() a next() a AUTOMATICKY UKONCI ITERACIU zachytenim EXCEPTION StopIteration. JScript NEPODPORUJE tuto EXTENSION.
!!! 11. EXTENSION 'yield' je ANALOGIOU 'yield' z C#. Umoznuje realizovat ITERATORS nasledujucim sposobom. JScript NEPODPORUJE tuto EXTENSION.
   A. ITERATOR FUNCTION ak vraci hodnotu cez 'yield', STAV FUNCTION sa ULOZI a pri DALSOM VOLANI pokracuje vo vykonavani do dalsieho vyskytu 'yield', do pouzitia [return;] (MUSI byt BEZ RETURN VALUE), alebo skoncenia ITERATOR FUNCTION.
   B. FUNCTION, ktora VOLA ITERATOR FUNCTION (FUNCTION pouzivajucu 'yield') pri PRVOM VOLANI vracia ITERATOR OBJECT obsahujuci STAV ITERATOR FUNCTION. Tento OBJECT ma METHOD next(), pomocou ktorej je mozne vykonavat dalsie ITERACIE.
   C. ITERATOR OBJECT ma aj METHOD close(), pomocou ktorej je mozne UZAVRIET ITERATOR OBJECT a tym padom dalsie ITERACIE NIE SU MOZNE.
   D. Ak ITERATOR FUNCTION skonci bud volanim [return;] (MUSI byt BEZ RETURN VALUE), alebo skoncenim ITERATOR FUNCTION, hodi EXCEPTION StopIteration.
   E. ITERATOR FUNCTIONS je mozne pouzit v EXTENSION verzii prikazu 'for-in'.
   F. ITERATOR OBJECT ma METHOD send(), pomocou ktorej moze FUNCTION volajuca ITERATOR FUNCTION spustit NOVU ITERATION a ZAROVEN zaslat do ITERATOR FUNCTION CUSTOM VALUE (PARAMETER send()), ktora sa stava VALUE 'yield'. Takze napriklad po zavolani send(100), ak je v ITERATOR FUNCTION kod [var Value=yield SomeValue;], tak hodnota 100 sa priradi do 'Value'.
   G. ITERATOR OBJECT ma METHOD throw(), pomocou ktorej moze FUNCTION volajuca ITERATOR FUNCTION spustit NOVU ITERATION pri ktorej sa OKAMZITE HODI EXCEPTION zaslana ako PARAMETER throw().
12. EXTENSION ARRAY COMPREHENSIONS je specialna SYNTAX  umoznujuca inicializaciu ARRAY v JEDNO PRIKAZE. SYNTAX ma tvar [var Array=[Expression for(Variable in Object) if(condition)], kde 'Object' je ITEROVATELNY OBJECT, z ktoreho sa vyberaju VALUES, 'Condition' je LUBOVOLNA PODMIENKA, ktora FILTRUJE ITEMS z 'Object' a 'Expression' je LUBOVOLNA EXPRESSION, ktora modifikuje VALUE, ktora sa priradi ako ITEM do ARRAY 'Array'. JScript NEPODPORUJE tuto EXTENSION.
13. EXTENSION GENERATOR EXPRESSION je specialna SYNTAX, ktora vracia NAINICIALIZOVANY ITERATOR OBJECT (obsahuje METHODS next(), send(), throw() a close()), ktory je mozne ITEROVAT. Ma nasledujucu SYNTAX [var IteratorObject=[Expression for(Variable in Object) if(condition)]. JScript NEPODPORUJE tuto EXTENSION.
14. EXTENSION SHORTHAND FUNCTION je specialna SYNTAX, ktora umoznuje jednoduchsi zapis FUNCTIONS, ktore obsahuju iba 1 EXPRESSION. SYNTAX ma nasledujuci tvar [function Add(X,Y) X+Y;]. JScript NEPODPORUJE tuto EXTENSION.
15. EXTENSION MUTLIPLE CATCH CLAUSES je specialna SYNTAX, ktora umoznuje za 'try' prikazom pouzit VIACNASOBNE 'catch' KLAUZULY. Ma SYNTAX [catch(Exception if TypeCondition)]. Je to analogia 'catch' BLOKOV v C++. JScript NEPODPORUJE tuto EXTENSION.
16. E4X je API umoznujuce pracu s XML v JavaScript. JScript NEPODPORUJE tuto EXTENSION.
//-------------------------------------------------------------------------------------------------------