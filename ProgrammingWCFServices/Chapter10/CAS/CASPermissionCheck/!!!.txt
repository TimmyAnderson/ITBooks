//-------------------------------------------------------------------------------------------------------
1. Program demonstruje sposoby pouzitia Code Access Security - CAS.
2. CAS umoznuje definovat ake PERMISSIONS musi mat dana Assembly, Class, Method a podobne nato, aby mohla byt spustena. Napriklad mozem definovat, ze dana metoda musi mat PERMISSIONS k FILE SYSTEM, MSMQ, TCP, DNS a KVANTUM DALSICH PERMISSIONS, ktore mozem pozadovat.
3. CAS mozem v .NET kode vyziadat 2 SPOSOBMI.
   A. DEKLARATIVNE pomocou atributov zdedenych z CodeAccessSecurityAttribute. .NET definuje tolko atributov, kolko je typov PERMISSIONS. (Teda aspon by mal - inak by som prislusny PERMISSION NEMOHOL nastavit deklarativne.)
   B. PROGRAMOVO pomocou tried zdedenych z CodeAccessPermission. Triedy zdedene z CodeAccessPermission PREDSTAVUJU DEFINICIU PERMISSION. Trieda CodeAccessPermission ma metody ako Demand(), Deny() ci PermitOnly(), ktore AK KOD NEMA DANU PERMISSION TAK HODIA SecurityException.
!!! 4 Zakladom implementacie CAS je trieda CodeAccessPermission, ktora definovana bud ATRIBUTMI, alebo PROGRAMOVO umoznuje overit PERMISSIONS.
!!! 5. Role Base Security je postavena na CAS, kontkretne na PrincipalPermission. ????? Teda RBS je PODMNOZINOU CAS.
!!!!! 6. PERMISSIONS su STANDARDNE overene na UROVNI ASSEMBLY pri jej LOADINGU do HOST, a TAKISTO AJ pri aplikacii CAS atributov, alebo pouzitia CAS porgramovo - pozri bod 3.
7. Permissions mozem zlucovat do Permission Sets.
!!!!! 8. KAZDEJ APLIKACII mozem stanovit AKE BUDE MAT PRIDELENE PERSMISSION a to pomocou MMC SnapIn - .NET configuration tool (Mscorcfg.msc). Posledna verzia je pre .NET 2.0..
9. VS 2008 ma v Project Properties kartu, kde mozem nastavit CAS pre ClickOnce deployment.
10. Programovo mozem nastavit PERMISSIONS pomocou SecurityAction enumeratu.
   A. Demand - definuje, ze VSETKY metody v Cass Stack MUSIA MAT DANU PERMISSION.
   B. Assert - definuje, ze dany metoda MA PERSMISSION i ked vyssie v Call Stack tuto PERMISSSION NEMA. Je to teda GRANT novej PERMISSION.
   C. Deny - definuje, ze danu PERMISSION NEMA dana METODA, i ked vyssie v Call Stack mu mohla byt pridelena.
   D. PermitOnly - definuje, ze iba konkretna PERMISSION je aplikovana i ked Host mohol poskytnut aj dalsie. Tieto su vsak po aplikacii tejto hodnoty ZAMIETNUTE.
   E. LinkDemand - definuje, ze IBA IMMEDIATE CALLER (a nie cely Call Stack) je kontrolovany na PERMISSIONS.
   F. InheritanceDemand - definuje aby ZDEDENA CLASS, ktora IMPLEMENTUJE METODU MALA pozadovane PERMISSIONS.
   G. RequestMinimum - POUZIVA SA NA UROVNI ASSEMBLY a definuje NUTNE POZADOVANE PERMISSIONS, aby mohla Assembly byt spustena.
   H. RequestOptional - POUZIVA SA NA UROVNI ASSEMBLY a definuje DODATOCNE PERSMISSION, ktore vsak NIE SU VITALNE NUTNE na beh Assembly.
   I. RequestRefuse - POUZIVA SA NA UROVNI ASSEMBLY a definuje PERMISSIONS, ktore NESMU byt danej Assembly priradene zo strany Host a nemohlo tak dojst k zneuzitiu tejto Assembly.
!!!!! 11. Ak chcem v kode definovat PARTIAL TRUSTED HOST - MUSIM VYTVORIT NOVU AppDomain. Cize su to prave AppDomains, ktore ODDELUJU po stranke SECURITY od seba jednotlive casti kodu.
//-------------------------------------------------------------------------------------------------------