//--------------------------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje ako je mozne v .NET 3.5 vyuzit SynchronizationContext v spojeni s generovanym proxy.
2. Verzia .NET 3.5 rozsirila ClientBase<T> o PROTECTED metodu InvokeAsync(), ktora ked je zavolana, tak ZISKA AKTUALNE NASTAVENY SynchronizationContext a CALLBACK pri ukonceni ASYNCHRONNEHO VOLANIA OPERACIE EndXXX() vyvola V TOMOT SYNCHRONIZACNOM KONTEXTE. Tuto vlastnost je mozne vyuzit vo WinForms ci WPF aplikaciach, kde je definovany SynchronizationContext.
!!! 3. Pouzitie vyzera nasledovne.
   A. Pri generovani Proxy zaskrtnem vygenerovanie asynchronnych verzii operacii Service.
   B. Vygenerovane proxy obsahuje metody XXXAsyn() a EVENT XXXCompleted.
   C. Zeregistrujem sa na odber Eventu XXXCompleted.
   D. Ak chcem vyvolat ASYNCHRONNU OPERACIU volam XXXAsync().
   !!! E. XXXAsync() INTERNE VYVOLA InvokeAsync() a ta NACITA AKTUALNY SYNCHRONIZACNY KONTEXT.
   F. Po skonceni operacie sa zavola Handler XXXCompleted, ktory sa zavola V TOM ISTOM SYNCHRONIZACNOM KONTEXTE (THREADE) ako vola volana funkcia XXXAsync().
//--------------------------------------------------------------------------------------------------------------------------------------