//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie ITERATORS.
2. Kazda STL COLLECTION si definuje vlastne ITERATORS. Niektore specializovane ITERATORS su definovane v LIBRARY <iteratror>.
3. V C++ je akykolvek konstrukt, ktory sa chova ako ITERATOR povazovany za ITERATOR. To znamena, ze aj POINTERS su povazovane za ITERATORS, pretoze maju vsetky vlastnosti ITERATORS. ITERATORS su vsak casto implementovane ako CLASSES, ktore maju chovanie ITERATORS.
4. C++ rozdeluje ITERATORS podla ich vlastnosti do nasledujucich CATEGORIES.
   A. INPUT ITERATORS. Umoznuju citanie dat z COLLECTIONS.
   B. OUTPUT ITERATORS. Umoznuju zapis dat do COLLECTIONS.
   C. FORWARD ITERATORS. Umoznuju citanie dat z COLLECTIONS. Umoznuju iba dopredny posun po ITEMS v COLLECTION.
   D. BIDIRECTIONAL ITERATORS. Umoznuju citanie dat z COLLECTIONS. Umoznuju obojsmerny posun po ITEMS v COLLECTION.
   E. RANDOM-ACCESS ITERATORS. Umoznuju citanie dat z COLLECTIONS. Umoznuju okamzity pristup k lubovolnym ITEMS v COLLECTION.
!!! 5. ITERATORS mozu patrit naraz do viacero CATEGORIES.
6. COLLECTIONS implementuju nasledujuce typy ITERATORS.
   A. ISTREAMS implementuju INPUT ITERATOR.
   B. OSTREAMS implementuju OUTPUT ITERATOR.
   C. INSERTERS implementuju OUTPUT ITERATOR.
   D. FORWARD LISTS implementuju FORWARD ITERATORS.
   E. UNORDERED SETS implementuju FORWARD ITERATORS.
   F. UNORDERED MULTISETS implementuju FORWARD ITERATORS.
   G. UNORDERED MAPS implementuju FORWARD ITERATORS.
   H. UNORDERED MULTIMAPS implementuju FORWARD ITERATORS.
   I. LISTS implementuju BIDIRECTIONAL ITERATORS.
   J. SETS implementuju BIDIRECTIONAL ITERATORS.
   K. MULTISETS implementuju BIDIRECTIONAL ITERATORS.
   L. MAPS implementuju BIDIRECTIONAL ITERATORS.
   M. MULTIMAPS implementuju BIDIRECTIONAL ITERATORS.
   N. ARRAYS implementuju RANDOM-ACCESS ITERATORS.
   O. VECTORS implementuju RANDOM-ACCESS ITERATORS.
   P. DEQUEUES implementuju RANDOM-ACCESS ITERATORS.
   Q. STRINGS implementuju RANDOM-ACCESS ITERATORS.
   R. C-ARRAYS implementuju RANDOM-ACCESS ITERATORS.
7. Pre OUTPUT ITERATORS platia nasledujuce fakty.
   A. OUTPUT ITERATORS umoznuju iba zapis VALUES do COLLECTIONS.
   B. OUTPUT ITERATORS umoznuju iba DOPREDNY POSUN po ITEMS v COLLECTIONS.
   !!! C. OUTPUT ITERATORS NEGARANTUJU, ze opakovany pokus o zapis vykona zapis do toho isteho ITEM. OUTPUT ITERATORS mozu po zapise do ITEM automaticky inkrementovat svoju poziciu. Typickym prikladom su OSTREAMS (napriklad CLASS [wcout]), ktore po pridani ITEM do OUTPUT zaroven inkrementuju svoju poziciu.
   D. OUTPUT ITERATORS nedefinuju COMPARISION OPERATORS, takze nie je mozne skontrolovat ci je COLLECTION plna.
   E. OUTPUT ITERATORS neumoznuju skontrolovat ci bol zapis do COLLECTION uspesny, alebo nie.
8. OUTPUT ITERATORS definuju nasledujuce OPERATIONS.
   A. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   B. OPERATOR* moze byt pouzity iba na LEFT-SIDE danej EXPRESSION na zapis VALUE jednotlivych ITEMS do COLLECTION.
   C. OPERATOR= priradzuje do ITEM NOVU VALUE.
   D. ++OPERATOR inkrementuje ITERATOR POSITION.
   E. OPERATOR++ inkrementuje ITERATOR POSITION.
9. Pre INPUT ITERATORS platia nasledujuce fakty.
   A. INPUT ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. INPUT ITERATORS umoznuju iba DOPREDNY POSUN po ITEMS v COLLECTIONS.
   !!! C. INPUT ITERATORS NEGARANTUJU, ze ak 2 INPUT ITERATORS referuju na ROZNE ITEMS a zaroven nie su PAST-END ITERATORS, musi ich porovnanie skoncit NEROVNOSTOU.
   D. INPUT ITERATORS definuju COMPARISION OPERATORS.
   E. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
10. INPUT ITERATORS definuju nasledujuce OPERATIONS.
   A. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   B. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION.
   C. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION.
   D. ++OPERATOR inkrementuje ITERATOR POSITION.
   E. OPERATOR++ inkrementuje ITERATOR POSITION. C++ STANDARD nevyzaduje, aby ITERATOR musel vracat nejaku RETURN VALUE.
   F. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   G. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
11. Pre FORWARD ITERATORS platia nasledujuce fakty.
   A. FORWARD ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. FORWARD ITERATORS, ktore umoznuju aj zapis VALUES do COLLECTIONS sa nazyvaju MUTABLE FORWARD ITERATORS.
   C. FORWARD ITERATORS umoznuju iba DOPREDNY POSUN po ITEMS v COLLECTIONS.
   !!! D. FORWARD ITERATORS GARANTUJU, ze ak 2 FORWARD ITERATORS referuju na ROVNAKE ITEMS, musi ich porovnanie skoncit ROVNOSTOU a ak referuju na ROZNE ITEMS, musi ich porovnanie skoncit NEROVNOSTOU.
   E. FORWARD ITERATORS definuju COMPARISION OPERATORS.
   F. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
12. FORWARD ITERATORS definuju nasledujuce OPERATIONS.
   A. DEFAULT CONSTRUCTOR vytvara instanciu ITERATOR.
   B. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   C. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je FORWARD ITERATOR MUTABLE.
   D. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je FORWARD ITERATOR MUTABLE.
   E. OPERATOR= priradzuje jednu instanciu ITERATOR do druhej.
   F. ++OPERATOR inkrementuje ITERATOR POSITION.
   G. OPERATOR++ inkrementuje ITERATOR POSITION.
   H. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   I. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
13. Pre BIDIRECTIONAL ITERATORS platia nasledujuce fakty.
   A. BIDIRECTIONAL ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. BIDIRECTIONAL ITERATORS, ktore umoznuju aj zapis VALUES do COLLECTIONS sa nazyvaju MUTABLE BIDIRECTIONAL ITERATORS.
   C. BIDIRECTIONAL ITERATORS umoznuju OBOJSMERNY POSUN po ITEMS v COLLECTIONS.
   !!! D. BIDIRECTIONAL ITERATORS GARANTUJU, ze ak 2 BIDIRECTIONAL ITERATORS referuju na ROVNAKE ITEMS, musi ich porovnanie skoncit ROVNOSTOU a ak referuju na ROZNE ITEMS, musi ich porovnanie skoncit NEROVNOSTOU.
   E. BIDIRECTIONAL ITERATORS definuju COMPARISION OPERATORS.
   F. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
14. BIDIRECTIONAL ITERATORS definuju nasledujuce OPERATIONS.
   A. DEFAULT CONSTRUCTOR vytvara instanciu ITERATOR.
   B. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   C. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je BIDIRECTIONAL ITERATOR MUTABLE.
   D. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je BIDIRECTIONAL ITERATOR MUTABLE.
   E. OPERATOR= priradzuje jednu instanciu ITERATOR do druhej.
   F. ++OPERATOR inkrementuje ITERATOR POSITION.
   G. OPERATOR++ inkrementuje ITERATOR POSITION.
   H. --OPERATOR dekrementuje ITERATOR POSITION.
   I. OPERATOR-- dekrementuje ITERATOR POSITION.
   J. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   K. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
15. Pre RANDOM-ACCESS ITERATORS platia nasledujuce fakty.
   A. RANDOM-ACCESS ITERATORS umoznuju iba citanie VALUES do COLLECTIONS.
   B. RANDOM-ACCESS ITERATORS, ktore umoznuju aj zapis VALUES do COLLECTIONS sa nazyvaju MUTABLE RANDOM-ACCESS ITERATORS.
   C. RANDOM-ACCESS ITERATORS umoznuju okamzity pristup k lubovolnemu ITEM v COLLECTIONS.
   !!! D. RANDOM-ACCESS ITERATORS GARANTUJU, ze ak 2 RANDOM-ACCESS ITERATORS referuju na ROVNAKE ITEMS, musi ich porovnanie skoncit ROVNOSTOU a ak referuju na ROZNE ITEMS, musi ich porovnanie skoncit NEROVNOSTOU.
   E. RANDOM-ACCESS ITERATORS definuju COMPARISION OPERATORS, vratane OPERATOR<, OPERATOR<=, OPERATOR> a OPERATOR>=.
   F. PAST-END ITERATOR referuje na 1 POSITION za KONCOM COLLECTION. Tento ITERATOR NIE JE MOZNE DEREFERENCOVAT a sluzi iba na porovnanie, ze iterovanie dosiahlo koniec COLLECTION.
16. RANDOM-ACCESS ITERATORS definuju nasledujuce OPERATIONS.
   A. DEFAULT CONSTRUCTOR vytvara instanciu ITERATOR.
   B. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   C. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUES jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je RANDOM-ACCESS ITERATOR MUTABLE.
   D. OPERATOR-> umoznuje pristup k MEMBERS daneho OBJECT a moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na citanie VALUE jednotlivych ITEMS z COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je RANDOM-ACCESS ITERATOR MUTABLE.
   E. OPERATOR[] umoznuje citat VALUE lubovolneho ITEM v COLLECTION. Zapis VALUES do ITEMS je mozne iba ak je RANDOM-ACCESS ITERATOR MUTABLE.
   F. OPERATOR= priradzuje jednu instanciu ITERATOR do druhej.
   G. OPERATOR+= posuva ITERATOR POSITION o 'N' POSITIONS DOPREDU.
   H. OPERATOR-= posuva ITERATOR POSITION o 'N' POSITIONS DOZADU.
   I. OPERATOR+(ITERATOR,INTEGER) vracia ITERATOR posunuty o 'N' POSITIONS DOPREDU.
   J. OPERATOR+(INTEGER,ITERATOR) vracia ITERATOR posunuty o 'N' POSITIONS DOPREDU.
   L. OPERATOR-(ITERATOR,INTEGER) vracia ITERATOR posunuty o 'N' POSITIONS DOZADU.
   M. OPERATOR-(ITERATOR,ITERATOR) vracia vzdialenost medzi 2 ITEREATORS.
   N. ++OPERATOR inkrementuje ITERATOR POSITION.
   O. OPERATOR++ inkrementuje ITERATOR POSITION.
   P. --OPERATOR dekrementuje ITERATOR POSITION.
   Q. OPERATOR-- dekrementuje ITERATOR POSITION.
   R. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   S. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
   T. OPERATOR< vracia informaciu ci je prvy ITERATOR MENSI ako druhy ITERATOR.
   U. OPERATOR<= vracia informaciu ci je prvy ITERATOR MENSI, alebo ROVNY ako druhy ITERATOR.
   V. OPERATOR> vracia informaciu ci je prvy ITERATOR VACSI ako druhy ITERATOR.
   W. OPERATOR>= vracia informaciu ci je prvy ITERATOR VACSI, alebo ROVNY ako druhy ITERATOR.
!!!!! 17. Ak su ITERATORS implementovane ako POINTERS NEVYHODOU je, ze taketo ITERATORS ak su vytvorene ako TEMPORARY VALUES NIE JE mozne MODIFIKOVAT. To znamena, ze na taketo ITERATORS NIE JE mozne pouzit napriklad ani OPERATOR++. Riesenim je nepouzit TEMPORARY VALUES, ale vytvorit ITERATORS ako VARIABLES a pouzit tie. Alternativou je nahradit OPERATOR++ za FUNCTION std::next().
18. C++ definuje niekolko HELPER FUNCTIONS, ktore umoznuju jednoduchsiu pracu s ITERATORS.
   A. FUNCTION advance() posuva hodnotu ITERATOR o 'N' POSITIONS.
   B. FUNCTION distance() vracia vzdialenost medzi 2 ITERATORS.
   C. FUNCTION next() vracia ITERATOR, ktory odkazuje na nasledujuci ITEM. OVERLOADED VERSION umoznuje posunut ITEMS o 'N' POSITIONS.
   D. FUNCTION prev() vracia ITERATOR, ktory odkazuje na predchadzajuci ITEM. OVERLOADED VERSION umoznuje posunut ITEMS o 'N' POSITIONS.
   E. FUNCTION iter_swap() vymiena hodnoty na ktore ukazuje dvojica ITERATORS.
19. Pre FUNCTION advance() platia nasledujuce fakty.
   A. FUNCTION advance() posuva hodnotu ITERATOR o 'N' POSITIONS.
   !!!!! B. Ak je ITERATOR CATEGORY BIDIRECTIONAL, alebo RANDOM-ACCESS, potom je mozne pomocou FUNCTION advance() posunut ITERATOR aj DOZADU.
   !!!!! C. Pre ITERATOR CATEGORIES, ktore neumoznuju posun dozadu FUNCTION advance() ma UNDEFINED BEHAVIOR a teda moze sposobit RUNTIME ERROR.
   !!! D. FUNCTION advance() pre kazdy ITERATOR CATEGORY pouzije najrychlejsi mozny sposob ako posunut ITERATOR.
   !!! E. FUNCTION advance() NEVYKONAVA kontrolu ci nedoslo k prekroceniu hranic COLLECTION.
20. Pre FUNCTION next() platia nasledujuce fakty.
   A. FUNCTION next() vracia ako RETURN VALUE ITERATOR posunuty o 1, alebo 'N' POSITIONS DOPREDU.
   !!! B. FUNCTION next() NEMODIFIKUJE ITERATOR, ktory je zaslany ako PARAMETER, iba vracia ITERATOR ako RETURN VALUE.
   !!!!! C. Ak je ITERATOR CATEGORY BIDIRECTIONAL, alebo RANDOM-ACCESS, potom je mozne pomocou FUNCTION next() posunut ITERATOR aj DOZADU.
   !!!!! D. Pre ITERATOR CATEGORIES, ktore neumoznuju posun DOZADU FUNCTION next() ma UNDEFINED BEHAVIOR a teda moze sposobit RUNTIME ERROR.
   !!! E. FUNCTION next() pre kazdy ITERATOR CATEGORY pouzije najrychlejsi mozny sposob ako posunut ITERATOR.
   !!! F. FUNCTION next() NEVYKONAVA kontrolu ci nedoslo k prekroceniu hranic COLLECTION.
21. Pre FUNCTION prev() platia nasledujuce fakty.
   A. FUNCTION prev() vracia ako RETURN VALUE ITERATOR posunuty o 1, alebo 'N' POSITIONS DOZADU.
   !!! B. FUNCTION prev() NEMODIFIKUJE ITERATOR, ktory je zaslany ako PARAMETER, iba vracia ITERATOR ako RETURN VALUE.
   !!!!! C. Ak je ITERATOR CATEGORY BIDIRECTIONAL, alebo RANDOM-ACCESS, potom je mozne pomocou FUNCTION prev() posunut ITERATOR aj DOPREDU.
   !!!!! D. Pre ITERATOR CATEGORIES, ktore neumoznuju posun DOPREDU FUNCTION prev() ma UNDEFINED BEHAVIOR a teda moze sposobit RUNTIME ERROR.
   !!! E. FUNCTION prev() pre kazdy ITERATOR CATEGORY pouzije najrychlejsi mozny sposob ako posunut ITERATOR.
   !!! F. FUNCTION prev() NEVYKONAVA kontrolu ci nedoslo k prekroceniu hranic COLLECTION.
22. Pre FUNCTION distance() platia nasledujuce fakty.
   A. FUNCTION distance() vracia ako RETURN VALUE vzdialenost medzi 2 ITERATORS.
   !!! B. FUNCTION distance() pre RANDOM-ACCESS ITERATORS vyuziva OPERATOR- a teda jeho zlozitost je O(1).
   !!!!! C. FUNCTION distance() pre vsetky ine ITERATOR CATEGORIES ako RANDOM-ACCESS ITERATORS VYZADUJE, aby ITERATOR zadany ako 1. PARAMETER sa odkazoval PRED, alebo na ROVNAKU POSITION ako ITERATOR v 2. PARAMETERI. Ak ITERATOR_2>ITERATOR_1 potom je chovanie FUNCTION distance() UNDEFINED a v zavislosti od PLAFORM moze sposobit RUNTIME ERROR.
   !!! D. FUNCTION distance() pre kazdy ITERATOR CATEGORY pouzije najrychlejsi mozny sposob ako zistit vzdialenost medzi 2 ITERATORS.
   !!! E. FUNCTION distance() NEVYKONAVA kontrolu ci nedoslo k prekroceniu hranic COLLECTION.
23. Pre FUNCTION iter_swap() platia nasledujuce fakty.
   A. FUNCTION iter_swap() vymiena VALUES na ktore odkazuju 2 ITERATORS.
   B. FUNCTION iter_swap() umoznuje vymienat aj VALUES ROZLICNEHO TYPE, ak je VALUES priraditelne.
24. REVERSE ITERATORS su ITERATOR ADAPTERS, ktore umoznuju iterovat ITEMS v COLLECTION v obratenom poradi od posledneho ITEM k prvemu ITEM. Pre REVERSE ITERATORS platia nasledujuce fakty.
   A. REVERSE ITERATORS maju vymenenu semantiku OPERATOR++ a OPERATOR-- (eventualne inych OPERATORS), tak aby umoznovali iterovanie ITEMS v COLLECTION od posledneho ITEM k prvemu ITEM.
   !!! B. COLLECTION METHOD rbegin() vracia REVERSE ITERATOR odkazujuci na POSLEDNY ITEM v COLLECTION. COLLECTION METHOD crbegin() vracia CONST REVERSE ITERATOR.
   !!! C. COLLECTION METHOD rend() vracia REVERSE ITERATOR odkazujuci PRED PRVY ITEM v COLLECTION. COLLECTION METHOD crend() vracia CONST REVERSE ITERATOR.
   !!!!! D. OPERATOR++ pre REVERSE ITERATORS posuva POSITION na PREDCHADZAJUCI ITEM v COLLECTION.
   !!!!! E. OPERATOR-- pre REVERSE ITERATORS posuva POSITION na NASLEDUJUCI ITEM v COLLECTION.
   !!!!! F. Normalne ITERATORS mozu byt IMPLITICNE CONVERTED na REVERSE ITERATORS. Pri CONVERSION dochadza k POSUNU POSITION o 1 POSITION DOZADU. Toto je FEATURE a NIE BUG.
   !!! G. REVERSE ITERATORS definuju METHOD base(), ktora umoznuje konverziu z REVERSE ITERATORS na NORMAL ITERATORS.
!!!!! 25. Kedze COLLECTIONS NEGARANTUJU, ze POSITION PRED PRVYM ITEM je validna (referuje na alokovanu MEMORY) na implementaciu REVERSE ITERATORS, ktore maju dodrzat HALF OPEN PRINCIPLE, kde BEGIN ITERATOR ukazuje na validny ITEM, zatial co END ITERATOR ukazuje 1 POSITION za posledny ITEM su REVERSE ITERATORS definovane nasledujucim sposobom.
   A. REVERSE ITERATORS definuju LOGICAL a PHYSICAL POSITIONS.
   !!! B. LOGICAL POSITION je VIRTUALNA POSITION, ktora respektuje HALF OPEN PRINCIPLE, kde BEGIN ITERATOR ukazuje na PRVY ITEM COLLECTION (v pripade REVERSE ITERATOR na POSLEDNY ITEM) a END ITERATOR ukazuje na 1 POSITION za POSLEDNYM ITEM (v pripade REVERSE ITERATORS je to 1 POSITION pred PRVYM ITEM).
   !!! C. PHYSICAL POSITION urcuje realny ITEM na ktory ITERATOR ukazuje. Kedze COLLECTIONS ako validne POSITIONS definuju iba POSITIONS od 1. ITEM az po 1 POSITION ZA POSLEDNYM ITEM, PHYSICAL POSITIONS musia referovat iba na tieto POSITIONS.
   !!!!! D. BEGIN REVERSE ITERATOR ma PHYSICAL POSITON 1 POSITION ZA POSLEDNYM ITEM v COLLECTION a END REVERSE ITERATOR ma PHYSICAL POSITON na PRVY ITEM v COLLECTION. Vdaka tomu PHYSICAL POSITION STALE referuje na VALIDNU POSITION v COLLECTION.
   !!! E. Pri CONVERSION normalneho ITERATOR na REVERSE ITERATOR NEDOCHADZA k ZMENE PHYSICAL POSITION, iba k zmene LOGICAL POSITION. Kedze pri REVERSE ITERATORS LOGICAL POSITION ukazuje 1 POSITION pred PHYSICAL POSITION, vysledkom CONVERSION je, ze REVERSE ITERATOR odkazuje 1 POSITION pred POSITION na ktoru odkazoval normalny ITERATOR.
26. INSERT ITERATORS su ITERATOR ADAPTERS, ktore namiesto priradzovania VALUES do ITEMS v COLLECTION vkladaju nove ITEMS do COLLECTION. Pre INSERT ITERATORS platia nasledujuce fakty.
   A. INSERT ITERATORS su CATEGORY typu OUTPUT ITERATORS.
   !!! B. Klucovou OPERATION je ASSIGNMENT, ktora pre OUTPUT ITERATORS vola INSERT OPERATION nad danou COLLECTION.
   C. Ostatne OPERATIONS nad INSERT ITERATORS su implementovane ako EMPTY OPERATIONS.
27. INSERT ITERATORS, kedze patria do CATEGORY OUTPUT ITERATORS, implementuju nasledujuce OPERATIONS.
   A. COPY CONSTRUCTOR vytvara kopiu ITERATOR.
   B. OPERATOR* moze byt pouzity iba na LEFT-SIDE danej EXPRESSION na zapis VALUE. Pre INSERT ITERATORS je to EMPTY OPERATION.
   !!! C. OPERATOR= priradzuje do ITEM NOVU VALUE. Pre INSERT ITERATORS je OPERATOR= zodpovedny za pridanie ITEM do COLLECTION volanim jej INSERT METHOD.
   D. ++OPERATOR inkrementuje ITERATOR POSITION. Pre INSERT ITERATORS je to EMPTY OPERATION.
   E. OPERATOR++ inkrementuje ITERATOR POSITION. Pre INSERT ITERATORS je to EMPTY OPERATION.
28. C++ STANDARD LIBRARY definuje 3 typy INSERT ITERATORS.
   A. BACK INSERT ITERATORS pridavaju ITEMS na koniec COLLECTION.
   B. FRONT INSERT ITERATORS pridavaju ITEMS na zaciatok COLLECTION.
   C. GENERAL INSERT ITERATORS pridavaju ITEMS na stanovenu POSITION v COLLECTION. POSITION je urcena pri vytvarani GENERAL INSERT ITERATORS pomocou ITERATOR.
29. Pre BACK INSERT ITERATORS platia nasledujuce fakty.
   A. BACK INSERT ITERATORS pridavaju ITEMS na koniec COLLECTION.
   B. BACK INSERT ITERATORS su implementovane ako CLASS [back_insert_iterator<TContainer>].
   C. Instancie BACK INSERT ITERATORS sa vytvaraju volanim FUNCTION back_inserter().
   D. BACK INSERT ITERATORS v CONSTRUCTOR definuju COLLECTION nad ktorou pracuju.
   !!! E. BACK INSERT ITERATORS pridavaju ITEMS do COLLECTION pomocou METHOD push_back().
   !!! F. BACK INSERT ITERATORS je mozne pouzit IBA pre COLLECTIONS, ktore definuju METHOD push_back().
30. CLASS [back_insert_iterator<TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu BACK INSERT ITERATOR. Ako PARAMETER sa definuje COLLECTION nad ktorou ma pracovat.
   B. TYPE [container_type] urcuje TYPE COLLECTION nad ktorou BACK INSERT ITERATOR pracuje.
   C. TYPE [container] urcuje TYPE POINTER na COLLECTION nad BACK GENERAL INSERT ITERATOR pracuje.
   D. TYPE [value_type] obsahuje TYPE [void].
   E. TYPE [difference_type] obsahuje TYPE [void].
   F. TYPE [pointer] obsahuje TYPE [void].
   G. TYPE [reference] obsahuje TYPE [void].
   H. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY daneho ITERATOR.
   !!!!! I. OPERATOR= vklada NOVY ITEM do COLLECTION volanim jej METHOD push_back().
   J. OPERATOR* je EMPTY OPERATION.
   K. OPERATOR++ je EMPTY OPERATION.
   L. ++OPERATOR je EMPTY OPERATION.
   M. FUNCTION back_inserter<TContainer>() vytvara instanciu BACK INSERT ITERATOR.
31. Pre FRONT INSERT ITERATORS platia nasledujuce fakty.
   A. FRONT INSERT ITERATORS pridavaju ITEMS na zaciatok COLLECTION.
   B. FRONT INSERT ITERATORS su implementovane ako CLASS [front_insert_iterator<TContainer>].
   C. Instancie FRONT INSERT ITERATORS sa vytvaraju volanim FUNCTION front_inserter().
   D. FRONT INSERT ITERATORS v CONSTRUCTOR definuju COLLECTION nad ktorou pracuju.
   !!! E. FRONT INSERT ITERATORS pridavaju ITEMS do COLLECTION pomocou METHOD push_front().
   !!! F. FRONT INSERT ITERATORS je mozne pouzit IBA pre COLLECTIONS, ktore definuju METHOD push_front().
32. CLASS [front_insert_iterator<TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu FRONT INSERT ITERATOR. Ako PARAMETER sa definuje COLLECTION nad ktorou ma pracovat.
   B. TYPE [container_type] urcuje TYPE COLLECTION nad ktorou FRONT INSERT ITERATOR pracuje.
   C. TYPE [container] urcuje TYPE POINTER na COLLECTION nad FRONT GENERAL INSERT ITERATOR pracuje.
   D. TYPE [value_type] obsahuje TYPE [void].
   E. TYPE [difference_type] obsahuje TYPE [void].
   F. TYPE [pointer] obsahuje TYPE [void].
   G. TYPE [reference] obsahuje TYPE [void].
   H. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY daneho ITERATOR.
   !!!!! I. OPERATOR= vklada NOVY ITEM do COLLECTION volanim jej METHOD push_front().
   J. OPERATOR* je EMPTY OPERATION.
   K. OPERATOR++ je EMPTY OPERATION.
   L. ++OPERATOR je EMPTY OPERATION.
   M. FUNCTION front_inserter<TContainer>() vytvara instanciu FRONT INSERT ITERATOR.
33. Pre GENERAL INSERT ITERATORS platia nasledujuce fakty.
   A. GENERAL INSERT ITERATORS pridavaju ITEMS na POSITION v COLLECTION definovanu pomocou ITERATOR.
   B. GENERAL INSERT ITERATORS su implementovane ako CLASS [insert_iterator<TContainer>].
   C. Instancie GENERAL INSERT ITERATORS sa vytvaraju volanim FUNCTION inserter().
   D. GENERAL INSERT ITERATORS v CONSTRUCTOR definuju COLLECTION nad ktorou pracuju a ITERATOR odkazujuci na POSITION v COLLECTION, kde budu ITEMS vkladane.
   !!! E. GENERAL INSERT ITERATORS pridavaju ITEMS do COLLECTION pomocou METHOD insert().
   !!! F. GENERAL INSERT ITERATORS je mozne pouzit IBA pre COLLECTIONS, ktore definuju METHOD insert().
34. CLASS [insert_iterator<TContainer>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu GENERAL INSERT ITERATOR. Ako 1. PARAMETER sa definuje COLLECTION nad ktorou ma pracovat a ako 2. PARAMETER je POSITION v COLLECTION, kde sa maju pridavane ITEMS vkladat.
   B. TYPE [container_type] urcuje TYPE COLLECTION nad ktorou GENERAL INSERT ITERATOR pracuje.
   C. TYPE [container] urcuje TYPE POINTER na COLLECTION nad ktorou GENERAL INSERT ITERATOR pracuje.
   D. TYPE [iter] urcuje TYPE ITERATOR danej COLLECTION nad ktorou GENERAL INSERT ITERATOR pracuje.
   E. TYPE [value_type] obsahuje TYPE [void].
   F. TYPE [difference_type] obsahuje TYPE [void].
   G. TYPE [pointer] obsahuje TYPE [void].
   H. TYPE [reference] obsahuje TYPE [void].
   I. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY daneho ITERATOR.
   !!!!! J. OPERATOR= vklada NOVY ITEM do COLLECTION volanim jej METHOD insert().
   K. OPERATOR* je EMPTY OPERATION.
   L. OPERATOR++ je EMPTY OPERATION.
   M. ++OPERATOR je EMPTY OPERATION.
   N. FUNCTION inserter<TContainer>() vytvara instanciu GENERAL INSERT ITERATOR.
35. STREAM ITERATORS su ITERATORS ADAPTERS, ktore iteruju nad STREAMS. C++ STANDARD LIBRARY podporuje nasledujuce typy STREAM ITERATORS.
   A. INPUT STREAM ITERATORS pracuju nad INPUT STREAMS a pri iterovani citaju data z INPUT STREAMS.
   B. OUTPUT STREAM ITERATORS pracuju nad OUTPUT STREAMS a pri iterovani zapisuju data do OUTPUT STREAMS.
   C. STREAM BUFFER ITERATORS pracuju nad STREAM BUFFERS a pri iterovani citaju a zapisuju data do STREAM BUFFERS.
36. Pre OUTPUT STREAM ITERATORS platia nasledujuce fakty.
   A. Pri iterovani cez ITEMS su data namiesto do COLLECTIONS zapisovane do OUTPUT STREAMS.
   B. OUTPUT STREAM ITERATORS su implementovane ako instancie CLASS [ostream_iterator<TType,TChar,TTraits>]. TEMPLATE PARAMETER 'TType' CLASS [ostream_iterator<TType,TChar,TTraits>] urcuje TYPE dat, ktore sa do OUTPUT STREAM budu zapisovat.
   C. OUTPUT STREAM do ktoreho ma OUTPUT STREAM ITERATOR zapisovat je zadany v CONSTRUCTOR OUTPUT STREAM ITERATOR.
   !!! D. Klucovou operaciou OUTPUT STREAM ITERATORS je OPERATOR=, ktory vykonava zapis do OUTPUT STREAM volanim OPERATOR<< daneho STREAM.
37. CLASS [ostream_iterator<TType,TChar,TTraits>] ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara novu instanciu OUTPUT STREAM ITERATOR. Ako PARAMETER sa zadava OUTPUT STREAM nad ktorym ma OUTPUT STREAM ITERATOR pracovat. OVERLOADED VERSION obsahuje aj 2. PARAMETER definujuci STRING, ktory sa pouzije ako SEPARATOR oddelujucimi ITEMS pri zapise do OUTPUT STREAM.
   B. DESTRUCTOR uvolnuje vsetky RESOURCES asociovane s OUTPUT STREAM ITERATOR.
   C. TYPE [char_type] urcuje CHARACTER TYPE, ktory sa definuje ake typy CHARACTERS sa pouziju pri zapise ITEMS do OUTPUT STREAMS.
   D. TYPE [traits_type] urcuje TYPE TRAITS, ktore OUTPUT STREAM ITERATOR pouziva.
   E. TYPE [ostream_type] urcuje TYPE OUTPUT STREAM, ktory OUTPUT STREAM ITERATOR pouziva.
   F. TYPE [value_type] obsahuje TYPE [void].
   G. TYPE [difference_type] obsahuje TYPE [void].
   H. TYPE [pointer] obsahuje TYPE [void].
   I. TYPE [reference] obsahuje TYPE [void].
   J. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY daneho ITERATOR.
   !!!!! K. OPERATOR= vklada NOVY ITEM do OUTPUT STREAM volanim jej OPERATOR<< a pripade aj volanim OPERATOR<< na pridanie SEPARATOR, ak bol definovany.
   L. OPERATOR* je EMPTY OPERATION.
   M. OPERATOR++ je EMPTY OPERATION.
   N. ++OPERATOR je EMPTY OPERATION.
38. Pre INPUT STREAM ITERATORS platia nasledujuce fakty.
   A. Pri iterovani cez ITEMS su data namiesto z COLLECTIONS citane z INPUT STREAMS.
   B. INPUT STREAM ITERATORS su implementovane ako instancie CLASS [istream_iterator<TType,TChar,TTraits,TDistance>]. TEMPLATE PARAMETER 'TType' CLASS [istream_iterator<TType,TChar,TTraits,TDistance>] urcuje TYPE dat, ktore sa z INPUT STREAM budu citat.
   C. INPUT STREAM z ktoreho ma INPUT STREAM ITERATOR citat je zadany v CONSTRUCTOR INPUT STREAM ITERATOR.
   !!! D. Klucovou operaciou INPUT STREAM ITERATORS je OPERATOR*, ktory vykonava citanie z INPUT STREAM volanim OPERATOR>> daneho STREAM.
   !!!!! E. Na indikaciu konca INPUT STREAM, alebo chyby pri citani INPUT STREAM sa pouziva EMPTY INPUT STREAM ITERATOR, ktory sa vytvara pomocou DEFAULT CONSTRUCTOR. Po KAZDOM citanie dat zo STREAM je NUTNE pomocou OPERATOR==, alebo OPERATOR!= zistit ci INPUT STREAM ITERATOR nie je identicky s EMPTY INPUT STREAM ITERATOR. Ak ano, potom to znamena, ze bud pri citanie doslo k ERROR, alebo sa dosiahol koniec INPUT STREAM.
   !!! F. OPERATOR== a OPERATOR!= urcuju ci su dve INPUT STREAM ITERATORS rovne. Rovne su vtedy ked z OBOCH INPUT STREAM ITERATORS je mozne citat data, alebo ak z OBOCH  INPUT STREAM ITERATORS data citat nie je mozne, pre ERROR, alebo dosiahnutie konca INPUT STREAM.
39. CLASS [istream_iterator<TType,TChar,TTraits,TDistance>] ma nasledujuce MEMBERS.
   A. DEFAULT CONSTRUCTOR vytvara EMPTY INPUT STREAM ITERATOR, ktory sluzi ako indikator vzniku ERROR, alebo dosiahnutia konca INPUT STREAM.
   B. CONSTRUCTOR vytvara novu instanciu INPUT STREAM ITERATOR. Ako PARAMETER sa zadava INPUT STREAM nad ktorym ma INPUT STREAM ITERATOR pracovat.
   C. DESTRUCTOR uvolnuje vsetky RESOURCES asociovane s INPUT STREAM ITERATOR.
   D. TYPE [char_type] urcuje CHARACTER TYPE, ktory sa definuje ake typy CHARACTERS sa pouziju pri citani ITEMS z INPUT STREAMS.
   E. TYPE [traits_type] urcuje TYPE TRAITS, ktore INPUT STREAM ITERATOR pouziva.
   F. TYPE [istream_type] urcuje TYPE INPUT STREAM, ktory INPUT STREAM ITERATOR pouziva.
   G. TYPE [value_type] urcuje TYPE, ktory sa cita z INPUT STREM. Je rovny s TEMPLATE PARAMETER 'TType'.
   H. TYPE [difference_type] urcuje TYPE, ktory sa pouziva na vyjadrenie vzdialenosti medzi 2 POSITIONS INPUT STREAM ITERATOR. Je rovny s TEMPLATE PARAMETER 'TDistance'.
   I. TYPE [pointer] obsahuje CONST POINTER na TYPE, ktory sa cita z INPUT STREAM. Obsahuje TYPE [const TType*].
   J. TYPE [reference] obsahuje CONST REFERENCE na TYPE, ktory sa cita z INPUT STREAM. Obsahuje TYPE [const TType&].
   K. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY daneho ITERATOR.
   !!!!! L. OPERATOR* vracia CONST REFERENCE na ITEM nacitany z INPUT STREAM. OPERATOR* v pripade, ze nacitany ITEM je uz ulozeny v INTERNAL VARIABLE vracia tento, a ak nie je, pouziva na citanie OPERATOR>>, ktory vola nad INPUT STREAM.
   !!!!! M. OPERATOR-> vracia CONST POINTER na MEMBER ITEM nacitaneho z INPUT STREAM. OPERATOR-> v pripade, ze nacitany ITEM je uz ulozeny v INTERNAL VARIABLE vracia tento, a ak nie je, pouziva na citanie OPERATOR>>, ktory vola nad INPUT STREAM.
   !!! N. OPERATOR++ cita ITEM z INPUT STREAM volanim OPERATOR>> a uklada ho do svojej internej premennej.
   O. ++OPERATOR cita ITEM z INPUT STREAM volanim OPERATOR>> a uklada ho do svojej internej premennej.
   P. OPERATOR== vracia informaciu ci 2 INPUT STREAM ITERATORS su rovne. INPUT STREAM ITERATORS su rovne ak z oboch je mozne citat ITEMS, alebo obe su rovne EMPTY INPUT STREAM ITERATOR.
   Q. OPERATOR!= vracia informaciu ci 2 INPUT STREAM ITERATORS su rozne. INPUT STREAM ITERATORS su rozne ak z jedneho INPUT STREAM ITERATOR je mozne citat ITEMS, zatial co druhy je EMPTY INPUT STREAM ITERATOR.
40. MOVE ITERATORS su ITERATOR ADAPTERS, ktore umoznuju pri pouziti presuvat ITEMS pomocou MOVE SEMANTICS. Pre INPUT MOVE ITERATORS platia nasledujuce fakty.
   A. Pri iterovani cez ITEMS danej COLLECTION su ITEMS MOVED do DESTINATION COLLECTION.
   B. MOVE ITERATORS funguju rovnako ako ITERATORS, ktore ITERATORS, ktore obaluju s vynimkou OPERATOR*, ktory namiesto COPY OPERATION pouziva MOVE OPERATION.
   C. MOVE ITERATORS su implementovane ako instancie CLASS [move_iterator<TIterator>].
   !!!!! D. MOVE ITERATORS je mozne pouzit IBA VTEDY, ked je zaistene, ze pri iterovani je ku kazdemu ITEM pristupene IBA RAZ. Ak by k ITEM bolo pristupene VIACKRAT, potom by 2. pristup bol pristupom k MOVED ITEM co sposobi UNDEFINED BEHAVIOR, a teda RUNTIME ERROR.
   !!! E. MOVE ITERATORS je zmysluplne pouzivat iba v ALGORITHMS, ktore k SOURCE COLLECTION pristupuju cez INPUT ITERATORS a k DESTINATION COLLECTION cez OUTPUT ITERATORS. Vynimkou je ALGORITHM for_each(), ktory je tiez mozne pouzit s MOVE ITERATORS.
   !!!!! F. MOVE ITERATORS pouzivaju MOVE SEMANTICS na presun ITEMS. Po skonceni iterovania sa dlzka COLLECTION NEMENI, iba su jednotlive ITEMS prenesene pomocou MOVE SEMANTICS do DESTINATION COLLECTION.
41. CLASS [move_iterator<TIterator>] ma nasledujuce MEMBERS.
   1. CONSTRUCTOR vytvara novu instanciu MOVE ITERATOR. Ako PARAMETER sa zadava ITERATOR nad ktorym ma MOVE ITERATOR pracovat.
   2. TYPE [iterator_type] urcuje TYPE ITERATOR, ktory MOVE ITERATOR zapuzdruje. Je zhodny s TEMPLATE PARAMETER 'TIterator'.
   3. TYPE [difference_type] urcuje TYPE, ktory sa pouziva na vyjadrenie vzdialenosti medzi POSITIONS MOVE ITERATORS. Ma hodnotu iterator_traits<TIterator>::difference_type.
   4. TYPE [pointer] urcuje POINTER TYPE pre ITEMS ulozene v COLLECTION ku ktorej ITERATOR pristupuje. Je zhodny s TEMPLATE PARAMETER 'TIterator'.
   5. TYPE [value_type] urcuje VALUE TYPE pre ITEMS ulozene v COLLECTION ku ktorej ITERATOR pristupuje. Ma hodnotu iterator_traits<TIterator>::value_type.
   6. TYPE [iterator_category] urcuje TYPE ITERATOR CATEGORY ITERATOR, ktory MOVE ITERATOR obaluje. Ma hodnotu iterator_traits<TIterator>::iterator_category.
   7. TYPE [reference_type] urcuje REFERENCE TYPE pre ITEMS ulozene v COLLECTION ku ktorej ITERATOR pristupuje. Ma hodnotu iterator_traits<TIterator>::value_type&&.
   8. OPERATOR= priradzuje do MOVE ITERATOR inu instanciu MOVE ITERATOR.
   9. OPERATOR* vracia REFERENCE na ITEM nacitany z ITERATOR.
   10. OPERATOR-> vracia POINTER na MEMBER ITEM nacitaneho z ITERATOR.
   11. ++OPERATOR inkrementuje ITERATOR POSITION.
   12. OPERATOR++ inkrementuje ITERATOR POSITION.
   13. --OPERATOR dekrementuje ITERATOR POSITION.
   14. OPERATOR-- dekrementuje ITERATOR POSITION.
   15. OPERATOR+= posuva ITERATOR POSITION o 'N' POSITIONS DOPREDU.
   16. OPERATOR-= posuva ITERATOR POSITION o 'N' POSITIONS DOZADU.
   17. OPERATOR+(ITERATOR,INTEGER) vracia ITERATOR posunuty o 'N' POSITIONS DOPREDU.
   18. OPERATOR+(INTEGER,ITERATOR) vracia ITERATOR posunuty o 'N' POSITIONS DOPREDU.
   19. OPERATOR-(ITERATOR,INTEGER) vracia ITERATOR posunuty o 'N' POSITIONS DOZADU.
   20. OPERATOR-(ITERATOR,ITERATOR) vracia vzdialenost medzi 2 ITEREATORS.
   21. OPERATOR[] umoznuje citat a zapisovat VALUE lubovolneho ITEM v COLLECTION.
   22. OPERATOR== porovnava ci 2 ITERATORS su rovne.
   23. OPERATOR=! porovnava ci 2 ITERATORS su rozne.
   24. OPERATOR< vracia informaciu ci je prvy ITERATOR MENSI ako druhy ITERATOR.
   25. OPERATOR<= vracia informaciu ci je prvy ITERATOR MENSI, alebo ROVNY ako druhy ITERATOR.
   26. OPERATOR> vracia informaciu ci je prvy ITERATOR VACSI ako druhy ITERATOR.
   27. OPERATOR>= vracia informaciu ci je prvy ITERATOR VACSI, alebo ROVNY ako druhy ITERATOR.
   28. METHOD base() vracia ITERATOR, ktory MOVE ITERATOR zapuzdruje.
   29. FUNCTION make_move_iterator<TIterator>() vytvara instanciu MOVE ITERATOR.
42. CLASS [raw_storage_iterator<TOutputIterator,TType>] REPREZENTUJE RAW STORAGE ITERATOR, ktory umoznuje iterovat cez RAW MEMORY. Ma nasledujuce MEMBERS.
   A. TYPE [value_type] obsahuje TYPE [void].
   B. TYPE [difference_type] obsahuje TYPE [void].
   C. TYPE [pointer] obsahuje TYPE [void].
   D. TYPE [reference] obsahuje TYPE [void].
   !!! E. TYPE [iterator_category] obsahuje TYPE [output_iterator_tag].
   F. CONSTRUCTOR vytvara pre zadany OUTPUT ITERATOR novy RAW STORAGE ITERATOR.
   G. OPERATOR= priradzuje do aktualnej pozicie RAW STORAGE ITERATOR VALUE TYPE 'TType'. Je definovany COPY OPERATOR= aj MOVE OPERATOR=.
   H. OPERATOR* dereferencuje RAW STORAGE ITERATOR na aktualnej pozicii.
   I. ++OPERATOR inkrementuje ITERATOR POSITION.
   J. OPERATOR++ inkrementuje ITERATOR POSITION.
   K. METHOD base() vracia ITERATOR, ktory RAW STORAGE ITERATOR zapuzdruje.
43. STRUCTURE [iterator_traits<TIterator>] popisuje TYPES, ktore dany ITERATOR pouziva. C++ STANDARD LIBRARY definuje pre kazdy ITERATOR SPECIALIZATION, ktora definuje konkretne TYPES pre dany ITERATOR. STRUCTURE [iterator_traits<TIterator>] ma nasledujuce MEMBERS.
   A. TYPE [iterator_category] je TYPE urcujuci akej je CATEGORY dany ITERATOR.
   B. TYPE [difference_type] urcuje TYPE, ktory ITERATOR pouziva na vyjadrenie rozdielu v POSITIONS medzi ITERATORS.
   C. TYPE [value_type] urcuje TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza.
   D. TYPE [reference] urcuje REFERENCE na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza.
   E. TYPE [pointer] urcuje POINTER na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza.
44. C++ STANDARD LIBRARY definuje nasledujuce STRUCTURES na vyjadrenie ITERATOR CATEGORY.
   A. TYPE [output_iterator_tag] reprezentuje OUTPUT ITERATORS.
   B. TYPE [input_iterator_tag] reprezentuje INPUT ITERATORS.
   C. TYPE [forward_iterator_tag] reprezentuje FORWARD ITERATORS. Je DERIVED z TYPE [input_iterator_tag].
   D. TYPE [bidirectional_iterator_tag] reprezentuje BIDIRECTIONAL ITERATORS. Je DERIVED z TYPE [forward_iterator_tag].
   E. TYPE [random_access_iterator_tag] reprezentuje RANDOM-ACCESS ITERATORS. Je DERIVED z TYPE [bidirectional_iterator_tag].
45. Pre definovanie CUSTOM ITERATOR je potrebne vykonat nasledujuce kroky.
   A. Definovat do akej ITERATOR CATEGORY bude ITERATOR patrit. Z toho vyplyvaju OPERATIONS, ktore musi ITERATOR implementovat.
   B. Definovat CUSTOM CLASS, ktora bude reprezenovat CUSTOM ITERATOR.
   !!! C. Definovat TYPE [iterator_category], TYPE [difference_type], TYPE [value_type], TYPE [reference] a TYPE [pointer]. Tieto TYPES su bud definovane ako MEMBER TYPES CUSTOM ITERATOR CLASS, alebo sa definuje TEMPLATE SPECIALIZATION pre STRUCTURE [iterator_traits<TIterator>], kde 'TIterator' bude CUSTOM ITERATOR CLASS.
   D. Definovat vsetky OPERATIONS, ktore ITERATOR danej ITERATOR CATEGORY musi implementovat.
!!! 46. CUSTOM ITERATORS MUSIA definovat TYPE [iterator_category], TYPE [difference_type], TYPE [value_type], TYPE [reference] a TYPE [pointer]. Tuto definiciu je mozne vykonat 3 sposobmi.
   A. Definovat TEMPLATE SPECIALIZATION pre STRUCTURE [iterator_traits<TIterator>], kde 'TIterator' bude CUSTOM ITERATOR CLASS.
   B. V CUSTOM ITERATOR definovat vsetky TYPES pomocou KEYWORD [typedef], alebo KEYWORD [using].
   !!! C. CUSTOM ITERATOR je DERIVED zo STRUCTURE [iterator<TCategory,TType,TDistance,TPointer,TReference>], ktore definuje vsetky pozadovane TYPES.
47. CLASS [iterator<TCategory,TType,TDistance,TPointer,TReference>] ma nasledujuce MEMBERS.
   A. TYPE [iterator_category] je TYPE urcujuci akej je CATEGORY dany ITERATOR. Je rovny TEMPLATE PARAMETER 'TCategory'.
   C. TYPE [value_type] urcuje TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza. Je rovny TEMPLATE PARAMETER 'TType'.
   B. TYPE [difference_type] urcuje TYPE, ktory ITERATOR pouziva na vyjadrenie rozdielu v POSITIONS medzi ITERATORS. Je rovny TEMPLATE PARAMETER 'TDistance'.
   E. TYPE [pointer] urcuje POINTER na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza. Je rovny TEMPLATE PARAMETER 'TPointer'.
   D. TYPE [reference] urcuje REFERENCE na TYPE ITEMS cez, ktore ITERATOR pri iterovani prechadza. Je rovny TEMPLATE PARAMETER 'TReference'.
48. C-ARRAYS je mozne pouzivat ako STL COLLECTIONS, pretoze POINTER na ARRAY ITEM implementuje ITERATOR SEMANTICS. C++ STANDARD LIBRARY definuje nasledujuce FUNCTIONS, ktore pre C-ARRAYS vracaju ITERATORS.
   A. FUNCTION begin() pre C-ARRAY vracia BEGIN ITERATOR odkazujuci na 1. ITEM daneho ARRAY.
   B. FUNCTION cbegin() pre C-ARRAY vracia BEGIN CONST ITERATOR odkazujuci na 1. ITEM daneho ARRAY.
   C. FUNCTION end() pre C-ARRAY vracia END ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM daneho ARRAY.
   D. FUNCTION cend() pre C-ARRAY vracia END CONST ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM daneho ARRAY.
!!! 49. ITERATORS vracane FUNCTION begin(), FUNCTION cbegin(), FUNCTION end() a FUNCTION cend() pre C-ARRAYS su RANDOM ACCESS ITERATORS.
50. C++ STANDARD LIBRARY definuje nasledujuce FUNCTIONS, ktore pre STL COLLECTION vracaju ITERATORS.
   A. FUNCTION begin() pre STL COLLECTION vracia BEGIN ITERATOR odkazujuci na 1. ITEM danej STL COLLECTION.
   B. FUNCTION cbegin() pre STL COLLECTION vracia BEGIN CONST ITERATOR odkazujuci na 1. ITEM danej STL COLLECTION.
   C. FUNCTION end() pre STL COLLECTION vracia END ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM danej STL COLLECTION.
   D. FUNCTION cend() pre STL COLLECTION vracia END CONST ITERATOR odkazujuci na JEDNU POZICIU ZA POSLEDNYM ITEM danej STL COLLECTION.
//-------------------------------------------------------------------------------------------------------