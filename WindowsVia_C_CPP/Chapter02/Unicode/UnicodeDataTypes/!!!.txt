//------------------------------------------------------------------------------
1. Program demonstuje pouzivanie Unicode vo Windows.
2. Pred zavedenim Unicode sa pouzivalo kodovanie DBCS, ktore malo variabilnu dlzku znaku, kedze jeden znak mohol byt vyjadreny 1, alebo 2 bytes.
3. Unicode UTF-16 je dnes pouzivanym STANDARDOM vo Windows. UTF-16 koduje znaky standardne v 2 bytes.
!!! 4. Kedze 65536 znakov nie je dost pre vsetky jazyky sveta UTF-16 ma implementovanu moznost rozsirenia cez SURROGATE znaky, cim sa dlzka znaku moze natiahnut na 4 bytes.
!!!!! 5. PROBLEMOM UTF-16 je prave SURROGATES, kde iba MALO PROGRAMOV je TESTOVANYCH na moznost SURROGATE znakov co moze sposobit pad programu.
6. UTF-8 sa pouziva najma pri kodovanie HTML stranok a dlzka znaku je variabilna od 1 az po 4 bytes.
7. UTF-32 pouziva konstantnu dlzku znaku 4 bytes a odpada problem so SURROGATE znakmi.
!!! 8. Kedze Windows, .NET i COM pouzivaju prave UTF-16 na reprezentaciu znakov pouzitie UTF-16 vedie k VYSSEJ KOMPATIBILITE a i RYCHLEJSOM SPRACOVANI programu.
9. Pri praci s retazcami pod C++ sa doporucuje pouzivat rozsirenie C-runtime kniznice o SAFE FUNKCIE, automaticky kontrolujuce neprekrocenie dlzky retazca.
!!!!! 10. WINDOWS INTERNE POUZIVA UTF-16. Jeho API funkcie su sice v dvoch variantach pre ANSI a Unicode, avsak ANSI verzie KONVERTUJU RETAZEC na UNICODE a potom SPUSTIA UNICODE VERZIU API FUNKCIE. A preto je programovanie voci Unicode DALEKO EFEKTIVNEJSIE ako voci ANSI.
11. C++ ma podporovany Unicode znak pomocou 'wchar_t', kde jeho ekvivalenom vo 'windows.h' je WCHAR.
12. Ak chcem pisat kod pre Unicode i ANSI mozem pouzit makro TCHAR, ktore moze nadobudat v zavislosti od nastavanie makra 'UNICODE' na 'CHAR', alebo 'WCHAR'.
13. C-Runtime obsahuje SECURE VEZRIE standardnych retazcovych operacii, ktorych meno zodpoveda menu povodnej funkcie s postfix '_s'.
!!! 14. Chovanie sa SECURE VEZRII retazcovych operacii je nasledovne.
   A. Kazda funkcia ma ako parameter dlzku Buffer (v pocte items A NIE BYTES) do ktoreho sa ma kopirovat.
   B. Kazda funkcia pred vykonavanim skontroluje ci parametre NIE SU NULL, a ci cielovy Buffer je dostatocne dlhy.
   C. V pripade chyby v DEFAULT REZIME sa v Debug mode vyhodi ASSERT HLASKA a v Release mode sa program okamzite ukonci.
   D. DEFAULT REZIM je mozne zmenit tak, ze definujem CUSTOM ERROR HANDLER (default verzia sposobuje volanie assert()) a ten moze zalogovat chybu. Pri pouziti CUSTOM HANDLER sa NEVOLA DEFAULT HANDLER a NEDOCHADZA k volaniu assert(). Po vyvolani CUSTOM EVENT HANDLER POKRACUJE PROGRAM V NORMANOM BEHU a SECURE FUNKCIA, ktora ZLYHALA vrati ERROR CODE v NAVRATOVEJ HODNOTE.
!!! 15. Na zistenie dlzky Buffera v POCTE ITEMS BUFFERA (NIE BYTES) je mozne pouzit makro '_countof()'.
16. Subor 'StrSafe.h' obsahuje i dalsie rozsirujuce funkcie ako StringCchCopy() ci StringCbCopy(), rozsirujuce funkcionalitu C-Runtime funkcii. ROZDIEL MEDZI 'Cch' a 'Cb' verziami spociva v tom, ze 'Cch' verzie ocakavaju ako parameter POCET ITEMS V BUFFER - zisteny cez _countof() a 'Cb' verzie ocakavaju POCET BYTES V BUFFER zisteny cez sizeof().
17. Kniznica 'windows.h' obsahuje tri porovnavacie funkcie.
   A. CompareString() - realizuje ZNAKOVE (v danom jazyku) porovnanie zo zohladnenim napriklad CASES znakov.
   B. CompareStringEx() - realizuje rozsirene ZNAKOVE (v danom jazyku) porovnanie zo zohladnenim napriklad CASES znakov.
   C. CompareStringOrdinal() - relaizuje BYTOVE porovnanie znakov pricom IGNORUJE JAZYK. Je podporovana AZ VO VISTE.
18. Konvezriu medzi ANSI a Unicode je mozne vykonat dvojicou API funkcie MultiByteToWideCharacter() a WideCharToMultiByte().
!!! 19. Na detekciu ci je deny text v ANSI, alebo UNICODE je mozne pouzit API funkciu IsTextUnicode(), ale zistenie NEMUSI BYT VZDY PRESNE.
//------------------------------------------------------------------------------