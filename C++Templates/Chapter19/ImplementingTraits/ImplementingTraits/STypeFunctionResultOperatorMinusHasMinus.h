//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "STypeFunctionResultHasOperatorMinusDeclval.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2, bool=STypeFunctionResultHasOperatorMinusDeclval<TType1,TType2>::VALUE>
struct STypeFunctionResultOperatorMinusHasMinus final
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													Type=decltype(std::declval<TType1>()-std::declval<TType2>());
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
struct STypeFunctionResultOperatorMinusHasMinus<TType1,TType2,false> final
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------