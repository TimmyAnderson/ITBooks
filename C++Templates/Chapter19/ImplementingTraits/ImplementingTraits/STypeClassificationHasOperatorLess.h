//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "SVoidType.h"
#include "STypeFunctionBoolConstant.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! PRIMARY TEMPLATE CLASS pre FALSE CASE.
template<typename, typename, typename=SVoidType<>>
struct STypeClassificationHasOperatorLess final : public TypeFunctionFalseType
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// !!!!! TEMPLATE CLASS SPECIALIZATION, ktora testuje ci pre TYPE [TType1] a TYPE [TType2] ma OPERATOR [OPERATOR<].
template<typename TType1, typename TType2>
struct STypeClassificationHasOperatorLess<TType1, TType2, SVoidType<decltype(std::declval<TType1>() < std::declval<TType2>())>> final : public TypeFunctionTrueType
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------