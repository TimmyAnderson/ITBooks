//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje zakladne principy ASP.NET CORE APPLICATIONS.
2. MICROSOFT poskytuje nasledujuce DEVELOPMENT TOOLS na vyvoj ASP.NET CORE APPLICATIONS.
   A. VISUAL STUDIO je komplexny DEVELOPMENT TOOL urceny pre WINDOWS PLATFORM.
   B. VISUAL CODE je jednoduchsi DEVELOPMENT TOOL, ktory bezi na WINDOWS, LINUX aj MAC OS.
3. POMOCOU COMMAND LINE COMMAND [dotnet --list-sdks] je mozne zobrazit vsetky nainstalovane verzie .NET CORE SDK.
4. ASP.NET CORE PROJECTS sa vytvaraju pomocou COMMAND [dotnet new PROJECT_TYPE PROJECT_OPTIONS], kde VALUE 'PROJECT_TYPE' urcuje typ vytaraneho PROJECT a VALUE 'PROJECT_OPTIONS' obsahuje PROJECT OPTIONS, ktore su zavisle od typu PROJECT. ASP.NET CORE definuje nasledujuce typy PROJECTS.
   A. PROJECT TYPE [web] vytvara ASP.NET CORE PROJECT.
   B. PROJECT TYPE [mvc] vytvara ASP.NET CORE PROJECT pouzivajuci MVC FRAMEWORK.
   C. PROJECT TYPE [webapp] vytvara ASP.NET CORE PROJECT pouzivajuci RAZOR PAGES.
   D. PROJECT TYPE [blazorserver] vytvara ASP.NET CORE PROJECT pouzivajuci BLAZOR SERVER.
   E. PROJECT TYPE [angular] vytvara ASP.NET CORE PROJECT pouzivajuci ANGULAR LIBRARY.
   F. PROJECT TYPE [react] vytvara ASP.NET CORE PROJECT pouzivajuci REACT LIBRARY.
   G. PROJECT TYPE [reactredux] vytvara ASP.NET CORE PROJECT pouzivajuci REACT LIBRARY a REDUX LIBRARY.
5. ASP.NET CORE umoznuje pomocou COMMAND [dotnet new sln OPTIONS] vytvara VISUAL STUDIO SOLUTION.
6. Pomocou COMMAND [dotnet sln SOLUTION_PATH add PROJECT_PATH] je mozne pridat do SOLUTION na PATH 'SOLUTION_PATH' PROJECT na PATH 'PROJECT_PATH'.
7. VISUAL STUDIO umoznuje vybrat WEB BROWSER, ktory bude pouzity na DEBUGGING ASP.NET CORE APPLICATIONS. Vyber WEB BROWSER sa robi pomocou TOOLBAR BUTTON [IIS Express], kde v MENU OPTION [Web Browser] je mozne vybrat WEB BROWSER, ktory sa pouzije na DEBUGGING ASP.NET CORE APPLICATIONS.
8. VISUAL STUDIO umoznuje spustat PROJECTS nasledujucimi sposobmi.
   A. Spustenie pomocou [START WITHOUT DEBUGGING] spusta PROJECT BEZ moznosti DEBUGGING, avsak C# CLASSES su COMPILED az pri prvom dotaze na WEB PAGE. Zaroven VISUAL STUDIO je v tomto mode schopne detekovat zmeny C# CODE a vykonat OKAMZITU COMPILATION pri ich zmene. Vdaka tomu je mozne pocas spustenia PROJECT modifikovat obsah C# CODE a po BROWSER REFRESH sa zmeny OKAMZITE PREJAVIA bez NUTNOSTI vykonat RESTART celej APPLICATION.
   B. Spustenie pomocou [START DEBUGGING] spusta PROJECT s moznostou DEBUGGING. Pri tomto spustani je cely PROJECT OKAMZITE COMPILED. To znaci, ze pri meneni obsahu C# CODE je nutne spravit RECOMPILATION a RESTART.
9. Pomocou COMMAND [dotnet sln SOLUTION_PATH add PROJECT_PATH] je mozne pridat do SOLUTION na PATH 'SOLUTION_PATH' PROJECT na PATH 'PROJECT_PATH'.
10. Pomocou COMMAND [dotnet build] je mozne vykonat BUILD ASP.NET CORE PROJECT. COMMAND MUSI byt spusteny v DIRECTORY, kde sa nachadza PROJECT FILE [.csproj].
!!! 11. Pomocou COMMAND [dotnet run] je mozne spustit ASP.NET CORE PROJECT. COMMAND MUSI byt spusteny v DIRECTORY, kde sa nachadza PROJECT FILE [.csproj]. Tento COMMAND NESPUSTA WEB BROWSER, iba spusti WEB SERVER v ktorom bezi ASP.NET CORE PROJECT.
12. V ASP.NET CORE APPLICATIONS su vsetky HTTP REQUEST MESSAGES spracovavane v ENDPOINTS. Pre ENDPOINTS platia nasledujuce fakty.
   A. ENDPOINT je C# METHOD, ktorej ulohou je spracovat HTTP REQUEST MESSAGE.
   B. ENDPOINT pre HTTP REQUEST MESSAGE generuje HTTP RESPONSE MESSAGE, ktora obsahuje CONTENT, ktory SERVER SIDE zasiela na CLIENT SIDE.
!!! 13. Ak sa v ASP.NET CORE APPLICATIONS pouziva MVC FRAMEWORK, potom je ENDPOINT ACTION METHOD, ktora je sucastou CONTROLLER. Pre CONTROLLERS platia nasledujuce fakty.
   A. CONTROLLERS su implementovane ako C# CLASSES.
   B. CONTROLLERS su spravidla DERIVED z CLASS [Controller], ktora je definovana v NAMESPACE [Microsoft.AspNetCore.Mvc].
   !!! C. KAZDA PUBLIC METHOD v CONTROLLER sa nazvyva ACTION METHOD. ACTION METHOD je C# METHOD, ktora spracovava prijaty HTTP REQUEST.
   D. CONTROLLERS sa podla konvencie ukladaju do DIRECTORY [Controllers].
   E. CONTROLLERS su podla konvencie ulozene vo FILES, ktore maju mennu konvenciu [XXXController.cs], kde 'XXX' reprezentuje CONTROLLER NAME.
14. ROUTING SYSTEM v ASP.NET CORE je mechanizmus, ktory mapuje URL adresy na ENDPOINTS (CONTROLLERS a ACTIONS). ROUTE urcuje, ktora ACTION, ktoreho CONTROLLER sa ma zavolat pri vyvolani danej URL.
15. Pre VIEWS v ASP.NET CORE platia nasledujuce fakty.
   A. VIEWS predstavuju HTML PAGES, ktore sa renderuju ako vysledok vykonanej ACTION.
   B. VIEWS sa renderuju tym, ze sa vratia ako RETURN VALUES ACTION METHODS. Standardne sa vracia instancia CLASS [ViewResult].
   !!! C. VIEWS sa vytvaraju volanim METHOD [ViewResult View(string ViewName, object Model)], ktorej sa zada meno VIEW. Ak METHOD [ViewResult View(string ViewName, object Model)] NEOBSAHUJE MENO, potom sa vola VIEW, ktory ma ROVNAKE MENO ako MENO ACTION METHOD. Ak teda napriklad ACTION METHOD sa vola 'XXX', potom sa zavola VIEW [XXX.cshtml].
   !!! D. S jednym CONTROLLER moze byt asociovanych VIACERO VIEWS.
   !!! E. VIEWS sa podla konvencie ukladaju do SUBDIRECTORIES DIRECTORY [Views], pricom vsetky VIEWS asociovane s danym CONTROLLER su ulozene v specifickom SUBDIRECTORY. Napriklad VIEW 'Home' bude ulozene v SUBDIRECTORY [Views/Home].
   F. VIEWS, ktore su SHARED medzi VIACERYMI CONTROLLERS su ulozene v DIRECTORY [Views/Shared].
   G. VIEWS su FILES TYPE [.cshtml]. Tieto FILES obsahuju okrem HTML CODE aj RAZOR CODE, ktory interpretuje RAZOR VIEW ENGINE.
   !!!!! H. Podla konvencie by mena VIEWS mali byt rovnako ako mena ACTIONS. To znaci, ze VIEW pre ACTION 'MyView' by mala byt ulozena vo FILE [MyView.cshtml].
!!! 16. V pripade akejkolvek ERROR, ASP.NET CORE generuje ERROR WEB PAGE, ktora obsahuje informacie o samotnej ERROR, ako aj CALL STACK, HTTP REQUEST, COOKIES a dalsie uzitocne informacie pre DEBUGGING.
17. CONTROLLERS mozu vo svojich ACTION METHODS vracat rozlicne typy RETURN VALUES, ktore urcuju aku ACTION ma BROWSER vykonat. Tieto RETURN VALUE sa nazyvaju ACTION RESULTS. ASP.NET CORE podporuje napriklad tieto ACTION RESULTS.
   A. CLASS [string] urcuje STRING, ktory sa posle ako HTTP RESPONSE.
   B. CLASS [ViewResult] urcuje, ktory VIEW sa ma renderovat ako HTTP RESPONSE.
   C. CLASS [RedirectResult] prikazuje WEB BROWSERU, aby spravil REDIRECTING na inu URL.
   D. CLASS [HttpUnauthorizedResult] prikazuje WEB BROWSERU zobrazit ERROR MESSAGE s nedostatocnymi pristupovymi pravami.
18. DATA, ktore ACTION METHODS CONTROLLES generuju a zasielaju ich do VIEW na RENDERING sa nazyvaju MODEL. MODEL je tvoreny jednym, alebo viacerymi MODEL OBJECTS.
19. MODEL OBJECT v ASP.NET CORE reprezentuje C# CLASS, ktora obsahuje BUSINESS LOGIC WEB APPLICATION. Pre MODEL OBJECTS platia nasledujuce fakty.
   A. MODEL OBJECTS su C# CLASSES obsahujuce FIELDS, ktore reprezentuju data a METHODS na pracu s tymito data.
   B. MODEL OBJECTS sa podla konvencie ukladaju do DIRECTORY [Models].
//----------------------------------------------------------------------------------------------------------------------