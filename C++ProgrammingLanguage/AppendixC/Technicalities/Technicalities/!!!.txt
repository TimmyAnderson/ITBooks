//-------------------------------------------------------------------------------------------------------
1. Soultion demonstruje rozlicne vlastnosti C++, ktore neboli spomenute v inych kapitolach knihy.
2. TEMPLATE CLASSES mozu mat STATIC MEMBERS, ktore tak ako vsetky STATIC MEMBERS DEFINOVANE.
!!! 3. STATIC FIELDS MUSIA byt EXPLICITNE DEFINOVANE pre KAZDY POUZITY TYPE. Ak nie su DEFINOVANE EXPLICITNE, pre VSETKY POUZIVANE TYPY, tak LINKER HODI CHYBU.
4. TEMPLATES mozu definovat FRIENDS vyuzivajuce TEMPLATE PARAMETERS.
!!!!! 5. C++ podporuje v TEMPLATES CLASSES (nie v TEMPLATE FUNCTIONS) TEMPLATE PARAMETRE, ktore su SAMI TEMPLATES. To umoznuje definovat TEMPLATE CLASS, ktorej napriklad FIELDS budu TEMPLATES typu zaslaneho ako TEMPLATE PARAMETER. To umoznuje napriklad pre TEMPLATE s TEMPLATE PARAMETRAMI TType (klasicky parameter) a TTemplate (parameter typu TEMPLATE) napriklad nasledujuci napriklad FIELD [TTemplate<TType> Values;], alebo FIELD [TTemplate<TType*> Pointers;]. Caste pouzitie ma napriklad vtedy, ked TEMPLATE ma pouzivat COLLECTION, co je TIEZ TEMPLATE, avsak NECHCEM definovat, AKY TYPE CONTAINER sa ma pouzit. V takomto pripade ako TEMPLATE PARAMETER definujem TEMPLATE vo vyzname COLLECTION.
!!!!! 6. Visual Studio C++ ma niektore NEDOSTATKY v definicii TEMPLATE PARAMETERS, ktore su typu TEMPLATES. Napriklad, ked som nahradil v DEKLARACII TEMPLATE KEYWORD 'class' za 'typename', tak C++ to NEDOKAZALO SKOMPILOVAT. Musel som to vrati spat na 'class', aby to dokazalo SKOMPILOVAT.
7. C++ dokaze pri volani TEMPLATE FUNCTIONS dedukovat TEMPLATE PARAMETERS podla TYPOV ARGUMENTOV s ktorymi sa TEMPLATE FUNCTION vola. Dedukcia ma vsak ISTE OBMEDZENIA, ako napriklad NESCHOPNOST vykonat dedukciu RETURN VALUE.
8. KEYWORD 'typename' sluzi v C++ na 2 ucely.
   A. Ak sa TEMPLATE CLASS definuje cez 'typedef' NOVY TYPE, tak v TEMPLATE FUNCTIONS moze mat C++ problem s identifikovanim tohto NOVEHO TYPE, kedze ho v niektorych situaciach NEDOKAZE ROZLISIT od inych C++ konstrukcii. V takom pripade na jednoznacnu identifikaciu, ze SYNTAX znamena NOVY TYPE pred TYPE moze pouzije KEYWORD 'typename'.
   B. V DEKLARACII TEMPLATE CLASS, alebo TEMPLATE FUNCTION je mozne NAMIESTO KEYWORD 'class' pouzit 'typename'. Bohuzial v niektorych situaciach (pouzitie TEMPLATE ako TEMPLATE PARAMETER - vid vyssie) sa MUSI pouzit 'class'.
!!! 9. KEWYORD 'template' je mozne pouzit i ako PREFIX pred pouzitim TEMPLATE FUNCTION, ak COMPILER nedokaze rozoznat, ze sa jedna o TEMPLATE.
10. EXPLICITNA INSTANTION TEMPLATE, kedy sa vynuti od COMPILER, aby pre dany TYPE vytvoril INSTANCE danej ENTITY sa robi tak, ze sa DEKLARACIA ENTITY s definovanym TYPE predradi KEYWORD 'template'.
11. POINTER na MEMBER umoznuje vytvorit POINTER, ktory sa bude odkazovat na MEMBER danej CLASS.
12. ACCESS CONTROL moze byt okrem MEMBERS aplikovany aj pri INHERITANCE. ACCESS CONTROL aplikovany pri INHERITANCE ma nasledujuci vyznam.
   A. PRIVATE - PUBLIC a PROTECTED MEMBERS triedy CBase su pristupne iba v METHODS CDerived. Konverziu CDerived* na CBase* je mozne robit IBA v METHODS CDerived. Mimo tychto METHODS konverziu NIE JE MOZNE ROBIT.
   B. PROTECTED - PUBLIC a PROTECTED MEMBERS triedy CBase su pristupne iba v METHODS CDerived a METHODS CLASSES, ktore DEDIA z CDerived. Konverziu CDerived* na CBase* je mozne robit IBA v METHODS CDerived a METHODS CLASSES, ktore su ZDEDENE z CDerived. Mimo tychto METHODS konverziu NIE JE MOZNE ROBIT.
   C. PUBLIC - PUBLIC a PROTECTED MEMBERS triedy CBase su pristupne v lubovolnej FUNCTION. Konverziu CDerived* na CBase* je mozne robit z lubovolnych FUNCTIONS.
13. Ak sa pri INHERITACNE EXPLICITNE NEURCI ACCESS CONTROL, tak plati, ze CLASSES maju PRIVATE ACCESS a STRUCTS maju PUBLIC ACCESS.
!!!!! 14. Pomocou USING DECLARATION SYNTAX je mozne VYSTAVIT INHERITED MEMBERS LUBOVOLNYCH FUNCTIONS, ktore by pri PRIVATE a PROTECTED INHERITANCE boli pristupne iba z METHODS DERIVED CLASSES. Pomocou USING DECLARATION, vsak NIE JE MOZNE ZVIDITELNIT MEMBERS, ktore v CLASS, ktora pouzila USING DECLARATION su NEPRISTUPNE. Iba tie ktore su PRISTUPNE je mozne ZVEREJNIT. Pomocou tejto techniky je napriklad mozne z PROTECTED MEMBER z BASE CLASS spravit v DERIVED CLASS PUBLIC MEMBER.
15. Medzi OUTER CLASSES a INNER CLASSES NIE JE ZIADEN VZTAH z hladiska ACCESS CONTROL. Ak nejaky MEMBER z INNER CLASS ma byt v OUTER CLASS pristupny, MUSI mat ACCESS RIGHT PUBLIC, alebo OUTER CLASS ci OUTER METHOD MUSI byt oznacena ako FRIEND.
!!! 16. Visual C++ vsak UMOZNUJE PRISTUP z INNER CLASS aj do PRIVATE a PROTECTED OUTER CLASS.
!!! 17. ACCESS CONTROL aplikovany na INNER CLASS urcuje ci je INNER CLASS pristupny mimo OUTER CLASS. Ak je ACCESS RIGHT je PRIVATE, tak INNER CLASS NIE JE PRISTUPNY MIMO OUTER CLASS.
18. Pouzitie KEYWORD 'friend' NIE JE TRANZITIVNE (ak CLASS C je FRIEND ku CLASS B a CLASS B je FRIEND ku CLASS A, NEZNAMENA to, ze CLASS C je FRIEND ku CLASS A). KEYWORD 'friend' sa NEDEDI.
!!! 19. KEYWORD 'using' ma platnost od miesta vyskytu az na koniec SCOPE.
20. Pri NESTED NAMESPACES plati, ze z INNER NAMESPACE mozem pristupovat BEZ PLNE KVALIFIKOVANEHO MENA k OUTER NAMESPACE, ale z OUTER NAMESPACE je NUTNE specifikovat PLNE KVALIFIKOVANE MENO na pristup k INNER NAMESPACE.
21. C++ podporuje 3 pamatove modely.
   A. STATIC MEMORY - pamat alokovana LINKEROM, ktora ma pocase behu programu STATICKU ADRESU. Pre STATICKE OBJEKTY sa CONSTRUCTORS volaju pri starte programu a DESTRUCTORS sa volaju pri ukonceni programu. Patria sem GLOBAL VARIABLES, NAMESPACE (GLOBAL) VARIABLES, STATIC MEMBER FIELD, STATIC VARIABLES.
   B. AUTOMATIC MEMORY - pamat alokovana na STACK pre FUNCTION ARGUMENTS a LOCAL VARIABLES. Pamat je alokovana AUTOMATICKY pri vstupe do BLOCK a AUTOMATICKY uvolnena pri opusteni BLOCK.
   C. DYNAMIC MEMORY - pamat alokovana pomocou OPERATORA 'new' a odstranovana pomocou OPERATOROV 'delete', alebo 'delete[]'. Je alokovana na HEAP.
22. BIT ARRAY je STRUCT, kde FIELDS maju definovanu velkost v BITS. Pre BITS ARRAYS platia nasledujuce fakty.
   A. FIELD moze byt pomenovany, alebo anonymny.
   !!! B. FIELD MUSI byt INTEGER, alebo ENUM TYPE. Moze byt aj CHAR.
   C. BIT FIELDS je mozne KOMBINOVAT s NORMALNYMI FIELDS.
   D. Ak do BIT FIELD priradzujem VYSSIU HODNOTU ako pocet BITS, tak je OREZANA na pocet BITS v BIT FIELDS.
   E. POINTER na BIT FIELD NIE JE MOZNE ZISKAT.
23. UNIONS umoznuju zlucit viacero FIELDS na jedno pamatove miesto. Vdaka UNIONS potom dany FIELD v ROZNOM CASE moze niest INE TYPY INFOMRACII. Pre UNIONS platia nasledujuce zasady.
   A. UNIONS mozu byt pomenovane, alebo ANONYMOUS.
   B. CLASS ako VALUES NEMOZU BYT CLENOM UNION, pretoze C++ by nedokazal pren zistit ci ma volat jeho DESTRUCTOR.
!!!!! 24. MULTIDIMENSIONAL ARRAYS su reprezentovane ako SUVISLY BLOK PAMATE o velkosti DIM1*DIM2*...*DIMN*sizeof(ITEM). Prenos MULTIDIMENSIONAL ARRAY do funkcie sa robi ako prenos POINTER na ITEM.
!!! 25. C++ obsahuje rozsirenia, ktore umoznuju nahradit specialne znaky pomocou specialnej SYNTAXE. Visual C++ vsak vyzaduje INCLUDE 'iso646.h', kde su vsetky tieto specialne znaky. C++ ma tieto specialne znaky.
   A. KEYWORDS - [and - &&], [and_eq - &=], [bitand - &], [bitor - |], [compl - ~], [not - !], [or - ||], [or_eq - |=], [xor - ^], [xor_eq - ^=] a [not_eq - !=].
   B. DIGRAPHS - [<% - {], [%> - }], [<: - [], [:> - ]], [%: - #] a [%:%: - ##].
   C. TRIGRAPHS - [??= - #], [??( - [], [??< - {], [??/ - \], [??) - ]], [??> - }], [??' - ^], [??! - |], [??- - ~] a [??? - ?]. 
!!! 26. Visual C++ vyzera, ze NEPODPORUJE DIGRAPHS a TRIGRAPHS.
27. Znak '\xXXXX' reprezentuje HEXA cislo 'XXXX'. Znak '\XXXX' reprezentuje OCTAL cislo 'XXXX'. UNICODE znaky mozu byt reprezentovane SYNTAXOU [\uXXXX], alebo [\UXXXXXXXX], kde X znamena HEXA ZNAK.
//-------------------------------------------------------------------------------------------------------