//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje implementaciu POLYMORPHISM pomocou TEMPLATES.
2. POLYMORPHISM je schopnost vyjadrit rozlicne chovanie pomocou tej istej NOTATION.
3. C++ definuje nasledujuce typy POLYMORPHISM.
   A. DYNAMIC POLYMORPHISM.
   B. STATIC POLYMORPHISM.
4. Pre DYNAMIC POLYMORPHISM platia nasledujuce fakty.
   A. DYNAMIC POLYMORPHISM je implementovany pomocou CLASS INHERITANCE a VIRTUAL METHODS.
   B. DYNAMIC POLYMORPHISM je realizovany vacsinou v RUNTIME.
5. Pre STATIC POLYMORPHISM platia nasledujuce fakty.
   A. STATIC POLYMORPHISM je implementovany pomocou TEMPLATES.
   B. STATIC POLYMORPHISM je realizovany v COMPILE TIME.
6. DYNAMIC POLYMORPHISM sa v C++ realizuje v nasledujucich krokoch.
   A. Vo viacerych CLASSES sa identifikuju spolocne funkcionality.
   B. Definuje BASE CLASS, ktora obsahuje METHODS, ktore pokryvaju spolocne funkcionality viacerych CLASSES. METHODS su oznacene pomocou KEYWORD [virtual].
   C. Pre kazdy CLASS sa definuje DERIVED CLASS, ktory je DERIVED z BASE CLASS.
   D. DERIVED CLASSES musia implementovat vsetky VIRTUAL METHODS BASE CLASS.
   !!! E. Ak sa do REFERENCE TYPE, alebo POINTER TYPE BASE CLASS priradi REFERENCE TYPE, alebo POINTER TYPE na DERIVED TYPE, tak pri volani VIRTUAL METHOD sa nevola VIRTUAL METHOD BASE CLASS, ale vola sa VIRTUAL METHOD prislusnej DERIVED CLASS a to aj napriek tomu, ze VARIABLE je REFERENCE TYPE na BASE CLASS, alebo POINTER TYPE na BASE CLASS.
   F. Vdaka DYNAMIC POLYMORPHISM je mozne implementovat univerzalne ALGORITHMS nad DERIVED CLASSES, ktore su DERIVED z tej iste BASE CLASS.
7. STATIC POLYMORPHISM sa v C++ realizuje v nasledujucich krokoch.
   A. Definuju sa CLASSES, ktore vsak NEMAJU spolocny BASE CLASS. Kazda vsak musi mat spolocnu mnozinu MEMBERS, ktory maju rovnaky NAME a SIGNATURE.
   B. Pre kazdu OPERATION sa definuje TEMPLATE FUNCTION, ktora ma TEMPLATE PARAMETERS. Nad tymito TEMPLATE PARAMETERS sa volaju spolocne MEMBERS definovanych CLASSES.
   C. Cinnost TEMPLATE FUNCTION na zaklade toho, instancie ktorych CLASSES su do TEMPLATE FUNCTION zaslane.
8. DYNAMIC POLYMORPHISM splna nasledujuce PROGRAMMING IDIOMS.
   A. DYNAMIC POLYMORPHISM je BOUNDED. To znamena, ze INTERFACES, ktore participuju na POLYMORPHISM su urcene dizajnom spolocnych BASE CLASSES.
   B. DYNAMIC POLYMORPHISM je DYNAMIC. To znamena, ze k BINDING definovanych INTERFACES dochadza v RUNTIME.
9. STATIC POLYMORPHISM splna nasledujuce PROGRAMMING IDIOMS.
   A. STATIC POLYMORPHISM je UNBOUNDED. To znamena, ze INTERFACES, ktore participuju na POLYMORPHISM nie su dopredu urcene vo forme BASE CLASSES.
   B. STATIC POLYMORPHISM je STATIC. To znamena, ze k BINDING definovanych INTERFACES dochadza v COMPILE TIME.
10. Jednou z najvacsich nevyhod povodnej implementacie TEMPLATES je neexistencia COMMON INTERFACE, ktory by urcil ake podmienky musia jednotlive TEMPLATE PARAMETERS splnat. Tento problem sa vyriesil zavedenim CONCEPTS.
11. C++ 20 definuje nasledujuce pojmy.
   A. REQUIREMENTS. REQUIREMENTS definuju sadu podmienok, ktore musia TEMPLATE ARGUMENTS splnat, aby mohli byt substituovane za dane TEMPLATE PARAMETERS.
   B. CONCEPTS. CONCEPT je pomenovana sada REQUIREMENTS, ktore sa aplikuju na jeden, alebo viacero TEMPLATE PARAMETERS.
!!! 12. REQUIREMENTS a CONCEPTS sluzia na definovanie podmienok ci TEMPLATE ARGUMENTS mozu byt substituovane za TEMPLATE PARAMETERS. V pripade ich nedodrzania umoznuju C++ COMPILER generovat zrozumitelnejsie ERROR MESSAGES.
13. Na TEMPLATE CLASSES a TEMPLATE FUNCTIONS je mozne aplikovat REQUIREMENTS.
   A. REQUIREMENTS definuju sadu podmienok, ktore musia TEMPLATE ARGUMENTS splnat, aby mohli byt substituovane za dane TEMPLATE PARAMETERS.
   B. Na TEMPLATE CLASSES a TEMPLATE FUNCTIONS moze byt aplikovanych viacero REQUIREMENTS.
   C. REQUIREMENTS sa aplikuju na TEMPLATE CLASSES a TEMPLATE FUNCTIONS pomocou C++ CLAUSE [requires].
   D. C++ CLAUSE [requires] moze byt aplikovana za TEMPLATE FUNCTION PARAMETERS, alebo hned za KEYWORD [template<>].
   !!! E. REQUIREMENTS su VZDY vyhodnocovane v COMPILE TIME.
14. GENERIC PROGRAMMING v C++ musi splnat 2 kriteria.
   A. Pouziva TEMPLATES.
   B. TEMPLATES su dizajnovane vo forme FRAMEWORK tak, aby umoznili velke mnozstvo pouzitelnych kombinacii.
15. Typickym GENERIC PROGRAMMING CONCEPT su STL ITERATORS. Pre STL ITERATORS platia nasledujuce fakty.
   A. STL ITERATORS definuju univerzalny STATIC INTERFACE vo forme OPERATIONS, ktore musi dany ITERATOR poskytovat.
   B. STL CONTAINTERS implementuju TYPES, ktore reprezentuju STL ITERATORS. Tieto TYPES teda implementuju definovany univerzalny STATIC INTERFACE.
   C. C++ ALGORITHMS su TEMPLATES, ktore vyzaduju ako TEMPLATE PARAMETERS STL ITERATORS. Na ich zaklade su schopne realizovat GENERIC ALGORITHMS.
//----------------------------------------------------------------------------------------------------------------------