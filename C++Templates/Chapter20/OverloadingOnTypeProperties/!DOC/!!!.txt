//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje FUNCTION OVERLOADING na zaklade TYPE PROPERTIES.
2. C++ umoznuje FUNCTION OVERLOADING na zaklade TYPES FUNCTION PARAMETERS.
!!! 3. C++ vsak NEMA priamo LANGUAGE SUPPORT pre FUNCTION OVERLOADING ak sa FUNCTION PROTOTYPES lisia iba v tom, ze FUNCTION PARAMETERS splnaju ine kriteria aplikovanych TYPE TRAITS. Inak povedane, ak sa definuje TEMPLATE FUNCTION ktora ma PARAMETER ktoreho TYPE splna jeden TYPE TRAIT a definuje sa OVERLOADED FUNCTION ktora ma PARAMETER ktoreho TYPE splna iny TYPE TRAIT, tak COMPILER hodi ERROR.
4. C++ poskytuje viacero technik, ktore umoznuju vykonat FUNCTION OVERLOADING pre OVERLOADED FUNCTIONS, ktorych PARAMETER TYPES sa lisia v tom, ze ich inak vyhodnocuju rozne TYPE TRAITS.
!!! 5. ALGORITHM SPECIALIZATION je technika, kedy PROGRAMMING LANGUAGE ak ma k dispozicii OVERLOADED FUNCTION pre GENERIC TEMPLATE PARAMETERS a OVERLOADED FUNCTION pre SPECIFIC TEMPLATE PARAMETERS, tak uprednostni OVERLOADED FUNCTION pre SPECIFIC TEMPLATE PARAMETERS pred OVERLOADED FUNCTION pre GENERIC TEMPLATE PARAMETERS.
6. TAG DISPATCHING je technika pre TEMPLATE FUNCTION OVERLOADING pre ktoru platia nasledujuce fakty.
   A. Pre kazdy ALGORITHM sa definuje specialny TYPE, ktory identifikuje dany ALGORITHM. TYPES mozu byt vzajomne DERIVED.
   B. Kazda OVERLOADED TEMPLATE FUNCTION ma ako PARAMETER TYPE daneho ALGORITHM. Tento PARAMETER umoznuje FUNCTION OVERLOADING.
7. Na implementaciu TEMPLATE FUNCTION OVERLOADING je mozne pouzit princip SFINAE. Princip SFINAE sa aplikuje nasledujucim sposobom.
   A. Implementuju sa viacere OVERLOADED TEMPLATE FUNCTIONS.
   B. Do kazdej TEMPLATE FUNCTION sa prida CONDITION, ktora ked vrati VALUE [false], tak sposobi COMPILATION ERROR, aby ju COMPILER vdaka principu SFINAE vyradil z CANDIDATE SET.
   !!! C. CONDITION MUSI byt implementovana tak, aby VZDY ostala PRESNE 1 TEMPLATE FUNCTION zo vsetkych OVERLOADED TEMPLATE FUNCTIONS, ktora splna danu CONDITION.
8. Uplnou alternativou voci TEMPLATE FUNCTION OVERLOADING je pouzitie CODE [if constexpr (EXPRESSION)]. Pre tuto alternativu platia nasledujuce fakty.
   A. Alternativu je mozne pouzit iba ak vsetky scenare obsahuju ten isty INTERFACE a tie iste CLASSES.
   B. Alternativa nie je vhodna ak pre niektore TEMPLATE ARGUMENT LISTS nema dojst k INSTANTIATION.
9. C++ 20 umoznuje TEMPLATE FUNCTION OVERLOADING s pouzitim CONCEPTS. COMPILER automaticky vyradi tie OVERLOADED TEMPLATE FUNCTIONS, ktore nesplnaju CONCEPT CONDITIONS. Pre pouzitie CONCEPTS platia nasledujuce fakty.
   A. Na kazdu OVERLOADED TEMPLATE FUNCTION sa aplikuje CONCEPT.
   B. CONDITIONS v CONCEPTS musia byt MUTUALLY EXLUSIVE, aby vzdy bola splnena presne 1 OVERLOADED TEMPLATE FUNCTION.
   C. CONCEPTS mozu byt aplikovane aj NON-TEMPLATE FUNCTIONS a NON-TEMPLATE METHODS.
10. Aj pre TEMPLATE CLASSES je mozne pouzit ENABLE/DISABLE techniku, kedy je mozne vyuzit SFINAE princip na vyradenie nevyhovujucich TEMPLATE CLASS SPECIALIZATIONS a vyberat bud PRIMARY TEMPLATE CLASS, alebo TEMPLATE CLASS SPECIALIZATION na zaklade TYPE PROPERTIES. Implementacia sa vykonava nasledujuce.
   A. Definuje sa PRIMARY TEMPLATE CLASS, ktora obsahuje DEFAULT implementaciu TEMPLATE CLASS. Ta sluzi ako FALLBACK. To znamena, ze ak nie je najdena ziadna lepsia TEMPLATE CLASS SPECIALIZATION, tak sa pouzije PRIMARY TEMPLATE CLASS.
   !!! B. PRIMARY TEMPLATE CLASS ma definovany HIDDEN TEMPLATE TYPE PARAMETER v TEMPLATE PARAMETER CLASS, ktory je v PRIMARY TEMPLATE CLASS nastaveny an DEFAULT TYPE. Tento HIDDEN TEMPLATE TYPE PARAMETER sa pouzije na ENABLE/DISABLE TEMPLATE CLASS SPECIALIZATIONS.
   !!! C. Definuju sa 1, alebo viacero TEMPLATE CLASS SPECIALIZATION. Kazda TEMPLATE CLASS SPECIALIZATION sa lisi v hodnote HIDDEN TEMPLATE TYPE PARAMETER. Tento PARAMETER musi byt na zaklade vyhodnotenia TYPES PROPERTIES bud vratit validny TYPE, kedy sa dana TEMPLATE CLASS SPECIALIZATION pouzije, alebo sposobit COMPILATION ERROR, aby ju COMPILER pomocou principu SFINAE vyradil.
   !!! D. CONDITIONS v HIDDEN TEMPLATE TYPE PARAMETER v TEMPLATE CLASS SPECIALIZATIONS MUSIA byt MUTUALLY EXCLUSIVE. To znamena, maximalne 1 TEMPLATE CLASS SPECIALIZATION moze vratit validny TYPE a ostatne musia vratit COMPILATION ERROR, aby ich COMPILER na zaklade principu SFINAE vyradil.
   !!!!! E. Ak vsetky CONDITIONS v HIDDEN TEMPLATE TYPE PARAMETER v TEMPLATE CLASS SPECIALIZATIONS sposobia COMPILATION ERROR a COMPILER na zaklade principu SFINAE vyradi vsetky TEMPLATE CLASS SPECIALIZATIONS, tak sa pouzije PRIMARY TEMPLATE CLASS.
11. TAG DISPATCHING je mozne pouzit aj pre TEMPLATE CLASSES. TAG DISPATCHING pre TEMPLATE CLASSES sa implementuje nasledovne.
   A. Deklaruje sa PRIMARY TEMPLATE CLASS, ktora ma specialny TEMPLATE TYPE PARAMETER. PRIMARY TEMPLATE CLASS je len DECLARED. Nepotrebuje ziadnu DEFINITION.
   B. Pre kazdy ALGORITHM sa definuje vlastna TEMPLATE CLASS SPECIALIZATION, ktora ma za specialny TEMPLATE TYPE PARAMETER dosadeny prislusny TAG DISPATCHING TYPE. Na jeho zaklade dokaze COMPILER urcit, ktoru TEMPLATE CLASS SPECIALIZATION ma pouzit.
   !!!!! C. PRIMARY TEMPLATE CLASS by mala mat nastavenu hodnotu specialneho TEMPLATE TYPE PARAMETER na DEFAULT AGRUMENT typu TYPE TRAIT, ktory rozlisi, ktora TEMPLATE CLASS SPECIALIZATION na zaklade TYPES PROPERTIES sa ma pouzit. Ak tento DEFAULT ARGUMENT NIE je definovany, tak pri pouziti TEMPLATE CLASS je treba TAG DISPATCHING CLASS explicitne definovat. Tato technika vyuziva fakt, ze DEFAULT ARGUMENT TEMPLATE PARAMETER je AUTOMATICKY aplikovany v TEMPLATE CLASS SPECIALIZATIONS.
12. INSTANTIATION SAFE TEMPLATES su TEMPLATES, ktore maju kazdu svoju OPERATION, ktoru vykonavaju nad TEMPLATE PARAMETERS vytiahnutu ako CONDITION pre ENABLE IF TYPE TRAIT. INSTANTIATION takejto TEMPLATE my nemala NIKDY ZLYHAT, pretoze TEMPLATE ARGUMENTS, ktore nesplnaju CONDITIONS pre ENABLE IF TYPE TRAIT sposobia COMPILER ERROR, pre ktory je TEMPLATE vyradena pomocou principu SFINAE.
//----------------------------------------------------------------------------------------------------------------------