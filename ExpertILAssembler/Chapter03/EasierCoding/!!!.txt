//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje vlastnosti MSIL ASSEMBLER, ktore zjednodusuju programovanie v MSIL. Patria k nim ALIASING, COMPILATION CONTROL DIRECTIVES a SPECIAL KEYWORDS.
2. MSIL 2.0. rozsiruje moznosti MSIL o ALIASING. ALIASING je mechanizmus, ktory umoznuje definovat INE (skratene) MENA jednotlivym CODE ELEMENTS. ALIASING je v MSIL 2.0. mozne aplikovat na nasledujuce CODE ELEMENTS.
   A. CLASS NAMES. Napriklad [.typedef [mscorlib]System.Console as TTY].
   B. METHOD NAMES. Napriklad [.typedef method void [mscorlib]System.Console::WriteLine(string) as PrintLine].
   C. FIELD NAMES. Napriklad [.typedef field int32 SimpleSampleAliasing.CSimpleSampleAliasing::MValue as MFieldValue].
   D. CUSTOM ATTRIBUTES.
3. ALIASES sa definuju pomocou KEYWORD [.typedef TYPE SIGNATURE as XXX], kde 'XXX' je ALIAS, 'SIGNATURE' je CODE ELEMENT, ktory bude substituovany a TYPE je TYPE ALIAS ('method', 'field', alebo prazdna hodnota). Pre ALIASES platia nasledujuce vlastnosti.
   !!! A. ALIASES moze byt pouzite pri deklarovani inych ALIASES.
   B. Jeden CODE SEGMENT moze byt oznaceny VIACERYMI ALIASES.
   !!! C. ALIASES su platne pre CELY MODULE a NEMOZE byt REDEFINED.
   D. ALIASES musia byt lexikalne definovane PRED ich POUZITIM.
   !!! E. ALIASES su ulozene v METADATA generovanej ASSEMBLY a teda aj po zobrazeni obsahu ASSEMBLY v [ILDASM.EXE] je [ILDASM.EXE] schopny zobrazit ALIASES v GENERATED CODE.
!!! 4. MSIL 2.0. umoznuje definovat CODE ITEMS (CLASSES, FIELDS, METHODS) i MIMO NAMESPACE. Na taketo CODE ITEMS sa potom odkazuje bez NAMESPACES iba priamo menom CODE ITEM.
!!! 5. MSIL 2.0. umoznuje vlozit meno NAMESPACE PRIAMO do mena CLASS. Napriklad [.class public auto ansi SimpleSampleAliasing.CSimpleSampleAliasing extends [mscorlib]System.Object].
6. MSIL 2.0. podporuje nasledujuce COMPILATION DIRECTIVES.
   A. DIRECTIVE [#include "Path\Filename.il"] vlozi obsah FILE 'Filename.il' do CURRENT .IL FILE. Dany FILE hlada bud na PATH 'Path', alebo ak PATH nie je zadana, tak ho hlada v CURRENT DIRECTORY, resp. v DIRECTORY urcenom COMPILATION ATTRIBUTE [/INC:Path].
   B. DIRECTIVE [#define SYMBOL] definuje SYMBOL, ktory je mozne testovat pomocou DIRECTIVES [#ifdef] a [#ifndef] a vykonavat tak CONDITIONAL COMPILATION.
   C. DIRECTIVE [#define SYMBOL "SomeText"] definuje SYMBOL, ktory ak MSIL najde v SOURCE CODE, nahradi ho hodnotou 'SomeText'.
   D. DIRECTIVE [#undef SYMBOL] rusi platnost SYMBOL definovanu pomocou DIRECTIVES [#define SYMBOL], alebo [#define SYMBOL "SomeText"]. Po DIRECTIVE [#undef SYMBOL] je mozne dany SYMBOL znova definovat.
   E. DIRECTIVE [#ifdef SYMBOL] vykona COMPILATION CODE za touto DIRECTIVE, ak je SYMBOL definovany.
   F. DIRECTIVE [#ifndef SYMBOL] vykona COMPILATION CODE za touto DIRECTIVE, ak je SYMBOL nedefinovany.
   G. DIRECTIVE [#else] zacina ELSE BLOCK k DIRECTIVES [#ifdef SYMBOL], alebo [#ifndef SYMBOL].
   H. DIRECTIVE [#endif] konci IF, alebo ELSE BLOCK definovanom pomocou DIRECTIVES [#ifdef SYMBOL], [#ifndef SYMBOL], alebo [#else].
7. MSIL DIRECTIVES [#ifdef SYMBOL], [#ifndef SYMBOL], [#else] a [#endif] mozu byt NESTED.
8. MSIL 2.0. definuje niekolko KEYWORDS, ktore zjednodusuju pisanie CODE.
   A. KEYWORD [.this] umoznuje v CLASS referovat na ine MEMBERS DANEJ CLASS bez vypisovania celeho mena MEMBER.
   B. KEYWORD [.this] umoznuje v DERIVED CLASS referovat na MEMBERS BASE CLASS bez vypisovania celeho mena MEMBER.
   C. KEYWORD [.nester] umoznuje v NESTED CLASS referovat na MEMBERS ENCLOSING CLASS bez vypisovania celeho mena MEMBER.
   D. KEYWORD [;] umoznuje separovat viacero STATEMENTS ak su na jednom riadku. Nema ziaden semanticky, iba vizualny vyznam.
//-------------------------------------------------------------------------------------------------------