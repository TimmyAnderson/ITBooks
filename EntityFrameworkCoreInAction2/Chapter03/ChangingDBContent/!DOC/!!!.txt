//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje sposoby akym ENTITY FRAMEWORK CORE vykonava INSERTS, UPDATES a DELETES nad DB.
2. ENTITY FRAMEWORK CORE si pre instancie ENTITY CLASSES drzi TRACKING INFORMATION v instancii CLASS [EntityEntry<TEntityType>], kde TYPE 'TEntity' je TYPE ENTITY CLASS.
3. TRACKING INFORMATION pre danu instanciu ENTITY CLASS je mozne ziskat volanim METHOD [EntityEntry<TEntityType> DbContext.Entry<TEntityType>(TEntityType Entity)].
!!! 4. NIE pre vsetky instancie ENTITY CLASSES si ENTITY FRAMEWORK CORE drzi TRACKING INFORMATION. Platia nasledujuce pravidla.
   A. Ak sa instancia ENTITY CLASS vytvori pomocou CONSTRUCTOR, pricom tato instancia NIE JE pouzita ako PARAMETER ziadnej METHOD CLASS [DbContext], tak takato instancia ENTITY CLASS NEMA asociovanu TRACKING INFORMATION.
   B. Ak sa instancia ENTITY CLASS vytvori pomocou CONSTRUCTOR, pricom tato instancia JE pouzita ako PARAMETER METHOD CLASS [DbContext] ako je napriklad METHOD [EntityEntry<TEntityType> DbSet<TEntityType>.Add(TEntityType Entity)], tak takato instancia ENTITY CLASS MA asociovanu TRACKING INFORMATION.
   C. Ak sa instancia ENTITY CLASS ziska vykonanim DB QUERY, pricom na DB QUERY NIE JE aplikovana METHOD [IQueryable<TEntityType> IQueryable<TEntityType>.AsNoTracking<TEntityType>()], tak takato instancia ENTITY CLASS MA asociovanu TRACKING INFORMATION.
   D. Ak sa instancia ENTITY CLASS ziska vykonanim DB QUERY, pricom na DB QUERY JE aplikovana METHOD [IQueryable<TEntityType> IQueryable<TEntityType>.AsNoTracking<TEntityType>()], tak takato instancia ENTITY CLASS NEMA asociovanu TRACKING INFORMATION.
5. TRACKING INFORMATION, ktora je asociovana s danou ENTITY CLASS obsahuje STATE vyjadreny pomocou ENUM TYPE [EntityState]. ENUM TYPE [EntityState] je pristupna pomocou PROPERTY [EntityEntry.State] a ma nasledujuce VALUES.
   A. VALUE [Detached] znamena, ze instancia ENTITY CLASS NIE je TRACKED a pri vykonani METHOD [int DbContext.SaveChanges()] je tato instancia ENTITY CLASS IGNOROVANA.
   B. VALUE [Unchanged] znamena, ze instancia ENTITY CLASS je TRACKED, ale nebola v nej vykonana ziadna zmena a pri volani METHOD [int DbContext.SaveChanges()] je tato instancia ENTITY CLASS IGNOROVANA.
   C. VALUE [Added] znamena, ze instancia ENTITY CLASS bola pridana do DB CONTEXT a volanie METHOD [int DbContext.SaveChanges()] vykona INSERT nad DB.
   D. VALUE [Modified] znamena, ze instancia ENTITY CLASS bola zmenena v DB CONTEXT a volanie METHOD [int DbContext.SaveChanges()] vykona UPDATE nad DB.
   E. VALUE [Deleted] znamena, ze instancia ENTITY CLASS bola vymazana z DB CONTEXT a volanie METHOD [int DbContext.SaveChanges()] vykona DELETE nad DB.
!!!!! 6. PROPERTY [EntityEntry.State] nemusi vzdy obsahovat presny STATE. METHOD [void ChangeTracker.DetectChanges()] vykona okamzitu kontrolu STATE vsetkych ENTITIES a vykona UPDATE ich PROPERTY [EntityEntry.State].
!!! 7. METHOD [TEntity DbSet<TEntityType>.Find(params object[] KeyValues)] umoznuje efektivne nacitavat instancie ENTITY CLASSES. Pre METHOD platia nasledujuce fakty.
   A. METHOD [TEntity DbSet<TEntityType>.Find(params object[] KeyValues)] umnoznuje vyhladavat instancie ENTITY CLASSES pomocou VALUES PRIMARY KEYS. Ak ma ENTITY viacero PRIMARY KEYS, ich hodnoty su zadane ako PARAMETERS METHOD.
   !!! B. METHOD [TEntity DbSet<TEntityType>.Find(params object[] KeyValues)] pred vykonanim DB QUERY VZDY skontroluje ci instancia danej ENTITY CLASS uz nebola nacitana a je sucastou DB CONTEXT. Ak ano, tak sa DB QUERY NEVYKONA a je vratena EXISTUJUCA instancia ENTITY CLASS.
8. ENTITY FRAMEWORK CORE vykonava vkladanie novych RECORDS do DB realizovanim nasledujucich krokov.
   A. Vytvori sa instancia ENTITY CLASS, ktora sa ma vlozit do DB. Po vytvoreni instancie ENTITY CLASS je TRACKING INFORMATION STATE danej instancie ENTITY CLASS nastaveny na STATE [EntityEntry.State.Detached].
   !!! B. Instancia ENTITY CLASS sa vlozi do DB CONTEXT pomocou METHOD [EntityEntry<TEntityType> DbSet<TEntityType>.Add(TEntityType Entity)] daneho DATA SET. Alternativou je pouzitie univerzalnejsej METHOD [EntityEntry<TEntityType> DbContext.Add<TEntityType>(TEntityType Entity)], ktora automaticky identifikuje ENTITY CLASS TYPE a tym padom aj TABLE do ktorej ma byt RECORD pridany.
   !!! C. Po pridani instancie ENTITY CLASS do DB CONTEXT sa TRACKING INFORMATION STATE instancie ENTITY CLASS zmeni svoj STATE na [EntityEntry.State.Added].
   D. Zavola sa METHOD [int DbContext.SaveChanges()], ktora prejde TRACKING INFORMATION vsetkych instancii ENTITY CLASS a tie, ktore maju nastavene STATE na [EntityEntry.State.Added] zapise ako nove RECORDS do DB.
   !!! E. Po vykonani zapisu RECORD do DB, ENTITY FRAMEWORK CORE nacita hodnotu PRIMARY KEY a vrati ju do DB CONTEXT. TRACKING INFORMATION STATE instancie ENTITY CLASS sa zmeni na STATE [EntityEntry.State.Unchanged].
!!! 9. Pri vkladani instancie PRINCIPAL ENTITY CLASS, ktora ma RELATIONS na instancie DEPENDENT ENTITY CLASSES vykonava ENTITY FRAMEWORK CORE nasledujuce operacie.
   A. ENTITY FRAMEWORK CORE vlozi do DB vsetky instancie DEPENDENT ENTITY CLASSES, ktore su v RELATIONSHIP s instanciou PRINCIPAL ENTITY CLASS.
   B. ENTITY FRAMEWORK CORE nasledne nacita pre vsetky instancie DEPENDENT ENTITY CLASSES ich PRIMARY KEYS.
   C. ENTITY FRAMEWORK CORE vlozi do DB instanciu PRIMARY ENTITY CLASS.
   D. ENTITY FRAMEWORK CORE nasledne nacita pre instanciu PRIMARY ENTITY CLASS jej PRIMARY KEY.
   !!! E. ENTITY FRAMEWORK CORE odosle PRIMARY KEY instancie PRIMARY ENTITY CLASS a PRIMARY KEYS vsetkych instancii DEPENDENT ENTITY CLASSES do DB CONTEXT.
   !!! F. ENTITY FRAMEWORK CORE vykona UPDATE PRIMARY KEYS a FOREIGN KEYS vsetkych vlozenych instancii ENTITY CLASSES.
10. UPDATE pomocou ENTITY FRAMEWORK CORE sa vykonava v nasledujucich krokoch.
   A. Pomocou ENTITY FRAMEWORK CORE sa nacitaju instancie ENTITY CLASSES, ktore maju byt UPDATED.
   B. Vykona sa UPDATE instancii ENTITY CLASSES zmenou ich PROPERTY VALUES.
   C. Vykona sa zapis UPDATES do DB volanim METHOD [int DbContext.SaveChanges()].
!!! 11. Pri zapise UPDATES do DB volanim METHOD [int DbContext.SaveChanges()] sa vykonavaju nasledujuce kroky.
   A. ENTITY FRAMEWORK CORE zavola METHOD [void ChangeTracker.DetectChanges()].
   B. METHOD [void ChangeTracker.DetectChanges()] vykona porovnanie povodnej kopie instancii ENTITY CLASSES nacitanych z DB a zmenenych instancii ENTITY CLASSES. Na zaklade detekcie tychto zmien su vygenerovane UPDATE SQL COMMANDS.
   C. Detekovane UPDATE SQL COMMANDS su vykonane na DB.
!!! 12. ENTITY FRAMEWORK CORE umoznuje instanciu ENTITY CLASS, ktora bola MANUALNE VYTVORENA a NIE NACITANA z DB mozne vlozit do DB CONTEXT volanim METHOD [EntityEntry<TEntityType> DbContext.Update<TEntityType>(TEntityType Entity)]. Takato instancia ENTITY CLASS je po volani METHOD [int DbContext.SaveChanges()] UPDATED v DB.
13. ENTITY FRAMEWORK CORE pre RELATIONSHIPS definuje nasledujuce pojmy.
   A. PRINCIPAL ENTITY je ENTITY v RELATIONSHIP, ktora obsahuje PRIMARY KEY a na ktoru sa referuje DEPENDENT ENTITY.
   B. DEPENDENT ENTITY je ENTITY v RELATIONSHIP, ktora obsahuje FOREIGN KEY a ktora sa referuje PRINCIPAL ENTITY.
14. UPDATE RELATIONSHIP 1:1 sa v ENTITY FRAMEWORK CORE vykonava nasledujucimi sposobmi.
   A. V PRINCIPAL ENTITY sa prida instancia DEPENDENT ENTITY jej priradenim do NAVIGATIONAL PROPERTY na DEPENDENT ENTITY.
   !!! B. V DEPENDENT ENTITY sa prida instancia PRINCIPAL ENTITY jej priradenim do NAVIGATIONAL PROPERTY na PRINCIPAL ENTITY.
   !!! C. V DEPENDENT ENTITY sa nastavi VALUE FOREIGN KEY PROPERTY na PRIMARY KEY PRINCIPAL ENTITY. DEPENDENT ENTITY uz musi v DB existovat.
   !!!!! D. Do DB CONTEXT sa prida instancia DEPENDENT ENTITY, ktora ma nastavenu NAVIGATIONAL PROPERTY na PRINCIPAL ENTITY, alebo FOREIGN KEY na PRINCIPAL ENTITY. V tomto pripade vsak PRINCIPAL ENTITY NESMIE mat priradenu inu DEPENDENT ENTITY, pretoze ENTITY FRAMEWORK CORE by o nej nevedel a pri pokuse o vlozenie novej DEPENDENT ENTITY s rovnakym FOREIGN KEY by doslo k naruseniu FOREIGN KEY CONTRAINT a vzniku EXCEPTION.
!!!!! 15. Pri vykonavani UPDATE RELATIONSHIP 1:1 plati, ze ak UPDATE, ktory vedie ku CASCADE DELETE je ABSOLUTNE NEVYHNUTNE nacitat DEPENDENT ENTITY pomocou LINQ OPERATOR [Include], aby ENTITY FRAMEWORK vedel zistit ci PRINCIPAL ENTITY je naviazana na DEPENDENT ENTITY a ak je DEPENDENT ENTITY nahradena inou, tak vykonal DELETE existujucej DEPENDENT ENTITY. Ak sa LINQ OPERATOR [Include] NEPOUZIJE tak pokus o takyto UPDATE hodi EXCEPTION, pretoze ENTITY FRAMEWORK CORE prida novu DEPENDENT ENTITY s rovnakym FOREIGN KEY ako ma existujuca DEPENDENT ENTITY (ktora mala byt DELETED) a pri RELATIONSHIP 1:1 dojde k naruseniu UNIKATNOSTI FOREIGN KEY.
16. UPDATE RELATIONSHIP 1:N sa v ENTITY FRAMEWORK CORE vykonava nasledujucimi sposobmi.
   A. V PRINCIPAL ENTITY sa prida instancia DEPENDENT ENTITY pridanim do NAVIGATIONAL PROPERTY COLLECTION na DEPENDENT ENTITIES.
   !!!!! B. V PRINCIPAL ENTITY sa pridaju instancie DEPENDENT ENTITIES nahradenim NAVIGATIONAL PROPERTY COLLECTION na DEPENDENT ENTITIES za novu COLLECTION. Pri tomto type UPDATE je NUTNE nacitat DEPENDENT ENTITIES pomocou LINQ OPERATOR [Include], inak ENTITY FRAMEWORK CORE nebude vediet o tom, ze v DB su existujuce DEPENDENT ENTITIES a pri vymene NAVIGATIONAL PROPERTY COLLECTION na DEPENDENT ENTITIES NEDOJDE k DELETE povodnych DEPENDENT ENTITIES.
   !!! C. V DEPENDENT ENTITY sa nastavi instancia PRINCIPAL ENTITY priradenim do NAVIGATIONAL PROPERTY na PRINCIPAL ENTITY.
   !!! D. V DEPENDENT ENTITY sa nastavi VALUE FOREIGN KEY PROPERTY na PRIMARY KEY PRINCIPAL ENTITY. DEPENDENT ENTITY uz musi v DB existovat.
   E. Do DB CONTEXT sa prida instancia DEPENDENT ENTITY, ktora ma nastavenu NAVIGATIONAL PROPERTY na PRINCIPAL ENTITY, alebo FOREIGN KEY na PRINCIPAL ENTITY.
17. UPDATE RELATIONSHIP M:N sa v ENTITY FRAMEWORK CORE vykonava nasledujucimi sposobmi.
   A. V PRINCIPAL ENTITY sa prida instancia DEPENDENT ENTITY pridanim do NAVIGATIONAL PROPERTY COLLECTION na PRINCIPAL ENTITIES.
   B. Na PRINCIPAL ENTITY sa pridaju instancie DEPENDENT ENTITIES nahradenim NAVIGATIONAL PROPERTY COLLECTION na PRINCIPAL ENTITY za novu COLLECTION.
   !!! C. V DEPENDENT ENTITY sa nastavi instancia PRINCIPAL ENTITY priradenim do NAVIGATIONAL PROPERTY na PRINCIPAL ENTITY.
   !!! D. V DEPENDENT ENTITY sa nastavi VALUE FOREIGN KEY PROPERTY na PRIMARY KEY PRINCIPAL ENTITY. DEPENDENT ENTITY uz musi v DB existovat.
   E. Do DB CONTEXT sa prida instancia DEPENDENT ENTITY, ktora ma nastavenu NAVIGATIONAL PROPERTY na PRINCIPAL ENTITY, alebo FOREIGN KEY na PRINCIPAL ENTITY.
18. UPDATE AUTOMATICKY VYTVARANEJ RELATIONSHIP M:N sa v ENTITY FRAMEWORK CORE vykonava nasledujucimi sposobmi.
   A. V ENTITY M sa prida instancia ENTITY N pridanim do NAVIGATIONAL PROPERTY COLLECTION na PRINCIPAL ENTITIES.
   B. V ENTITY N sa prida instancia ENTITY M pridanim do NAVIGATIONAL PROPERTY COLLECTION na PRINCIPAL ENTITIES.
!!! 19. ENTITY FRAMEWORK CORE dokaze implementovat CASCADE DELETE na DEPENDENT ENTITY v pripade, ze je PRINCIPAL ENTITY DELETED.
   A. Ak DEPENDENT ENTITY ma FOREIGN KEY TYPE NON-NULLABLE, potom ENTITY FRAMEWORK CORE AUTOMATICKY vykonava CASCADE DELETE na DEPENDENT ENTITY ak doslo k DELETE PRINCIPAL ENTITY.
   B. Ak DEPENDENT ENTITY ma FOREIGN KEY TYPE NULLABLE, potom ENTITY FRAMEWORK CORE NEVYKONAVA CASCADE DELETE na DEPENDENT ENTITY ak doslo k DELETE PRINCIPAL ENTITY. To znamena, ze pri zmazani PRINCIPAL ENTITY sa NEMAZE DEPENDENT ENTITY.
!!! 20. ENTITY FRAMEWORK CORE umoznuje vytvorit nad ENTITY SETS QUERY FILTERS. Pre QUERY FILTERS platia nasledujuce fakty.
   A. QUERY FILTERS su FILTERS, ktore su aplikovane na KAZDU QUERY, ktora je vykonavana voci danemu ENTITY SET.
   !!! B. QUERY FILTERS je mozne v QUERIES vypnut volanim METHOD [IQueryable<TEntityType> IQueryable<TEntityType>.IgnoreQueryFilters<TEntityType>()].
   C. QUERY FILTERS sa aplikuju volanim METHOD [EntityTypeBuilder<TEntityType> HasQueryFilter(Expression<Func<TEntityType,bool>> Filter)] na ENTITY SET pri jej vytvarani.
   !!! D. Typickym prikladom vyuzitia QUERY FILTERS je odfiltrovanie ENTITIES, ktore maju nastaveny priznak, ze su DELETED. Pouzitie QUERY FILTERS zabezpeci, ze kazda QUERY nad tymto ENTITY SET bude ignorovat RECORDS, ktore maju nastaveny priznak, ze su DELETED.
21. DELETE ENTITY CLASS sa vykonava nasledujucimi sposobmi.
   A. Volanim METHOD [EntityEntry<TEntityType> DbSet<TEntityType>.Remove(TEntityType Entity)].
   B. Volanim METHOD [EntityEntry<TEntityType> DbContext.Remove<TEntityType>(TEntityType entity)].
22. DELETE ENTITY CLASS, ktora ma RELATIONSHIPS je mozne vykonat v zavislosti od nastavenia DB INTEGRITY nasledujucim sposobom.
   A. Ak pri DELETE PRINCIPAL ENTITY DEPENDENT ENTITY umoznuje nastavit VALUE FOREIGN KEY na NULL, tak PRINCIPAL ENTITY je DELETED a DEPENDENT ENTITY NIE JE DELETED, ale jeho FOREIGN KEY VALUE na PRINCIPAL ENTITY je nastavena na NULL.
   B. Ak pri DELETE PRINCIPAL ENTITY DEPENDENT ENTITY umoznuje nastavit VALUE FOREIGN KEY na NULL a v DB je nastaveny CASCADE DELETE, tak sa vykona CASCADE DELETE, kedy je DELETED PRINCIPAL ENTITY a DELETED su aj DEPENDENT ENTITIES.
!!! 23. Ak sa vykonava DELETE PRINCIPAL ENTITY, ktora ma DEPENDENT ENTITIES je vzdy VHODNE pomocou LINQ OPERATOR [Include] nacitat tieto DEPENDENT ENTITIES. Ak totizto nie su nacitane do DB CONTEXT, ENTITY FRAMEWORK CORE NEVYKONA explicitny DELETE DEPENDENT ENTITIES a je na DB SERVERI ako ma nastaveny DEFAULT BEHAVIOR. Ak ho NEMA nastaveny na CASCADE DELETE, tak DEPENDENT ENTITIES NEBUDU DELETED, no dojde k poruseniu FOREIGN KEY CONSTRAINT co sposobi hodenie EXCEPTION.
//----------------------------------------------------------------------------------------------------------------------