//----------------------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie GraphQL FRAMEWORK.
2. Pre GraphQL FRAMEWORK platia nasledujuce fakty.
   A. GraphQL FRAMEWORK umoznuje vycitavanie iba tych dat zo SERVER SIDE, ktore CLIENT SIDE vyzaduje.
   B. V GraphQL FRAMEWORK CLIENT SIDE definuje v QUERY zoznam dat, vratane RELATIONSHIPS, ktore vyzaduje a SERVER SIDE vrati iba tieto pozadovane data.
   C. GraphQL FRAMEWORK umoznuje aj modifikaciu dat, ktora sa nazyva MUTATIONS.
3. Pre API, ktore vystavuju PROGRAMS pouzivajuce GraphQL FRAMEWORK platia nasledujuce fakty.
   A. PROGRAMS spravidla vystavuju iba 1 ENDPOINT na DEFAULT ADDRESS [/graphql].
   B. ENDPOINT je popisany pomocou GraphQL SCHEMA DEFINITION LANGUAGE.
   C. GraphQL SCHEMA popisuje ake QUERIES a MUTATIONS je mozne zaslat na dany API ENDPOINT. To znamena, ze GraphQL SCHEMA DEFINITION LANGUAGE popisuje strukturu dat a OPERATIONS, ktore je mozne nad danymi datami vykonat.
   D. CLIENT moze pouzit GraphQL SCHEMA na validaciu zaslanych OPERATIONS (QUERIES a MUTATIONS).
   E. GraphQL FRAMEWORK pracuje s datami pomocou RESOLVERS, ktore su implementovane nad jednotlivych DATA SOURCES.
!!! 4. GraphQL FRAMEWORK nema MICROSOFT implementaciu v .NET. Najcastejsie sa pouziva LIBRARY [HotChocolate].
5. HOT CHOCOLATE LIBRARY je implementovana v PACKAGE [HotChocolate.AspNetCore].
6. GraphQL SERVICES sa pridavaju do DEPENDENCY INJECTION CONTAINER volanim METHOD [IRequestExecutorBuilder AddGraphQLServer(IServiceCollection Services, string SchemaName, int MaxAllowedRequestSize, bool DisableDefaultSecurity)].
7. GraphQL QUERY sa pridava volanim METHOD [IRequestExecutorBuilder AddQueryType<TQuery>(IRequestExecutorBuilder Builder)].
8. GraphQL ENDPOINT sa pridava do ASP.NET CORE volanim METHOD [GraphQLEndpointConventionBuilder MapGraphQL(this IEndpointRouteBuilder endpointRouteBuilder, string Path, string SchemaName)].
9. WEB BROSER pri QUERY na URL [/graphql] zobrazuje HOT CHOCOLATE TEST PAGE na ktorej je mozne vykonavat OPERATIONS.
10. GraphQL MUTATIONS reprezentuju CREATE, UPDATE a DELETE OPERATIONS. MUTATIONS pozastavaju z nasledujucich casti.
   A. INPUT. INPUT je CLASS, ktora obsahuje INPUT DATA vstupujuce do MUTATION. BY-CONVENTION INPUT CLASSES maju POSTFIX [Input].
   B. PAYLOAD. PAYLOAD je CLASS, ktora obsahuje OUTPUT DATA, ktore vracia MUTATION. BY-CONVENTION PAYLOAD CLASSES maju POSTFIX [Payload].
   C. MUTATION. MUTATION je OPERATION vykonavana nad datami. BY-CONVENTION MUTATION ma NAME [VERB+NOUN].
11. GraphQL MUTATION ENDPOINTS sa pridavaju volanim METHOD [IRequestExecutorBuilder AddMutationType<TMutation>(this IRequestExecutorBuilder Builder)].
12. Pre citanie dat, ktore sa nachadzaju v RELATIONSHIPS sa pouzivaju RESOLVERS. Pre RESOLVERS platia nasledujuce fakty.
   A. RESOLVER umoznuje nacitat RELATED DATA pre dany FIELD, ak QUERY obsahuje poziadavku na nacitanie RELATED DATA z daneho FIELD.
   B. RESOLVER sa spusti, ked su data nacitavane pre dany FIELD PARENT OBJECT.
   C. RESOLVER moze citat DATA z rozlicnych SOURCES, ako su DATABASES, WEB API, alebo .NET OBJECTS.
   !!! D. RESOLVERS umoznuju nevykonavat zbytocne citanie RELATED DATA, ak ich QUERY nepozadovala.
13. HOT CHOCOLATE LIBRARY umoznuje definovat GraphQL SCHEMAS nasledujucimi sposobmi.
   A. BY-CONVENTIONS.
   B. CODE FIRST.
   C. SCHEMA FIRST.
14. Pre definovanie GraphQL SCHEMA pomocou BY-CONVENTIONS platia nasledujuce fakty.
   A. Pri BY-CONVENTIONS HOT CHOCOLATE LIBRARY konvertuje PUBLIC PROPERTIES a PUBLIC METHODS na RESOLVER CLASS, ktory ziskava data volanim tychto PUBLIC METHODS.
   B. Ak maju PUBLIC METHODS PREFIX [Get], alebo POSTFIX [Async], tak tieto su odstranene z NAME pri generovani RESOLVER CLASS.
15. Pre definovanie GraphQL SCHEMA pomocou CODE FIRST platia nasledujuce fakty.
   A. CODE FIRST vyuziva FLUENT API pomocou ktoreho sa definuje GraphQL SCHEMA.
   B. FLUENT API umoznuje maximalnu uroven CUSTOMIZATION.
16. Pre definovanie GraphQL SCHEMA pomocou SCHEMA FIRST platia nasledujuce fakty.
   A. SCHEMA sa definuje priamym vytvorenim GraphQL SCHEMA.
   B. HOT CHOCOLATE LIBRARY pouzije GraphQL SCHEMA na vygenerovanie zodpovedajucich .NET CLASSES.
17. FLUENT API pouziva na definovanie GraphQL SCHEMA nasledujuce typy OBJECTS.
   A. RUNTIME OBJECTS. RUNTIME OBJECT je OBJECT, ktory je vrateny v QUERIES.
   B. OBJECT TYPES. OBJECT TYPE umoznuje pomocou FLUENT API nakonfigurovat sposob akym sa bude pristupovat k RUNTIME TYPES prostrednictvom QUERIES.
   C. RESOLVER TYPES. RESOLVER TYPE je TYPE, ktory obsahuje RESOLVERS, ktore nacitavaju DEPENDENT RUNTIME OBJECTS pre dany PRINCIPAL RUNTIME OBJECT FIELD.
18. Vo FLUENT API sa GraphQL SCHEMA definuje pomocou OBJECT TYPES. Platia nasledujuce fakty.
   !!!!! A. Ulohou OBJECT TYPE je nakonfigurovat zodpovedajuci RUNTIME TYPE. RUNTIME TYPE je TYPE, ktory GraphQL vracia ako RESPONSE vo svojch QUERIES.
   B. OBJECT TYPE je CLASS, ktora je dedena z CLASS [ObjectType<TType>], kde TYPE [TType] je RUNTIME TYPE, ktory sa konfiguruje.
   C. CLASS [ObjectType<TType>] definuje VIRTUAL METHOD [void ObjectType<TType>.Configure(IObjectTypeDescriptor<TType> Descriptor)], ktora umoznuje pouzitim FLUENT API nakonfigurovat dany OBJECT TYPE.
   !!! D. INTERFACE OBJECT [IObjectTypeDescriptor<TType>] zaslany ako PARAMETER [Descriptor] do METHOD [void ObjectType<TType>.Configure(IObjectTypeDescriptor<TType> Descriptor)] sa pouziva na nakonfigurovanie daneho OBJECT TYPE.
   !!!!! E. OBJECT TYPE sa definuje ako pre DATA TYPES, ktore tvoria obsah QUERIES a MUTATIONS, tak aj pre QUERY TYPE a MUTATION TYPE.
19. INTERFACE [IObjectTypeDescriptor<TRuntimeType>] umoznuje pomocou FLUENT API nakonfigurovat RUNTIME OBJECT. Platia nasledujuce fakty.
   A. TYPE PARAMETER [TRuntimeType] reprezentuje RUNTIME OBJECT, ktory ma byt nakonfigurovany. Nie je to teda OBJECT TYPE, ale realny OBJECT, ktory vracia GraphQL.
   B. METHOD [IObjectTypeDescriptor<TRuntimeType> Name(string Value)] nastavuje NAME RUNTIME OBJECT. Tento NAME sa pouziva v GraphQL OPERATIONS.
   C. METHOD [IObjectTypeDescriptor<TRuntimeType> Description(string Value)] nastavuje DESCRIPTION RUNTIME OBJECT.
   !!! D. METHOD [IObjectFieldDescriptor Field(Expression<Func<TRuntimeType,object>> PropertyOrMethod)] vracia DESCRIPTOR OBJECT pre FIELD daneho RUNTIME OBJECT. DESCRIPTOR OBJECT TYPE [IObjectFieldDescriptor] umoznuje dalej nakonfigurovat dany FIELD.
20. INTERFACE [IObjectFieldDescriptor] umoznuje pomocou FLUENT API nakonfigurovat FIELD RUNTIME OBJECT. Platia nasledujuce fakty.
   A. METHOD [IObjectFieldDescriptor Name(string Value)] nastavuje FIELD NAME RUNTIME OBJECT. FIELD NAME sa pouziva v GraphQL OPERATIONS.
   B. METHOD [IObjectFieldDescriptor Description(string Value)] nastavuje DESCRIPTION FIELD RUNTIME OBJECT.
   !!!!! C. METHOD [IObjectFieldDescriptor Type<TOutputType>()] umoznuje nastavit OBJECT TYPE, ktory sa pouzije na nakonfigurovanie TYPE daneho FIELD. Typicky sa pouziva vtedy, ak FIELD je CUSTOM TYPE, ktory je treba dalej nakonfigurovat.
   !!! D. EXTENSION METHOD [IObjectFieldDescriptor Resolve<TResult>(this IObjectFieldDescriptor Descriptor, Func<IResolverContext,TResult> Resolver)] umoznuje nastavit RESOLVER DELEGATE pre SYNCHRONOUS METHODS, ktory umoznuje pre dany FIELD nacitat data, ak bol FIELD pozadovany v QUERY.
   !!! E. EXTENSION METHOD [IObjectFieldDescriptor Resolve<TResult>(this IObjectFieldDescriptor Descriptor, Func<IResolverContext,Task<TResult>> Resolver)] umoznuje nastavit RESOLVER DELEGATE pre ASYNCHRONOUS METHODS, ktory umoznuje pre dany FIELD nacitat data, ak bol FIELD pozadovany v QUERY.
   !!! F. METHOD [IObjectFieldDescriptor ResolveWith<TResolver>(Expression<Func<TResolver,object>> PropertyOrMethod)] umoznuje nastavit RESOLVER OBJECT, ktory umoznuje pre dany FIELD nacitat data, ak bol FIELD pozadovany v QUERY.
21. HOT CHOCOLATE LIBRARY definuje mnozinu STANDARD OBJECT TYPES, ktore obsahuju konfiguracie pre PRIMITIVE RUNTIME TYPES ci ine dolezite STANDARD RUNTIME TYPES. Platia nasledujuce fakty.
   A. STANDARD OBJECT TYPES su definovane v NAMESPACE [HotChocolate.Types].
   !!! B. STANDARD OBJECT TYPES sa pouzivaju vo FLUENT API na definovane OBJECT TYPES pre PRIMITIVE RUNTIME TYPES ci ine dolezite STANDARD RUNTIME TYPES.
   C. Medzi STANDARD OBJECT TYPES patria nasledujuce TYPES.
      A. TYPE [IntType] je OBJECT TYPE pre RUNTIME TYPE [int].
      B. TYPE [LongType] je OBJECT TYPE pre RUNTIME TYPE [long].
      C. TYPE [ShortType] je OBJECT TYPE pre RUNTIME TYPE [short].
      D. TYPE [ByteType] je OBJECT TYPE pre RUNTIME TYPE [byte].
      E. TYPE [FloatType] je OBJECT TYPE pre RUNTIME TYPE [double].
      F. TYPE [BooleanType] je OBJECT TYPE pre RUNTIME TYPE [bool].
      !!! G. TYPE [ListType<TObjectType>] je OBJECT TYPE pre TYPE [List<TType>]. TYPE PARAMETER [TObjectType] MUSI byt OBJECT TYPE, a NIE RUNTIME TYPE.
      !!! H. TYPE [NonNullType<TObjectType>] je OBJECT TYPE pre NON NULLABLE TYPE [TType]. TYPE PARAMETER [TObjectType] MUSI byt OBJECT TYPE, a NIE RUNTIME TYPE.
      I. TYPE [UuidType] je OBJECT TYPE pre RUNTIME TYPE [Guid].
      J. TYPE [UrlType] je OBJECT TYPE pre RUNTIME TYPE [Uri].
      K. TYPE [StringType] je OBJECT TYPE pre RUNTIME TYPE [String].
      L. TYPE [EnumType] je OBJECT TYPE pre RUNTIME ENUM TYPES.
      M. TYPE [LocalDateTimeType] je OBJECT TYPE pre RUNTIME TYPE [DateTime].
      N. TYPE [DateTimeType] je OBJECT TYPE pre RUNTIME TYPE [DateTimeOffset].
!!!!! 22. HOT CHOCOLATE LIBRARY vyuziva RESOLVERS PARALELNE. Platia nasledujuce fakty.
   A. RESOLVERS su volane PARALELNE z rozlicnych THREADS.
   !!! B. Ak RESOLVERS vyuzivaju DB CONTEXT, a DB CONTEXT je zaregistrovany v DEPENDENCY INJECTION ako SINGLETON OBJECT, alebo SCOPED OBJECT, dochadza k RACE CONDITION, kedze DB CONTEXT OBJECT NIE je THREADS SAFE.
!!! 23. HOT CHOCOLATE LIBRARY v RESOLVERS pouzivat DB CONTEXT POOLS. Pre DB CONTEXT POOLS platia nasledujuce fakty.
   !!! A. Pouzivanie DB CONTEXT POOLS znamena, ze DB CONTEXT OBJECTS su ulozene v DB CONTEXT POOL z ktorej su DB CONTEXT OBJECTS vyberane vzdy ked niektory RESOLVER potrebuje vykonat pristup k DB CONTEXT. Po skonceni cinnosti RESOLVER je DB CONTEXT OBJECT vrateny do POOL a moze ho vyuzit iny RESOLVER. Vo vysledku NIKDY nedochadza k tomu, ze by ten isty DB CONTEXT OBJECT bol pouzity v danom cast viacerymi THREADS.
   !!! B. HOT CHOCOLATE LIBRARY interne vyuziva ENTITY FRAMEWORK DB CONTEXT POOLS.
   C. Podpora HOT CHOCOLATE LIBRARY pre DB CONTEXT POOLS implementovana v LIBRARY [HotChocolate.Data.EntityFramework].
   !!! D. DB CONTEXT OBJECT sa registruje v ENTITY FRAMEWORK DB CONTEXT POOL volanim METHOD [IRequestExecutorBuilder RegisterDbContextFactory<TDbContext>(this IRequestExecutorBuilder Builder)].
   E. HOT CHOCOLATE LIBRARY podpora pre ENTITY FRAMEWORK DB CONTEXT POOL sa povoluje volanim METHOD [IRequestExecutorBuilder RegisterDbContextFactory<TDbContext>(this IRequestExecutorBuilder Builder)].
   !!! F. DB CONTEXT POOL sa v RESOLVERS pouziva nasledujucim sposobom.
      A. V RESOLVER sa ziska cez DEPENDENCY INJECTION OBJECT TYPE [IDbContextFactory<TDbContext>].
	  !!! B. DB CONTEXT OBJECT sa ziska volanim METHOD [Task<TContext> CreateDbContextAsync(CancellationToken CancellationToken)]. Tato METHOD vyberie DB CONTEXT OBJECT z DB CONTEXT OBJECT POOL.
	  !!!!! C. Po skonceni OPERATIONS nad DB CONTEXT OBJECT je NUTNE volat METHOD [void IDisposable.Dispose()], aby sa DB CONTEXT OBJECT vratil spat do DB CONTEXT OBJECT POOL.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
Popis GraphQL SCHEMA DEFINITION LANGUAGE.

1. TYPE sa definuje pomocou SYNTAX [type TYPE_NAME{BODY}], kde VALUE [TYPE_NAME] je nazov TYPE a VALUE [BODY] obsahuje definiciu daneho TYPE.
2. TYPE FIELD sa definuje pomocou SYNTAX [FIELD_NAME: FIELD_TYPE], kde VALUE [FIELD_NAME] je nazov FIELD a VALUE [FIELD_TYPE] je TYPE daneho FIELD.
3. Pre TYPES platia nasledujuce fakty.
   A. GraphQL definuje zoznam PRIMITIVE TYPES.
   B. TYPES su BY-DEFAULT NULLABLE.
   C. TYPES je mozne definovat ako NON-NULLABLE pomocou SYNTAX [TYPE_NAME!], kde VALUE [TYPE_NAME] je nazov TYPE.
   !!! D. ARRAYS su definovane pomocou SYNTAX [[TYPE_NAME]], kde VALUE [TYPE_NAME] je nazov TYPE.
   !!! E. ARRAY TYPES je mozne definovat ako NON-NULLABLE pomocou SYNTAX [[TYPE_NAME]!], kde VALUE [TYPE_NAME] je nazov TYPE.
4. GraphQL SCHEMA DEFINITION LANGUAGE podporuje nasledujuce PRIMITIVE TYPES.
   A. TYPE [Int].
   B. TYPE [Float].
   C. TYPE [String].
   D. TYPE [Boolean].
   E. TYPE [ID]. TYPE reprezentuje unikatny IDENTIFIER, ktory je type STRING.
   F. TYPE [Byte].
   G. TYPE [ByteArray]. TYPE reprezentuje BYTE ARRAY zakodovany v BASE-64.
   H. TYPE [Short].
   I. TYPE [Long].
   J. TYPE [Decimal].
   K. TYPE [Date].
   L. TYPE [TimeSpan].
   M. TYPE [DateTime].
   N. TYPE [Url].
   O. TYPE [Uuid]. TYPE reprezentuje GUID.
   P. TYPE [Any]. TYPE reprezentuje lubovolny TYPE.
5. ENUM TYPE sa definuje pomocou SYNTAX [enum TYPE_NAME{BODY}], kde VALUE [TYPE_NAME] je nazov ENUM TYPE a VALUE [BODY] obsahuje definiciu daneho ENUM TYPE.
6. ENUM TYPE FIELD sa definuje pomocou SYNTAX [FIELD_NAME], kde VALUE [FIELD_NAME] je nazov ENUM TYPE FIELD.
7. INPUT TYPE sa definuje pomocou SYNTAX [input TYPE_NAME{BODY}], kde VALUE [TYPE_NAME] je nazov INPUT TYPE a VALUE [BODY] obsahuje definiciu daneho INPUT TYPE.
!!!!! 8. GraphQL SCHEMA podporuje specialny QUERY TYPE obsahujuci zoznam vsetkych QUERIES. Platia nasledujuce fakty.
   A. QUERY TYPE je definovany pomocou SYNTAX [type TYPE_NAME{BODY}], kde VALUE [TYPE_NAME] je nazov QUERY TYPE a VALUE [BODY] obsahuje definiciu daneho QUERY TYPE.
   B. QUERY TYPE obsahuje zoznam QUERY OPERATIONS, ktore umoznuje vykonavat.
   C. QUERY TYPE OPERATION sa definuje pomocou SYNTAX [OPERATION_NAME(OPERATION_PARAMETERS):OPERATION_RETURN_TYPE], kde VALUE [OPERATION_NAME] je nazov OPERATIONS, VALUE [OPERATION_PARAMETERS] je zoznam PARAMETERS danej OPERATION a VALUE [OPERATION_RETURN_TYPE] je nazov OPERATION RETURN TYPE.
   D. V SCHEMA sa moze nachadza IBA 1 QUERY TYPE.
   E. Nazov QUERY TYPE je zaradeny v GraphQL SCHEMA v OBJECT [schema] v PROPERTY [query].
!!!!! 9. GraphQL SCHEMA podporuje specialny MUTATION TYPE obsahujuci zoznam vsetkych MUTATIONS. Platia nasledujuce fakty.
   A. MUTATION TYPE je definovany pomocou SYNTAX [type TYPE_NAME{BODY}], kde VALUE [TYPE_NAME] je nazov MUTATION TYPE a VALUE [BODY] obsahuje definiciu daneho MUTATION TYPE.
   B. MUTATION TYPE obsahuje zoznam MUTATION OPERATIONS, ktore umoznuje vykonavat.
   C. MUTATION TYPE OPERATION sa definuje pomocou SYNTAX [OPERATION_NAME(OPERATION_PARAMETERS):OPERATION_RETURN_TYPE], kde VALUE [OPERATION_NAME] je nazov OPERATIONS, VALUE [OPERATION_PARAMETERS] je zoznam PARAMETERS danej OPERATION a VALUE [OPERATION_RETURN_TYPE] je nazov OPERATION RETURN TYPE.
   D. V SCHEMA sa moze nachadza IBA 1 MUTATION TYPE.
   E. Nazov MUTATION TYPE je zaradeny v GraphQL SCHEMA v OBJECT [schema] v PROPERTY [mutation].
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
Priklady GraphQL OPERATIONS.

1. Nacitanie vsetkych NAMES.
   A. Nacitanie vsetkych NAMES ma nasledujucu SYNTAX.
					query MyQuery
					{
						myNames
						{
							id
							firstName
							lastName
							age
							sex
						}
					}
   B. VALUE [myNames] je nazov QUERY OPERATION v CAMEL CASE.
   C. RESPONSE TYPE je definovany na konci QUERY pomocou SYNTAX [{id firstName lastName age sex}].
2. Nacitanie jedneho NAME.
   A. Nacitanie jedneho NAME ma nasledujucu SYNTAX.
					query GetName
					{
						myName(id:1)
						{
							id
							firstName
							lastName
							age
							sex
						}
					}
   B. VALUE [myName] je nazov QUERY OPERATION v CAMEL CASE.
   C. VALUE [id] je nazov PARAMETER v QUERY OPERATION v CAMEL CASE.
   D. VALUE [1] je VALUE PARAMETER v QUERY OPERATION.
   E. RESPONSE TYPE je definovany na konci QUERY pomocou SYNTAX [{id firstName lastName age sex}].
3. Nacitanie jedneho NAME s vyuzitim PARAMETERS.
   A. Nacitanie jedneho NAME s vyuzitim PARAMETERS ma nasledujucu SYNTAX.
					query GetNameWithParameters($MyId: Int!)
					{
						myName(id: $MyId)
						{
							id
							firstName
							lastName
							age
							sex
						}
					}
   B. PARAMETERS sa definuju pomocou nasledujucej SYNTAX.
					"variables":
					{
						"MyId": 2
					}
   C. Cela QUERY ma nasledujucu SYNTAX.
					{"query":
						"query GetNameWithParameters($MyId: Int!)
						{
							myName(id: $MyId)
							{
								id
								firstName
								lastName
								age
								sex
							}
						}",
						"variables":
						{
							"MyId":1
						}
					}
   D. PARAMETERS sa definuju v QUERY pomocou SYNTAX [($PARAMETER_NAME: PARAMETER_TYPE)], kde VALUE [PARAMETER_NAME] je nazov PARAMETER a VALUE [PARAMETER_TYPE] je TYPE daneho PARAMETER.
   E. PARAMETERS sa v QUERY pouzivaju pomocou SYNTAX [$PARAMETER_NAME], kde VALUE [PARAMETER_NAME] je nazov PARAMETER.
   F. RESPONSE TYPE je definovany na konci QUERY pomocou SYNTAX [{id firstName lastName age sex}].
4. Pridanie noveho NAME.
   A. Pridanie noveho NAME ma nasledujucu SYNTAX.
					mutation MyMutation
					{
						myAddName(myInput:
						{
							firstName: "{{FirstName}}", 
							lastName: "{{LastName}}", 
							age: {{Age}}, 
							sex: {{Sex}} 
						})
						{
							id
							firstName
							lastName
							age
							sex
						}
					}
   B. VALUE [myAddName] je nazov MUTATION OPERATION v CAMEL CASE.
   C. VALUE [myInput] je nazov PARAMETER v MUTATION OPERATION v CAMEL CASE.
   D. RESPONSE TYPE je definovany na konci MUTATION pomocou SYNTAX [{id firstName lastName age sex}].
5. Nacitanie vsetkych OBJECTS, ktore su v RELATIONSHIP 1:1.
   A. Nacitanie vsetkych OBJECTS, ktore su v RELATIONSHIP 1:1 ma nasledujucu SYNTAX.
					query GetRelations11
					{
						myRelations11
						{
							valueParent1
							valueParent2
							valueChild
							{
								valueChild1
								valueChild2
							}
						}
					}				
   B. VALUE [myRelations11] je nazov QUERY OPERATION v CAMEL CASE.
   C. RESPONSE TYPE je definovany na konci QUERY pomocou SYNTAX [{valueParent1 valueParent2 valueChild{valueChild1 valueChild2}}].
   !!! D. RESPONSE TYPE ma PARENT TYPE, ktory je v RELATIONSHIP 1:1 k CHILD TYPE pomocou PROPERTY [valueChild].
6. Nacitanie vsetkych OBJECTS, ktore su v RELATIONSHIP 1:N.
   A. Nacitanie vsetkych OBJECTS, ktore su v RELATIONSHIP 1:N ma nasledujucu SYNTAX.
					query GetRelations1N
					{
						myRelations1N
						{
							valueParent1
							valueParent2
							valueChildren
							{
								valueChild1
								valueChild2
							}
						}
					}				
   B. VALUE [myRelations1N] je nazov QUERY OPERATION v CAMEL CASE.
   C. RESPONSE TYPE je definovany na konci QUERY pomocou SYNTAX [{valueParent1 valueParent2 valueChildren{valueChild1 valueChild2}}].
   !!! D. RESPONSE TYPE ma PARENT TYPE, ktory je v RELATIONSHIP 1:N k CHILD TYPE pomocou PROPERTY [valueChildren].
//----------------------------------------------------------------------------------------------------------------------