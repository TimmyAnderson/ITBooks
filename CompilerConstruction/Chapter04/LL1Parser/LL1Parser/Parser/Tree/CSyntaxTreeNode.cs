using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
//-------------------------------------------------------------------------------------------------------
namespace LL1Parser
{
//-------------------------------------------------------------------------------------------------------
	public sealed class CSyntaxTreeNode
	{
//-------------------------------------------------------------------------------------------------------
		private CSymbol											MNodeSymbol;
		private string											MSymbolText;
		private List<CSyntaxTreeNode>							MChildSymbolNodes;
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public CSyntaxTreeNode(CSymbol NodeSymbol, string SymbolText)
		{
			MNodeSymbol=NodeSymbol;
			MSymbolText=SymbolText;
			MChildSymbolNodes=new List<CSyntaxTreeNode>();
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public CSymbol											NodeSymbol
		{
			get
			{
				return(MNodeSymbol);
			}
		}
//-------------------------------------------------------------------------------------------------------
		public string											SymbolText
		{
			get
			{
				return(MSymbolText);
			}
		}
//-------------------------------------------------------------------------------------------------------
		public CSyntaxTreeNode[]								ChildSymbolNodes
		{
			get
			{
				return(MChildSymbolNodes.ToArray());
			}
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		private void WriteTree(StringBuilder SB, int Padding)
		{
			const int			Offset=2;

			SB.Append("".PadRight(Offset*Padding,' '));
			SB.AppendLine(MSymbolText);

			Padding++;

			foreach(CSyntaxTreeNode ChildSymbolNode in MChildSymbolNodes)
				ChildSymbolNode.WriteTree(SB,Padding);
		}
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
		public void AddChild(CSyntaxTreeNode SyntaxTreeNode)
		{
			MChildSymbolNodes.Add(SyntaxTreeNode);
		}
//-------------------------------------------------------------------------------------------------------
		public void AddChildren(CSyntaxTreeNode[] SyntaxTreeNodes)
		{
			foreach(CSyntaxTreeNode SyntaxTreeNode in SyntaxTreeNodes)
				AddChild(SyntaxTreeNode);
		}
//-------------------------------------------------------------------------------------------------------
		public override string ToString()
		{
			return(SymbolText);
		}
//-------------------------------------------------------------------------------------------------------
		public string WriteTree()
		{
			StringBuilder			SB=new StringBuilder();

			WriteTree(SB,0);

			return(SB.ToString());
		}
//-------------------------------------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------------------------