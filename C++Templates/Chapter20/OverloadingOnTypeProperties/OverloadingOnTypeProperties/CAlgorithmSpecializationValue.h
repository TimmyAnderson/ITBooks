//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <iostream>
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
class CAlgorithmSpecializationValue final
{
//----------------------------------------------------------------------------------------------------------------------
	template<typename TLocalType>
	friend std::wostream& operator<<(std::wostream& Stream, const CAlgorithmSpecializationValue<TLocalType>& Value);

	private:
		TType													MValue;

	public:
		const TType& GetValue(void) const noexcept;

	public:
		CAlgorithmSpecializationValue(const TType& Value);
		virtual ~CAlgorithmSpecializationValue(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CAlgorithmSpecializationValue<TType>::CAlgorithmSpecializationValue(const TType& Value)
	: MValue(Value)
{
}
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
CAlgorithmSpecializationValue<TType>::~CAlgorithmSpecializationValue(void) noexcept
{
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType>
const TType& CAlgorithmSpecializationValue<TType>::GetValue(void) const noexcept
{
	return(MValue);
}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TLocalType>
std::wostream& operator<<(std::wostream& Stream, const CAlgorithmSpecializationValue<TLocalType>& Value)
{
	Stream << Value.MValue;

	return(Stream);
}
//----------------------------------------------------------------------------------------------------------------------