//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <utility>
#include "STypeFunctionBoolConstant.h"
#include "SSFINAETraitIsConvertible.h"
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
struct SSFINAETraitHasLessInternal final
{
//----------------------------------------------------------------------------------------------------------------------
	private:
		template<typename TType>
		struct SIdentity;

	private:
		// !!!!! METHOD, ktora vykonava TEST ci medzi TYPE [TLocalType1] a TYPE [TLocalType2] existuje OPERATOR [OPERATOR<].
		// !!!!! METHOD je pouzivana IBA v OPERATOR [OPERATOR decltype()] a tym padom nepotrebuju DEFINITION.
		template<typename TLocalType1, typename TLocalType2>
		static TypeFunctionTrueType InternalTest(SIdentity<decltype(std::declval<TLocalType1>() < std::declval<TLocalType2>())>*);

		// !!!!! FALLBACK METHOD.
		// !!!!! METHOD je pouzivana IBA v OPERATOR [OPERATOR decltype()] a tym padom nepotrebuju DEFINITION.
		template<typename TLocalType1, typename TLocalType2>
		static TypeFunctionFalseType InternalTest(...);

	public:
		// !!!!! Na zaklade RETURN VALUE TYPE METHOD [InternalTest()] sa urcuje ci medzi TYPE [TLocalType1] a TYPE [TLocalType2] existuje OPERATOR [OPERATOR<].
		static constexpr bool									VALUE=decltype(InternalTest<TType1,TType2>(nullptr))::VALUE;
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2, bool HAS_LESS>
struct SSFINAETraitHasLessHelper
{
//----------------------------------------------------------------------------------------------------------------------
	public:
		using													TYPE=decltype(std::declval<TType1>() < std::declval<TType2>());
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
struct SSFINAETraitHasLessHelper<TType1,TType2,false>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
struct SSFINAETraitHasLessType final : public SSFINAETraitHasLessHelper<TType1,TType2,SSFINAETraitHasLessInternal<TType1,TType2>::VALUE>
{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
template<typename TType1, typename TType2>
using															SSFINAETraitHasLessAlias=typename SSFINAETraitHasLessType<TType1,TType2>::TYPE;
//----------------------------------------------------------------------------------------------------------------------