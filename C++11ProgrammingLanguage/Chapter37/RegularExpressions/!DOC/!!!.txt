//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje pouzitie REGULAR EXPRESSIONS v C++.
2. REGULAR EXPRESSIONS v C++ podporuju vykonavanie nasledujucich operacii.
   A. MATCH. Pri tejto operacii ci REGULAR EXPRESSION PATTERN zodpoveda CELEMU vstupnemu STRING.
   B. SEARCH. Pri tejto operacii sa zistuje ci vo vstupnost STRINGU sa nachadza nejaky SUBSTRING, ktory zodpoveda REGULAR EXPRESSION PATTERN.
   C. TOKENIZE. Pri tejto operacii je vstupny STRING rozdeleny do jednotlivych TOKENS na zaklade aplikacie REGULAR EXPRESSION PATTERN.
   D. REPLACE. Pri tejto operacii su vo vstupnom STRINGU sekvencie CHARACTERS najdene pomocou REGULAR EXPRESSION PATTERN nahradene inymi sekvenciami CHARACTERS.
3. REGULAR EXPRESSION LIBRARY definuje viacero REGULAR EXPRESSION GRAMMARS, ktore sa lisia v presnosti a rychlosti vykonavania operacii pre REGULAR EXPRESSIONS.
4. REGULAR EXPRESSIONS su definovane v LIBRARY <regex>.
5. CLASS [basic_regex<TCharacter,TTraits>] poskytuje vseobecny FRAMEWORK pre intepretaciu REGULAR EXPRESSIONS. Pre [basic_regex<TCharacter,TTraits>] platia nasledujuce fakty.
   !!! A. CLASS [basic_regex<TCharacter,TTraits>] v CONSTRUCTOR vykonava COMPILATION zadaneho REGULAR EXPRESSION.
   B. CLASS [basic_regex<TCharacter,TTraits>] interne funguje ako STATE MACHINE, ktora prechadza zadany STRING a hlada v nom REGULAR EXPRESSION MATCHES.
   C. CLASS [basic_regex<TCharacter,TTraits>] podporuje viacero REGULAR EXPRESSION GRAMMARS.
6. CLASS [basic_regex<TCharacter,TTraits>] poskytuje vseobecny FRAMEWORK pre ukladanie REGULAR EXPRESSIONS. Ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION. OVERLOADED VERSIONS reprezentuju COPY a MOVE CONSTRUCTORS, ako aj umoznuju vytvorit instanciu REGULAR EXPRESSION so STRINGS ci definovat CUSTOM REGULAR EXPRESSION GRAMMAR.
   B. DESTRUCTOR uvolnuje instanciu REGULAR EXPRESSION a vsetky s nou asociovane RESOURCES.
   C. TYPE [value_type] urcuje TYPE pre CHARACTERS REGULAR EXPRESSION.
   D. TYPE [traits_type] urcuje TYPE pre TYPE TRAITS REGULAR EXPRESSION.
   E. TYPE [string_type] urcuje TYPE pre STRINGS REGULAR EXPRESSION.
   F. TYPE [locale_type] urcuje TYPE pre LOCALE REGULAR EXPRESSION.
   G. TYPE [flag_type] urcuje TYPE pre FLAGS REGULAR EXPRESSION.
   H. CONSTANT [basic_regex::icase] urcuje ze porovnavanie CHARACTERS sa vykonava bez prihladania na ich CASE.
   I. CONSTANT [basic_regex::nosubs] urcuje ze pri vyhodnocovani REGULAR EXPRESSION sa do REGULAR EXPRESSION MATCH RESULTS NEUKLADAJU REGULAR EXPRESSION SUBMATCHES.
   J. CONSTANT [basic_regex::optimize] urcuje ze vykonavanie REGULAR EXPRESSION MATCHING ma byt rychlejsie na ukor pomalsieho vytvarania REGULAR EXPRESSION PARSER.
   K. CONSTANT [basic_regex::collate] urcuje ze vykonavanie REGULAR EXPRESSION MATCHING ma byt LOCALE SENSITIVE.
   L. CONSTANT [basic_regex::multiline] urcuje ze vykonavanie REGULAR EXPRESSION MATCHING ma respektovat NEW LINES ak je pouzita EMCAScript REGULAR EXPRESSION GRAMMAR.
   M. CONSTANT [basic_regex::ECMAScript] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s EXTENDED EMCAScript REGULAR EXPRESSION GRAMMAR.
   N. CONSTANT [basic_regex::basic] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s POSIX REGULAR EXPRESSION GRAMMAR.
   O. CONSTANT [basic_regex::extended] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s EXTENDED POSIX REGULAR EXPRESSION GRAMMAR.
   P. CONSTANT [basic_regex::awk] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME AWK.
   Q. CONSTANT [basic_regex::grep] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME GREP.
   R. CONSTANT [basic_regex::egrep] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME GREP s nastavenym FLAG -E.
   S. OPERATOR= priradzuje do REGULAR EXPRESSION inu instanciu REGULAR EXPRESSION. OVERLOADED VERSIONS umoznuju pouzit MOVE SEMANTICS a vytvarat instanciu REGULAR EXPRESSION zo STRINGS ci INITIALIZER LISTS.
   T. METHOD assign() priradzuje do REGULAR EXPRESSION inu instanciu REGULAR EXPRESSION. OVERLOADED VERSIONS umoznuju pouzit MOVE SEMANTICS, vytvarat instanciu REGULAR EXPRESSION zo STRINGS ci INITIALIZER LISTS a definovat CUSTOM REGULAR EXPRESSION GRAMMAR.
   !!! U. METHOD mark_count() vracia pocet MARKED SUBEXPRESSIONS v danej REGULAR EXPRESSION. SUBEXPRESSIONS su casti REGULAR EXPRESSION PATTERN uzatvorene v zatvorkach (). Tieto SUBEXPRESSIONS vo forme REGULAR EXPRESSION SUBMATCHES su zaradzovane do REGULAR EXPRESSION MATCH RESULTS.
   V. METHOD flags() vracia SYNTAX FLAGS danej instancie REGULAR EXPRESSION.
   W. METHOD locale() vracia LOCALE danej instancie REGULAR EXPRESSION.
   X. METHOD imbue() nastavuje LOCALE danej instancie REGULAR EXPRESSION.
   Y. METHOD swap() vymiena obsah dvoch instancii REGULAR EXPRESSION vymenou ich vnutornych FIELDS.
   Z. FUNCTION swap() vymiena obsah dvoch instancii REGULAR EXPRESSION vymenou ich vnutornych FIELDS.
7. Pre CLASS [basic_regex<TCharacter,TTraits>] definuje C++ nasledujuce TEMPLATE SPECIALIZATIONS.
   A. CLASS [regex] predstavuje TEMPLATE SPECIALIZATION CLASS [basic_regex<TCharacter,TTraits>] pre TYPE [char].
   B. CLASS [wregex] predstavuje TEMPLATE SPECIALIZATION CLASS [basic_regex<TCharacter,TTraits>] pre TYPE [wchar_t].
8. FUNCTION regex_match() vykonava REGULAR EXPRESSION MATCHING, kedy sa zistuje ci CELY vstupny STRING zodpoveda REGULAR EXPRESSION PATTERN. Pre FUNCTION regex_match() platia nasledujuce fakty.
   A. FUNCTION regex_match() zistuje ci CELY vstupny STRING zodpoveda REGULAR EXPRESSION PATTERN.
   B. OVERLOADED VERSIONS FUNCTION regex_match() umoznuju zadat vstupny STRING vo formate C-STRING, WC-STRING, [string], [wstring] a BIDIRECTIONAL ITERATOR PAIR na CHARACTER SEQUENCE.
   C. Kazda OVERLOADED VERSION FUNCTION regex_match() ma ako PARAMETER TYPE [basic_regex<TCharacter,TTraits>], ktora reprezentuje REGULAR EXPRESSION PATTERN.
   D. Kazda OVERLOADED VERSION FUNCTION regex_match() ma ako PARAMETER TYPE [match_flag_type], ktorym je mozne vykonat CUSTOMIZATION REGULAR EXPRESSION MATCHING.
   !!! E. Niektore OVERLOADED VERSIONS FUNCTION regex_match() maju ako PARAMETER TYPE [match_results<TIterator,TAllocator>], ktory obsahuje podrobne vysledky REGULAR EXPRESSION MATCHING.
   F. RETURN VALUE regex_match() urcuje ci REGULAR EXPRESSION MATCH bol najdeny, alebo nie.
9. FUNCTION regex_search() vykonava REGULAR EXPRESSION SEARCHING, kedy sa zistuje ci CAST vstupneho STRINGU zodpoveda REGULAR EXPRESSION PATTERN. Pre FUNCTION regex_search() platia nasledujuce fakty.
   A. FUNCTION regex_search() zistuje ci CAST vstupneho STRINGU zodpoveda REGULAR EXPRESSION PATTERN.
   B. OVERLOADED VERSIONS FUNCTION regex_search() umoznuju zadat vstupny STRING vo formate C-STRING, WC-STRING, [string], [wstring] a BIDIRECTIONAL ITERATOR PAIR na CHARACTER SEQUENCE.
   C. Kazda OVERLOADED VERSION FUNCTION regex_search() ma ako PARAMETER TYPE [basic_regex<TCharacter,TTraits>], ktora reprezentuje REGULAR EXPRESSION PATTERN.
   D. Kazda OVERLOADED VERSION FUNCTION regex_search() ma ako PARAMETER TYPE [match_flag_type], ktorym je mozne vykonat CUSTOMIZATION REGULAR EXPRESSION SEARCHING.
   !!! E. Niektore OVERLOADED VERSIONS FUNCTION regex_search() maju ako PARAMETER TYPE [match_results<TIterator,TAllocator>], ktory obsahuje podrobne vysledky REGULAR EXPRESSION SEARCHING.
   F. RETURN VALUE regex_search() urcuje ci REGULAR EXPRESSION SEARCH bol uspesny, alebo nie.
10. CLASS [match_results<TIterator,TAllocator>] reprezentuje vysledok REGULAR EXPRESSION MATCHING. Ma nasledujuce MEMBERS.
   1. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION RESULTS. OVERLOADED VERSIONS reprezentuju COPY a MOVE CONSTRUCTORS.
   2. DESTRUCTOR uvolnuje instanciu REGULAR EXPRESSION RESULTS a vsetky s nou asociovane RESOURCES.
   3. TYPE [allocator_type] urcuje TYPE, ktory sa pouziva ako ALLOCATOR.
   4. TYPE [value_type] urcuje TYPE pre SUBMATCHES ulozene v REGULAR EXPRESSION RESULTS. Je nastaveny na TYPE [sub_match<TBidirectionalIterator>].
   5. TYPE [const_reference] urcuje CONST REFERENCE TYPE pre SUBMATCHES ulozene v REGULAR EXPRESSION RESULTS.
   6. TYPE [reference] urcuje REFERENCE TYPE pre SUBMATCHES ulozene v REGULAR EXPRESSION RESULTS.
   7. TYPE [const_iterator] urcuje TYPE pre CONST ITERATOR daneho REGULAR EXPRESSION RESULTS.
   8. TYPE [iterator] urcuje TYPE pre ITERATOR daneho REGULAR EXPRESSION RESULTS.
   9. TYPE [difference_type] je SIGNED TYPE reprezentujuci hodnoty urcujuce rozdiel.
   10. TYPE [size_type] je UNSIGNED TYPE reprezentujuci hodnoty urcujuce velkost a pocet.
   11. TYPE [char_type] urcuje TYPE pre CHARACTERS REGULAR EXPRESSION RESULTS.
   12. TYPE [string_type] urcuje TYPE pre STRINGS REGULAR EXPRESSION RESULTS.
   13. OPERATOR= priradzuje do REGULAR EXPRESSION RESULTS inu instanciu REGULAR EXPRESSION RESULTS. OVERLOADED VERSION umoznuje pouzit MOVE SEMANTICS.
   14. OPERATOR== zistuje ci dve instancie REGULAR EXPRESSION RESULTS su lexikograficky rovne.
   15. OPERATOR!= zistuje ci dve instancie REGULAR EXPRESSION RESULTS su lexikograficky rozne.
   !!! 16. OPERATOR[] vracia CONST REFERENCE na SUBMATCH s danym INDEXOM. Pre INDEX 0 vracia CONST REFERENCE na SUBMATCH reprezentujuci MATCH celeho REGULAR EXPRESSION. Pre INDEX <1,size()) vracia CONST REFERENCE na SUBMATCH s danym INDEXOM. Pre INDEX VACSI ako size() vracia CONST REFERENCE na UNMATCHED SUBMATCH.
   17. METHOD get_allocator() vracia instanciu ALLOCATOR asociovana s instaciou REGULAR EXPRESSION RESULTS.
   18. METHOD ready() vracia informaciu ci instancia REGULAR EXPRESSION RESULTS obsahuje vysledky REGULAR EXPRESSION MATCHING.
   !!! 19. METHOD empty() vracia informaciu ci REGULAR EXPRESSION MATCHING bol uspesny.
   20. METHOD size() vracia pocet SUBMATCHES v instancii REGULAR EXPRESSION RESULTS.
   21. METHOD max_size() vracia maximalny pocet SUBMATCHES, ktore je v instancii REGULAR EXPRESSION RESULT mozne ulozit.
   !!! 22. METHOD length() vracia dlzku SUBMATCH s danym INDEXOM. Pre INDEX 0 vracia dlzku SUBMATCH reprezentujucu MATCH celeho REGULAR EXPRESSION. Pre INDEX <1,size()) vracia dlzku SUBMATCH s danym INDEXOM. Pre INDEX VACSI ako size() vracia dlzku UNMATCHED SUBMATCH.
   !!! 23. METHOD position() vracia poziciu SUBMATCH s danym INDEXOM. Pre INDEX 0 vracia poziciu SUBMATCH reprezentujucu MATCH celeho REGULAR EXPRESSION. Pre INDEX <1,size()) vracia poziciu SUBMATCH s danym INDEXOM. Pre INDEX VACSI ako size() vracia poziciu UNMATCHED SUBMATCH.
   !!! 24. METHOD str() vracia STRING SUBMATCH s danym INDEXOM. Pre INDEX 0 vracia STRING SUBMATCH reprezentujuci MATCH celeho REGULAR EXPRESSION. Pre INDEX <1,size()) vracia STRING SUBMATCH s danym INDEXOM. Pre INDEX VACSI ako size() vracia STRING UNMATCHED SUBMATCH.
   25. METHOD prefix() vracia CONST ITERATOR na SUBMATCH reprezentujuci PREFIX od zaciatku prehladavaneho STRING az po najdeny MATCH.
   26. METHOD sufix() vracia CONST ITERATOR na SUBMATCH reprezentujuci POSTFIX od konca najdeneho MATCH az po koniec prehladavaneho STRING.
   27. METHOD begin() vracia ITERATOR ukazujuci na PRVY SUBMATCH.
   28. METHOD cbegin() vracia CONST ITERATOR ukazujuci na PRVY SUBMATCH.
   29. METHOD end() vracia ITERATOR ukazujuci hned za POSLEDNY SUBMATCH.
   30. METHOD cend() vracia CONST ITERATOR ukazujuci hned za POSLEDNY SUBMATCH.
   31. METHOD format() nastavuje FORMAT s ktorym sa budu vypisovat instancia REGULAR EXPRESSION RESULTS na OUTPUT. METHOD pouziva SPECIALNU SYNTAX na vytvorenie STRINGU reprezentujuceho jednotlive SUBMATCHES REGULAR EXPRESSION MATCH RESULTS.
   32. METHOD swap() vymiena obsah dvoch instancii REGULAR EXPRESSION RESULTS vymenou ich vnutornych FIELDS.
   33. FUNCTION swap() vymiena obsah dvoch instancii REGULAR EXPRESSION RESULTS vymenou ich vnutornych FIELDS.
!!!!! 11. Pre REGULAR EXPRESSION SUBMATCHES platia nasledujuce fakty.
   A. REGULAR EXPRESSION SUBMATCH je fragment z celeho REGULAR EXPRESSION MATCH. Teda jedna sa o fragment z celeho STRING, ktory bol pomocou REGULAR EXPRESSION najdeny.
   !!! B. REGULAR EXPRESSION SUBMATCH sa vytvara pre KAZDY PAR OBLYCH ZATVORIEK () v PATTERN STRINGU. To znaci, ze napriklad REGULAR EXPRESSION [((AAA)(BBB))] bude mat 3 SUBMATCHES [(AAA)], [(BBB)] a [((AAA)(BBB))].
12. Pre CLASS [match_results<TIterator,TAllocator>] definuje C++ nasledujuce TEMPLATE SPECIALIZATIONS.
   A. CLASS [csub_match] predstavuje TEMPLATE SPECIALIZATION CLASS [match_results<TIterator,TAllocator>] pre TYPE [const char*].
   B. CLASS [wcsub_match] predstavuje TEMPLATE SPECIALIZATION CLASS [match_results<TIterator,TAllocator>] pre TYPE [const wchar_t*].
   C. CLASS [ssub_match] predstavuje TEMPLATE SPECIALIZATION CLASS [match_results<TIterator,TAllocator>] pre TYPE [string::const_iterator].
   D. CLASS [wssub_match] predstavuje TEMPLATE SPECIALIZATION CLASS [match_results<TIterator,TAllocator>] pre TYPE [wstring::const_iterator].
13. CLASS [sub_match<TIterator>] reprezentuje REGULAR EXPRESSION SUBMATCH. Je DERIVED z CLASS [pair<TIterator,TIterator>]. Ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION SUBMATCH.
   B. TYPE [iterator] urcuje TYPE pre ITERATOR daneho REGULAR EXPRESSION SUBMATCH.
   C. TYPE [value_type] urcuje TYPE pre VALUES REGULAR EXPRESSION SUBMATCH.
   D. TYPE [difference_type] je SIGNED TYPE reprezentujuci hodnoty urcujuce rozdiel.
   E. TYPE [string_type] urcuje TYPE pre STRINGS REGULAR EXPRESSION SUBMATCH.
   !!! F. FIELD [first] obsahuje BEGIN ITERATOR SUBMATCH v ramci celeho STRING.
   !!! G. FIELD [second] obsahuje END ITERATOR SUBMATCH v ramci celeho STRING.
   H. OPERATOR== zistuje ci dve instancie REGULAR EXPRESSION SUBMATCH su lexikograficky rovne.
   I. OPERATOR!= zistuje ci dve instancie REGULAR EXPRESSION SUBMATCH su lexikograficky rozne.
   J. OPERATOR< zistuje ci 1. REGULAR EXPRESSION SUBMATCH je lexikograficky mensi ako 2. REGULAR EXPRESSION SUBMATCH.
   K. OPERATOR<= zistuje ci 1. REGULAR EXPRESSION SUBMATCH je lexikograficky mensi, alebo rovny ako 2. REGULAR EXPRESSION SUBMATCH.
   L. OPERATOR> zistuje ci 1. REGULAR EXPRESSION SUBMATCH je lexikograficky vacsi ako 2. REGULAR EXPRESSION SUBMATCH.
   M. OPERATOR>= zistuje ci 1. REGULAR EXPRESSION SUBMATCH je lexikograficky vacsi, alebo rovny ako 2. REGULAR EXPRESSION SUBMATCH.
   N. OPERATOR< zapisuje textovu reprezentaciu REGULAR EXPRESSION SUBMATCH do OUTPUT STREAM.
   O. OPERATOR string_type() vracia textovu reprezentaciu REGULAR EXPRESSION SUBMATCH do STRING.
   P. METHOD length() vracia dlzku REGULAR EXPRESSION SUBMATCH.
   Q. METHOD str() vracia textovu reprezentaciu REGULAR EXPRESSION SUBMATCH.
   R. METHOD compare() porovnava dvojicu instancii REGULAR EXPRESSION SUBMATCH. OVERLOADED VERSIONS umoznuju porovnavat instanciu REGULAR EXPRESSION SUBMATCH voci STRING a C-STRING.
!!! 14. CLASS [regex_iterator<TIterator,TCharacter,TTraits>] reprezentuje ITERATOR pre prechod REGULAR EXPRESSION MATCHES. Pre CLASS [regex_iterator<TIterator,TCharacter,TTraits>] platia nasledujuce fakty.
   A. CLASS [regex_iterator<TIterator,TCharacter,TTraits>] umoznuje prechadzat cez cely STRING a vyhladavat v nom VSETKY MATCHES zvoleneho REGULAR EXPRESSION PATTERN, ktore STRING obsahuje.
   !!! B. V kazdom MATCH je mozne prechadzat jednotlivymi SUBMATCHES, ktore MATCH obsahuje.
   C. CLASS [regex_iterator<TIterator,TCharacter,TTraits>] ma specializations pre C-STRINGS, WC-STRINGS, STRINGS a WSTRINGS.
15. CLASS [regex_iterator<TIterator,TCharacter,TTraits>] reprezentuje ITERATOR pre prechod REGULAR EXPRESSION MATCHES. Ma nasledujuce MEMBERS.
   !!! A. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION MATCH ITERATOR. DEFAULT CONSTRUCTOR vytvara ITERATOR, ktory reprezentuje END ITERATOR.
   B. DESTRUCTOR uvolnuje instanciu REGULAR EXPRESSION MATCH ITERATOR.
   C. TYPE [value_type] urcuje TYPE pre VALUES REGULAR EXPRESSION MATCH ITERATOR.
   D. TYPE [difference_type] je SIGNED TYPE reprezentujuci hodnoty urcujuce rozdiel.
   E. TYPE [pointer] urcuje POINTER TYPE pre REGULAR EXPRESSION MATCH ITERATOR.
   F. TYPE [reference] urcuje REFERENCE TYPE pre REGULAR EXPRESSION MATCH ITERATOR.
   G. TYPE [iterator_category] urcuje ITERATOR CATEGORY TYPE pre REGULAR EXPRESSION MATCH ITERATOR.
   H. TYPE [regex_type] urcuje TYPE REGULAR EXPRESSION pre REGULAR EXPRESSION MATCH ITERATOR.
   I. OPERATOR= priradzuje do REGULAR EXPRESSION MATCH ITERATOR inu instanciu REGULAR EXPRESSION MATCH ITERATOR.
   J. OPERATOR== porovnava ci su 2 instancie REGULAR EXPRESSION MATCH ITERATOR rovne.
   K. OPERATOR=! porovnava ci su 2 instancie REGULAR EXPRESSION MATCH ITERATOR rozne.
   L. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na pristup k REGULAR EXPRESSION MATCH.
   M. OPERATOR-> umoznuje pristup k MEMBERS REGULAR EXPRESSION MATCH.
   N. ++OPERATOR inkrementuje POSITION REGULAR EXPRESSION MATCH ITERATOR.
   O. OPERATOR++ inkrementuje POSITION REGULAR EXPRESSION MATCH ITERATOR.
16. Pre CLASS [regex_iterator<TIterator,TCharacter,TTraits>] definuje C++ nasledujuce TEMPLATE SPECIALIZATIONS.
   A. CLASS [cregex_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_iterator<TIterator,TCharacter,TTraits>] pre TYPE [const char*].
   B. CLASS [wcregex_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_iterator<TIterator,TCharacter,TTraits>] pre TYPE [const wchar_t*].
   C. CLASS [sregex_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_iterator<TIterator,TCharacter,TTraits>] pre TYPE [string::const_iterator].
   D. CLASS [wsregex_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_iterator<TIterator,TCharacter,TTraits>] pre TYPE [wstring::const_iterator].
!!! 17. CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] reprezentuje ITERATOR pre prechod REGULAR EXPRESSION SUBMATCHES. Pre CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] platia nasledujuce fakty.
   !!!!! A. CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] umoznuje iterovat cez REGULAR EXPRESSION SUBMATCHES, a zaroven aj cez REGULAR EXPRESSION NON-MATCHES.
   !!! B. REGULAR EXPRESSION NON-MATCH predstavuje STRING, ktory sa nachadza medzi 2 najdenymi REGULAR EXPRESSION MATCHES. Teda jedna sa o tu cast STRING, ktory NEZODPOVEDA REGULAR EXPRESSION MATCH a oddeluje 2 REGULAR EXPRESSION MATCHES od seba.
   !!!!! C. Pouzitie CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] na prechod REGULAR EXPRESSION NON-MATCHES umoznuje implementovat TOKENIZER.
   !!!!! D. To cez ktore REGULAR EXPRESSION SUBMATCHES bude ITERATOR prechadzat, resp. to ci sa bude prechadzat aj cez REGULAR EXPRESSION NON-MATCHES sa urcuje v CONSTRUCTOR CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>]. Ciselna hodnota zadana bud v podobne INTEGER VALUE, VECTOR viacerych INTEGERS, alebo INITIALIZER LIST urcuje, ktorymi ITEMS bude ITERATOR prechadzat.
!!! 18. CONSTRUCTOR CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] umoznuje v PARAMETER 'Submatch' vyspecifikovat ktorymi REGULAR EXPRESSION SUBMATCHES bude ITERATOR prechadzat a ci sa bude prechadzat aj REGULAR EXPRESSION NON-MATCHES. Je definovany bud ako INTEGER VALUE, VECTOR viacerych INTEGERS, alebo INITIALIZER LIST, pricom moze nadobudat nasledujuce hodnoty.
   A. VALUE '0' znamena, ze REGULAR EXPRESSION SUBMATCH ITERATOR bude iterovat REGULAR EXPRESSION MATCHES. To znaci, ze sa bude iterovat PLNYMI MATCHES daneho REGULAR EXPRESSION.
   B. VALUE 'N>0' znamena, ze REGULAR EXPRESSION SUBMATCH ITERATOR bude iterovat N-tymi REGULAR EXPRESSION SUBMATCHES.
   !!! C. VALUE '-1' znamena, ze REGULAR EXPRESSION SUBMATCH ITERATOR bude iterovat REGULAR EXPRESSION NON-MATCHES, ktore reprezentuju fragmenty povodneho STRING, ktore NEBOLI MATCHED pomocou zadaneho REGULAR EXPRESSION.
19. CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] reprezentuje ITERATOR pre prechod REGULAR EXPRESSION SUBMATCHES. Ma nasledujuce MEMBERS.
   !!!!! A. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION SUBMATCH ITERATOR. PARAMETER 'Submatch' umoznuje definovat zoznam SUBMATCHES, ktorymi ma REGULAR EXPRESSION SUBMATCH ITERATOR prechadzat. Hodnota -1 znamena, ze REGULAR EXPRESSION SUBMATCH ITERATOR ma prechadzat NON-MATCHED STRINGS, ktore reprezentuju TOKENS pri pouziti REGULAR EXPRESSION ako TOKENIZER.
   B. DESTRUCTOR uvolnuje instanciu REGULAR EXPRESSION SUBMATCH ITERATOR.
   C. TYPE [value_type] urcuje TYPE pre VALUES REGULAR EXPRESSION SUBMATCH ITERATOR.
   D. TYPE [difference_type] je SIGNED TYPE reprezentujuci hodnoty urcujuce rozdiel.
   E. TYPE [pointer] urcuje POINTER TYPE pre REGULAR EXPRESSION SUBMATCH ITERATOR.
   F. TYPE [reference] urcuje REFERENCE TYPE pre REGULAR EXPRESSION SUBMATCH ITERATOR.
   G. TYPE [iterator_category] urcuje ITERATOR CATEGORY TYPE pre REGULAR EXPRESSION SUBMATCH ITERATOR.
   H. TYPE [regex_type] urcuje TYPE REGULAR EXPRESSION pre REGULAR EXPRESSION SUBMATCH ITERATOR.
   I. OPERATOR= priradzuje do REGULAR EXPRESSION SUBMATCH ITERATOR inu instanciu REGULAR EXPRESSION SUBMATCH ITERATOR.
   J. OPERATOR== porovnava ci su 2 instancie REGULAR EXPRESSION SUBMATCH ITERATOR rovne.
   K. OPERATOR=! porovnava ci su 2 instancie REGULAR EXPRESSION SUBMATCH ITERATOR rozne.
   L. OPERATOR* moze byt pouzity iba na RIGHT-SIDE danej EXPRESSION na pristup k REGULAR EXPRESSION SUBMATCH.
   M. OPERATOR-> umoznuje pristup k MEMBERS REGULAR EXPRESSION SUBMATCH.
   N. ++OPERATOR inkrementuje POSITION REGULAR EXPRESSION SUBMATCH ITERATOR.
   O. OPERATOR++ inkrementuje POSITION REGULAR EXPRESSION SUBMATCH ITERATOR.
20. Pre CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] definuje C++ nasledujuce TEMPLATE SPECIALIZATIONS.
   A. CLASS [cregex_token_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] pre TYPE [const char*].
   B. CLASS [wcregex_token_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] pre TYPE [const wchar_t*].
   C. CLASS [sregex_token_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] pre TYPE [string::const_iterator].
   D. CLASS [wsregex_token_iterator] predstavuje TEMPLATE SPECIALIZATION CLASS [regex_token_iterator<TIterator,TCharacter,TTraits>] pre TYPE [wstring::const_iterator].
21. FUNCTION regex_replace() vykonava REGULAR EXPRESSION REPLACING, kedy CAST vstupneho STRINGU najdena pomocou REGULAR EXPRESSION PATTERN nahradzuje za iny STRING, ktory moze obsahovat aj MATCHES ci SUBMATCHES, ktore boli v STRINGU najdene. Pre FUNCTION regex_replace() platia nasledujuce fakty.
   A. FUNCTION regex_replace() vykonava REGULAR EXPRESSION REPLACING, kedy CAST vstupneho STRINGU najdena pomocou REGULAR EXPRESSION PATTERN nahradzuje za iny STRING.
   !!!!! B. Nahradzovany STRING moze obsahovat aj SPECIALNU REGULAR EXPRESSION SYNTAX, ktora nahradi STRING za MATCHES a SUBMATCHES, ktore boli najdene v povodnom STRINGU.
   C. OVERLOADED VERSIONS FUNCTION regex_replace() umoznuju zadat vstupny STRING vo formate C-STRING, WC-STRING, [string], [wstring] a BIDIRECTIONAL ITERATOR PAIR na CHARACTER SEQUENCE.
   D. Kazda OVERLOADED VERSION FUNCTION regex_replace() ma ako PARAMETER TYPE [basic_regex<TCharacter,TTraits>], ktora reprezentuje REGULAR EXPRESSION PATTERN.
   !!! E. OVERLOADED VERSIONS FUNCTION regex_replace() umoznuju zadavat REPLACE STRING vo formate C-STRING, WC-STRING, [string], [wstring] a BIDIRECTIONAL ITERATOR PAIR na CHARACTER SEQUENCE.
   F. Kazda OVERLOADED VERSION FUNCTION regex_replace() ma ako PARAMETER TYPE [match_flag_type], ktorym je mozne vykonat CUSTOMIZATION REGULAR EXPRESSION REPLACING.
   !!! G. RETURN VALUE regex_replace() obsahuje VYSLEDNY STRING po vykonani REGULAR EXPRESSION REPLACEMENT. STRING moze byt vo formate C-STRING, WC-STRING, [string], [wstring] a BIDIRECTIONAL ITERATOR PAIR na CHARACTER SEQUENCE.
22. NAMESPACE [std::regex_constants] definuje zoznam CONSTANTS, ktore je mozne rozdelit do nasledujucich kategorii.
   A. CONSTANTS TYPE [syntax_option_type] urcuju aky typ REGULAR EXPRESSION GRAMMAR sa ma pouzit ako aj sposob ako sa ma pracovat s CASE-SENSITIVE CHARACTERS ci ako sa ma pracovat COLLATIONS.
   B. CONSTANTS TYPE [match_flag_type] urcuju akym sposobom sa ma vykonavat REGULAR EXPRESSION MATCHING a REGULAR EXPRESSION SEARCHING.
   C. CONSTANTS TYPE [error_type] urcuju ERRORS, ktore mozu vzniknut pri REGULAR EXPRESSION PARSING.
23. NAMESPACE [std::regex_constants] obsahuje nasledujuce CONSTANTS TYPE [syntax_option_type].
   A. CONSTANT [std::regex_constants::icase] urcuje ze porovnavanie CHARACTERS sa vykonava bez prihladania na ich CASE.
   B. CONSTANT [std::regex_constants::nosubs] urcuje ze pri vyhodnocovani REGULAR EXPRESSION  sa do REGULAR EXPRESSION MATCH RESULTS NEUKLADAJU REGULAR EXPRESSION SUBMATCHES.
   C. CONSTANT [std::regex_constants::optimize] urcuje ze vykonavanie REGULAR EXPRESSION MATCHING ma byt rychlejsie na ukor pomalsieho vytvarania REGULAR EXPRESSION PARSER.
   D. CONSTANT [std::regex_constants::collate] urcuje ze vykonavanie REGULAR EXPRESSION MATCHING ma byt LOCALE SENSITIVE.
   E. CONSTANT [std::regex_constants::multiline] urcuje ze vykonavanie REGULAR EXPRESSION MATCHING ma respektovat NEW LINES ak je pouzita EMCAScript REGULAR EXPRESSION GRAMMAR.
   F. CONSTANT [std::regex_constants::ECMAScript] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s EXTENDED EMCAScript REGULAR EXPRESSION GRAMMAR.
   G. CONSTANT [std::regex_constants::basic] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s POSIX REGULAR EXPRESSION GRAMMAR.
   H. CONSTANT [std::regex_constants::extended] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s EXTENDED POSIX REGULAR EXPRESSION GRAMMAR.
   I. CONSTANT [std::regex_constants::awk] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME AWK.
   J. CONSTANT [std::regex_constants::grep] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME GREP.
   K. CONSTANT [std::regex_constants::egrep] urcuje pouzitie REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME GREP s nastavenym FLAG -E.
24. NAMESPACE [std::regex_constants] obsahuje nasledujuce CONSTANTS TYPE [match_flag_type].
   A. CONSTANT [std::regex_constants::match_not_bol] urcuje ze pri REGULAR EXPRESSION MATCHING sa PRVY CHARACTER STRING NEMA povazovat za ZACIATOK NEW LINE.
   B. CONSTANT [std::regex_constants::match_not_eol] urcuje ze pri REGULAR EXPRESSION MATCHING sa POSLEDNY CHARACTER STRING NEMA povazovat za KONIEC LINE.
   C. CONSTANT [std::regex_constants::match_not_bow] urcuje ze pri REGULAR EXPRESSION MATCHING sa PRVY CHARACTER STRING NEMA povazovat za ZACIATOK NEW WORD.
   D. CONSTANT [std::regex_constants::match_not_eow] urcuje ze pri REGULAR EXPRESSION MATCHING sa POSLEDNY CHARACTER STRING NEMA povazovat za KONIEC WORD.
   E. CONSTANT [std::regex_constants::match_any] urcuje, ze  ak pri REGULAR EXPRESSION MATCHING je moznych VIACERO MATCHES, VSETKY tieto MATCHES su zaradene vo vysledkov REGULAR EXPRESSION MATCHING.
   F. CONSTANT [std::regex_constants::match_not_null] urcuje, ze ak ze pri REGULAR EXPRESSION MATCHING bol najdeny EMPTY MATCH, potom tento MATCH NEMA byt zaradeny do vysledkov REGULAR EXPRESSION MATCHING.
   G. CONSTANT [std::regex_constants::match_continuous] urcuje, ze REGULAR EXPRESSION MATCHING sa ma vykonat iba vtedy, ak REGULAR EXPRESSION MATCHING bol najdeny od 1. CHARACTER vstupneho STRINGU.
   H. CONSTANT [std::regex_constants::match_prev_avail] urcuje, ze pri REGULAR EXPRESSION MATCHING sa PRVY CHARACTER povazuje za zaciatok LINE, alebo WORD. Tento OPTION znamena ignorovanie OPTION [std::regex_constants::match_not_bol] a OPTION [std::regex_constants::match_not_bow].
   I. CONSTANT [std::regex_constants::format_default] urcuje, ze pri REGULAR EXPRESSION REPLACING sa ma v REPLACE STRING pouzivat REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s EXTENDED EMCAScript REGULAR EXPRESSION GRAMMAR.
   J. CONSTANT [std::regex_constants::format_sed] urcuje, ze pri REGULAR EXPRESSION REPLACING sa ma v REPLACE STRING pouzivat REGULAR EXPRESSION GRAMMAR, ktora je kompatibilna s REGULAR EXPRESSION GRAMMAR pouzivanou v PROGRAME SED.
   K. CONSTANT [std::regex_constants::format_no_copy] urcuje, ze pri REGULAR EXPRESSION REPLACING sa NON-MATCHES sa do vysledneho STRING NEVKLADAJU.
   L. CONSTANT [std::regex_constants::format_first_only] urcuje, ze pri REGULAR EXPRESSION REPLACING sa vykonava nahradenie iba PRVEHO REGULAR EXPRESSION MATCH a REGULAR EXPRESSION REPLACING sa hned ukonci.
25. NAMESPACE [std::regex_constants] obsahuje nasledujuce CONSTANTS TYPE [error_type].
   A. CONSTANT [std::regex_constants::error_collate] znamena, ze REGULAR EXPRESSION PATTERN obsahuje chybny COLLATING ELEMENT NAME.
   B. CONSTANT [std::regex_constants::error_ctype] znamena, ze REGULAR EXPRESSION PATTERN obsahuje chybny CHARACTER CLASS NAME.
   C. CONSTANT [std::regex_constants::error_escape] znamena, ze REGULAR EXPRESSION PATTERN obsahuje chybnu ESCAPE SEQUENCE.
   D. CONSTANT [std::regex_constants::error_ctype] znamena, ze REGULAR EXPRESSION PATTERN obsahuje neplatnu BACK REFERENCE.
   E. CONSTANT [std::regex_constants::error_brack] znamena, ze REGULAR EXPRESSION PATTERN obsahuje nesparovane HRANATE ZATVORKY [].
   F. CONSTANT [std::regex_constants::error_paren] znamena, ze REGULAR EXPRESSION PATTERN obsahuje nesparovane OBYCAJNE ZATVORKY ().
   G. CONSTANT [std::regex_constants::error_brace] znamena, ze REGULAR EXPRESSION PATTERN obsahuje nesparovane ZLOZENE ZATVORKY {}.
   H. CONSTANT [std::regex_constants::error_badbrace] znamena, ze REGULAR EXPRESSION PATTERN obsahuje nespravne definovany RANGE v ZLOZENYCH ZATVORKACH {}.
   I. CONSTANT [std::regex_constants::error_range] znamena, ze REGULAR EXPRESSION PATTERN obsahuje nespravne definovany CHARACTER RANGE v HRANATYCH ZATVORKACH [].
   J. CONSTANT [std::regex_constants::error_space] znamena, SYSTEM nema dost MEMORY na konverziu REGULAR EXPRESSION do FINITE STATE MACHINE.
   K. CONSTANT [std::regex_constants::error_badrepeat] znamena, ze REGULAR EXPRESSION PATTERN obsahuje znak '*', '?',  '+', alebo  '{', ktoremu nepredchadza validna REGULAR EXPRESSION.
   L. CONSTANT [std::regex_constants::error_complexity] znamena, ze zlozitost REGULAR EXPRESSION MATCH je vyssia ako maximalna prednastavena uroven.
   M. CONSTANT [std::regex_constants::error_stack] znamena, ze SYSTEM NEMA DOST MEMORY na vykonanie REGULAR EXPRESSION MATCH.
26. CLASS [regex_traits<TCharacter>] reprezentuje REGULAR EXPRESSION TRAITS. Ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION TRAITS.
   B. TYPE [char_type] urcuje TYPE pre CHARACTERS REGULAR EXPRESSION.
   C. TYPE [string_type] urcuje TYPE pre STRINGS REGULAR EXPRESSION.
   D. TYPE [locale_type] urcuje TYPE pre LOCALES REGULAR EXPRESSION.
   E. TYPE [char_type] urcuje TYPE pre CHARACTER CLASS REGULAR EXPRESSION.
   F. STATIC METHOD length() dlzku zadaneho C-STRING.
   G. METHOD translate() vracia COMPARISION KEY pre zadany CHARACTER, ktory sa pouziva pri porovnavani CHARACTERS.
   H. METHOD translate_nocase() vracia COMPARISION KEY pre zadany CHARACTER, ktory sa pouziva pri NO CASE porovnavani CHARACTERS.
   I. METHOD transform() vracia SORT KEY pre zadany ITERATOR PAIR, ktory sa pouziva pri NO CASE porovnavani STRINGS.
   J. METHOD transform_primary() vracia SORT KEY v danom LOCALE pre zadany ITERATOR PAIR, ktory sa pouziva pri NO CASE porovnavani STRINGS.
   K. METHOD lookup_collatename() vracia nazov COLLATING ELEMENT pre zadany ITERATOR PAIR.
   L. METHOD lookup_classname() vracia nazov CHARACTER CLASS pre zadany ITERATOR PAIR.
   M. METHOD isctype() urcuje ci zadany CHARACTER patri do danej CHARACTER CLASS.
   N. METHOD value() vracia NUMBERIC VALUE pre zadany CHARACTER v danom LOCALE.
   O. METHOD imbue() nastavuje aktualnu LOCALE.
   P. METHOD getloc() vracia aktualnu LOCALE.
27. C++ definuje TEMPLATE SPECIALIZATION CLASS [regex_traits<TCharacter>] pre TYPE [char] a TYPE [wchar_t].
27. CLASS [regex_error] reprezentuje REGULAR EXPRESSION EXCEPTION. Je DERIVED z CLASS [runtime_error] a ma nasledujuce MEMBERS.
   A. CONSTRUCTOR vytvara instanciu REGULAR EXPRESSION EXCEPTION.
   B. DESTRUCTOR uvolnuje instanciu REGULAR EXPRESSION EXCEPTION.
   C. METHOD code() vracia ciselnu reprezentaciu ERROR ulozenej v REGULAR EXPRESSION EXCEPTION.
   D. METHOD what() vracia textovu reprezentaciu ERROR ulozenej v REGULAR EXPRESSION EXCEPTION.
//-------------------------------------------------------------------------------------------------------