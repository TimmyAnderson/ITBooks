//-------------------------------------------------------------------------------------------------------
1. Solution demonstruje ALGORITHMS v STL.
2. STL obsahuje ALGORITHMS v HEADER <algorithm>. Je to kolekcia desiatok algoritmov, zvycajne pracujucich nad STL COLLECTIONS.
3. Pre STL ALGORITHMS platia nasledujuce zasady.
   A. Parametrami ALGORITMS su casto ITERATORS. Ak ALGORITHM ZLYHA (napriklad find() nenajde hladany ITEM), vracia sa KONCOVY ITERATOR.
   !!! B. KONCOVY ITERATOR musi odkazovat na poziciu (LAST_ITEM+1), pricom LAST_ITEM je POSLEDNY, na ktorom sa ITERATOR aplikuje. KONCOVY ITERATOR teda musi ukazovat 1 POZICIU ZA POSLEDNY ITEM, ktory ma byt do iteracie zahrnuty.
   C. ALGORITMS NEVYKONAVAJU RANGE CHECKING. Je teda potrebne do ALGORITHMS zasielat VALIDNE ITERATORS.
   D. ALGORITMS su realizovane ako TEMPLATE FUNKCIE a teda mozu pracovat s rozlicnymi COLLECTIONS.
   !!! E. Ako parametre ALGOORITMHS su casto FUNCTOR objekty. FUNCTOR objekt je CLASS, ktora ma pretazeny OPERATOR(). Pocet a TYP parametrov OPERATOR() je zavisly na cinnosti FUNCTOR. Napriklad PREDICATE FUNCTOR obsahuje 1 PARAMETER TYPU zhodneho ako je TYP ITEM (eventulne TEMPLATE PARAMETER) a vracia TYP 'bool'.
   F. Jednotlive ALGORITHMS vyzaduju ROZLICNE TYPY ITERATORS. Niektore potrebuju INPUT, ine OUTPUT ci RANDOM ACCESS ITERATORS. V pripade, ze je do ALGORITHM zaslany ZLY TYP ITERATORS, kompilator generuje CHYBU.
!!! 3. STL obsahuje i STANDARDNE FUNCTORS, ktore su definovane k HEADER <functional>.
!!! 4. STANDARDNE FUNCTORS CLASSES su zdedene z BASE CLASSES unary_function<TArgument,TResult> a binary_function<TArgument1,TArgument2,TResult>. Tieto CLASSES obsahuju IBA TYPEDEFS pre TYPY ARGUMENTOV a RETURN VALUE TYPU, aby ostatne FUNCTOR, ktore su z nich ZDEDENE mohli pouzivat standardne mena pre tieto TYPY. Tieto BASE CLASSES sa pouzivaju na definovanie CUSTOM FUNCTORS.
5. HEADER <functional> obsahuje nasledujuce typy FUNCTORS.
   A. PREDICATES. Maju 1 PARAMETER, alebo i 2 PARAMETERS a RETURN VALUE typu 'bool'.
   B. ARITHMETIC FUNCTORS. Maju 1, alebo 2 PARAMETERS. RETURN VALUE je ROVNAKEHO TYPU ako je typ PARAMETERS. FUNCTORS volaju ARITMETICKE OPERATORY.
   C. BINDERS. Umoznuju KONVERTOVAT BINARNY FUNCTOR konvertovat na UNARNY FUNCTORY, pricom chybajuci PARAMETER BINARNEHO FUNCTOR je nahradeny CONST HODNOTOU. Pomocou tychto FUNCTOR je napriklad mozne z less<T> spravit less<int>(10).
   D. MEMBER FUNCTION ADAPTERS. Umoznuju vytvorit z METHODS FUNCTOR objekt. Interne pouzivaju POINTER na MEMBERS (METHODS), pricom volaju pre KAZDY OBJEKT v COLLECTION jeho METODU specifikovanu v MEMBER FUNCTION ADAPTER.
   E. POINTER TO FUNCTION ADAPTERS. Umoznuju vytvorit z FUNCTIONS FUNCTOR objekt.
   F. NEGATER. Umoznuju vykonat NEGACIU PREDICATE.
6. STL obsahuje nasledujuce NON MODIFYING COLLECTION ALGORITHMS.
   A. ALGORITHM for_each() prechadza VSETKY ITEMS v COLLECTION a pre kazdy ITEM vola FUNCTOR.
   B. ALGORITHM find() vrati ITERATOR na prvy vyskyt ITEM v COLLECTION s hodnotou ROVNAKOU ako parameter ALGORITHM.
   C. ALGORITHM find_if() vrati ITERATOR na prvy vyskyt ITEM v COLLECTION pre ktory PREDICATE vrati TRUE.
   D. ALGORITHM find_first_of() vrati ITERATOR na PRVY ITEM v 1. COLLECTION, ktory je obsiahnuty v 2. COLLECTION. Pokial nespecifikujem PREDICATE pouzije sa OPERATOR== na porovnavanie ITEMS.
   E. ALGORITHM adjacent_find vrati ITERATOR na zaciatok DVOJICE ITEMS, ktore maju ROVNAKU HODNOTU. Pokial nespecifikujem PREDICATE pouzije sa OPERATOR== na porovnavanie ITEMS.
   F. ALGORITHM count() spocita ITEMS v danej COLLECTION.
   G. ALGORITHM count_if() spocita ITEMS v danej COLLECTION na zaklade PREDICATE.
   H. ALGORITHM equal() vracia TRUE ak 2 COLLECTION su ZHODNE, inak FALSE.
   I. ALGORITHM mismatch() vracia PAIR ITERATORS obsahujuci ITERATORS v 1. i 2. COLLECTION, kde sa hodnoty ITEMS PRVY KRAT LISIA.
   J. ALGORITHM search() vracia ITERATOR na PRVY VYSKYT COLLECTION 2 v COLLECTION 1.
   K. ALGORITHM find_end() vracia ITERATOR na POSLEDNY VYSKYT COLLECTION 2 v COLLECTION 1.
   M. ALGORITHM search_n() vracia ITERATOR na PRVY VYSKYT N ROVNAKYCH ITEMS v COLLECTION.
7. STL obsahuje nasledujuce MODIFYING COLLECTION ALGORITHMS.
   A. ALGORITHM copy() kopiruje ITEMS do OUTPUT ITERATOR.
   B. ALGORITHM copy_backward() kopiruje ITEMS do OUTPUT ITERATOR v OPACNOM PORADI.
   C. ALGORITHM transform() zapisuje do OUTPUT ITERATOR vysledok OPERACIE volanej nad jednotlivymi ITEMS. Velkou vyhodou je, ze transform() je mozne volat i nad ITEROVANOU COLLECTION a tak modifikovat ITEROVANU COLLECTION.
   !!! D. ALGORITHM unique() pracuje na SORTED COLLECTION. V COLLECTION vykona SORT ITEMS a to tak, ze na ZACIATKU COLLECTION budu UNIKATNE ITEMS. Navratova hodnota potom obsahuje ITERATOR odkazujuci UNIKATNYCH ITEMS v POVODNEJ COLLECTION.
   E. ALGORITHM unique_copy() pracuje na SORTED COLLECTION. Kopiruje UNIKATNE ITEMS do OUTPUT ITERATOR.
   F. ALGORITHM replace() nahrazduje hodnotu ITEM novou hodnotou ITEM.
   G. ALGORITHM replace_if() nahrazduje hodnotu ITEM novou hodnotou ITEM pre ITEMS, ktore splnaju PREDICATE.
   H. ALGORITHM replace_copy() nahrazduje hodnotu ITEM novou hodnotou ITEM v OUTPUT ITERATOR.
   I. ALGORITHM replace_copy_if() nahrazduje hodnotu ITEM novou hodnotou ITEM v OUTPUT ITERATOR pre ITEMS, ktore splnaju PREDICATE.
   J. ALGORITHM remove() odstranuje hodnotu ITEMS z COLLECTION. Robi to tak, ze OSTAVAJUCE ITEMS necha na ZACIATKU COLLECTION a vrati ITERATOR na KONIEC aktualne platnych ITEMS.
   K. ALGORITHM remove_if() odstranuje hodnotu ITEMS z COLLECTION, ktore splnaju PREDICATE. Robi to tak, ze OSTAVAJUCE ITEMS necha na ZACIATKU COLLECTION a vrati ITERATOR na KONIEC aktualne platnych ITEMS.
   L. ALGORITHM remove_copy() odstranuje ITEMS z COLLECTION a OSTAVAJUE ITEMS kopiruje do OUTPUT ITERATOR.
   M. ALGORITHM remove_copy_if() odstranuje ITEMS z COLLECTION, ktore splnaju PREDICATE a OSTAVAJUE ITEMS kopiruje do OUTPUT ITERATOR.
   N. ALGORITHM fill() naplna ITEMS zadanou hodnotou.
   O. ALGORITHM fill_n() naplna PRVYCH N ITEMS zadanou hodnotou.
   P. ALGORITHM generate() naplna ITEMS hodnotou generovanou zadanou FUNKCIOU.
   Q. ALGORITHM generate_n() naplna PRVYCH N ITEMS hodnotou generovanou zadanou FUNKCIOU.
   R. ALGORITHM reverse() obrati poradie ITEMS v zadanej COLLECTION.
   S. ALGORITHM reverse_copy() nakopiruje obratene poradie ITEMS do OUTPUT ITERATOR.
   T. ALGORITHM rotate() rotuje poradie ITEMS v zadanej COLLECTION. ITERATOR 'Middle' urcuje kolko krat sa vykona rotacia.
   U. ALGORITHM rotate_copy() nakopiruje rotovane poradie ITEMS do OUTPUT ITERATOR. ITERATOR 'Middle' urcuje kolko krat sa vykona rotacia.
   V. ALGORITHM random_shuffle() nahodne zmeni poradie ITEMS v zadanej COLLECTION.
   W. ALGORITHM iter_swap() vymeni 2 ITEMS na ktore odkazuju zadane ITERATORS.
   X. ALGORITHM swap_ranges() vymeni RANGE ITEMS na ktore odkazuju zadane ITERATORS.
!!! 8. Pri MODIFYING COLLECTION ALGORITHMS je casto potrebny OUTPUT ITERATOR cez ktory je mozne MODIFIKOVAT ITEMS. Ak NECHCEM MODIFIKOVAT EXISTUJUCE ITEMS, ale PRIDAVAT DALSIE ITEMS, mozem pouzit back_inserter(), ktory vytvori pre COLLECTION OUTPUT ITERATOR, ktory je schopny pridavat do COLLECTION NOVE ITEMS.
!!! 9. STL umoznuje vykonavat SORTING iba nad RANDOM ACCESS ITERATORS. STL obsahuje nasledujuce SORTING ALGORITHMS.
   A. ALGORITHM sort() vykonava triedenie ITEMS v COLLECTION.
   B. ALGORITHM stable_sort() vykonava triedenie ITEMS v COLLECTION pricom pozicie ZHODNYCH ITEMS su ZACHOVANE.
   C. ALGORITHM partial_sort() vykonava triedenie PRVYCH N ITEMS v COLLECTION.
   D. ALGORITHM partial_sort_copy() vykonava triedenie PRVYCH N ITEMS v COLLECTION, ktore skopiruje do OUTPUT ITERATOR.
   E. ALGORITHM nth_element() vykona triedenie tak, aby bol najdeny N-ty ITEM v zotriedenej COLLECTION.
   F. ALGORITHM binary_search() vracia TRUE ak sa ITEM nachadza v SORTED COLLECTION.
   G. ALGORITHM lower_bound() vracia ITERATOR na PRVY VYSKYT ITEM v SORTED COLLECTION. Ak sa takyto ITEM NENACHADZA v SORTED COLLECTION, vracia sa ITERATOR na ITEM s VYSSOU hodnotou ako hladana hodnota.
   H. ALGORITHM upper_bound() vracia ITERATOR na POSLEDNY VYSKYT ITEM v SORTED COLLECTION. Ak sa takyto ITEM NENACHADZA v SORTED COLLECTION, vracia sa ITERATOR na ITEM s NIZSOU hodnotou ako hladana hodnota.
   I. ALGORITHM equal_range() vracia PAIR ITERATORS obsahujuci PRVY a POSLEDNY ITERATOR na ITEMS s danou hodnotou v SORTED COLLECTION.
   J. ALGORITHM merge() vykonava MERGING 2 SORTED COLLECTION a vysledok uklada do OUTPUT ITERATOR.
   K. ALGORITHM inplace_merge() vykonava MERGING v ramci 2 CASTI tej istej SORTED COLLECTION.
   L. ALGORITHM partition() ulozi vsetky ITEMS, ktory SPLNA PREDICATE pred ITEMS, ktore PREDICATE NESPLNAJU.
   M. ALGORITHM partition() ulozi vsetky ITEMS, ktory SPLNA PREDICATE pred ITEMS, ktore PREDICATE NESPLNAJU. Poradie ITEMS, ktore PREDICATE NESPLNAJU ostava ZACHOVANE.
   N. ALGORITHM includes() vracia TRUE, ak VSETKY ITEMS z 2. SORTED COLLECTION su obsiahnute v 1. SORTED COLLECTION.
   O. ALGORITHM set_union() robi ZJEDNOTENIE 2 SORTED COLLECTIONS a vysledok uklada do OUTPUT ITERATOR.
   P. ALGORITHM set_intersection() robi PRIENIK 2 SORTED COLLECTIONS a vysledok uklada do OUTPUT ITERATOR.
   Q. ALGORITHM set_difference() vrati ITEMS, ktore su v 1. SORTED COLLECTION, ale nie su v 2. SORTED COLLECTION. Vysledne ITEMS sa ukladaju do OUTPUT ITERATORS.
   R. ALGORITHM set_symmetric_difference() vrati ITEMS, ktore su v 1., alebo 2. SORTED COLLECTION, ale nie OBOCH SORTED COLLECTION. Vysledne ITEMS sa ukladaju do OUTPUT ITERATORS.
!!! 10. STL podporuje pracu s HEAPS. HEAP sluzi ako COLLECTION, kde na vrchole je ITEM s NAJVACSOU HODNOTOU a na konci ITEM s NAJMENSOU HODNOTOU. HEAP ma nasledujuce ALGORITHMS.
   A. ALGORITHM make_heap() vytvori HEAP z COLLECTION.
   B. ALGORITHM sort_heap() vytvori COLLECTION z HEAP.
   C. ALGORITHM push_heap() prida ITEM do HEAP.
   D. ALGORITHM pop_heap() odstrani ITEM do HEAP.
11. STL podporuje nnasledujuce porovnavacie ALGORITHMS.
   A. ALGORITHM min() vracia minimalnu hodnotu z 2 HODNOT.
   B. ALGORITHM max() vracia maximalnu hodnotu z 2 HODNOT.
   C. ALGORITHM min() vracia minimalnu hodnotu z ITEMS v COLLECTION.
   D. ALGORITHM max() vracia maximalnu hodnotu z ITEMS v COLLECTION.
   E. ALGORITHM lexicographical_compare() vracia vysledok LEXIKOGRAFICKEHO porovnania 2 COLLECTIONS.
12. STL podporuje nasledujuce PERMUTATION ALGORITHMS.
   A. ALGORITHM next_permutation() vykona nasledujucu PERMUTATION.
   B. ALGORITHM prev_permutation() vykona predchadzajucu PERMUTATION.
13. Z jazyka C je mozne vyuzivat ALGORITHMS qsort() a bsearch().
//-------------------------------------------------------------------------------------------------------