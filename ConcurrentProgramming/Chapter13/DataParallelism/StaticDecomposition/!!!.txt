//------------------------------------------------------------------------------
1. Program demonstruje pouzitie Data Parallelism algoritmov.
2. Data parallelism je technika pri ktorej su paralelne tasks pridelovane rozdelenim skupiny dat na mensie podskupiny a kazdemu threadu je pridelena na spracovanie jedna skupina.
!!! 3. Typickym prikladom, kde sa Data Parallelism pouziva su cykly. Ak iteracie cyjlu su NEZAVISLE potom KAZDU ITERACIU je mozne VYKONAT PARALELNE.
!!! 4. Data Parallelism sa pouziva typicky na zvysenie vykonnosti programu vo multi procesorovom systeme.
5. Pre vykonavanie paralelnych loops plati, ze jednotlive iteracie musia byt trhead-safe, na sebe vzajomne nezavisle a teda i poradie ich vykonania nie je dolezite.

Staticka dekompozicia

1. Staticka dekompozicia je definavana tak, ze kazdeho threadu sa STATICKY prideli konstnane mnozstvo tasks, ktore potom postupne jednotlive threads vykonavaju.
2. Staticka dekompozicia moze byt realizovana dvoma sposobmi.
   A. Threads dostavaju spojity blok tasks - napriklad T1 dostane <1-5>, T2 <6-10> a T3 <11-15>. Nevyhodou tejto dekompozicie je, ze ak narasta zlozitost tasku s narastajucou iteraciou, tak dojde k nerovnomernemu rozdeleniu zataze pre jednotlive threads.
   B. Threads dostavaju chunks takskov. Napriklad T1 vykonava <1,4,7,10,13>, T2 <2,5,8,11,14> a T3 <3,6,9,12,15>. Takto sa vyriesi problem v pripade, ze zlozitost tasks narasta s iteraciou.
3. Staticka dekompozicia MA VIACERO NEVYHOD z hladiska vykonnosti. V OS nie je mozne zabezpecit, aby threads neboli pozastavene zo strany OS (napriklad kvoli page fault). Vysledkom je, ze jednotlive threads nebudu ukoncene rovnako rychlo a niektore trheads skoncia skor ako ine a tym padom sa znizuje miera paralelizmu a vykonnost systemu.

Dynamicka dekompozicia

1. Dynamicka dekompozicia spociva v tom, ze jednotlive iteracie sa prideluju DYNAMICKY jednotlivym threads podla potreby - teda, ked thread skonci svoju cinnost a este existuju iteracie, ktore je treba vykonat.
2. Vyhodou dynamickej dekompozicie oproti statickej je, ze v pripade ak niektoy z threads sa zdrzi, alebo jednotlive iteracie su rozne zlozite, algoritmus rovnomerne rozdeluje zataz, podla toho ako rychlo dany thread stihne vykonat danu iteraciu.
3. Dynamicku dekompoziciu je mozne vykonavat nad sadou dat, ktorej velkost je dopredu znama, alebo nad sadou dat, ktorej velkost je neznama - enumerators.

Parallel sort

1. Parallel Merge-sort pouziva algoritmus Merge-sort na paralelne triedenie pola.
2. Algoritmus rozdeli vstupne pole na N casti, ktore potom paralelne triedi. Po skonceni triedenia sa aplikuje PARALELNA MERGE FAZA.
3. Paralelny merge sa robi tak, ze vzdy 2 SORTS spojim jednym MERGE. Tento algoritmus sa potom OPAKUJE az kym neostane IBA JEDEN MERGE po ktoreho spojeni dostavam SORTED ARRAY.

Rozdelenie tasks podla typu paralelizmu

1. Data parallelism je technika pri ktorej su paralelne tasks pridelovane rozdelenim skupiny dat na mensie podskupiny a kazdemu threadu je pridelena na spracovanie jedna skupina. Data Parallelism sa pouziva typicky na zvysenie vykonnosti programu vo multi procesorovom systeme.
2. Task parallelism je technika pri ktorej sa program demomponuje na paralelne task. Teda jednotlive casti kodu (metody, objekty) su vykonavane paralelne. Tento typ paralelizmu je pomerne jednoduchy na implementaciu, avsak zvysenie vykonu je zvycajne mensie ako v pripade Data Parallelism.
3. Message Based Parallelism je technika pri ktorej je program dekomponovany na podprogramy, ktore vzajomne komunikuju pomocou Events, ale inak su vzajomne nezavisle a teda mozu byt vykonavane paralelne. I v tomto pripade nie je primarny cielom urychlenie programu, ale jeho funkcna dekompozicia na mensie subprograms.
//------------------------------------------------------------------------------