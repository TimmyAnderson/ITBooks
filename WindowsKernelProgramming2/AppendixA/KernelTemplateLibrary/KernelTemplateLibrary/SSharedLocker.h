//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
namespace KTL
{
//----------------------------------------------------------------------------------------------------------------------
	template<typename TLock>
	struct SSharedLocker final
	{
//----------------------------------------------------------------------------------------------------------------------
		private:
			TLock&												MLock;

		public:
			SSharedLocker(TLock& Lock);
			~SSharedLocker(void) noexcept;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TLock>
	SSharedLocker<TLock>::SSharedLocker(TLock& Lock)
		: MLock(Lock)
	{
		Lock.LockShared();
	}
//----------------------------------------------------------------------------------------------------------------------
	template<typename TLock>
	SSharedLocker<TLock>::~SSharedLocker(void) noexcept
	{
		MLock.UnlockShared();
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------